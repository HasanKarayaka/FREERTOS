
001_CLOCK_CONFIG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000071c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080008e0  080008e0  000108e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080008f0  080008f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080008f0  080008f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008f0  080008f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008f0  080008f0  000108f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008f4  080008f4  000108f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080008f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08000904  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000904  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000029e9  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a56  00000000  00000000  00022a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000360  00000000  00000000  000234c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000271  00000000  00000000  00023820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f6fd  00000000  00000000  00023a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004190  00000000  00000000  0004318e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1610  00000000  00000000  0004731e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000be0  00000000  00000000  00108930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00109510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080008c8 	.word	0x080008c8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080008c8 	.word	0x080008c8

08000204 <RCC_Config>:
extern uint32_t SystemCoreClock;

uint32_t systemClock;

void RCC_Config(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	//RCC->CR &= 0x00000083; // control registerim sıfırlandı 	HAL_RCC_DeInit(); bu daaynı görevi yaptığı için kaldırdım
	RCC->CR |= 1 <<16; // 16 bit sola öteleyip 1 yazıyor bu usermanuldeki 16. bit HSE biti bu biti 1 e çektik ki hse aktif olsun
 8000208:	4b1d      	ldr	r3, [pc, #116]	; (8000280 <RCC_Config+0x7c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a1c      	ldr	r2, [pc, #112]	; (8000280 <RCC_Config+0x7c>)
 800020e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000212:	6013      	str	r3, [r2, #0]
	while(!( RCC->CR & (1 << 17)) ); // 17. bitte bayrak var ve diyor ki bu bayrak kalkmadan hse aktif olmuyor o zaman bu bayrağı bekliyorum kalksın "&" ifadesi burda karşılaştırma yapıyor rcc deki 17 bit 1 mi değil mi
 8000214:	bf00      	nop
 8000216:	4b1a      	ldr	r3, [pc, #104]	; (8000280 <RCC_Config+0x7c>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800021e:	2b00      	cmp	r3, #0
 8000220:	d0f9      	beq.n	8000216 <RCC_Config+0x12>
	RCC->CR |= 1 <<19; // güvenlik biti
 8000222:	4b17      	ldr	r3, [pc, #92]	; (8000280 <RCC_Config+0x7c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a16      	ldr	r2, [pc, #88]	; (8000280 <RCC_Config+0x7c>)
 8000228:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800022c:	6013      	str	r3, [r2, #0]

	RCC->PLLCFGR &= ~(1<<0); //pll m0 bitini 0 yaptık
 800022e:	4b14      	ldr	r3, [pc, #80]	; (8000280 <RCC_Config+0x7c>)
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	4a13      	ldr	r2, [pc, #76]	; (8000280 <RCC_Config+0x7c>)
 8000234:	f023 0301 	bic.w	r3, r3, #1
 8000238:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~(1<<1);
 800023a:	4b11      	ldr	r3, [pc, #68]	; (8000280 <RCC_Config+0x7c>)
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	4a10      	ldr	r2, [pc, #64]	; (8000280 <RCC_Config+0x7c>)
 8000240:	f023 0302 	bic.w	r3, r3, #2
 8000244:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (1<<2);
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <RCC_Config+0x7c>)
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	4a0d      	ldr	r2, [pc, #52]	; (8000280 <RCC_Config+0x7c>)
 800024c:	f043 0304 	orr.w	r3, r3, #4
 8000250:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~(1<<3);
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <RCC_Config+0x7c>)
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	4a0a      	ldr	r2, [pc, #40]	; (8000280 <RCC_Config+0x7c>)
 8000258:	f023 0308 	bic.w	r3, r3, #8
 800025c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~(1<<4);
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <RCC_Config+0x7c>)
 8000260:	685b      	ldr	r3, [r3, #4]
 8000262:	4a07      	ldr	r2, [pc, #28]	; (8000280 <RCC_Config+0x7c>)
 8000264:	f023 0310 	bic.w	r3, r3, #16
 8000268:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~(1<<5); //000100: PLLM = 4 bu yapıyı elde ettik mi evet m=4 oldu
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <RCC_Config+0x7c>)
 800026c:	685b      	ldr	r3, [r3, #4]
 800026e:	4a04      	ldr	r2, [pc, #16]	; (8000280 <RCC_Config+0x7c>)
 8000270:	f023 0320 	bic.w	r3, r3, #32
 8000274:	6053      	str	r3, [r2, #4]

}
 8000276:	bf00      	nop
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	40023800 	.word	0x40023800

08000284 <main>:
int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	RCC->CR &= ~(1 << 0);  // "&=" bu yapı sadece o biti işaret eder "~" bu ifade de tersle demek bu sayde hsı yı 0 a çektik
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <main+0x28>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a07      	ldr	r2, [pc, #28]	; (80002ac <main+0x28>)
 800028e:	f023 0301 	bic.w	r3, r3, #1
 8000292:	6013      	str	r3, [r2, #0]
	systemClock = SystemCoreClock; // corecloack 168MHZ yi sysmtclk a atadık
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <main+0x2c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <main+0x30>)
 800029a:	6013      	str	r3, [r2, #0]


	HAL_RCC_DeInit(); // sıfırlıyor saat ayarlarını
 800029c:	f000 f9f8 	bl	8000690 <HAL_RCC_DeInit>
	SystemCoreClockUpdate(); // 16mhz ayarlandı
 80002a0:	f000 f846 	bl	8000330 <SystemCoreClockUpdate>

	RCC_Config();
 80002a4:	f7ff ffae 	bl	8000204 <RCC_Config>

  while (1)
 80002a8:	e7fe      	b.n	80002a8 <main+0x24>
 80002aa:	bf00      	nop
 80002ac:	40023800 	.word	0x40023800
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000028 	.word	0x20000028

080002b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002bc:	e7fe      	b.n	80002bc <NMI_Handler+0x4>

080002be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002be:	b480      	push	{r7}
 80002c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002c2:	e7fe      	b.n	80002c2 <HardFault_Handler+0x4>

080002c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002c8:	e7fe      	b.n	80002c8 <MemManage_Handler+0x4>

080002ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002ca:	b480      	push	{r7}
 80002cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002ce:	e7fe      	b.n	80002ce <BusFault_Handler+0x4>

080002d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002d4:	e7fe      	b.n	80002d4 <UsageFault_Handler+0x4>

080002d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002d6:	b480      	push	{r7}
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr

080002f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002f6:	bf00      	nop
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000304:	f000 f8ee 	bl	80004e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}

0800030c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <SystemInit+0x20>)
 8000312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000316:	4a05      	ldr	r2, [pc, #20]	; (800032c <SystemInit+0x20>)
 8000318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800031c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000330:	b480      	push	{r7}
 8000332:	b087      	sub	sp, #28
 8000334:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000336:	2300      	movs	r3, #0
 8000338:	613b      	str	r3, [r7, #16]
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]
 800033e:	2302      	movs	r3, #2
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	2300      	movs	r3, #0
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	2302      	movs	r3, #2
 8000348:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800034a:	4b34      	ldr	r3, [pc, #208]	; (800041c <SystemCoreClockUpdate+0xec>)
 800034c:	689b      	ldr	r3, [r3, #8]
 800034e:	f003 030c 	and.w	r3, r3, #12
 8000352:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000354:	693b      	ldr	r3, [r7, #16]
 8000356:	2b08      	cmp	r3, #8
 8000358:	d011      	beq.n	800037e <SystemCoreClockUpdate+0x4e>
 800035a:	693b      	ldr	r3, [r7, #16]
 800035c:	2b08      	cmp	r3, #8
 800035e:	d844      	bhi.n	80003ea <SystemCoreClockUpdate+0xba>
 8000360:	693b      	ldr	r3, [r7, #16]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d003      	beq.n	800036e <SystemCoreClockUpdate+0x3e>
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	2b04      	cmp	r3, #4
 800036a:	d004      	beq.n	8000376 <SystemCoreClockUpdate+0x46>
 800036c:	e03d      	b.n	80003ea <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800036e:	4b2c      	ldr	r3, [pc, #176]	; (8000420 <SystemCoreClockUpdate+0xf0>)
 8000370:	4a2c      	ldr	r2, [pc, #176]	; (8000424 <SystemCoreClockUpdate+0xf4>)
 8000372:	601a      	str	r2, [r3, #0]
      break;
 8000374:	e03d      	b.n	80003f2 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000376:	4b2a      	ldr	r3, [pc, #168]	; (8000420 <SystemCoreClockUpdate+0xf0>)
 8000378:	4a2b      	ldr	r2, [pc, #172]	; (8000428 <SystemCoreClockUpdate+0xf8>)
 800037a:	601a      	str	r2, [r3, #0]
      break;
 800037c:	e039      	b.n	80003f2 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800037e:	4b27      	ldr	r3, [pc, #156]	; (800041c <SystemCoreClockUpdate+0xec>)
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	0d9b      	lsrs	r3, r3, #22
 8000384:	f003 0301 	and.w	r3, r3, #1
 8000388:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800038a:	4b24      	ldr	r3, [pc, #144]	; (800041c <SystemCoreClockUpdate+0xec>)
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000392:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d00c      	beq.n	80003b4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800039a:	4a23      	ldr	r2, [pc, #140]	; (8000428 <SystemCoreClockUpdate+0xf8>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	fbb2 f3f3 	udiv	r3, r2, r3
 80003a2:	4a1e      	ldr	r2, [pc, #120]	; (800041c <SystemCoreClockUpdate+0xec>)
 80003a4:	6852      	ldr	r2, [r2, #4]
 80003a6:	0992      	lsrs	r2, r2, #6
 80003a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80003ac:	fb02 f303 	mul.w	r3, r2, r3
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	e00b      	b.n	80003cc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80003b4:	4a1b      	ldr	r2, [pc, #108]	; (8000424 <SystemCoreClockUpdate+0xf4>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003bc:	4a17      	ldr	r2, [pc, #92]	; (800041c <SystemCoreClockUpdate+0xec>)
 80003be:	6852      	ldr	r2, [r2, #4]
 80003c0:	0992      	lsrs	r2, r2, #6
 80003c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80003c6:	fb02 f303 	mul.w	r3, r2, r3
 80003ca:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80003cc:	4b13      	ldr	r3, [pc, #76]	; (800041c <SystemCoreClockUpdate+0xec>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	0c1b      	lsrs	r3, r3, #16
 80003d2:	f003 0303 	and.w	r3, r3, #3
 80003d6:	3301      	adds	r3, #1
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80003dc:	697a      	ldr	r2, [r7, #20]
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003e4:	4a0e      	ldr	r2, [pc, #56]	; (8000420 <SystemCoreClockUpdate+0xf0>)
 80003e6:	6013      	str	r3, [r2, #0]
      break;
 80003e8:	e003      	b.n	80003f2 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80003ea:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <SystemCoreClockUpdate+0xf0>)
 80003ec:	4a0d      	ldr	r2, [pc, #52]	; (8000424 <SystemCoreClockUpdate+0xf4>)
 80003ee:	601a      	str	r2, [r3, #0]
      break;
 80003f0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80003f2:	4b0a      	ldr	r3, [pc, #40]	; (800041c <SystemCoreClockUpdate+0xec>)
 80003f4:	689b      	ldr	r3, [r3, #8]
 80003f6:	091b      	lsrs	r3, r3, #4
 80003f8:	f003 030f 	and.w	r3, r3, #15
 80003fc:	4a0b      	ldr	r2, [pc, #44]	; (800042c <SystemCoreClockUpdate+0xfc>)
 80003fe:	5cd3      	ldrb	r3, [r2, r3]
 8000400:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000402:	4b07      	ldr	r3, [pc, #28]	; (8000420 <SystemCoreClockUpdate+0xf0>)
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	fa22 f303 	lsr.w	r3, r2, r3
 800040c:	4a04      	ldr	r2, [pc, #16]	; (8000420 <SystemCoreClockUpdate+0xf0>)
 800040e:	6013      	str	r3, [r2, #0]
}
 8000410:	bf00      	nop
 8000412:	371c      	adds	r7, #28
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	40023800 	.word	0x40023800
 8000420:	20000000 	.word	0x20000000
 8000424:	00f42400 	.word	0x00f42400
 8000428:	007a1200 	.word	0x007a1200
 800042c:	080008e0 	.word	0x080008e0

08000430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000468 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000434:	480d      	ldr	r0, [pc, #52]	; (800046c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000436:	490e      	ldr	r1, [pc, #56]	; (8000470 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000438:	4a0e      	ldr	r2, [pc, #56]	; (8000474 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800043c:	e002      	b.n	8000444 <LoopCopyDataInit>

0800043e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800043e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000442:	3304      	adds	r3, #4

08000444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000448:	d3f9      	bcc.n	800043e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044a:	4a0b      	ldr	r2, [pc, #44]	; (8000478 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800044c:	4c0b      	ldr	r4, [pc, #44]	; (800047c <LoopFillZerobss+0x26>)
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000450:	e001      	b.n	8000456 <LoopFillZerobss>

08000452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000454:	3204      	adds	r2, #4

08000456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000458:	d3fb      	bcc.n	8000452 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800045a:	f7ff ff57 	bl	800030c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800045e:	f000 fa0f 	bl	8000880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000462:	f7ff ff0f 	bl	8000284 <main>
  bx  lr    
 8000466:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000468:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800046c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000470:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000474:	080008f8 	.word	0x080008f8
  ldr r2, =_sbss
 8000478:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800047c:	20000030 	.word	0x20000030

08000480 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000480:	e7fe      	b.n	8000480 <ADC_IRQHandler>
	...

08000484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <HAL_InitTick+0x54>)
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	4b12      	ldr	r3, [pc, #72]	; (80004dc <HAL_InitTick+0x58>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	4619      	mov	r1, r3
 8000496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800049a:	fbb3 f3f1 	udiv	r3, r3, r1
 800049e:	fbb2 f3f3 	udiv	r3, r2, r3
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 f8e8 	bl	8000678 <HAL_SYSTICK_Config>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004ae:	2301      	movs	r3, #1
 80004b0:	e00e      	b.n	80004d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2b0f      	cmp	r3, #15
 80004b6:	d80a      	bhi.n	80004ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004b8:	2200      	movs	r2, #0
 80004ba:	6879      	ldr	r1, [r7, #4]
 80004bc:	f04f 30ff 	mov.w	r0, #4294967295
 80004c0:	f000 f8be 	bl	8000640 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004c4:	4a06      	ldr	r2, [pc, #24]	; (80004e0 <HAL_InitTick+0x5c>)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004ca:	2300      	movs	r3, #0
 80004cc:	e000      	b.n	80004d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004ce:	2301      	movs	r3, #1
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000000 	.word	0x20000000
 80004dc:	20000008 	.word	0x20000008
 80004e0:	20000004 	.word	0x20000004

080004e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <HAL_IncTick+0x20>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	461a      	mov	r2, r3
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <HAL_IncTick+0x24>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4413      	add	r3, r2
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <HAL_IncTick+0x24>)
 80004f6:	6013      	str	r3, [r2, #0]
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000008 	.word	0x20000008
 8000508:	2000002c 	.word	0x2000002c

0800050c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  return uwTick;
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <HAL_GetTick+0x14>)
 8000512:	681b      	ldr	r3, [r3, #0]
}
 8000514:	4618      	mov	r0, r3
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	2000002c 	.word	0x2000002c

08000524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <__NVIC_GetPriorityGrouping+0x18>)
 800052a:	68db      	ldr	r3, [r3, #12]
 800052c:	0a1b      	lsrs	r3, r3, #8
 800052e:	f003 0307 	and.w	r3, r3, #7
}
 8000532:	4618      	mov	r0, r3
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	e000ed00 	.word	0xe000ed00

08000540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	6039      	str	r1, [r7, #0]
 800054a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800054c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000550:	2b00      	cmp	r3, #0
 8000552:	db0a      	blt.n	800056a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	b2da      	uxtb	r2, r3
 8000558:	490c      	ldr	r1, [pc, #48]	; (800058c <__NVIC_SetPriority+0x4c>)
 800055a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055e:	0112      	lsls	r2, r2, #4
 8000560:	b2d2      	uxtb	r2, r2
 8000562:	440b      	add	r3, r1
 8000564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000568:	e00a      	b.n	8000580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4908      	ldr	r1, [pc, #32]	; (8000590 <__NVIC_SetPriority+0x50>)
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	f003 030f 	and.w	r3, r3, #15
 8000576:	3b04      	subs	r3, #4
 8000578:	0112      	lsls	r2, r2, #4
 800057a:	b2d2      	uxtb	r2, r2
 800057c:	440b      	add	r3, r1
 800057e:	761a      	strb	r2, [r3, #24]
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	e000e100 	.word	0xe000e100
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000594:	b480      	push	{r7}
 8000596:	b089      	sub	sp, #36	; 0x24
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f003 0307 	and.w	r3, r3, #7
 80005a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	f1c3 0307 	rsb	r3, r3, #7
 80005ae:	2b04      	cmp	r3, #4
 80005b0:	bf28      	it	cs
 80005b2:	2304      	movcs	r3, #4
 80005b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	3304      	adds	r3, #4
 80005ba:	2b06      	cmp	r3, #6
 80005bc:	d902      	bls.n	80005c4 <NVIC_EncodePriority+0x30>
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	3b03      	subs	r3, #3
 80005c2:	e000      	b.n	80005c6 <NVIC_EncodePriority+0x32>
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c8:	f04f 32ff 	mov.w	r2, #4294967295
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	fa02 f303 	lsl.w	r3, r2, r3
 80005d2:	43da      	mvns	r2, r3
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	401a      	ands	r2, r3
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005dc:	f04f 31ff 	mov.w	r1, #4294967295
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	fa01 f303 	lsl.w	r3, r1, r3
 80005e6:	43d9      	mvns	r1, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ec:	4313      	orrs	r3, r2
         );
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3724      	adds	r7, #36	; 0x24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3b01      	subs	r3, #1
 8000608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800060c:	d301      	bcc.n	8000612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800060e:	2301      	movs	r3, #1
 8000610:	e00f      	b.n	8000632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000612:	4a0a      	ldr	r2, [pc, #40]	; (800063c <SysTick_Config+0x40>)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3b01      	subs	r3, #1
 8000618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061a:	210f      	movs	r1, #15
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f7ff ff8e 	bl	8000540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <SysTick_Config+0x40>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <SysTick_Config+0x40>)
 800062c:	2207      	movs	r2, #7
 800062e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	e000e010 	.word	0xe000e010

08000640 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000652:	f7ff ff67 	bl	8000524 <__NVIC_GetPriorityGrouping>
 8000656:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	68b9      	ldr	r1, [r7, #8]
 800065c:	6978      	ldr	r0, [r7, #20]
 800065e:	f7ff ff99 	bl	8000594 <NVIC_EncodePriority>
 8000662:	4602      	mov	r2, r0
 8000664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000668:	4611      	mov	r1, r2
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ff68 	bl	8000540 <__NVIC_SetPriority>
}
 8000670:	bf00      	nop
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff ffbb 	bl	80005fc <SysTick_Config>
 8000686:	4603      	mov	r3, r0
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000696:	f7ff ff39 	bl	800050c <HAL_GetTick>
 800069a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800069c:	4b72      	ldr	r3, [pc, #456]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a71      	ldr	r2, [pc, #452]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 80006a2:	f043 0301 	orr.w	r3, r3, #1
 80006a6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80006a8:	e008      	b.n	80006bc <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80006aa:	f7ff ff2f 	bl	800050c <HAL_GetTick>
 80006ae:	4602      	mov	r2, r0
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d901      	bls.n	80006bc <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80006b8:	2303      	movs	r3, #3
 80006ba:	e0d0      	b.n	800085e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80006bc:	4b6a      	ldr	r3, [pc, #424]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f003 0302 	and.w	r3, r3, #2
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0f0      	beq.n	80006aa <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80006c8:	4b67      	ldr	r3, [pc, #412]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a66      	ldr	r2, [pc, #408]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 80006ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80006d4:	f7ff ff1a 	bl	800050c <HAL_GetTick>
 80006d8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80006da:	4b63      	ldr	r3, [pc, #396]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80006e0:	e00a      	b.n	80006f8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80006e2:	f7ff ff13 	bl	800050c <HAL_GetTick>
 80006e6:	4602      	mov	r2, r0
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d901      	bls.n	80006f8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80006f4:	2303      	movs	r3, #3
 80006f6:	e0b2      	b.n	800085e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80006f8:	4b5b      	ldr	r3, [pc, #364]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	f003 030c 	and.w	r3, r3, #12
 8000700:	2b00      	cmp	r3, #0
 8000702:	d1ee      	bne.n	80006e2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000704:	f7ff ff02 	bl	800050c <HAL_GetTick>
 8000708:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800070a:	4b57      	ldr	r3, [pc, #348]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a56      	ldr	r2, [pc, #344]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 8000710:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8000714:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000716:	e008      	b.n	800072a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000718:	f7ff fef8 	bl	800050c <HAL_GetTick>
 800071c:	4602      	mov	r2, r0
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	2b64      	cmp	r3, #100	; 0x64
 8000724:	d901      	bls.n	800072a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8000726:	2303      	movs	r3, #3
 8000728:	e099      	b.n	800085e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800072a:	4b4f      	ldr	r3, [pc, #316]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1f0      	bne.n	8000718 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000736:	f7ff fee9 	bl	800050c <HAL_GetTick>
 800073a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800073c:	4b4a      	ldr	r3, [pc, #296]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a49      	ldr	r2, [pc, #292]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 8000742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000746:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000748:	e008      	b.n	800075c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800074a:	f7ff fedf 	bl	800050c <HAL_GetTick>
 800074e:	4602      	mov	r2, r0
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	2b02      	cmp	r3, #2
 8000756:	d901      	bls.n	800075c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8000758:	2303      	movs	r3, #3
 800075a:	e080      	b.n	800085e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800075c:	4b42      	ldr	r3, [pc, #264]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1f0      	bne.n	800074a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000768:	f7ff fed0 	bl	800050c <HAL_GetTick>
 800076c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800076e:	4b3e      	ldr	r3, [pc, #248]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a3d      	ldr	r2, [pc, #244]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 8000774:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000778:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800077a:	e008      	b.n	800078e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800077c:	f7ff fec6 	bl	800050c <HAL_GetTick>
 8000780:	4602      	mov	r2, r0
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	2b02      	cmp	r3, #2
 8000788:	d901      	bls.n	800078e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800078a:	2303      	movs	r3, #3
 800078c:	e067      	b.n	800085e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800078e:	4b36      	ldr	r3, [pc, #216]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f0      	bne.n	800077c <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800079a:	f7ff feb7 	bl	800050c <HAL_GetTick>
 800079e:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80007a0:	4b31      	ldr	r3, [pc, #196]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a30      	ldr	r2, [pc, #192]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 80007a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007aa:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80007ac:	e008      	b.n	80007c0 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80007ae:	f7ff fead 	bl	800050c <HAL_GetTick>
 80007b2:	4602      	mov	r2, r0
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d901      	bls.n	80007c0 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 80007bc:	2303      	movs	r3, #3
 80007be:	e04e      	b.n	800085e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80007c0:	4b29      	ldr	r3, [pc, #164]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f0      	bne.n	80007ae <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 80007cc:	4b26      	ldr	r3, [pc, #152]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 80007ce:	4a27      	ldr	r2, [pc, #156]	; (800086c <HAL_RCC_DeInit+0x1dc>)
 80007d0:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80007d2:	4b25      	ldr	r3, [pc, #148]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 80007d4:	4a25      	ldr	r2, [pc, #148]	; (800086c <HAL_RCC_DeInit+0x1dc>)
 80007d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 80007da:	4b23      	ldr	r3, [pc, #140]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 80007dc:	4a24      	ldr	r2, [pc, #144]	; (8000870 <HAL_RCC_DeInit+0x1e0>)
 80007de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	4a20      	ldr	r2, [pc, #128]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 80007e8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80007ec:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	4a1d      	ldr	r2, [pc, #116]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 80007f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007f8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 80007fa:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	4a1a      	ldr	r2, [pc, #104]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 8000800:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000804:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 8000808:	68db      	ldr	r3, [r3, #12]
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 800080c:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8000810:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 8000818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800081c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	4a11      	ldr	r2, [pc, #68]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 8000824:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000828:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 800082c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 8000830:	f023 0301 	bic.w	r3, r3, #1
 8000834:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 8000838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800083a:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <HAL_RCC_DeInit+0x1d8>)
 800083c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000840:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <HAL_RCC_DeInit+0x1e4>)
 8000844:	4a0c      	ldr	r2, [pc, #48]	; (8000878 <HAL_RCC_DeInit+0x1e8>)
 8000846:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_RCC_DeInit+0x1ec>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fe19 	bl	8000484 <HAL_InitTick>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	e000      	b.n	800085e <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 800085c:	2300      	movs	r3, #0
  }
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	24003010 	.word	0x24003010
 8000870:	04003010 	.word	0x04003010
 8000874:	20000000 	.word	0x20000000
 8000878:	00f42400 	.word	0x00f42400
 800087c:	20000004 	.word	0x20000004

08000880 <__libc_init_array>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	4d0d      	ldr	r5, [pc, #52]	; (80008b8 <__libc_init_array+0x38>)
 8000884:	4c0d      	ldr	r4, [pc, #52]	; (80008bc <__libc_init_array+0x3c>)
 8000886:	1b64      	subs	r4, r4, r5
 8000888:	10a4      	asrs	r4, r4, #2
 800088a:	2600      	movs	r6, #0
 800088c:	42a6      	cmp	r6, r4
 800088e:	d109      	bne.n	80008a4 <__libc_init_array+0x24>
 8000890:	4d0b      	ldr	r5, [pc, #44]	; (80008c0 <__libc_init_array+0x40>)
 8000892:	4c0c      	ldr	r4, [pc, #48]	; (80008c4 <__libc_init_array+0x44>)
 8000894:	f000 f818 	bl	80008c8 <_init>
 8000898:	1b64      	subs	r4, r4, r5
 800089a:	10a4      	asrs	r4, r4, #2
 800089c:	2600      	movs	r6, #0
 800089e:	42a6      	cmp	r6, r4
 80008a0:	d105      	bne.n	80008ae <__libc_init_array+0x2e>
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80008a8:	4798      	blx	r3
 80008aa:	3601      	adds	r6, #1
 80008ac:	e7ee      	b.n	800088c <__libc_init_array+0xc>
 80008ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80008b2:	4798      	blx	r3
 80008b4:	3601      	adds	r6, #1
 80008b6:	e7f2      	b.n	800089e <__libc_init_array+0x1e>
 80008b8:	080008f0 	.word	0x080008f0
 80008bc:	080008f0 	.word	0x080008f0
 80008c0:	080008f0 	.word	0x080008f0
 80008c4:	080008f4 	.word	0x080008f4

080008c8 <_init>:
 80008c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ca:	bf00      	nop
 80008cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ce:	bc08      	pop	{r3}
 80008d0:	469e      	mov	lr, r3
 80008d2:	4770      	bx	lr

080008d4 <_fini>:
 80008d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008d6:	bf00      	nop
 80008d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008da:	bc08      	pop	{r3}
 80008dc:	469e      	mov	lr, r3
 80008de:	4770      	bx	lr
