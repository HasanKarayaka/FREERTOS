
05_LED_Control_With_Button_Notify_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004898  08004898  00014898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004950  08004950  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004950  08004950  00014950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004958  08004958  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004958  08004958  00014958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800495c  0800495c  0001495c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004980  20000010  08004970  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004990  08004970  00024990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e06b  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000266a  00000000  00000000  0002e0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c88  00000000  00000000  00030758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000972  00000000  00000000  000313e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002764  00000000  00000000  00031d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e51c  00000000  00000000  000344b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf5ba  00000000  00000000  000429d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032b8  00000000  00000000  00111f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  00115244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004880 	.word	0x08004880

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004880 	.word	0x08004880

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 f9fa 	bl	8000908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f832 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f89c 	bl	8000654 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800051c:	f001 fb14 	bl	8001b48 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(Read_Gpıo, NULL, &defaultTask_attributes);
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <main+0x4c>)
 8000522:	2100      	movs	r1, #0
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <main+0x50>)
 8000526:	f001 fb59 	bl	8001bdc <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a0c      	ldr	r2, [pc, #48]	; (8000560 <main+0x54>)
 800052e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(Led_flash, NULL, &myTask02_attributes);
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <main+0x58>)
 8000532:	2100      	movs	r1, #0
 8000534:	480c      	ldr	r0, [pc, #48]	; (8000568 <main+0x5c>)
 8000536:	f001 fb51 	bl	8001bdc <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a0b      	ldr	r2, [pc, #44]	; (800056c <main+0x60>)
 800053e:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <main+0x64>)
 8000542:	2100      	movs	r1, #0
 8000544:	480b      	ldr	r0, [pc, #44]	; (8000574 <main+0x68>)
 8000546:	f001 fb49 	bl	8001bdc <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <main+0x6c>)
 800054e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000550:	f001 fb1e 	bl	8001b90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000554:	e7fe      	b.n	8000554 <main+0x48>
 8000556:	bf00      	nop
 8000558:	080048d4 	.word	0x080048d4
 800055c:	08000755 	.word	0x08000755
 8000560:	2000002c 	.word	0x2000002c
 8000564:	080048f8 	.word	0x080048f8
 8000568:	08000791 	.word	0x08000791
 800056c:	20000030 	.word	0x20000030
 8000570:	0800491c 	.word	0x0800491c
 8000574:	080007d5 	.word	0x080007d5
 8000578:	20000034 	.word	0x20000034

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2234      	movs	r2, #52	; 0x34
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f004 f93e 	bl	800480c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b29      	ldr	r3, [pc, #164]	; (800064c <SystemClock_Config+0xd0>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a28      	ldr	r2, [pc, #160]	; (800064c <SystemClock_Config+0xd0>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b26      	ldr	r3, [pc, #152]	; (800064c <SystemClock_Config+0xd0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005bc:	2300      	movs	r3, #0
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <SystemClock_Config+0xd4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <SystemClock_Config+0xd4>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <SystemClock_Config+0xd4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2310      	movs	r3, #16
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	2302      	movs	r3, #2
 80005ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ec:	2300      	movs	r3, #0
 80005ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f0:	2308      	movs	r3, #8
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 80005f4:	2340      	movs	r3, #64	; 0x40
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000600:	2302      	movs	r3, #2
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4618      	mov	r0, r3
 800060a:	f000 ffcb 	bl	80015a4 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000614:	f000 f8e6 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000620:	2390      	movs	r3, #144	; 0x90
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f000 fca0 	bl	8000f78 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800063e:	f000 f8d1 	bl	80007e4 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3750      	adds	r7, #80	; 0x50
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	4b25      	ldr	r3, [pc, #148]	; (8000704 <MX_GPIO_Init+0xb0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a24      	ldr	r2, [pc, #144]	; (8000704 <MX_GPIO_Init+0xb0>)
 8000674:	f043 0320 	orr.w	r3, r3, #32
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b22      	ldr	r3, [pc, #136]	; (8000704 <MX_GPIO_Init+0xb0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0320 	and.w	r3, r3, #32
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <MX_GPIO_Init+0xb0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a1d      	ldr	r2, [pc, #116]	; (8000704 <MX_GPIO_Init+0xb0>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <MX_GPIO_Init+0xb0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_GPIO_Init+0xb0>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a16      	ldr	r2, [pc, #88]	; (8000704 <MX_GPIO_Init+0xb0>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_GPIO_Init+0xb0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2107      	movs	r1, #7
 80006c2:	4811      	ldr	r0, [pc, #68]	; (8000708 <MX_GPIO_Init+0xb4>)
 80006c4:	f000 fc24 	bl	8000f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80006c8:	2307      	movs	r3, #7
 80006ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	4619      	mov	r1, r3
 80006de:	480a      	ldr	r0, [pc, #40]	; (8000708 <MX_GPIO_Init+0xb4>)
 80006e0:	f000 fa6a 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	4619      	mov	r1, r3
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_GPIO_Init+0xb8>)
 80006f8:	f000 fa5e 	bl	8000bb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40021400 	.word	0x40021400
 800070c:	40020000 	.word	0x40020000

08000710 <delay_FreeRTOS>:

/* USER CODE BEGIN 4 */
void delay_FreeRTOS(uint32_t delayMS)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	uint32_t currentTick = xTaskGetTickCount();
 8000718:	f002 fbca 	bl	8002eb0 <xTaskGetTickCount>
 800071c:	60f8      	str	r0, [r7, #12]
	uint32_t delayTick = pdMS_TO_TICKS(delayMS); //delayMS * configTICK_RATE_HZ / 1000;(HAzır fonk kulanıldı) //FREERTOSConfig.h da RATE değeri 1000
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000724:	fb02 f303 	mul.w	r3, r2, r3
 8000728:	4a09      	ldr	r2, [pc, #36]	; (8000750 <delay_FreeRTOS+0x40>)
 800072a:	fba2 2303 	umull	r2, r3, r2, r3
 800072e:	099b      	lsrs	r3, r3, #6
 8000730:	60bb      	str	r3, [r7, #8]

	while(xTaskGetTickCount() < (currentTick + delayTick));
 8000732:	bf00      	nop
 8000734:	f002 fbbc 	bl	8002eb0 <xTaskGetTickCount>
 8000738:	4601      	mov	r1, r0
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	4413      	add	r3, r2
 8000740:	4299      	cmp	r1, r3
 8000742:	d3f7      	bcc.n	8000734 <delay_FreeRTOS+0x24>
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	10624dd3 	.word	0x10624dd3

08000754 <Read_Gpıo>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void Read_Gpıo(void *argument)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) ==  GPIO_PIN_SET)
 800075c:	2102      	movs	r1, #2
 800075e:	480a      	ldr	r0, [pc, #40]	; (8000788 <Read_Gpıo+0x34>)
 8000760:	f000 fbbe 	bl	8000ee0 <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	2b01      	cmp	r3, #1
 8000768:	d109      	bne.n	800077e <Read_Gpıo+0x2a>
	  {
		  delay_FreeRTOS(100); //butona basınca arg oluşuyor önlemek için yaptık
 800076a:	2064      	movs	r0, #100	; 0x64
 800076c:	f7ff ffd0 	bl	8000710 <delay_FreeRTOS>
		  xTaskNotify(myTask02Handle,0x00,eIncrement);
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <Read_Gpıo+0x38>)
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	2300      	movs	r3, #0
 8000776:	2202      	movs	r2, #2
 8000778:	2100      	movs	r1, #0
 800077a:	f002 ffb5 	bl	80036e8 <xTaskGenericNotify>
	  }
    osDelay(1);
 800077e:	2001      	movs	r0, #1
 8000780:	f001 fabe 	bl	8001d00 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) ==  GPIO_PIN_SET)
 8000784:	e7ea      	b.n	800075c <Read_Gpıo+0x8>
 8000786:	bf00      	nop
 8000788:	40020000 	.word	0x40020000
 800078c:	20000030 	.word	0x20000030

08000790 <Led_flash>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void Led_flash(void *argument)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  uint32_t pulNotificationValue = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
	  if(xTaskNotifyWait(0,0,&pulNotificationValue,portMAX_DELAY) == pdTRUE)
 800079c:	f107 020c 	add.w	r2, r7, #12
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	2100      	movs	r1, #0
 80007a6:	2000      	movs	r0, #0
 80007a8:	f002 ff44 	bl	8003634 <xTaskNotifyWait>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d107      	bne.n	80007c2 <Led_flash+0x32>
	  {
		  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2);
 80007b2:	2107      	movs	r1, #7
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <Led_flash+0x3c>)
 80007b6:	f000 fbc4 	bl	8000f42 <HAL_GPIO_TogglePin>
		  buttonCount = pulNotificationValue; // çünkü eIncrement yaptık bildirim sayısı kaç defa saydığıdır aslında
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <Led_flash+0x40>)
 80007c0:	701a      	strb	r2, [r3, #0]
	  }

    osDelay(1);
 80007c2:	2001      	movs	r0, #1
 80007c4:	f001 fa9c 	bl	8001d00 <osDelay>
  {
 80007c8:	e7e6      	b.n	8000798 <Led_flash+0x8>
 80007ca:	bf00      	nop
 80007cc:	40021400 	.word	0x40021400
 80007d0:	20000038 	.word	0x20000038

080007d4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f001 fa8f 	bl	8001d00 <osDelay>
 80007e2:	e7fb      	b.n	80007dc <StartTask03+0x8>

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_MspInit+0x54>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	4a11      	ldr	r2, [pc, #68]	; (8000844 <HAL_MspInit+0x54>)
 8000800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000804:	6453      	str	r3, [r2, #68]	; 0x44
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_MspInit+0x54>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <HAL_MspInit+0x54>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <HAL_MspInit+0x54>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	6413      	str	r3, [r2, #64]	; 0x40
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_MspInit+0x54>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	210f      	movs	r1, #15
 8000832:	f06f 0001 	mvn.w	r0, #1
 8000836:	f000 f996 	bl	8000b66 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800084c:	e7fe      	b.n	800084c <NMI_Handler+0x4>

0800084e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <HardFault_Handler+0x4>

08000854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <MemManage_Handler+0x4>

0800085a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <UsageFault_Handler+0x4>

08000866 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000878:	f000 f898 	bl	80009ac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800087c:	f002 fe4e 	bl	800351c <xTaskGetSchedulerState>
 8000880:	4603      	mov	r3, r0
 8000882:	2b01      	cmp	r3, #1
 8000884:	d001      	beq.n	800088a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000886:	f003 fd47 	bl	8004318 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <SystemInit+0x20>)
 8000896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800089a:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <SystemInit+0x20>)
 800089c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b8:	480d      	ldr	r0, [pc, #52]	; (80008f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008ba:	490e      	ldr	r1, [pc, #56]	; (80008f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008bc:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008d0:	4c0b      	ldr	r4, [pc, #44]	; (8000900 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008de:	f7ff ffd7 	bl	8000890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008e2:	f003 ff9b 	bl	800481c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008e6:	f7ff fe11 	bl	800050c <main>
  bx  lr    
 80008ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008f8:	08004960 	.word	0x08004960
  ldr r2, =_sbss
 80008fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000900:	20004990 	.word	0x20004990

08000904 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC_IRQHandler>
	...

08000908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_Init+0x40>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <HAL_Init+0x40>)
 8000912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000916:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_Init+0x40>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <HAL_Init+0x40>)
 800091e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000922:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a07      	ldr	r2, [pc, #28]	; (8000948 <HAL_Init+0x40>)
 800092a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800092e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000930:	2003      	movs	r0, #3
 8000932:	f000 f90d 	bl	8000b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000936:	200f      	movs	r0, #15
 8000938:	f000 f808 	bl	800094c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800093c:	f7ff ff58 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023c00 	.word	0x40023c00

0800094c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_InitTick+0x54>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_InitTick+0x58>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000962:	fbb3 f3f1 	udiv	r3, r3, r1
 8000966:	fbb2 f3f3 	udiv	r3, r2, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f917 	bl	8000b9e <HAL_SYSTICK_Config>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	e00e      	b.n	8000998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d80a      	bhi.n	8000996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	f04f 30ff 	mov.w	r0, #4294967295
 8000988:	f000 f8ed 	bl	8000b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800098c:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <HAL_InitTick+0x5c>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000992:	2300      	movs	r3, #0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20000004 	.word	0x20000004

080009ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_IncTick+0x20>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_IncTick+0x24>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4413      	add	r3, r2
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <HAL_IncTick+0x24>)
 80009be:	6013      	str	r3, [r2, #0]
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000008 	.word	0x20000008
 80009d0:	2000003c 	.word	0x2000003c

080009d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return uwTick;
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <HAL_GetTick+0x14>)
 80009da:	681b      	ldr	r3, [r3, #0]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	2000003c 	.word	0x2000003c

080009ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1e:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	60d3      	str	r3, [r2, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <__NVIC_GetPriorityGrouping+0x18>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	f003 0307 	and.w	r3, r3, #7
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db0a      	blt.n	8000a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	490c      	ldr	r1, [pc, #48]	; (8000a9c <__NVIC_SetPriority+0x4c>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a78:	e00a      	b.n	8000a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4908      	ldr	r1, [pc, #32]	; (8000aa0 <__NVIC_SetPriority+0x50>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	3b04      	subs	r3, #4
 8000a88:	0112      	lsls	r2, r2, #4
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	761a      	strb	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	; 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f1c3 0307 	rsb	r3, r3, #7
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	bf28      	it	cs
 8000ac2:	2304      	movcs	r3, #4
 8000ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d902      	bls.n	8000ad4 <NVIC_EncodePriority+0x30>
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3b03      	subs	r3, #3
 8000ad2:	e000      	b.n	8000ad6 <NVIC_EncodePriority+0x32>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43d9      	mvns	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	4313      	orrs	r3, r2
         );
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3724      	adds	r7, #36	; 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b1c:	d301      	bcc.n	8000b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00f      	b.n	8000b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <SysTick_Config+0x40>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2a:	210f      	movs	r1, #15
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f7ff ff8e 	bl	8000a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <SysTick_Config+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <SysTick_Config+0x40>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff47 	bl	80009ec <__NVIC_SetPriorityGrouping>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b78:	f7ff ff5c 	bl	8000a34 <__NVIC_GetPriorityGrouping>
 8000b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	68b9      	ldr	r1, [r7, #8]
 8000b82:	6978      	ldr	r0, [r7, #20]
 8000b84:	f7ff ff8e 	bl	8000aa4 <NVIC_EncodePriority>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff5d 	bl	8000a50 <__NVIC_SetPriority>
}
 8000b96:	bf00      	nop
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ffb0 	bl	8000b0c <SysTick_Config>
 8000bac:	4603      	mov	r3, r0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	; 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
 8000bd2:	e165      	b.n	8000ea0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	f040 8154 	bne.w	8000e9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 0303 	and.w	r3, r3, #3
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d005      	beq.n	8000c0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d130      	bne.n	8000c6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	2203      	movs	r2, #3
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	68da      	ldr	r2, [r3, #12]
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c40:	2201      	movs	r2, #1
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	091b      	lsrs	r3, r3, #4
 8000c56:	f003 0201 	and.w	r2, r3, #1
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d017      	beq.n	8000ca8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	2203      	movs	r2, #3
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d123      	bne.n	8000cfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	08da      	lsrs	r2, r3, #3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3208      	adds	r2, #8
 8000cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	f003 0307 	and.w	r3, r3, #7
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	220f      	movs	r2, #15
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	691a      	ldr	r2, [r3, #16]
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	08da      	lsrs	r2, r3, #3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3208      	adds	r2, #8
 8000cf6:	69b9      	ldr	r1, [r7, #24]
 8000cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2203      	movs	r2, #3
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0203 	and.w	r2, r3, #3
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f000 80ae 	beq.w	8000e9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b5d      	ldr	r3, [pc, #372]	; (8000eb8 <HAL_GPIO_Init+0x300>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a5c      	ldr	r2, [pc, #368]	; (8000eb8 <HAL_GPIO_Init+0x300>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b5a      	ldr	r3, [pc, #360]	; (8000eb8 <HAL_GPIO_Init+0x300>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d5a:	4a58      	ldr	r2, [pc, #352]	; (8000ebc <HAL_GPIO_Init+0x304>)
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	089b      	lsrs	r3, r3, #2
 8000d60:	3302      	adds	r3, #2
 8000d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	220f      	movs	r2, #15
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a4f      	ldr	r2, [pc, #316]	; (8000ec0 <HAL_GPIO_Init+0x308>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d025      	beq.n	8000dd2 <HAL_GPIO_Init+0x21a>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a4e      	ldr	r2, [pc, #312]	; (8000ec4 <HAL_GPIO_Init+0x30c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d01f      	beq.n	8000dce <HAL_GPIO_Init+0x216>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a4d      	ldr	r2, [pc, #308]	; (8000ec8 <HAL_GPIO_Init+0x310>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d019      	beq.n	8000dca <HAL_GPIO_Init+0x212>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a4c      	ldr	r2, [pc, #304]	; (8000ecc <HAL_GPIO_Init+0x314>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d013      	beq.n	8000dc6 <HAL_GPIO_Init+0x20e>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4b      	ldr	r2, [pc, #300]	; (8000ed0 <HAL_GPIO_Init+0x318>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d00d      	beq.n	8000dc2 <HAL_GPIO_Init+0x20a>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4a      	ldr	r2, [pc, #296]	; (8000ed4 <HAL_GPIO_Init+0x31c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d007      	beq.n	8000dbe <HAL_GPIO_Init+0x206>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a49      	ldr	r2, [pc, #292]	; (8000ed8 <HAL_GPIO_Init+0x320>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d101      	bne.n	8000dba <HAL_GPIO_Init+0x202>
 8000db6:	2306      	movs	r3, #6
 8000db8:	e00c      	b.n	8000dd4 <HAL_GPIO_Init+0x21c>
 8000dba:	2307      	movs	r3, #7
 8000dbc:	e00a      	b.n	8000dd4 <HAL_GPIO_Init+0x21c>
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	e008      	b.n	8000dd4 <HAL_GPIO_Init+0x21c>
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x21c>
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e004      	b.n	8000dd4 <HAL_GPIO_Init+0x21c>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_Init+0x21c>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <HAL_GPIO_Init+0x21c>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	69fa      	ldr	r2, [r7, #28]
 8000dd6:	f002 0203 	and.w	r2, r2, #3
 8000dda:	0092      	lsls	r2, r2, #2
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de4:	4935      	ldr	r1, [pc, #212]	; (8000ebc <HAL_GPIO_Init+0x304>)
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000df2:	4b3a      	ldr	r3, [pc, #232]	; (8000edc <HAL_GPIO_Init+0x324>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e16:	4a31      	ldr	r2, [pc, #196]	; (8000edc <HAL_GPIO_Init+0x324>)
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <HAL_GPIO_Init+0x324>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e40:	4a26      	ldr	r2, [pc, #152]	; (8000edc <HAL_GPIO_Init+0x324>)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e46:	4b25      	ldr	r3, [pc, #148]	; (8000edc <HAL_GPIO_Init+0x324>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <HAL_GPIO_Init+0x324>)
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e70:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <HAL_GPIO_Init+0x324>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e94:	4a11      	ldr	r2, [pc, #68]	; (8000edc <HAL_GPIO_Init+0x324>)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	61fb      	str	r3, [r7, #28]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	2b0f      	cmp	r3, #15
 8000ea4:	f67f ae96 	bls.w	8000bd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40013800 	.word	0x40013800
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40020c00 	.word	0x40020c00
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40021400 	.word	0x40021400
 8000ed8:	40021800 	.word	0x40021800
 8000edc:	40013c00 	.word	0x40013c00

08000ee0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	691a      	ldr	r2, [r3, #16]
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d002      	beq.n	8000efe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e001      	b.n	8000f02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	807b      	strh	r3, [r7, #2]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f20:	787b      	ldrb	r3, [r7, #1]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f26:	887a      	ldrh	r2, [r7, #2]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f2c:	e003      	b.n	8000f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f2e:	887b      	ldrh	r3, [r7, #2]
 8000f30:	041a      	lsls	r2, r3, #16
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	619a      	str	r2, [r3, #24]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b085      	sub	sp, #20
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f54:	887a      	ldrh	r2, [r7, #2]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	041a      	lsls	r2, r3, #16
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	887b      	ldrh	r3, [r7, #2]
 8000f62:	400b      	ands	r3, r1
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	619a      	str	r2, [r3, #24]
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e0cc      	b.n	8001126 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f8c:	4b68      	ldr	r3, [pc, #416]	; (8001130 <HAL_RCC_ClockConfig+0x1b8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 030f 	and.w	r3, r3, #15
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d90c      	bls.n	8000fb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f9a:	4b65      	ldr	r3, [pc, #404]	; (8001130 <HAL_RCC_ClockConfig+0x1b8>)
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fa2:	4b63      	ldr	r3, [pc, #396]	; (8001130 <HAL_RCC_ClockConfig+0x1b8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d001      	beq.n	8000fb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e0b8      	b.n	8001126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d020      	beq.n	8001002 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d005      	beq.n	8000fd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fcc:	4b59      	ldr	r3, [pc, #356]	; (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	4a58      	ldr	r2, [pc, #352]	; (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000fd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d005      	beq.n	8000ff0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fe4:	4b53      	ldr	r3, [pc, #332]	; (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	4a52      	ldr	r2, [pc, #328]	; (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8000fea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000fee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ff0:	4b50      	ldr	r3, [pc, #320]	; (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	494d      	ldr	r1, [pc, #308]	; (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d044      	beq.n	8001098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d107      	bne.n	8001026 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001016:	4b47      	ldr	r3, [pc, #284]	; (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d119      	bne.n	8001056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e07f      	b.n	8001126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d003      	beq.n	8001036 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001032:	2b03      	cmp	r3, #3
 8001034:	d107      	bne.n	8001046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001036:	4b3f      	ldr	r3, [pc, #252]	; (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d109      	bne.n	8001056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e06f      	b.n	8001126 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001046:	4b3b      	ldr	r3, [pc, #236]	; (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e067      	b.n	8001126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001056:	4b37      	ldr	r3, [pc, #220]	; (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f023 0203 	bic.w	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	4934      	ldr	r1, [pc, #208]	; (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8001064:	4313      	orrs	r3, r2
 8001066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001068:	f7ff fcb4 	bl	80009d4 <HAL_GetTick>
 800106c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800106e:	e00a      	b.n	8001086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001070:	f7ff fcb0 	bl	80009d4 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	f241 3288 	movw	r2, #5000	; 0x1388
 800107e:	4293      	cmp	r3, r2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e04f      	b.n	8001126 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001086:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 020c 	and.w	r2, r3, #12
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	429a      	cmp	r2, r3
 8001096:	d1eb      	bne.n	8001070 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001098:	4b25      	ldr	r3, [pc, #148]	; (8001130 <HAL_RCC_ClockConfig+0x1b8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d20c      	bcs.n	80010c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a6:	4b22      	ldr	r3, [pc, #136]	; (8001130 <HAL_RCC_ClockConfig+0x1b8>)
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <HAL_RCC_ClockConfig+0x1b8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d001      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e032      	b.n	8001126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d008      	beq.n	80010de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010cc:	4b19      	ldr	r3, [pc, #100]	; (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	4916      	ldr	r1, [pc, #88]	; (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 80010da:	4313      	orrs	r3, r2
 80010dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d009      	beq.n	80010fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	490e      	ldr	r1, [pc, #56]	; (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010fe:	f000 f821 	bl	8001144 <HAL_RCC_GetSysClockFreq>
 8001102:	4602      	mov	r2, r0
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	091b      	lsrs	r3, r3, #4
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	490a      	ldr	r1, [pc, #40]	; (8001138 <HAL_RCC_ClockConfig+0x1c0>)
 8001110:	5ccb      	ldrb	r3, [r1, r3]
 8001112:	fa22 f303 	lsr.w	r3, r2, r3
 8001116:	4a09      	ldr	r2, [pc, #36]	; (800113c <HAL_RCC_ClockConfig+0x1c4>)
 8001118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_RCC_ClockConfig+0x1c8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fc14 	bl	800094c <HAL_InitTick>

  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023c00 	.word	0x40023c00
 8001134:	40023800 	.word	0x40023800
 8001138:	08004940 	.word	0x08004940
 800113c:	20000000 	.word	0x20000000
 8001140:	20000004 	.word	0x20000004

08001144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001148:	b0ae      	sub	sp, #184	; 0xb8
 800114a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800114c:	2300      	movs	r3, #0
 800114e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800116a:	4bcb      	ldr	r3, [pc, #812]	; (8001498 <HAL_RCC_GetSysClockFreq+0x354>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
 8001172:	2b0c      	cmp	r3, #12
 8001174:	f200 8206 	bhi.w	8001584 <HAL_RCC_GetSysClockFreq+0x440>
 8001178:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <HAL_RCC_GetSysClockFreq+0x3c>)
 800117a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117e:	bf00      	nop
 8001180:	080011b5 	.word	0x080011b5
 8001184:	08001585 	.word	0x08001585
 8001188:	08001585 	.word	0x08001585
 800118c:	08001585 	.word	0x08001585
 8001190:	080011bd 	.word	0x080011bd
 8001194:	08001585 	.word	0x08001585
 8001198:	08001585 	.word	0x08001585
 800119c:	08001585 	.word	0x08001585
 80011a0:	080011c5 	.word	0x080011c5
 80011a4:	08001585 	.word	0x08001585
 80011a8:	08001585 	.word	0x08001585
 80011ac:	08001585 	.word	0x08001585
 80011b0:	080013b5 	.word	0x080013b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011b4:	4bb9      	ldr	r3, [pc, #740]	; (800149c <HAL_RCC_GetSysClockFreq+0x358>)
 80011b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80011ba:	e1e7      	b.n	800158c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011bc:	4bb8      	ldr	r3, [pc, #736]	; (80014a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80011be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80011c2:	e1e3      	b.n	800158c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011c4:	4bb4      	ldr	r3, [pc, #720]	; (8001498 <HAL_RCC_GetSysClockFreq+0x354>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011d0:	4bb1      	ldr	r3, [pc, #708]	; (8001498 <HAL_RCC_GetSysClockFreq+0x354>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d071      	beq.n	80012c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011dc:	4bae      	ldr	r3, [pc, #696]	; (8001498 <HAL_RCC_GetSysClockFreq+0x354>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	099b      	lsrs	r3, r3, #6
 80011e2:	2200      	movs	r2, #0
 80011e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80011e8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80011ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80011f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80011fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001202:	4622      	mov	r2, r4
 8001204:	462b      	mov	r3, r5
 8001206:	f04f 0000 	mov.w	r0, #0
 800120a:	f04f 0100 	mov.w	r1, #0
 800120e:	0159      	lsls	r1, r3, #5
 8001210:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001214:	0150      	lsls	r0, r2, #5
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4621      	mov	r1, r4
 800121c:	1a51      	subs	r1, r2, r1
 800121e:	6439      	str	r1, [r7, #64]	; 0x40
 8001220:	4629      	mov	r1, r5
 8001222:	eb63 0301 	sbc.w	r3, r3, r1
 8001226:	647b      	str	r3, [r7, #68]	; 0x44
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001234:	4649      	mov	r1, r9
 8001236:	018b      	lsls	r3, r1, #6
 8001238:	4641      	mov	r1, r8
 800123a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800123e:	4641      	mov	r1, r8
 8001240:	018a      	lsls	r2, r1, #6
 8001242:	4641      	mov	r1, r8
 8001244:	1a51      	subs	r1, r2, r1
 8001246:	63b9      	str	r1, [r7, #56]	; 0x38
 8001248:	4649      	mov	r1, r9
 800124a:	eb63 0301 	sbc.w	r3, r3, r1
 800124e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800125c:	4649      	mov	r1, r9
 800125e:	00cb      	lsls	r3, r1, #3
 8001260:	4641      	mov	r1, r8
 8001262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001266:	4641      	mov	r1, r8
 8001268:	00ca      	lsls	r2, r1, #3
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	4603      	mov	r3, r0
 8001270:	4622      	mov	r2, r4
 8001272:	189b      	adds	r3, r3, r2
 8001274:	633b      	str	r3, [r7, #48]	; 0x30
 8001276:	462b      	mov	r3, r5
 8001278:	460a      	mov	r2, r1
 800127a:	eb42 0303 	adc.w	r3, r2, r3
 800127e:	637b      	str	r3, [r7, #52]	; 0x34
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	f04f 0300 	mov.w	r3, #0
 8001288:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800128c:	4629      	mov	r1, r5
 800128e:	024b      	lsls	r3, r1, #9
 8001290:	4621      	mov	r1, r4
 8001292:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001296:	4621      	mov	r1, r4
 8001298:	024a      	lsls	r2, r1, #9
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012a2:	2200      	movs	r2, #0
 80012a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80012a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80012ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80012b0:	f7fe ffae 	bl	8000210 <__aeabi_uldivmod>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4613      	mov	r3, r2
 80012ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80012be:	e067      	b.n	8001390 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012c0:	4b75      	ldr	r3, [pc, #468]	; (8001498 <HAL_RCC_GetSysClockFreq+0x354>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	099b      	lsrs	r3, r3, #6
 80012c6:	2200      	movs	r2, #0
 80012c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80012cc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80012d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80012d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80012da:	2300      	movs	r3, #0
 80012dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80012de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80012e2:	4622      	mov	r2, r4
 80012e4:	462b      	mov	r3, r5
 80012e6:	f04f 0000 	mov.w	r0, #0
 80012ea:	f04f 0100 	mov.w	r1, #0
 80012ee:	0159      	lsls	r1, r3, #5
 80012f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012f4:	0150      	lsls	r0, r2, #5
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4621      	mov	r1, r4
 80012fc:	1a51      	subs	r1, r2, r1
 80012fe:	62b9      	str	r1, [r7, #40]	; 0x28
 8001300:	4629      	mov	r1, r5
 8001302:	eb63 0301 	sbc.w	r3, r3, r1
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	f04f 0300 	mov.w	r3, #0
 8001310:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001314:	4649      	mov	r1, r9
 8001316:	018b      	lsls	r3, r1, #6
 8001318:	4641      	mov	r1, r8
 800131a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800131e:	4641      	mov	r1, r8
 8001320:	018a      	lsls	r2, r1, #6
 8001322:	4641      	mov	r1, r8
 8001324:	ebb2 0a01 	subs.w	sl, r2, r1
 8001328:	4649      	mov	r1, r9
 800132a:	eb63 0b01 	sbc.w	fp, r3, r1
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800133a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800133e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001342:	4692      	mov	sl, r2
 8001344:	469b      	mov	fp, r3
 8001346:	4623      	mov	r3, r4
 8001348:	eb1a 0303 	adds.w	r3, sl, r3
 800134c:	623b      	str	r3, [r7, #32]
 800134e:	462b      	mov	r3, r5
 8001350:	eb4b 0303 	adc.w	r3, fp, r3
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001362:	4629      	mov	r1, r5
 8001364:	028b      	lsls	r3, r1, #10
 8001366:	4621      	mov	r1, r4
 8001368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800136c:	4621      	mov	r1, r4
 800136e:	028a      	lsls	r2, r1, #10
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001378:	2200      	movs	r2, #0
 800137a:	673b      	str	r3, [r7, #112]	; 0x70
 800137c:	677a      	str	r2, [r7, #116]	; 0x74
 800137e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001382:	f7fe ff45 	bl	8000210 <__aeabi_uldivmod>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4613      	mov	r3, r2
 800138c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001390:	4b41      	ldr	r3, [pc, #260]	; (8001498 <HAL_RCC_GetSysClockFreq+0x354>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	0c1b      	lsrs	r3, r3, #16
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	3301      	adds	r3, #1
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80013a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80013a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80013b2:	e0eb      	b.n	800158c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013b4:	4b38      	ldr	r3, [pc, #224]	; (8001498 <HAL_RCC_GetSysClockFreq+0x354>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013c0:	4b35      	ldr	r3, [pc, #212]	; (8001498 <HAL_RCC_GetSysClockFreq+0x354>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d06b      	beq.n	80014a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013cc:	4b32      	ldr	r3, [pc, #200]	; (8001498 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	099b      	lsrs	r3, r3, #6
 80013d2:	2200      	movs	r2, #0
 80013d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80013d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80013d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013de:	663b      	str	r3, [r7, #96]	; 0x60
 80013e0:	2300      	movs	r3, #0
 80013e2:	667b      	str	r3, [r7, #100]	; 0x64
 80013e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80013e8:	4622      	mov	r2, r4
 80013ea:	462b      	mov	r3, r5
 80013ec:	f04f 0000 	mov.w	r0, #0
 80013f0:	f04f 0100 	mov.w	r1, #0
 80013f4:	0159      	lsls	r1, r3, #5
 80013f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013fa:	0150      	lsls	r0, r2, #5
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4621      	mov	r1, r4
 8001402:	1a51      	subs	r1, r2, r1
 8001404:	61b9      	str	r1, [r7, #24]
 8001406:	4629      	mov	r1, r5
 8001408:	eb63 0301 	sbc.w	r3, r3, r1
 800140c:	61fb      	str	r3, [r7, #28]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800141a:	4659      	mov	r1, fp
 800141c:	018b      	lsls	r3, r1, #6
 800141e:	4651      	mov	r1, sl
 8001420:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001424:	4651      	mov	r1, sl
 8001426:	018a      	lsls	r2, r1, #6
 8001428:	4651      	mov	r1, sl
 800142a:	ebb2 0801 	subs.w	r8, r2, r1
 800142e:	4659      	mov	r1, fp
 8001430:	eb63 0901 	sbc.w	r9, r3, r1
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001440:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001444:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001448:	4690      	mov	r8, r2
 800144a:	4699      	mov	r9, r3
 800144c:	4623      	mov	r3, r4
 800144e:	eb18 0303 	adds.w	r3, r8, r3
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	462b      	mov	r3, r5
 8001456:	eb49 0303 	adc.w	r3, r9, r3
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001468:	4629      	mov	r1, r5
 800146a:	024b      	lsls	r3, r1, #9
 800146c:	4621      	mov	r1, r4
 800146e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001472:	4621      	mov	r1, r4
 8001474:	024a      	lsls	r2, r1, #9
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800147e:	2200      	movs	r2, #0
 8001480:	65bb      	str	r3, [r7, #88]	; 0x58
 8001482:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001484:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001488:	f7fe fec2 	bl	8000210 <__aeabi_uldivmod>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4613      	mov	r3, r2
 8001492:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001496:	e065      	b.n	8001564 <HAL_RCC_GetSysClockFreq+0x420>
 8001498:	40023800 	.word	0x40023800
 800149c:	00f42400 	.word	0x00f42400
 80014a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014a4:	4b3d      	ldr	r3, [pc, #244]	; (800159c <HAL_RCC_GetSysClockFreq+0x458>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	099b      	lsrs	r3, r3, #6
 80014aa:	2200      	movs	r2, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	4611      	mov	r1, r2
 80014b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80014b4:	653b      	str	r3, [r7, #80]	; 0x50
 80014b6:	2300      	movs	r3, #0
 80014b8:	657b      	str	r3, [r7, #84]	; 0x54
 80014ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80014be:	4642      	mov	r2, r8
 80014c0:	464b      	mov	r3, r9
 80014c2:	f04f 0000 	mov.w	r0, #0
 80014c6:	f04f 0100 	mov.w	r1, #0
 80014ca:	0159      	lsls	r1, r3, #5
 80014cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014d0:	0150      	lsls	r0, r2, #5
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4641      	mov	r1, r8
 80014d8:	1a51      	subs	r1, r2, r1
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	4649      	mov	r1, r9
 80014de:	eb63 0301 	sbc.w	r3, r3, r1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80014f0:	4659      	mov	r1, fp
 80014f2:	018b      	lsls	r3, r1, #6
 80014f4:	4651      	mov	r1, sl
 80014f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014fa:	4651      	mov	r1, sl
 80014fc:	018a      	lsls	r2, r1, #6
 80014fe:	4651      	mov	r1, sl
 8001500:	1a54      	subs	r4, r2, r1
 8001502:	4659      	mov	r1, fp
 8001504:	eb63 0501 	sbc.w	r5, r3, r1
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	00eb      	lsls	r3, r5, #3
 8001512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001516:	00e2      	lsls	r2, r4, #3
 8001518:	4614      	mov	r4, r2
 800151a:	461d      	mov	r5, r3
 800151c:	4643      	mov	r3, r8
 800151e:	18e3      	adds	r3, r4, r3
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	464b      	mov	r3, r9
 8001524:	eb45 0303 	adc.w	r3, r5, r3
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001536:	4629      	mov	r1, r5
 8001538:	028b      	lsls	r3, r1, #10
 800153a:	4621      	mov	r1, r4
 800153c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001540:	4621      	mov	r1, r4
 8001542:	028a      	lsls	r2, r1, #10
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800154c:	2200      	movs	r2, #0
 800154e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001550:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001552:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001556:	f7fe fe5b 	bl	8000210 <__aeabi_uldivmod>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4613      	mov	r3, r2
 8001560:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <HAL_RCC_GetSysClockFreq+0x458>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	0f1b      	lsrs	r3, r3, #28
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001572:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001576:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800157a:	fbb2 f3f3 	udiv	r3, r2, r3
 800157e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001582:	e003      	b.n	800158c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001586:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800158a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800158c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001590:	4618      	mov	r0, r3
 8001592:	37b8      	adds	r7, #184	; 0xb8
 8001594:	46bd      	mov	sp, r7
 8001596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	00f42400 	.word	0x00f42400

080015a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e28d      	b.n	8001ad2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 8083 	beq.w	80016ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015c4:	4b94      	ldr	r3, [pc, #592]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d019      	beq.n	8001604 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015d0:	4b91      	ldr	r3, [pc, #580]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015d8:	2b08      	cmp	r3, #8
 80015da:	d106      	bne.n	80015ea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015dc:	4b8e      	ldr	r3, [pc, #568]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015e8:	d00c      	beq.n	8001604 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ea:	4b8b      	ldr	r3, [pc, #556]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015f2:	2b0c      	cmp	r3, #12
 80015f4:	d112      	bne.n	800161c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015f6:	4b88      	ldr	r3, [pc, #544]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001602:	d10b      	bne.n	800161c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001604:	4b84      	ldr	r3, [pc, #528]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d05b      	beq.n	80016c8 <HAL_RCC_OscConfig+0x124>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d157      	bne.n	80016c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e25a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001624:	d106      	bne.n	8001634 <HAL_RCC_OscConfig+0x90>
 8001626:	4b7c      	ldr	r3, [pc, #496]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a7b      	ldr	r2, [pc, #492]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 800162c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e01d      	b.n	8001670 <HAL_RCC_OscConfig+0xcc>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0xb4>
 800163e:	4b76      	ldr	r3, [pc, #472]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a75      	ldr	r2, [pc, #468]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 8001644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	4b73      	ldr	r3, [pc, #460]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a72      	ldr	r2, [pc, #456]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 8001650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0xcc>
 8001658:	4b6f      	ldr	r3, [pc, #444]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a6e      	ldr	r2, [pc, #440]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 800165e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b6c      	ldr	r3, [pc, #432]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a6b      	ldr	r2, [pc, #428]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 800166a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d013      	beq.n	80016a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff f9ac 	bl	80009d4 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001680:	f7ff f9a8 	bl	80009d4 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	; 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e21f      	b.n	8001ad2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	4b61      	ldr	r3, [pc, #388]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0xdc>
 800169e:	e014      	b.n	80016ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a0:	f7ff f998 	bl	80009d4 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a8:	f7ff f994 	bl	80009d4 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	; 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e20b      	b.n	8001ad2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ba:	4b57      	ldr	r3, [pc, #348]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x104>
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d06f      	beq.n	80017b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016d6:	4b50      	ldr	r3, [pc, #320]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d017      	beq.n	8001712 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016e2:	4b4d      	ldr	r3, [pc, #308]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d105      	bne.n	80016fa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016ee:	4b4a      	ldr	r3, [pc, #296]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00b      	beq.n	8001712 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fa:	4b47      	ldr	r3, [pc, #284]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001702:	2b0c      	cmp	r3, #12
 8001704:	d11c      	bne.n	8001740 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001706:	4b44      	ldr	r3, [pc, #272]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d116      	bne.n	8001740 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	4b41      	ldr	r3, [pc, #260]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <HAL_RCC_OscConfig+0x186>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e1d3      	b.n	8001ad2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b3b      	ldr	r3, [pc, #236]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4937      	ldr	r1, [pc, #220]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173e:	e03a      	b.n	80017b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d020      	beq.n	800178a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001748:	4b34      	ldr	r3, [pc, #208]	; (800181c <HAL_RCC_OscConfig+0x278>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff f941 	bl	80009d4 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001756:	f7ff f93d 	bl	80009d4 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1b4      	b.n	8001ad2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4925      	ldr	r1, [pc, #148]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
 8001788:	e015      	b.n	80017b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178a:	4b24      	ldr	r3, [pc, #144]	; (800181c <HAL_RCC_OscConfig+0x278>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff f920 	bl	80009d4 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001798:	f7ff f91c 	bl	80009d4 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e193      	b.n	8001ad2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017aa:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d036      	beq.n	8001830 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d016      	beq.n	80017f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff f900 	bl	80009d4 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d8:	f7ff f8fc 	bl	80009d4 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e173      	b.n	8001ad2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 80017ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x234>
 80017f6:	e01b      	b.n	8001830 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fe:	f7ff f8e9 	bl	80009d4 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001804:	e00e      	b.n	8001824 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001806:	f7ff f8e5 	bl	80009d4 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d907      	bls.n	8001824 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e15c      	b.n	8001ad2 <HAL_RCC_OscConfig+0x52e>
 8001818:	40023800 	.word	0x40023800
 800181c:	42470000 	.word	0x42470000
 8001820:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001824:	4b8a      	ldr	r3, [pc, #552]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 8001826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1ea      	bne.n	8001806 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 8097 	beq.w	800196c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001842:	4b83      	ldr	r3, [pc, #524]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10f      	bne.n	800186e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	4b7f      	ldr	r3, [pc, #508]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a7e      	ldr	r2, [pc, #504]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b7c      	ldr	r3, [pc, #496]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800186a:	2301      	movs	r3, #1
 800186c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186e:	4b79      	ldr	r3, [pc, #484]	; (8001a54 <HAL_RCC_OscConfig+0x4b0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001876:	2b00      	cmp	r3, #0
 8001878:	d118      	bne.n	80018ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800187a:	4b76      	ldr	r3, [pc, #472]	; (8001a54 <HAL_RCC_OscConfig+0x4b0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a75      	ldr	r2, [pc, #468]	; (8001a54 <HAL_RCC_OscConfig+0x4b0>)
 8001880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001886:	f7ff f8a5 	bl	80009d4 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188e:	f7ff f8a1 	bl	80009d4 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e118      	b.n	8001ad2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a0:	4b6c      	ldr	r3, [pc, #432]	; (8001a54 <HAL_RCC_OscConfig+0x4b0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d106      	bne.n	80018c2 <HAL_RCC_OscConfig+0x31e>
 80018b4:	4b66      	ldr	r3, [pc, #408]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	4a65      	ldr	r2, [pc, #404]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6713      	str	r3, [r2, #112]	; 0x70
 80018c0:	e01c      	b.n	80018fc <HAL_RCC_OscConfig+0x358>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b05      	cmp	r3, #5
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0x340>
 80018ca:	4b61      	ldr	r3, [pc, #388]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 80018cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ce:	4a60      	ldr	r2, [pc, #384]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6713      	str	r3, [r2, #112]	; 0x70
 80018d6:	4b5e      	ldr	r3, [pc, #376]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 80018d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018da:	4a5d      	ldr	r2, [pc, #372]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6713      	str	r3, [r2, #112]	; 0x70
 80018e2:	e00b      	b.n	80018fc <HAL_RCC_OscConfig+0x358>
 80018e4:	4b5a      	ldr	r3, [pc, #360]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 80018e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e8:	4a59      	ldr	r2, [pc, #356]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 80018ea:	f023 0301 	bic.w	r3, r3, #1
 80018ee:	6713      	str	r3, [r2, #112]	; 0x70
 80018f0:	4b57      	ldr	r3, [pc, #348]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f4:	4a56      	ldr	r2, [pc, #344]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 80018f6:	f023 0304 	bic.w	r3, r3, #4
 80018fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d015      	beq.n	8001930 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff f866 	bl	80009d4 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190a:	e00a      	b.n	8001922 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190c:	f7ff f862 	bl	80009d4 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e0d7      	b.n	8001ad2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001922:	4b4b      	ldr	r3, [pc, #300]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0ee      	beq.n	800190c <HAL_RCC_OscConfig+0x368>
 800192e:	e014      	b.n	800195a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001930:	f7ff f850 	bl	80009d4 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001936:	e00a      	b.n	800194e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001938:	f7ff f84c 	bl	80009d4 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f241 3288 	movw	r2, #5000	; 0x1388
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e0c1      	b.n	8001ad2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194e:	4b40      	ldr	r3, [pc, #256]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 8001950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1ee      	bne.n	8001938 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800195a:	7dfb      	ldrb	r3, [r7, #23]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d105      	bne.n	800196c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001960:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	4a3a      	ldr	r2, [pc, #232]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 8001966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800196a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80ad 	beq.w	8001ad0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001976:	4b36      	ldr	r3, [pc, #216]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b08      	cmp	r3, #8
 8001980:	d060      	beq.n	8001a44 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d145      	bne.n	8001a16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198a:	4b33      	ldr	r3, [pc, #204]	; (8001a58 <HAL_RCC_OscConfig+0x4b4>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff f820 	bl	80009d4 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff f81c 	bl	80009d4 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e093      	b.n	8001ad2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019aa:	4b29      	ldr	r3, [pc, #164]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	019b      	lsls	r3, r3, #6
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019cc:	085b      	lsrs	r3, r3, #1
 80019ce:	3b01      	subs	r3, #1
 80019d0:	041b      	lsls	r3, r3, #16
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	061b      	lsls	r3, r3, #24
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e0:	071b      	lsls	r3, r3, #28
 80019e2:	491b      	ldr	r1, [pc, #108]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <HAL_RCC_OscConfig+0x4b4>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7fe fff1 	bl	80009d4 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f6:	f7fe ffed 	bl	80009d4 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e064      	b.n	8001ad2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x452>
 8001a14:	e05c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <HAL_RCC_OscConfig+0x4b4>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7fe ffda 	bl	80009d4 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a24:	f7fe ffd6 	bl	80009d4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e04d      	b.n	8001ad2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_RCC_OscConfig+0x4ac>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x480>
 8001a42:	e045      	b.n	8001ad0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d107      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e040      	b.n	8001ad2 <HAL_RCC_OscConfig+0x52e>
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40007000 	.word	0x40007000
 8001a58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <HAL_RCC_OscConfig+0x538>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d030      	beq.n	8001acc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d129      	bne.n	8001acc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d122      	bne.n	8001acc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d119      	bne.n	8001acc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	085b      	lsrs	r3, r3, #1
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d10f      	bne.n	8001acc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d107      	bne.n	8001acc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800

08001ae0 <__NVIC_SetPriority>:
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	db0a      	blt.n	8001b0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	490c      	ldr	r1, [pc, #48]	; (8001b2c <__NVIC_SetPriority+0x4c>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	0112      	lsls	r2, r2, #4
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	440b      	add	r3, r1
 8001b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b08:	e00a      	b.n	8001b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4908      	ldr	r1, [pc, #32]	; (8001b30 <__NVIC_SetPriority+0x50>)
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	3b04      	subs	r3, #4
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	761a      	strb	r2, [r3, #24]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000e100 	.word	0xe000e100
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001b38:	2100      	movs	r1, #0
 8001b3a:	f06f 0004 	mvn.w	r0, #4
 8001b3e:	f7ff ffcf 	bl	8001ae0 <__NVIC_SetPriority>
#endif
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b4e:	f3ef 8305 	mrs	r3, IPSR
 8001b52:	603b      	str	r3, [r7, #0]
  return(result);
 8001b54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001b5a:	f06f 0305 	mvn.w	r3, #5
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	e00c      	b.n	8001b7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <osKernelInitialize+0x44>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d105      	bne.n	8001b76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <osKernelInitialize+0x44>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	e002      	b.n	8001b7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001b7c:	687b      	ldr	r3, [r7, #4]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000040 	.word	0x20000040

08001b90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b96:	f3ef 8305 	mrs	r3, IPSR
 8001b9a:	603b      	str	r3, [r7, #0]
  return(result);
 8001b9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <osKernelStart+0x1a>
    stat = osErrorISR;
 8001ba2:	f06f 0305 	mvn.w	r3, #5
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	e010      	b.n	8001bcc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <osKernelStart+0x48>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d109      	bne.n	8001bc6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001bb2:	f7ff ffbf 	bl	8001b34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <osKernelStart+0x48>)
 8001bb8:	2202      	movs	r2, #2
 8001bba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001bbc:	f001 f866 	bl	8002c8c <vTaskStartScheduler>
      stat = osOK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	e002      	b.n	8001bcc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001bcc:	687b      	ldr	r3, [r7, #4]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000040 	.word	0x20000040

08001bdc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08e      	sub	sp, #56	; 0x38
 8001be0:	af04      	add	r7, sp, #16
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bec:	f3ef 8305 	mrs	r3, IPSR
 8001bf0:	617b      	str	r3, [r7, #20]
  return(result);
 8001bf2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d17e      	bne.n	8001cf6 <osThreadNew+0x11a>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d07b      	beq.n	8001cf6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001c02:	2318      	movs	r3, #24
 8001c04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d045      	beq.n	8001ca2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <osThreadNew+0x48>
        name = attr->name;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <osThreadNew+0x6e>
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	2b38      	cmp	r3, #56	; 0x38
 8001c3c:	d805      	bhi.n	8001c4a <osThreadNew+0x6e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <osThreadNew+0x72>
        return (NULL);
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e054      	b.n	8001cf8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00e      	beq.n	8001c84 <osThreadNew+0xa8>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b5b      	cmp	r3, #91	; 0x5b
 8001c6c:	d90a      	bls.n	8001c84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <osThreadNew+0xa8>
        mem = 1;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	e010      	b.n	8001ca6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10c      	bne.n	8001ca6 <osThreadNew+0xca>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d108      	bne.n	8001ca6 <osThreadNew+0xca>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d104      	bne.n	8001ca6 <osThreadNew+0xca>
          mem = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61bb      	str	r3, [r7, #24]
 8001ca0:	e001      	b.n	8001ca6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d110      	bne.n	8001cce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001cb4:	9202      	str	r2, [sp, #8]
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	6a3a      	ldr	r2, [r7, #32]
 8001cc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 fe0c 	bl	80028e0 <xTaskCreateStatic>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	e013      	b.n	8001cf6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d110      	bne.n	8001cf6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 fe57 	bl	800299a <xTaskCreate>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d001      	beq.n	8001cf6 <osThreadNew+0x11a>
            hTask = NULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001cf6:	693b      	ldr	r3, [r7, #16]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3728      	adds	r7, #40	; 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d08:	f3ef 8305 	mrs	r3, IPSR
 8001d0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <osDelay+0x1c>
    stat = osErrorISR;
 8001d14:	f06f 0305 	mvn.w	r3, #5
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	e007      	b.n	8001d2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <osDelay+0x2c>
      vTaskDelay(ticks);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 ff7c 	bl	8002c24 <vTaskDelay>
    }
  }

  return (stat);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <vApplicationGetIdleTaskMemory+0x2c>)
 8001d48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	4a06      	ldr	r2, [pc, #24]	; (8001d68 <vApplicationGetIdleTaskMemory+0x30>)
 8001d4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2280      	movs	r2, #128	; 0x80
 8001d54:	601a      	str	r2, [r3, #0]
}
 8001d56:	bf00      	nop
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000044 	.word	0x20000044
 8001d68:	200000a0 	.word	0x200000a0

08001d6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <vApplicationGetTimerTaskMemory+0x2c>)
 8001d7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	4a06      	ldr	r2, [pc, #24]	; (8001d9c <vApplicationGetTimerTaskMemory+0x30>)
 8001d82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d8a:	601a      	str	r2, [r3, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	200002a0 	.word	0x200002a0
 8001d9c:	200002fc 	.word	0x200002fc

08001da0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f103 0208 	add.w	r2, r3, #8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f04f 32ff 	mov.w	r2, #4294967295
 8001db8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f103 0208 	add.w	r2, r3, #8
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f103 0208 	add.w	r2, r3, #8
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b085      	sub	sp, #20
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	601a      	str	r2, [r3, #0]
}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e42:	b480      	push	{r7}
 8001e44:	b085      	sub	sp, #20
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e58:	d103      	bne.n	8001e62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	e00c      	b.n	8001e7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3308      	adds	r3, #8
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	e002      	b.n	8001e70 <vListInsert+0x2e>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d2f6      	bcs.n	8001e6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	601a      	str	r2, [r3, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6892      	ldr	r2, [r2, #8]
 8001eca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6852      	ldr	r2, [r2, #4]
 8001ed4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d103      	bne.n	8001ee8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	1e5a      	subs	r2, r3, #1
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10a      	bne.n	8001f32 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f20:	f383 8811 	msr	BASEPRI, r3
 8001f24:	f3bf 8f6f 	isb	sy
 8001f28:	f3bf 8f4f 	dsb	sy
 8001f2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001f2e:	bf00      	nop
 8001f30:	e7fe      	b.n	8001f30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001f32:	f002 f95f 	bl	80041f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3e:	68f9      	ldr	r1, [r7, #12]
 8001f40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f42:	fb01 f303 	mul.w	r3, r1, r3
 8001f46:	441a      	add	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f62:	3b01      	subs	r3, #1
 8001f64:	68f9      	ldr	r1, [r7, #12]
 8001f66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	441a      	add	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	22ff      	movs	r2, #255	; 0xff
 8001f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	22ff      	movs	r2, #255	; 0xff
 8001f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d114      	bne.n	8001fb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01a      	beq.n	8001fc6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3310      	adds	r3, #16
 8001f94:	4618      	mov	r0, r3
 8001f96:	f001 f903 	bl	80031a0 <xTaskRemoveFromEventList>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d012      	beq.n	8001fc6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <xQueueGenericReset+0xcc>)
 8001fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	f3bf 8f4f 	dsb	sy
 8001fac:	f3bf 8f6f 	isb	sy
 8001fb0:	e009      	b.n	8001fc6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3310      	adds	r3, #16
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fef2 	bl	8001da0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	3324      	adds	r3, #36	; 0x24
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff feed 	bl	8001da0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001fc6:	f002 f945 	bl	8004254 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001fca:	2301      	movs	r3, #1
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	e000ed04 	.word	0xe000ed04

08001fd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08e      	sub	sp, #56	; 0x38
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10a      	bne.n	8002002 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff0:	f383 8811 	msr	BASEPRI, r3
 8001ff4:	f3bf 8f6f 	isb	sy
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001ffe:	bf00      	nop
 8002000:	e7fe      	b.n	8002000 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10a      	bne.n	800201e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200c:	f383 8811 	msr	BASEPRI, r3
 8002010:	f3bf 8f6f 	isb	sy
 8002014:	f3bf 8f4f 	dsb	sy
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
}
 800201a:	bf00      	nop
 800201c:	e7fe      	b.n	800201c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <xQueueGenericCreateStatic+0x52>
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <xQueueGenericCreateStatic+0x56>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <xQueueGenericCreateStatic+0x58>
 800202e:	2300      	movs	r3, #0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10a      	bne.n	800204a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002038:	f383 8811 	msr	BASEPRI, r3
 800203c:	f3bf 8f6f 	isb	sy
 8002040:	f3bf 8f4f 	dsb	sy
 8002044:	623b      	str	r3, [r7, #32]
}
 8002046:	bf00      	nop
 8002048:	e7fe      	b.n	8002048 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <xQueueGenericCreateStatic+0x7e>
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <xQueueGenericCreateStatic+0x82>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <xQueueGenericCreateStatic+0x84>
 800205a:	2300      	movs	r3, #0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10a      	bne.n	8002076 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	61fb      	str	r3, [r7, #28]
}
 8002072:	bf00      	nop
 8002074:	e7fe      	b.n	8002074 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002076:	2350      	movs	r3, #80	; 0x50
 8002078:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b50      	cmp	r3, #80	; 0x50
 800207e:	d00a      	beq.n	8002096 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002084:	f383 8811 	msr	BASEPRI, r3
 8002088:	f3bf 8f6f 	isb	sy
 800208c:	f3bf 8f4f 	dsb	sy
 8002090:	61bb      	str	r3, [r7, #24]
}
 8002092:	bf00      	nop
 8002094:	e7fe      	b.n	8002094 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002096:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00d      	beq.n	80020be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80020a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80020aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80020ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	4613      	mov	r3, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 f805 	bl	80020c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80020be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3730      	adds	r7, #48	; 0x30
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d103      	bne.n	80020e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	e002      	b.n	80020ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80020f6:	2101      	movs	r1, #1
 80020f8:	69b8      	ldr	r0, [r7, #24]
 80020fa:	f7ff ff05 	bl	8001f08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08e      	sub	sp, #56	; 0x38
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800211e:	2300      	movs	r3, #0
 8002120:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10a      	bne.n	8002142 <xQueueGenericSend+0x32>
	__asm volatile
 800212c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002130:	f383 8811 	msr	BASEPRI, r3
 8002134:	f3bf 8f6f 	isb	sy
 8002138:	f3bf 8f4f 	dsb	sy
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800213e:	bf00      	nop
 8002140:	e7fe      	b.n	8002140 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d103      	bne.n	8002150 <xQueueGenericSend+0x40>
 8002148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <xQueueGenericSend+0x44>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <xQueueGenericSend+0x46>
 8002154:	2300      	movs	r3, #0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10a      	bne.n	8002170 <xQueueGenericSend+0x60>
	__asm volatile
 800215a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800215e:	f383 8811 	msr	BASEPRI, r3
 8002162:	f3bf 8f6f 	isb	sy
 8002166:	f3bf 8f4f 	dsb	sy
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800216c:	bf00      	nop
 800216e:	e7fe      	b.n	800216e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d103      	bne.n	800217e <xQueueGenericSend+0x6e>
 8002176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <xQueueGenericSend+0x72>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <xQueueGenericSend+0x74>
 8002182:	2300      	movs	r3, #0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10a      	bne.n	800219e <xQueueGenericSend+0x8e>
	__asm volatile
 8002188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218c:	f383 8811 	msr	BASEPRI, r3
 8002190:	f3bf 8f6f 	isb	sy
 8002194:	f3bf 8f4f 	dsb	sy
 8002198:	623b      	str	r3, [r7, #32]
}
 800219a:	bf00      	nop
 800219c:	e7fe      	b.n	800219c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800219e:	f001 f9bd 	bl	800351c <xTaskGetSchedulerState>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d102      	bne.n	80021ae <xQueueGenericSend+0x9e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <xQueueGenericSend+0xa2>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <xQueueGenericSend+0xa4>
 80021b2:	2300      	movs	r3, #0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10a      	bne.n	80021ce <xQueueGenericSend+0xbe>
	__asm volatile
 80021b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021bc:	f383 8811 	msr	BASEPRI, r3
 80021c0:	f3bf 8f6f 	isb	sy
 80021c4:	f3bf 8f4f 	dsb	sy
 80021c8:	61fb      	str	r3, [r7, #28]
}
 80021ca:	bf00      	nop
 80021cc:	e7fe      	b.n	80021cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80021ce:	f002 f811 	bl	80041f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021da:	429a      	cmp	r2, r3
 80021dc:	d302      	bcc.n	80021e4 <xQueueGenericSend+0xd4>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d129      	bne.n	8002238 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	68b9      	ldr	r1, [r7, #8]
 80021e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021ea:	f000 fa0b 	bl	8002604 <prvCopyDataToQueue>
 80021ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d010      	beq.n	800221a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fa:	3324      	adds	r3, #36	; 0x24
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 ffcf 	bl	80031a0 <xTaskRemoveFromEventList>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002208:	4b3f      	ldr	r3, [pc, #252]	; (8002308 <xQueueGenericSend+0x1f8>)
 800220a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	f3bf 8f4f 	dsb	sy
 8002214:	f3bf 8f6f 	isb	sy
 8002218:	e00a      	b.n	8002230 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800221a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002220:	4b39      	ldr	r3, [pc, #228]	; (8002308 <xQueueGenericSend+0x1f8>)
 8002222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002230:	f002 f810 	bl	8004254 <vPortExitCritical>
				return pdPASS;
 8002234:	2301      	movs	r3, #1
 8002236:	e063      	b.n	8002300 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d103      	bne.n	8002246 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800223e:	f002 f809 	bl	8004254 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002242:	2300      	movs	r3, #0
 8002244:	e05c      	b.n	8002300 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002248:	2b00      	cmp	r3, #0
 800224a:	d106      	bne.n	800225a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	4618      	mov	r0, r3
 8002252:	f001 f809 	bl	8003268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002256:	2301      	movs	r3, #1
 8002258:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800225a:	f001 fffb 	bl	8004254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800225e:	f000 fd7b 	bl	8002d58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002262:	f001 ffc7 	bl	80041f4 <vPortEnterCritical>
 8002266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002268:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800226c:	b25b      	sxtb	r3, r3
 800226e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002272:	d103      	bne.n	800227c <xQueueGenericSend+0x16c>
 8002274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002282:	b25b      	sxtb	r3, r3
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d103      	bne.n	8002292 <xQueueGenericSend+0x182>
 800228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002292:	f001 ffdf 	bl	8004254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002296:	1d3a      	adds	r2, r7, #4
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 fff8 	bl	8003294 <xTaskCheckForTimeOut>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d124      	bne.n	80022f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80022aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022ac:	f000 faa2 	bl	80027f4 <prvIsQueueFull>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d018      	beq.n	80022e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	3310      	adds	r3, #16
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4611      	mov	r1, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 ff1e 	bl	8003100 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80022c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022c6:	f000 fa2d 	bl	8002724 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80022ca:	f000 fd53 	bl	8002d74 <xTaskResumeAll>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f47f af7c 	bne.w	80021ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <xQueueGenericSend+0x1f8>)
 80022d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f3bf 8f4f 	dsb	sy
 80022e2:	f3bf 8f6f 	isb	sy
 80022e6:	e772      	b.n	80021ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80022e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022ea:	f000 fa1b 	bl	8002724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022ee:	f000 fd41 	bl	8002d74 <xTaskResumeAll>
 80022f2:	e76c      	b.n	80021ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80022f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022f6:	f000 fa15 	bl	8002724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80022fa:	f000 fd3b 	bl	8002d74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80022fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002300:	4618      	mov	r0, r3
 8002302:	3738      	adds	r7, #56	; 0x38
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	e000ed04 	.word	0xe000ed04

0800230c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b090      	sub	sp, #64	; 0x40
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800231e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10a      	bne.n	800233a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002328:	f383 8811 	msr	BASEPRI, r3
 800232c:	f3bf 8f6f 	isb	sy
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002336:	bf00      	nop
 8002338:	e7fe      	b.n	8002338 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d103      	bne.n	8002348 <xQueueGenericSendFromISR+0x3c>
 8002340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <xQueueGenericSendFromISR+0x40>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <xQueueGenericSendFromISR+0x42>
 800234c:	2300      	movs	r3, #0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10a      	bne.n	8002368 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002356:	f383 8811 	msr	BASEPRI, r3
 800235a:	f3bf 8f6f 	isb	sy
 800235e:	f3bf 8f4f 	dsb	sy
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002364:	bf00      	nop
 8002366:	e7fe      	b.n	8002366 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d103      	bne.n	8002376 <xQueueGenericSendFromISR+0x6a>
 800236e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <xQueueGenericSendFromISR+0x6e>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <xQueueGenericSendFromISR+0x70>
 800237a:	2300      	movs	r3, #0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10a      	bne.n	8002396 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	623b      	str	r3, [r7, #32]
}
 8002392:	bf00      	nop
 8002394:	e7fe      	b.n	8002394 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002396:	f002 f80f 	bl	80043b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800239a:	f3ef 8211 	mrs	r2, BASEPRI
 800239e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	61fa      	str	r2, [r7, #28]
 80023b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80023b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80023b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80023b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	429a      	cmp	r2, r3
 80023c0:	d302      	bcc.n	80023c8 <xQueueGenericSendFromISR+0xbc>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d12f      	bne.n	8002428 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80023c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80023de:	f000 f911 	bl	8002604 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80023e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80023e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ea:	d112      	bne.n	8002412 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d016      	beq.n	8002422 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f6:	3324      	adds	r3, #36	; 0x24
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fed1 	bl	80031a0 <xTaskRemoveFromEventList>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00e      	beq.n	8002422 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	e007      	b.n	8002422 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002412:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002416:	3301      	adds	r3, #1
 8002418:	b2db      	uxtb	r3, r3
 800241a:	b25a      	sxtb	r2, r3
 800241c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002422:	2301      	movs	r3, #1
 8002424:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002426:	e001      	b.n	800242c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002428:	2300      	movs	r3, #0
 800242a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800242c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800242e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002436:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800243a:	4618      	mov	r0, r3
 800243c:	3740      	adds	r7, #64	; 0x40
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08c      	sub	sp, #48	; 0x30
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002450:	2300      	movs	r3, #0
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10a      	bne.n	8002474 <xQueueReceive+0x30>
	__asm volatile
 800245e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002462:	f383 8811 	msr	BASEPRI, r3
 8002466:	f3bf 8f6f 	isb	sy
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	623b      	str	r3, [r7, #32]
}
 8002470:	bf00      	nop
 8002472:	e7fe      	b.n	8002472 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d103      	bne.n	8002482 <xQueueReceive+0x3e>
 800247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <xQueueReceive+0x42>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <xQueueReceive+0x44>
 8002486:	2300      	movs	r3, #0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10a      	bne.n	80024a2 <xQueueReceive+0x5e>
	__asm volatile
 800248c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	61fb      	str	r3, [r7, #28]
}
 800249e:	bf00      	nop
 80024a0:	e7fe      	b.n	80024a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024a2:	f001 f83b 	bl	800351c <xTaskGetSchedulerState>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d102      	bne.n	80024b2 <xQueueReceive+0x6e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <xQueueReceive+0x72>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <xQueueReceive+0x74>
 80024b6:	2300      	movs	r3, #0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10a      	bne.n	80024d2 <xQueueReceive+0x8e>
	__asm volatile
 80024bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c0:	f383 8811 	msr	BASEPRI, r3
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	61bb      	str	r3, [r7, #24]
}
 80024ce:	bf00      	nop
 80024d0:	e7fe      	b.n	80024d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024d2:	f001 fe8f 	bl	80041f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01f      	beq.n	8002522 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024e6:	f000 f8f7 	bl	80026d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	1e5a      	subs	r2, r3, #1
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00f      	beq.n	800251a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fc:	3310      	adds	r3, #16
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fe4e 	bl	80031a0 <xTaskRemoveFromEventList>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d007      	beq.n	800251a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800250a:	4b3d      	ldr	r3, [pc, #244]	; (8002600 <xQueueReceive+0x1bc>)
 800250c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	f3bf 8f4f 	dsb	sy
 8002516:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800251a:	f001 fe9b 	bl	8004254 <vPortExitCritical>
				return pdPASS;
 800251e:	2301      	movs	r3, #1
 8002520:	e069      	b.n	80025f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d103      	bne.n	8002530 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002528:	f001 fe94 	bl	8004254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800252c:	2300      	movs	r3, #0
 800252e:	e062      	b.n	80025f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002536:	f107 0310 	add.w	r3, r7, #16
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fe94 	bl	8003268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002540:	2301      	movs	r3, #1
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002544:	f001 fe86 	bl	8004254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002548:	f000 fc06 	bl	8002d58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800254c:	f001 fe52 	bl	80041f4 <vPortEnterCritical>
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002552:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002556:	b25b      	sxtb	r3, r3
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255c:	d103      	bne.n	8002566 <xQueueReceive+0x122>
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800256c:	b25b      	sxtb	r3, r3
 800256e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002572:	d103      	bne.n	800257c <xQueueReceive+0x138>
 8002574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800257c:	f001 fe6a 	bl	8004254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002580:	1d3a      	adds	r2, r7, #4
 8002582:	f107 0310 	add.w	r3, r7, #16
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fe83 	bl	8003294 <xTaskCheckForTimeOut>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d123      	bne.n	80025dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002596:	f000 f917 	bl	80027c8 <prvIsQueueEmpty>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d017      	beq.n	80025d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a2:	3324      	adds	r3, #36	; 0x24
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fda9 	bl	8003100 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80025ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025b0:	f000 f8b8 	bl	8002724 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80025b4:	f000 fbde 	bl	8002d74 <xTaskResumeAll>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d189      	bne.n	80024d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <xQueueReceive+0x1bc>)
 80025c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	f3bf 8f4f 	dsb	sy
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	e780      	b.n	80024d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80025d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025d2:	f000 f8a7 	bl	8002724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025d6:	f000 fbcd 	bl	8002d74 <xTaskResumeAll>
 80025da:	e77a      	b.n	80024d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80025dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025de:	f000 f8a1 	bl	8002724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025e2:	f000 fbc7 	bl	8002d74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025e8:	f000 f8ee 	bl	80027c8 <prvIsQueueEmpty>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f43f af6f 	beq.w	80024d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80025f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3730      	adds	r7, #48	; 0x30
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	e000ed04 	.word	0xe000ed04

08002604 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002618:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10d      	bne.n	800263e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d14d      	bne.n	80026c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	4618      	mov	r0, r3
 8002630:	f000 ff92 	bl	8003558 <xTaskPriorityDisinherit>
 8002634:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	e043      	b.n	80026c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d119      	bne.n	8002678 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6858      	ldr	r0, [r3, #4]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	461a      	mov	r2, r3
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	f002 f908 	bl	8004864 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	441a      	add	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	429a      	cmp	r2, r3
 800266c:	d32b      	bcc.n	80026c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	e026      	b.n	80026c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	68d8      	ldr	r0, [r3, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	461a      	mov	r2, r3
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	f002 f8ee 	bl	8004864 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	425b      	negs	r3, r3
 8002692:	441a      	add	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d207      	bcs.n	80026b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	425b      	negs	r3, r3
 80026ae:	441a      	add	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d105      	bne.n	80026c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80026ce:	697b      	ldr	r3, [r7, #20]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d018      	beq.n	800271c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	441a      	add	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	429a      	cmp	r2, r3
 8002702:	d303      	bcc.n	800270c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68d9      	ldr	r1, [r3, #12]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	461a      	mov	r2, r3
 8002716:	6838      	ldr	r0, [r7, #0]
 8002718:	f002 f8a4 	bl	8004864 <memcpy>
	}
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800272c:	f001 fd62 	bl	80041f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002736:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002738:	e011      	b.n	800275e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	2b00      	cmp	r3, #0
 8002740:	d012      	beq.n	8002768 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3324      	adds	r3, #36	; 0x24
 8002746:	4618      	mov	r0, r3
 8002748:	f000 fd2a 	bl	80031a0 <xTaskRemoveFromEventList>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002752:	f000 fe01 	bl	8003358 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	3b01      	subs	r3, #1
 800275a:	b2db      	uxtb	r3, r3
 800275c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800275e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002762:	2b00      	cmp	r3, #0
 8002764:	dce9      	bgt.n	800273a <prvUnlockQueue+0x16>
 8002766:	e000      	b.n	800276a <prvUnlockQueue+0x46>
					break;
 8002768:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	22ff      	movs	r2, #255	; 0xff
 800276e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002772:	f001 fd6f 	bl	8004254 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002776:	f001 fd3d 	bl	80041f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002780:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002782:	e011      	b.n	80027a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d012      	beq.n	80027b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3310      	adds	r3, #16
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fd05 	bl	80031a0 <xTaskRemoveFromEventList>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800279c:	f000 fddc 	bl	8003358 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80027a0:	7bbb      	ldrb	r3, [r7, #14]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	dce9      	bgt.n	8002784 <prvUnlockQueue+0x60>
 80027b0:	e000      	b.n	80027b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80027b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	22ff      	movs	r2, #255	; 0xff
 80027b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80027bc:	f001 fd4a 	bl	8004254 <vPortExitCritical>
}
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80027d0:	f001 fd10 	bl	80041f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80027dc:	2301      	movs	r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	e001      	b.n	80027e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80027e6:	f001 fd35 	bl	8004254 <vPortExitCritical>

	return xReturn;
 80027ea:	68fb      	ldr	r3, [r7, #12]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80027fc:	f001 fcfa 	bl	80041f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002808:	429a      	cmp	r2, r3
 800280a:	d102      	bne.n	8002812 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800280c:	2301      	movs	r3, #1
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	e001      	b.n	8002816 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002816:	f001 fd1d 	bl	8004254 <vPortExitCritical>

	return xReturn;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	e014      	b.n	800285e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002834:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <vQueueAddToRegistry+0x50>)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10b      	bne.n	8002858 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002840:	490c      	ldr	r1, [pc, #48]	; (8002874 <vQueueAddToRegistry+0x50>)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800284a:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <vQueueAddToRegistry+0x50>)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4413      	add	r3, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002856:	e006      	b.n	8002866 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3301      	adds	r3, #1
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b07      	cmp	r3, #7
 8002862:	d9e7      	bls.n	8002834 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	200006fc 	.word	0x200006fc

08002878 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002888:	f001 fcb4 	bl	80041f4 <vPortEnterCritical>
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002892:	b25b      	sxtb	r3, r3
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002898:	d103      	bne.n	80028a2 <vQueueWaitForMessageRestricted+0x2a>
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028a8:	b25b      	sxtb	r3, r3
 80028aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ae:	d103      	bne.n	80028b8 <vQueueWaitForMessageRestricted+0x40>
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028b8:	f001 fccc 	bl	8004254 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d106      	bne.n	80028d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	3324      	adds	r3, #36	; 0x24
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fc3b 	bl	8003148 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80028d2:	6978      	ldr	r0, [r7, #20]
 80028d4:	f7ff ff26 	bl	8002724 <prvUnlockQueue>
	}
 80028d8:	bf00      	nop
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08e      	sub	sp, #56	; 0x38
 80028e4:	af04      	add	r7, sp, #16
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80028ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10a      	bne.n	800290a <xTaskCreateStatic+0x2a>
	__asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	623b      	str	r3, [r7, #32]
}
 8002906:	bf00      	nop
 8002908:	e7fe      	b.n	8002908 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800290a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10a      	bne.n	8002926 <xTaskCreateStatic+0x46>
	__asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	61fb      	str	r3, [r7, #28]
}
 8002922:	bf00      	nop
 8002924:	e7fe      	b.n	8002924 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002926:	235c      	movs	r3, #92	; 0x5c
 8002928:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b5c      	cmp	r3, #92	; 0x5c
 800292e:	d00a      	beq.n	8002946 <xTaskCreateStatic+0x66>
	__asm volatile
 8002930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002934:	f383 8811 	msr	BASEPRI, r3
 8002938:	f3bf 8f6f 	isb	sy
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	61bb      	str	r3, [r7, #24]
}
 8002942:	bf00      	nop
 8002944:	e7fe      	b.n	8002944 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002946:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294a:	2b00      	cmp	r3, #0
 800294c:	d01e      	beq.n	800298c <xTaskCreateStatic+0xac>
 800294e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01b      	beq.n	800298c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800295c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	2202      	movs	r2, #2
 8002962:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002966:	2300      	movs	r3, #0
 8002968:	9303      	str	r3, [sp, #12]
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	9302      	str	r3, [sp, #8]
 800296e:	f107 0314 	add.w	r3, r7, #20
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f850 	bl	8002a24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002984:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002986:	f000 f8dd 	bl	8002b44 <prvAddNewTaskToReadyList>
 800298a:	e001      	b.n	8002990 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002990:	697b      	ldr	r3, [r7, #20]
	}
 8002992:	4618      	mov	r0, r3
 8002994:	3728      	adds	r7, #40	; 0x28
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800299a:	b580      	push	{r7, lr}
 800299c:	b08c      	sub	sp, #48	; 0x30
 800299e:	af04      	add	r7, sp, #16
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	603b      	str	r3, [r7, #0]
 80029a6:	4613      	mov	r3, r2
 80029a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f001 fd42 	bl	8004438 <pvPortMalloc>
 80029b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00e      	beq.n	80029da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029bc:	205c      	movs	r0, #92	; 0x5c
 80029be:	f001 fd3b 	bl	8004438 <pvPortMalloc>
 80029c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
 80029d0:	e005      	b.n	80029de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80029d2:	6978      	ldr	r0, [r7, #20]
 80029d4:	f001 fdfc 	bl	80045d0 <vPortFree>
 80029d8:	e001      	b.n	80029de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d017      	beq.n	8002a14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029ec:	88fa      	ldrh	r2, [r7, #6]
 80029ee:	2300      	movs	r3, #0
 80029f0:	9303      	str	r3, [sp, #12]
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	9302      	str	r3, [sp, #8]
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f80e 	bl	8002a24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a08:	69f8      	ldr	r0, [r7, #28]
 8002a0a:	f000 f89b 	bl	8002b44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	e002      	b.n	8002a1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a14:	f04f 33ff 	mov.w	r3, #4294967295
 8002a18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a1a:	69bb      	ldr	r3, [r7, #24]
	}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	21a5      	movs	r1, #165	; 0xa5
 8002a3e:	f001 fee5 	bl	800480c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f023 0307 	bic.w	r3, r3, #7
 8002a5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <prvInitialiseNewTask+0x58>
	__asm volatile
 8002a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	617b      	str	r3, [r7, #20]
}
 8002a78:	bf00      	nop
 8002a7a:	e7fe      	b.n	8002a7a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d01f      	beq.n	8002ac2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	e012      	b.n	8002aae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	7819      	ldrb	r1, [r3, #0]
 8002a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	4413      	add	r3, r2
 8002a96:	3334      	adds	r3, #52	; 0x34
 8002a98:	460a      	mov	r2, r1
 8002a9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d006      	beq.n	8002ab6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	61fb      	str	r3, [r7, #28]
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	2b0f      	cmp	r3, #15
 8002ab2:	d9e9      	bls.n	8002a88 <prvInitialiseNewTask+0x64>
 8002ab4:	e000      	b.n	8002ab8 <prvInitialiseNewTask+0x94>
			{
				break;
 8002ab6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ac0:	e003      	b.n	8002aca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002acc:	2b37      	cmp	r3, #55	; 0x37
 8002ace:	d901      	bls.n	8002ad4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ad0:	2337      	movs	r3, #55	; 0x37
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ad8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ade:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae8:	3304      	adds	r3, #4
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff f978 	bl	8001de0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	3318      	adds	r3, #24
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff f973 	bl	8001de0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002afe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	2200      	movs	r2, #0
 8002b14:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	68f9      	ldr	r1, [r7, #12]
 8002b22:	69b8      	ldr	r0, [r7, #24]
 8002b24:	f001 fa3a 	bl	8003f9c <pxPortInitialiseStack>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b3a:	bf00      	nop
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b4c:	f001 fb52 	bl	80041f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b50:	4b2d      	ldr	r3, [pc, #180]	; (8002c08 <prvAddNewTaskToReadyList+0xc4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	3301      	adds	r3, #1
 8002b56:	4a2c      	ldr	r2, [pc, #176]	; (8002c08 <prvAddNewTaskToReadyList+0xc4>)
 8002b58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b5a:	4b2c      	ldr	r3, [pc, #176]	; (8002c0c <prvAddNewTaskToReadyList+0xc8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d109      	bne.n	8002b76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b62:	4a2a      	ldr	r2, [pc, #168]	; (8002c0c <prvAddNewTaskToReadyList+0xc8>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b68:	4b27      	ldr	r3, [pc, #156]	; (8002c08 <prvAddNewTaskToReadyList+0xc4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d110      	bne.n	8002b92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b70:	f000 fc16 	bl	80033a0 <prvInitialiseTaskLists>
 8002b74:	e00d      	b.n	8002b92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b76:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <prvAddNewTaskToReadyList+0xcc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b7e:	4b23      	ldr	r3, [pc, #140]	; (8002c0c <prvAddNewTaskToReadyList+0xc8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d802      	bhi.n	8002b92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b8c:	4a1f      	ldr	r2, [pc, #124]	; (8002c0c <prvAddNewTaskToReadyList+0xc8>)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b92:	4b20      	ldr	r3, [pc, #128]	; (8002c14 <prvAddNewTaskToReadyList+0xd0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3301      	adds	r3, #1
 8002b98:	4a1e      	ldr	r2, [pc, #120]	; (8002c14 <prvAddNewTaskToReadyList+0xd0>)
 8002b9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <prvAddNewTaskToReadyList+0xd0>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <prvAddNewTaskToReadyList+0xd4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d903      	bls.n	8002bb8 <prvAddNewTaskToReadyList+0x74>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	4a18      	ldr	r2, [pc, #96]	; (8002c18 <prvAddNewTaskToReadyList+0xd4>)
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <prvAddNewTaskToReadyList+0xd8>)
 8002bc6:	441a      	add	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	f7ff f913 	bl	8001dfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002bd4:	f001 fb3e 	bl	8004254 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002bd8:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <prvAddNewTaskToReadyList+0xcc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00e      	beq.n	8002bfe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <prvAddNewTaskToReadyList+0xc8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d207      	bcs.n	8002bfe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002bee:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <prvAddNewTaskToReadyList+0xdc>)
 8002bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000c10 	.word	0x20000c10
 8002c0c:	2000073c 	.word	0x2000073c
 8002c10:	20000c1c 	.word	0x20000c1c
 8002c14:	20000c2c 	.word	0x20000c2c
 8002c18:	20000c18 	.word	0x20000c18
 8002c1c:	20000740 	.word	0x20000740
 8002c20:	e000ed04 	.word	0xe000ed04

08002c24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d017      	beq.n	8002c66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c36:	4b13      	ldr	r3, [pc, #76]	; (8002c84 <vTaskDelay+0x60>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <vTaskDelay+0x30>
	__asm volatile
 8002c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c42:	f383 8811 	msr	BASEPRI, r3
 8002c46:	f3bf 8f6f 	isb	sy
 8002c4a:	f3bf 8f4f 	dsb	sy
 8002c4e:	60bb      	str	r3, [r7, #8]
}
 8002c50:	bf00      	nop
 8002c52:	e7fe      	b.n	8002c52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c54:	f000 f880 	bl	8002d58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c58:	2100      	movs	r1, #0
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fdfc 	bl	8003858 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c60:	f000 f888 	bl	8002d74 <xTaskResumeAll>
 8002c64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d107      	bne.n	8002c7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <vTaskDelay+0x64>)
 8002c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c7c:	bf00      	nop
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	20000c38 	.word	0x20000c38
 8002c88:	e000ed04 	.word	0xe000ed04

08002c8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	; 0x28
 8002c90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c9a:	463a      	mov	r2, r7
 8002c9c:	1d39      	adds	r1, r7, #4
 8002c9e:	f107 0308 	add.w	r3, r7, #8
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff f848 	bl	8001d38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ca8:	6839      	ldr	r1, [r7, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	9202      	str	r2, [sp, #8]
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	460a      	mov	r2, r1
 8002cba:	4921      	ldr	r1, [pc, #132]	; (8002d40 <vTaskStartScheduler+0xb4>)
 8002cbc:	4821      	ldr	r0, [pc, #132]	; (8002d44 <vTaskStartScheduler+0xb8>)
 8002cbe:	f7ff fe0f 	bl	80028e0 <xTaskCreateStatic>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4a20      	ldr	r2, [pc, #128]	; (8002d48 <vTaskStartScheduler+0xbc>)
 8002cc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <vTaskStartScheduler+0xbc>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	e001      	b.n	8002cda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d102      	bne.n	8002ce6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002ce0:	f000 fe0e 	bl	8003900 <xTimerCreateTimerTask>
 8002ce4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d116      	bne.n	8002d1a <vTaskStartScheduler+0x8e>
	__asm volatile
 8002cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	613b      	str	r3, [r7, #16]
}
 8002cfe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d00:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <vTaskStartScheduler+0xc0>)
 8002d02:	f04f 32ff 	mov.w	r2, #4294967295
 8002d06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <vTaskStartScheduler+0xc4>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d0e:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <vTaskStartScheduler+0xc8>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d14:	f001 f9cc 	bl	80040b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d18:	e00e      	b.n	8002d38 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d20:	d10a      	bne.n	8002d38 <vTaskStartScheduler+0xac>
	__asm volatile
 8002d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d26:	f383 8811 	msr	BASEPRI, r3
 8002d2a:	f3bf 8f6f 	isb	sy
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	60fb      	str	r3, [r7, #12]
}
 8002d34:	bf00      	nop
 8002d36:	e7fe      	b.n	8002d36 <vTaskStartScheduler+0xaa>
}
 8002d38:	bf00      	nop
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	080048bc 	.word	0x080048bc
 8002d44:	08003371 	.word	0x08003371
 8002d48:	20000c34 	.word	0x20000c34
 8002d4c:	20000c30 	.word	0x20000c30
 8002d50:	20000c1c 	.word	0x20000c1c
 8002d54:	20000c14 	.word	0x20000c14

08002d58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002d5c:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <vTaskSuspendAll+0x18>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	4a03      	ldr	r2, [pc, #12]	; (8002d70 <vTaskSuspendAll+0x18>)
 8002d64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002d66:	bf00      	nop
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	20000c38 	.word	0x20000c38

08002d74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d82:	4b42      	ldr	r3, [pc, #264]	; (8002e8c <xTaskResumeAll+0x118>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10a      	bne.n	8002da0 <xTaskResumeAll+0x2c>
	__asm volatile
 8002d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	603b      	str	r3, [r7, #0]
}
 8002d9c:	bf00      	nop
 8002d9e:	e7fe      	b.n	8002d9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002da0:	f001 fa28 	bl	80041f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002da4:	4b39      	ldr	r3, [pc, #228]	; (8002e8c <xTaskResumeAll+0x118>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	4a38      	ldr	r2, [pc, #224]	; (8002e8c <xTaskResumeAll+0x118>)
 8002dac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dae:	4b37      	ldr	r3, [pc, #220]	; (8002e8c <xTaskResumeAll+0x118>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d162      	bne.n	8002e7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002db6:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <xTaskResumeAll+0x11c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d05e      	beq.n	8002e7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dbe:	e02f      	b.n	8002e20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dc0:	4b34      	ldr	r3, [pc, #208]	; (8002e94 <xTaskResumeAll+0x120>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	3318      	adds	r3, #24
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff f871 	bl	8001eb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff f86c 	bl	8001eb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de0:	4b2d      	ldr	r3, [pc, #180]	; (8002e98 <xTaskResumeAll+0x124>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d903      	bls.n	8002df0 <xTaskResumeAll+0x7c>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	4a2a      	ldr	r2, [pc, #168]	; (8002e98 <xTaskResumeAll+0x124>)
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4a27      	ldr	r2, [pc, #156]	; (8002e9c <xTaskResumeAll+0x128>)
 8002dfe:	441a      	add	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3304      	adds	r3, #4
 8002e04:	4619      	mov	r1, r3
 8002e06:	4610      	mov	r0, r2
 8002e08:	f7fe fff7 	bl	8001dfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e10:	4b23      	ldr	r3, [pc, #140]	; (8002ea0 <xTaskResumeAll+0x12c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d302      	bcc.n	8002e20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002e1a:	4b22      	ldr	r3, [pc, #136]	; (8002ea4 <xTaskResumeAll+0x130>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e20:	4b1c      	ldr	r3, [pc, #112]	; (8002e94 <xTaskResumeAll+0x120>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1cb      	bne.n	8002dc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e2e:	f000 fb55 	bl	80034dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e32:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <xTaskResumeAll+0x134>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d010      	beq.n	8002e60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e3e:	f000 f847 	bl	8002ed0 <xTaskIncrementTick>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002e48:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <xTaskResumeAll+0x130>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f1      	bne.n	8002e3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002e5a:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <xTaskResumeAll+0x134>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e60:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <xTaskResumeAll+0x130>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d009      	beq.n	8002e7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <xTaskResumeAll+0x138>)
 8002e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e7c:	f001 f9ea 	bl	8004254 <vPortExitCritical>

	return xAlreadyYielded;
 8002e80:	68bb      	ldr	r3, [r7, #8]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000c38 	.word	0x20000c38
 8002e90:	20000c10 	.word	0x20000c10
 8002e94:	20000bd0 	.word	0x20000bd0
 8002e98:	20000c18 	.word	0x20000c18
 8002e9c:	20000740 	.word	0x20000740
 8002ea0:	2000073c 	.word	0x2000073c
 8002ea4:	20000c24 	.word	0x20000c24
 8002ea8:	20000c20 	.word	0x20000c20
 8002eac:	e000ed04 	.word	0xe000ed04

08002eb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002eb6:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <xTaskGetTickCount+0x1c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002ebc:	687b      	ldr	r3, [r7, #4]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000c14 	.word	0x20000c14

08002ed0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eda:	4b4f      	ldr	r3, [pc, #316]	; (8003018 <xTaskIncrementTick+0x148>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f040 808f 	bne.w	8003002 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ee4:	4b4d      	ldr	r3, [pc, #308]	; (800301c <xTaskIncrementTick+0x14c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002eec:	4a4b      	ldr	r2, [pc, #300]	; (800301c <xTaskIncrementTick+0x14c>)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d120      	bne.n	8002f3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ef8:	4b49      	ldr	r3, [pc, #292]	; (8003020 <xTaskIncrementTick+0x150>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <xTaskIncrementTick+0x48>
	__asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	603b      	str	r3, [r7, #0]
}
 8002f14:	bf00      	nop
 8002f16:	e7fe      	b.n	8002f16 <xTaskIncrementTick+0x46>
 8002f18:	4b41      	ldr	r3, [pc, #260]	; (8003020 <xTaskIncrementTick+0x150>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	4b41      	ldr	r3, [pc, #260]	; (8003024 <xTaskIncrementTick+0x154>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a3f      	ldr	r2, [pc, #252]	; (8003020 <xTaskIncrementTick+0x150>)
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	4a3f      	ldr	r2, [pc, #252]	; (8003024 <xTaskIncrementTick+0x154>)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	4b3e      	ldr	r3, [pc, #248]	; (8003028 <xTaskIncrementTick+0x158>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3301      	adds	r3, #1
 8002f32:	4a3d      	ldr	r2, [pc, #244]	; (8003028 <xTaskIncrementTick+0x158>)
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	f000 fad1 	bl	80034dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f3a:	4b3c      	ldr	r3, [pc, #240]	; (800302c <xTaskIncrementTick+0x15c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d349      	bcc.n	8002fd8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f44:	4b36      	ldr	r3, [pc, #216]	; (8003020 <xTaskIncrementTick+0x150>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d104      	bne.n	8002f58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f4e:	4b37      	ldr	r3, [pc, #220]	; (800302c <xTaskIncrementTick+0x15c>)
 8002f50:	f04f 32ff 	mov.w	r2, #4294967295
 8002f54:	601a      	str	r2, [r3, #0]
					break;
 8002f56:	e03f      	b.n	8002fd8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f58:	4b31      	ldr	r3, [pc, #196]	; (8003020 <xTaskIncrementTick+0x150>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d203      	bcs.n	8002f78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f70:	4a2e      	ldr	r2, [pc, #184]	; (800302c <xTaskIncrementTick+0x15c>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f76:	e02f      	b.n	8002fd8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fe ff99 	bl	8001eb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d004      	beq.n	8002f94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3318      	adds	r3, #24
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe ff90 	bl	8001eb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f98:	4b25      	ldr	r3, [pc, #148]	; (8003030 <xTaskIncrementTick+0x160>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d903      	bls.n	8002fa8 <xTaskIncrementTick+0xd8>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	4a22      	ldr	r2, [pc, #136]	; (8003030 <xTaskIncrementTick+0x160>)
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4a1f      	ldr	r2, [pc, #124]	; (8003034 <xTaskIncrementTick+0x164>)
 8002fb6:	441a      	add	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	3304      	adds	r3, #4
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	f7fe ff1b 	bl	8001dfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc8:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <xTaskIncrementTick+0x168>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d3b8      	bcc.n	8002f44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fd6:	e7b5      	b.n	8002f44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fd8:	4b17      	ldr	r3, [pc, #92]	; (8003038 <xTaskIncrementTick+0x168>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fde:	4915      	ldr	r1, [pc, #84]	; (8003034 <xTaskIncrementTick+0x164>)
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d901      	bls.n	8002ff4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <xTaskIncrementTick+0x16c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	e004      	b.n	800300c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003002:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <xTaskIncrementTick+0x170>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3301      	adds	r3, #1
 8003008:	4a0d      	ldr	r2, [pc, #52]	; (8003040 <xTaskIncrementTick+0x170>)
 800300a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800300c:	697b      	ldr	r3, [r7, #20]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000c38 	.word	0x20000c38
 800301c:	20000c14 	.word	0x20000c14
 8003020:	20000bc8 	.word	0x20000bc8
 8003024:	20000bcc 	.word	0x20000bcc
 8003028:	20000c28 	.word	0x20000c28
 800302c:	20000c30 	.word	0x20000c30
 8003030:	20000c18 	.word	0x20000c18
 8003034:	20000740 	.word	0x20000740
 8003038:	2000073c 	.word	0x2000073c
 800303c:	20000c24 	.word	0x20000c24
 8003040:	20000c20 	.word	0x20000c20

08003044 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800304a:	4b28      	ldr	r3, [pc, #160]	; (80030ec <vTaskSwitchContext+0xa8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003052:	4b27      	ldr	r3, [pc, #156]	; (80030f0 <vTaskSwitchContext+0xac>)
 8003054:	2201      	movs	r2, #1
 8003056:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003058:	e041      	b.n	80030de <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800305a:	4b25      	ldr	r3, [pc, #148]	; (80030f0 <vTaskSwitchContext+0xac>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003060:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <vTaskSwitchContext+0xb0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	e010      	b.n	800308a <vTaskSwitchContext+0x46>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10a      	bne.n	8003084 <vTaskSwitchContext+0x40>
	__asm volatile
 800306e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	607b      	str	r3, [r7, #4]
}
 8003080:	bf00      	nop
 8003082:	e7fe      	b.n	8003082 <vTaskSwitchContext+0x3e>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3b01      	subs	r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	491b      	ldr	r1, [pc, #108]	; (80030f8 <vTaskSwitchContext+0xb4>)
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0e4      	beq.n	8003068 <vTaskSwitchContext+0x24>
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4a13      	ldr	r2, [pc, #76]	; (80030f8 <vTaskSwitchContext+0xb4>)
 80030aa:	4413      	add	r3, r2
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	605a      	str	r2, [r3, #4]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	3308      	adds	r3, #8
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d104      	bne.n	80030ce <vTaskSwitchContext+0x8a>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	4a09      	ldr	r2, [pc, #36]	; (80030fc <vTaskSwitchContext+0xb8>)
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	4a06      	ldr	r2, [pc, #24]	; (80030f4 <vTaskSwitchContext+0xb0>)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6013      	str	r3, [r2, #0]
}
 80030de:	bf00      	nop
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	20000c38 	.word	0x20000c38
 80030f0:	20000c24 	.word	0x20000c24
 80030f4:	20000c18 	.word	0x20000c18
 80030f8:	20000740 	.word	0x20000740
 80030fc:	2000073c 	.word	0x2000073c

08003100 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	60fb      	str	r3, [r7, #12]
}
 8003122:	bf00      	nop
 8003124:	e7fe      	b.n	8003124 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003126:	4b07      	ldr	r3, [pc, #28]	; (8003144 <vTaskPlaceOnEventList+0x44>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3318      	adds	r3, #24
 800312c:	4619      	mov	r1, r3
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fe fe87 	bl	8001e42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003134:	2101      	movs	r1, #1
 8003136:	6838      	ldr	r0, [r7, #0]
 8003138:	f000 fb8e 	bl	8003858 <prvAddCurrentTaskToDelayedList>
}
 800313c:	bf00      	nop
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	2000073c 	.word	0x2000073c

08003148 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10a      	bne.n	8003170 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	617b      	str	r3, [r7, #20]
}
 800316c:	bf00      	nop
 800316e:	e7fe      	b.n	800316e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <vTaskPlaceOnEventListRestricted+0x54>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3318      	adds	r3, #24
 8003176:	4619      	mov	r1, r3
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f7fe fe3e 	bl	8001dfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003184:	f04f 33ff 	mov.w	r3, #4294967295
 8003188:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	68b8      	ldr	r0, [r7, #8]
 800318e:	f000 fb63 	bl	8003858 <prvAddCurrentTaskToDelayedList>
	}
 8003192:	bf00      	nop
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	2000073c 	.word	0x2000073c

080031a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10a      	bne.n	80031cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80031b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ba:	f383 8811 	msr	BASEPRI, r3
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	60fb      	str	r3, [r7, #12]
}
 80031c8:	bf00      	nop
 80031ca:	e7fe      	b.n	80031ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	3318      	adds	r3, #24
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe fe6f 	bl	8001eb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031d6:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <xTaskRemoveFromEventList+0xb0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d11d      	bne.n	800321a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	3304      	adds	r3, #4
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe fe66 	bl	8001eb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ec:	4b19      	ldr	r3, [pc, #100]	; (8003254 <xTaskRemoveFromEventList+0xb4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d903      	bls.n	80031fc <xTaskRemoveFromEventList+0x5c>
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	4a16      	ldr	r2, [pc, #88]	; (8003254 <xTaskRemoveFromEventList+0xb4>)
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4a13      	ldr	r2, [pc, #76]	; (8003258 <xTaskRemoveFromEventList+0xb8>)
 800320a:	441a      	add	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	3304      	adds	r3, #4
 8003210:	4619      	mov	r1, r3
 8003212:	4610      	mov	r0, r2
 8003214:	f7fe fdf1 	bl	8001dfa <vListInsertEnd>
 8003218:	e005      	b.n	8003226 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	3318      	adds	r3, #24
 800321e:	4619      	mov	r1, r3
 8003220:	480e      	ldr	r0, [pc, #56]	; (800325c <xTaskRemoveFromEventList+0xbc>)
 8003222:	f7fe fdea 	bl	8001dfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322a:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <xTaskRemoveFromEventList+0xc0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	429a      	cmp	r2, r3
 8003232:	d905      	bls.n	8003240 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003234:	2301      	movs	r3, #1
 8003236:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003238:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <xTaskRemoveFromEventList+0xc4>)
 800323a:	2201      	movs	r2, #1
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	e001      	b.n	8003244 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003244:	697b      	ldr	r3, [r7, #20]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20000c38 	.word	0x20000c38
 8003254:	20000c18 	.word	0x20000c18
 8003258:	20000740 	.word	0x20000740
 800325c:	20000bd0 	.word	0x20000bd0
 8003260:	2000073c 	.word	0x2000073c
 8003264:	20000c24 	.word	0x20000c24

08003268 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <vTaskInternalSetTimeOutState+0x24>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <vTaskInternalSetTimeOutState+0x28>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	605a      	str	r2, [r3, #4]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	20000c28 	.word	0x20000c28
 8003290:	20000c14 	.word	0x20000c14

08003294 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10a      	bne.n	80032ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	613b      	str	r3, [r7, #16]
}
 80032b6:	bf00      	nop
 80032b8:	e7fe      	b.n	80032b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10a      	bne.n	80032d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	60fb      	str	r3, [r7, #12]
}
 80032d2:	bf00      	nop
 80032d4:	e7fe      	b.n	80032d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80032d6:	f000 ff8d 	bl	80041f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80032da:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <xTaskCheckForTimeOut+0xbc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f2:	d102      	bne.n	80032fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61fb      	str	r3, [r7, #28]
 80032f8:	e023      	b.n	8003342 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4b15      	ldr	r3, [pc, #84]	; (8003354 <xTaskCheckForTimeOut+0xc0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d007      	beq.n	8003316 <xTaskCheckForTimeOut+0x82>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	429a      	cmp	r2, r3
 800330e:	d302      	bcc.n	8003316 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003310:	2301      	movs	r3, #1
 8003312:	61fb      	str	r3, [r7, #28]
 8003314:	e015      	b.n	8003342 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	429a      	cmp	r2, r3
 800331e:	d20b      	bcs.n	8003338 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	1ad2      	subs	r2, r2, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ff9b 	bl	8003268 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	e004      	b.n	8003342 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800333e:	2301      	movs	r3, #1
 8003340:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003342:	f000 ff87 	bl	8004254 <vPortExitCritical>

	return xReturn;
 8003346:	69fb      	ldr	r3, [r7, #28]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3720      	adds	r7, #32
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000c14 	.word	0x20000c14
 8003354:	20000c28 	.word	0x20000c28

08003358 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800335c:	4b03      	ldr	r3, [pc, #12]	; (800336c <vTaskMissedYield+0x14>)
 800335e:	2201      	movs	r2, #1
 8003360:	601a      	str	r2, [r3, #0]
}
 8003362:	bf00      	nop
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	20000c24 	.word	0x20000c24

08003370 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003378:	f000 f852 	bl	8003420 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <prvIdleTask+0x28>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d9f9      	bls.n	8003378 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <prvIdleTask+0x2c>)
 8003386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003394:	e7f0      	b.n	8003378 <prvIdleTask+0x8>
 8003396:	bf00      	nop
 8003398:	20000740 	.word	0x20000740
 800339c:	e000ed04 	.word	0xe000ed04

080033a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033a6:	2300      	movs	r3, #0
 80033a8:	607b      	str	r3, [r7, #4]
 80033aa:	e00c      	b.n	80033c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <prvInitialiseTaskLists+0x60>)
 80033b8:	4413      	add	r3, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe fcf0 	bl	8001da0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3301      	adds	r3, #1
 80033c4:	607b      	str	r3, [r7, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b37      	cmp	r3, #55	; 0x37
 80033ca:	d9ef      	bls.n	80033ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80033cc:	480d      	ldr	r0, [pc, #52]	; (8003404 <prvInitialiseTaskLists+0x64>)
 80033ce:	f7fe fce7 	bl	8001da0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80033d2:	480d      	ldr	r0, [pc, #52]	; (8003408 <prvInitialiseTaskLists+0x68>)
 80033d4:	f7fe fce4 	bl	8001da0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80033d8:	480c      	ldr	r0, [pc, #48]	; (800340c <prvInitialiseTaskLists+0x6c>)
 80033da:	f7fe fce1 	bl	8001da0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80033de:	480c      	ldr	r0, [pc, #48]	; (8003410 <prvInitialiseTaskLists+0x70>)
 80033e0:	f7fe fcde 	bl	8001da0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80033e4:	480b      	ldr	r0, [pc, #44]	; (8003414 <prvInitialiseTaskLists+0x74>)
 80033e6:	f7fe fcdb 	bl	8001da0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <prvInitialiseTaskLists+0x78>)
 80033ec:	4a05      	ldr	r2, [pc, #20]	; (8003404 <prvInitialiseTaskLists+0x64>)
 80033ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033f0:	4b0a      	ldr	r3, [pc, #40]	; (800341c <prvInitialiseTaskLists+0x7c>)
 80033f2:	4a05      	ldr	r2, [pc, #20]	; (8003408 <prvInitialiseTaskLists+0x68>)
 80033f4:	601a      	str	r2, [r3, #0]
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000740 	.word	0x20000740
 8003404:	20000ba0 	.word	0x20000ba0
 8003408:	20000bb4 	.word	0x20000bb4
 800340c:	20000bd0 	.word	0x20000bd0
 8003410:	20000be4 	.word	0x20000be4
 8003414:	20000bfc 	.word	0x20000bfc
 8003418:	20000bc8 	.word	0x20000bc8
 800341c:	20000bcc 	.word	0x20000bcc

08003420 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003426:	e019      	b.n	800345c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003428:	f000 fee4 	bl	80041f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800342c:	4b10      	ldr	r3, [pc, #64]	; (8003470 <prvCheckTasksWaitingTermination+0x50>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3304      	adds	r3, #4
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe fd3b 	bl	8001eb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <prvCheckTasksWaitingTermination+0x54>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3b01      	subs	r3, #1
 8003444:	4a0b      	ldr	r2, [pc, #44]	; (8003474 <prvCheckTasksWaitingTermination+0x54>)
 8003446:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003448:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <prvCheckTasksWaitingTermination+0x58>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3b01      	subs	r3, #1
 800344e:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <prvCheckTasksWaitingTermination+0x58>)
 8003450:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003452:	f000 feff 	bl	8004254 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f810 	bl	800347c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <prvCheckTasksWaitingTermination+0x58>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e1      	bne.n	8003428 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000be4 	.word	0x20000be4
 8003474:	20000c10 	.word	0x20000c10
 8003478:	20000bf8 	.word	0x20000bf8

0800347c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800348a:	2b00      	cmp	r3, #0
 800348c:	d108      	bne.n	80034a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	4618      	mov	r0, r3
 8003494:	f001 f89c 	bl	80045d0 <vPortFree>
				vPortFree( pxTCB );
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f001 f899 	bl	80045d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800349e:	e018      	b.n	80034d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d103      	bne.n	80034b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f001 f890 	bl	80045d0 <vPortFree>
	}
 80034b0:	e00f      	b.n	80034d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d00a      	beq.n	80034d2 <prvDeleteTCB+0x56>
	__asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	60fb      	str	r3, [r7, #12]
}
 80034ce:	bf00      	nop
 80034d0:	e7fe      	b.n	80034d0 <prvDeleteTCB+0x54>
	}
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034e2:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <prvResetNextTaskUnblockTime+0x38>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d104      	bne.n	80034f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80034ec:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <prvResetNextTaskUnblockTime+0x3c>)
 80034ee:	f04f 32ff 	mov.w	r2, #4294967295
 80034f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80034f4:	e008      	b.n	8003508 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <prvResetNextTaskUnblockTime+0x38>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4a04      	ldr	r2, [pc, #16]	; (8003518 <prvResetNextTaskUnblockTime+0x3c>)
 8003506:	6013      	str	r3, [r2, #0]
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	20000bc8 	.word	0x20000bc8
 8003518:	20000c30 	.word	0x20000c30

0800351c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <xTaskGetSchedulerState+0x34>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d102      	bne.n	8003530 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800352a:	2301      	movs	r3, #1
 800352c:	607b      	str	r3, [r7, #4]
 800352e:	e008      	b.n	8003542 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003530:	4b08      	ldr	r3, [pc, #32]	; (8003554 <xTaskGetSchedulerState+0x38>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d102      	bne.n	800353e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003538:	2302      	movs	r3, #2
 800353a:	607b      	str	r3, [r7, #4]
 800353c:	e001      	b.n	8003542 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800353e:	2300      	movs	r3, #0
 8003540:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003542:	687b      	ldr	r3, [r7, #4]
	}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	20000c1c 	.word	0x20000c1c
 8003554:	20000c38 	.word	0x20000c38

08003558 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d056      	beq.n	800361c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800356e:	4b2e      	ldr	r3, [pc, #184]	; (8003628 <xTaskPriorityDisinherit+0xd0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	429a      	cmp	r2, r3
 8003576:	d00a      	beq.n	800358e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	60fb      	str	r3, [r7, #12]
}
 800358a:	bf00      	nop
 800358c:	e7fe      	b.n	800358c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10a      	bne.n	80035ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	60bb      	str	r3, [r7, #8]
}
 80035a8:	bf00      	nop
 80035aa:	e7fe      	b.n	80035aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b0:	1e5a      	subs	r2, r3, #1
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035be:	429a      	cmp	r2, r3
 80035c0:	d02c      	beq.n	800361c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d128      	bne.n	800361c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	3304      	adds	r3, #4
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe fc70 	bl	8001eb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ec:	4b0f      	ldr	r3, [pc, #60]	; (800362c <xTaskPriorityDisinherit+0xd4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d903      	bls.n	80035fc <xTaskPriorityDisinherit+0xa4>
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	4a0c      	ldr	r2, [pc, #48]	; (800362c <xTaskPriorityDisinherit+0xd4>)
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4a09      	ldr	r2, [pc, #36]	; (8003630 <xTaskPriorityDisinherit+0xd8>)
 800360a:	441a      	add	r2, r3
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	3304      	adds	r3, #4
 8003610:	4619      	mov	r1, r3
 8003612:	4610      	mov	r0, r2
 8003614:	f7fe fbf1 	bl	8001dfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003618:	2301      	movs	r3, #1
 800361a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800361c:	697b      	ldr	r3, [r7, #20]
	}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	2000073c 	.word	0x2000073c
 800362c:	20000c18 	.word	0x20000c18
 8003630:	20000740 	.word	0x20000740

08003634 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8003642:	f000 fdd7 	bl	80041f4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003646:	4b26      	ldr	r3, [pc, #152]	; (80036e0 <xTaskNotifyWait+0xac>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d01a      	beq.n	800368a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8003654:	4b22      	ldr	r3, [pc, #136]	; (80036e0 <xTaskNotifyWait+0xac>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	43d2      	mvns	r2, r2
 800365e:	400a      	ands	r2, r1
 8003660:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8003662:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <xTaskNotifyWait+0xac>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00b      	beq.n	800368a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003672:	2101      	movs	r1, #1
 8003674:	6838      	ldr	r0, [r7, #0]
 8003676:	f000 f8ef 	bl	8003858 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800367a:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <xTaskNotifyWait+0xb0>)
 800367c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800368a:	f000 fde3 	bl	8004254 <vPortExitCritical>

		taskENTER_CRITICAL();
 800368e:	f000 fdb1 	bl	80041f4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d004      	beq.n	80036a2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <xTaskNotifyWait+0xac>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80036a2:	4b0f      	ldr	r3, [pc, #60]	; (80036e0 <xTaskNotifyWait+0xac>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d002      	beq.n	80036b6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	e008      	b.n	80036c8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80036b6:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <xTaskNotifyWait+0xac>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	43d2      	mvns	r2, r2
 80036c0:	400a      	ands	r2, r1
 80036c2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80036c4:	2301      	movs	r3, #1
 80036c6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <xTaskNotifyWait+0xac>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80036d2:	f000 fdbf 	bl	8004254 <vPortExitCritical>

		return xReturn;
 80036d6:	697b      	ldr	r3, [r7, #20]
	}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	2000073c 	.word	0x2000073c
 80036e4:	e000ed04 	.word	0xe000ed04

080036e8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08a      	sub	sp, #40	; 0x28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80036f8:	2301      	movs	r3, #1
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10a      	bne.n	8003718 <xTaskGenericNotify+0x30>
	__asm volatile
 8003702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003706:	f383 8811 	msr	BASEPRI, r3
 800370a:	f3bf 8f6f 	isb	sy
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	61bb      	str	r3, [r7, #24]
}
 8003714:	bf00      	nop
 8003716:	e7fe      	b.n	8003716 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800371c:	f000 fd6a 	bl	80041f4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003734:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	2202      	movs	r2, #2
 800373a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	2b04      	cmp	r3, #4
 8003742:	d828      	bhi.n	8003796 <xTaskGenericNotify+0xae>
 8003744:	a201      	add	r2, pc, #4	; (adr r2, 800374c <xTaskGenericNotify+0x64>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	080037b7 	.word	0x080037b7
 8003750:	08003761 	.word	0x08003761
 8003754:	0800376f 	.word	0x0800376f
 8003758:	0800377b 	.word	0x0800377b
 800375c:	08003783 	.word	0x08003783
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	431a      	orrs	r2, r3
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800376c:	e026      	b.n	80037bc <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8003778:	e020      	b.n	80037bc <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8003780:	e01c      	b.n	80037bc <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003782:	7ffb      	ldrb	r3, [r7, #31]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d003      	beq.n	8003790 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800378e:	e015      	b.n	80037bc <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8003790:	2300      	movs	r3, #0
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8003794:	e012      	b.n	80037bc <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379e:	d00c      	beq.n	80037ba <xTaskGenericNotify+0xd2>
	__asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	617b      	str	r3, [r7, #20]
}
 80037b2:	bf00      	nop
 80037b4:	e7fe      	b.n	80037b4 <xTaskGenericNotify+0xcc>
					break;
 80037b6:	bf00      	nop
 80037b8:	e000      	b.n	80037bc <xTaskGenericNotify+0xd4>

					break;
 80037ba:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80037bc:	7ffb      	ldrb	r3, [r7, #31]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d13a      	bne.n	8003838 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	3304      	adds	r3, #4
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fe fb74 	bl	8001eb4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d0:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <xTaskGenericNotify+0x160>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d903      	bls.n	80037e0 <xTaskGenericNotify+0xf8>
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	4a1a      	ldr	r2, [pc, #104]	; (8003848 <xTaskGenericNotify+0x160>)
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4a17      	ldr	r2, [pc, #92]	; (800384c <xTaskGenericNotify+0x164>)
 80037ee:	441a      	add	r2, r3
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	3304      	adds	r3, #4
 80037f4:	4619      	mov	r1, r3
 80037f6:	4610      	mov	r0, r2
 80037f8:	f7fe faff 	bl	8001dfa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <xTaskGenericNotify+0x132>
	__asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	613b      	str	r3, [r7, #16]
}
 8003816:	bf00      	nop
 8003818:	e7fe      	b.n	8003818 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381e:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <xTaskGenericNotify+0x168>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	429a      	cmp	r2, r3
 8003826:	d907      	bls.n	8003838 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <xTaskGenericNotify+0x16c>)
 800382a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003838:	f000 fd0c 	bl	8004254 <vPortExitCritical>

		return xReturn;
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800383e:	4618      	mov	r0, r3
 8003840:	3728      	adds	r7, #40	; 0x28
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000c18 	.word	0x20000c18
 800384c:	20000740 	.word	0x20000740
 8003850:	2000073c 	.word	0x2000073c
 8003854:	e000ed04 	.word	0xe000ed04

08003858 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003862:	4b21      	ldr	r3, [pc, #132]	; (80038e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003868:	4b20      	ldr	r3, [pc, #128]	; (80038ec <prvAddCurrentTaskToDelayedList+0x94>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3304      	adds	r3, #4
 800386e:	4618      	mov	r0, r3
 8003870:	f7fe fb20 	bl	8001eb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387a:	d10a      	bne.n	8003892 <prvAddCurrentTaskToDelayedList+0x3a>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003882:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <prvAddCurrentTaskToDelayedList+0x94>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3304      	adds	r3, #4
 8003888:	4619      	mov	r1, r3
 800388a:	4819      	ldr	r0, [pc, #100]	; (80038f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800388c:	f7fe fab5 	bl	8001dfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003890:	e026      	b.n	80038e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4413      	add	r3, r2
 8003898:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800389a:	4b14      	ldr	r3, [pc, #80]	; (80038ec <prvAddCurrentTaskToDelayedList+0x94>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d209      	bcs.n	80038be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038aa:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <prvAddCurrentTaskToDelayedList+0x94>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3304      	adds	r3, #4
 80038b4:	4619      	mov	r1, r3
 80038b6:	4610      	mov	r0, r2
 80038b8:	f7fe fac3 	bl	8001e42 <vListInsert>
}
 80038bc:	e010      	b.n	80038e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038be:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <prvAddCurrentTaskToDelayedList+0x94>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3304      	adds	r3, #4
 80038c8:	4619      	mov	r1, r3
 80038ca:	4610      	mov	r0, r2
 80038cc:	f7fe fab9 	bl	8001e42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80038d0:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d202      	bcs.n	80038e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80038da:	4a08      	ldr	r2, [pc, #32]	; (80038fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	6013      	str	r3, [r2, #0]
}
 80038e0:	bf00      	nop
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20000c14 	.word	0x20000c14
 80038ec:	2000073c 	.word	0x2000073c
 80038f0:	20000bfc 	.word	0x20000bfc
 80038f4:	20000bcc 	.word	0x20000bcc
 80038f8:	20000bc8 	.word	0x20000bc8
 80038fc:	20000c30 	.word	0x20000c30

08003900 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800390a:	f000 fb07 	bl	8003f1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800390e:	4b1c      	ldr	r3, [pc, #112]	; (8003980 <xTimerCreateTimerTask+0x80>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d021      	beq.n	800395a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800391e:	1d3a      	adds	r2, r7, #4
 8003920:	f107 0108 	add.w	r1, r7, #8
 8003924:	f107 030c 	add.w	r3, r7, #12
 8003928:	4618      	mov	r0, r3
 800392a:	f7fe fa1f 	bl	8001d6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	9202      	str	r2, [sp, #8]
 8003936:	9301      	str	r3, [sp, #4]
 8003938:	2302      	movs	r3, #2
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	2300      	movs	r3, #0
 800393e:	460a      	mov	r2, r1
 8003940:	4910      	ldr	r1, [pc, #64]	; (8003984 <xTimerCreateTimerTask+0x84>)
 8003942:	4811      	ldr	r0, [pc, #68]	; (8003988 <xTimerCreateTimerTask+0x88>)
 8003944:	f7fe ffcc 	bl	80028e0 <xTaskCreateStatic>
 8003948:	4603      	mov	r3, r0
 800394a:	4a10      	ldr	r2, [pc, #64]	; (800398c <xTimerCreateTimerTask+0x8c>)
 800394c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800394e:	4b0f      	ldr	r3, [pc, #60]	; (800398c <xTimerCreateTimerTask+0x8c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003956:	2301      	movs	r3, #1
 8003958:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	613b      	str	r3, [r7, #16]
}
 8003972:	bf00      	nop
 8003974:	e7fe      	b.n	8003974 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003976:	697b      	ldr	r3, [r7, #20]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20000c6c 	.word	0x20000c6c
 8003984:	080048c4 	.word	0x080048c4
 8003988:	08003ac5 	.word	0x08003ac5
 800398c:	20000c70 	.word	0x20000c70

08003990 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	; 0x28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800399e:	2300      	movs	r3, #0
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <xTimerGenericCommand+0x2e>
	__asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	623b      	str	r3, [r7, #32]
}
 80039ba:	bf00      	nop
 80039bc:	e7fe      	b.n	80039bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80039be:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <xTimerGenericCommand+0x98>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d02a      	beq.n	8003a1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b05      	cmp	r3, #5
 80039d6:	dc18      	bgt.n	8003a0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80039d8:	f7ff fda0 	bl	800351c <xTaskGetSchedulerState>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d109      	bne.n	80039f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80039e2:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <xTimerGenericCommand+0x98>)
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	f107 0110 	add.w	r1, r7, #16
 80039ea:	2300      	movs	r3, #0
 80039ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ee:	f7fe fb8f 	bl	8002110 <xQueueGenericSend>
 80039f2:	6278      	str	r0, [r7, #36]	; 0x24
 80039f4:	e012      	b.n	8003a1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80039f6:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <xTimerGenericCommand+0x98>)
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	f107 0110 	add.w	r1, r7, #16
 80039fe:	2300      	movs	r3, #0
 8003a00:	2200      	movs	r2, #0
 8003a02:	f7fe fb85 	bl	8002110 <xQueueGenericSend>
 8003a06:	6278      	str	r0, [r7, #36]	; 0x24
 8003a08:	e008      	b.n	8003a1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a0a:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <xTimerGenericCommand+0x98>)
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	f107 0110 	add.w	r1, r7, #16
 8003a12:	2300      	movs	r3, #0
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	f7fe fc79 	bl	800230c <xQueueGenericSendFromISR>
 8003a1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3728      	adds	r7, #40	; 0x28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000c6c 	.word	0x20000c6c

08003a2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a36:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <prvProcessExpiredTimer+0x94>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	3304      	adds	r3, #4
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fe fa35 	bl	8001eb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d022      	beq.n	8003a9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	18d1      	adds	r1, r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	6978      	ldr	r0, [r7, #20]
 8003a66:	f000 f8d1 	bl	8003c0c <prvInsertTimerInActiveList>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01f      	beq.n	8003ab0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a70:	2300      	movs	r3, #0
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	2300      	movs	r3, #0
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	2100      	movs	r1, #0
 8003a7a:	6978      	ldr	r0, [r7, #20]
 8003a7c:	f7ff ff88 	bl	8003990 <xTimerGenericCommand>
 8003a80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d113      	bne.n	8003ab0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	60fb      	str	r3, [r7, #12]
}
 8003a9a:	bf00      	nop
 8003a9c:	e7fe      	b.n	8003a9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	6978      	ldr	r0, [r7, #20]
 8003ab6:	4798      	blx	r3
}
 8003ab8:	bf00      	nop
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000c64 	.word	0x20000c64

08003ac4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003acc:	f107 0308 	add.w	r3, r7, #8
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 f857 	bl	8003b84 <prvGetNextExpireTime>
 8003ad6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	4619      	mov	r1, r3
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 f803 	bl	8003ae8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003ae2:	f000 f8d5 	bl	8003c90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ae6:	e7f1      	b.n	8003acc <prvTimerTask+0x8>

08003ae8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003af2:	f7ff f931 	bl	8002d58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003af6:	f107 0308 	add.w	r3, r7, #8
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 f866 	bl	8003bcc <prvSampleTimeNow>
 8003b00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d130      	bne.n	8003b6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10a      	bne.n	8003b24 <prvProcessTimerOrBlockTask+0x3c>
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d806      	bhi.n	8003b24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b16:	f7ff f92d 	bl	8002d74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b1a:	68f9      	ldr	r1, [r7, #12]
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff ff85 	bl	8003a2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003b22:	e024      	b.n	8003b6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d008      	beq.n	8003b3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b2a:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <prvProcessTimerOrBlockTask+0x90>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <prvProcessTimerOrBlockTask+0x50>
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <prvProcessTimerOrBlockTask+0x52>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b3c:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <prvProcessTimerOrBlockTask+0x94>)
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	f7fe fe95 	bl	8002878 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003b4e:	f7ff f911 	bl	8002d74 <xTaskResumeAll>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10a      	bne.n	8003b6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003b58:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <prvProcessTimerOrBlockTask+0x98>)
 8003b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	f3bf 8f6f 	isb	sy
}
 8003b68:	e001      	b.n	8003b6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003b6a:	f7ff f903 	bl	8002d74 <xTaskResumeAll>
}
 8003b6e:	bf00      	nop
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000c68 	.word	0x20000c68
 8003b7c:	20000c6c 	.word	0x20000c6c
 8003b80:	e000ed04 	.word	0xe000ed04

08003b84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <prvGetNextExpireTime+0x44>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <prvGetNextExpireTime+0x16>
 8003b96:	2201      	movs	r2, #1
 8003b98:	e000      	b.n	8003b9c <prvGetNextExpireTime+0x18>
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ba8:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <prvGetNextExpireTime+0x44>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	e001      	b.n	8003bb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000c64 	.word	0x20000c64

08003bcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003bd4:	f7ff f96c 	bl	8002eb0 <xTaskGetTickCount>
 8003bd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003bda:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <prvSampleTimeNow+0x3c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d205      	bcs.n	8003bf0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003be4:	f000 f936 	bl	8003e54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	e002      	b.n	8003bf6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003bf6:	4a04      	ldr	r2, [pc, #16]	; (8003c08 <prvSampleTimeNow+0x3c>)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000c74 	.word	0x20000c74

08003c0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d812      	bhi.n	8003c58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	1ad2      	subs	r2, r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d302      	bcc.n	8003c46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003c40:	2301      	movs	r3, #1
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	e01b      	b.n	8003c7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c46:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <prvInsertTimerInActiveList+0x7c>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4610      	mov	r0, r2
 8003c52:	f7fe f8f6 	bl	8001e42 <vListInsert>
 8003c56:	e012      	b.n	8003c7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d206      	bcs.n	8003c6e <prvInsertTimerInActiveList+0x62>
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d302      	bcc.n	8003c6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	e007      	b.n	8003c7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c6e:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <prvInsertTimerInActiveList+0x80>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	3304      	adds	r3, #4
 8003c76:	4619      	mov	r1, r3
 8003c78:	4610      	mov	r0, r2
 8003c7a:	f7fe f8e2 	bl	8001e42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003c7e:	697b      	ldr	r3, [r7, #20]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20000c68 	.word	0x20000c68
 8003c8c:	20000c64 	.word	0x20000c64

08003c90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08e      	sub	sp, #56	; 0x38
 8003c94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c96:	e0ca      	b.n	8003e2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	da18      	bge.n	8003cd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003c9e:	1d3b      	adds	r3, r7, #4
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10a      	bne.n	8003cc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	61fb      	str	r3, [r7, #28]
}
 8003cbc:	bf00      	nop
 8003cbe:	e7fe      	b.n	8003cbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc6:	6850      	ldr	r0, [r2, #4]
 8003cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cca:	6892      	ldr	r2, [r2, #8]
 8003ccc:	4611      	mov	r1, r2
 8003cce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f2c0 80ab 	blt.w	8003e2e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d004      	beq.n	8003cee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fe f8e3 	bl	8001eb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cee:	463b      	mov	r3, r7
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff ff6b 	bl	8003bcc <prvSampleTimeNow>
 8003cf6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b09      	cmp	r3, #9
 8003cfc:	f200 8096 	bhi.w	8003e2c <prvProcessReceivedCommands+0x19c>
 8003d00:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <prvProcessReceivedCommands+0x78>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d31 	.word	0x08003d31
 8003d0c:	08003d31 	.word	0x08003d31
 8003d10:	08003d31 	.word	0x08003d31
 8003d14:	08003da5 	.word	0x08003da5
 8003d18:	08003db9 	.word	0x08003db9
 8003d1c:	08003e03 	.word	0x08003e03
 8003d20:	08003d31 	.word	0x08003d31
 8003d24:	08003d31 	.word	0x08003d31
 8003d28:	08003da5 	.word	0x08003da5
 8003d2c:	08003db9 	.word	0x08003db9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	18d1      	adds	r1, r2, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d50:	f7ff ff5c 	bl	8003c0c <prvInsertTimerInActiveList>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d069      	beq.n	8003e2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d05e      	beq.n	8003e2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	441a      	add	r2, r3
 8003d78:	2300      	movs	r3, #0
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	2100      	movs	r1, #0
 8003d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d82:	f7ff fe05 	bl	8003990 <xTimerGenericCommand>
 8003d86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d14f      	bne.n	8003e2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	61bb      	str	r3, [r7, #24]
}
 8003da0:	bf00      	nop
 8003da2:	e7fe      	b.n	8003da2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003daa:	f023 0301 	bic.w	r3, r3, #1
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003db6:	e03a      	b.n	8003e2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	617b      	str	r3, [r7, #20]
}
 8003dea:	bf00      	nop
 8003dec:	e7fe      	b.n	8003dec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	18d1      	adds	r1, r2, r3
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dfc:	f7ff ff06 	bl	8003c0c <prvInsertTimerInActiveList>
					break;
 8003e00:	e015      	b.n	8003e2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d103      	bne.n	8003e18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e12:	f000 fbdd 	bl	80045d0 <vPortFree>
 8003e16:	e00a      	b.n	8003e2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e1e:	f023 0301 	bic.w	r3, r3, #1
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003e2a:	e000      	b.n	8003e2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8003e2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e2e:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <prvProcessReceivedCommands+0x1c0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	1d39      	adds	r1, r7, #4
 8003e34:	2200      	movs	r2, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe fb04 	bl	8002444 <xQueueReceive>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f47f af2a 	bne.w	8003c98 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	3730      	adds	r7, #48	; 0x30
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000c6c 	.word	0x20000c6c

08003e54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e5a:	e048      	b.n	8003eee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e5c:	4b2d      	ldr	r3, [pc, #180]	; (8003f14 <prvSwitchTimerLists+0xc0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e66:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <prvSwitchTimerLists+0xc0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3304      	adds	r3, #4
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fe f81d 	bl	8001eb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d02e      	beq.n	8003eee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4413      	add	r3, r2
 8003e98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d90e      	bls.n	8003ec0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003eae:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <prvSwitchTimerLists+0xc0>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4610      	mov	r0, r2
 8003eba:	f7fd ffc2 	bl	8001e42 <vListInsert>
 8003ebe:	e016      	b.n	8003eee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	2100      	movs	r1, #0
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f7ff fd60 	bl	8003990 <xTimerGenericCommand>
 8003ed0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10a      	bne.n	8003eee <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	603b      	str	r3, [r7, #0]
}
 8003eea:	bf00      	nop
 8003eec:	e7fe      	b.n	8003eec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003eee:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <prvSwitchTimerLists+0xc0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1b1      	bne.n	8003e5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003ef8:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <prvSwitchTimerLists+0xc0>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003efe:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <prvSwitchTimerLists+0xc4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a04      	ldr	r2, [pc, #16]	; (8003f14 <prvSwitchTimerLists+0xc0>)
 8003f04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003f06:	4a04      	ldr	r2, [pc, #16]	; (8003f18 <prvSwitchTimerLists+0xc4>)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	6013      	str	r3, [r2, #0]
}
 8003f0c:	bf00      	nop
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20000c64 	.word	0x20000c64
 8003f18:	20000c68 	.word	0x20000c68

08003f1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f22:	f000 f967 	bl	80041f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f26:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <prvCheckForValidListAndQueue+0x60>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d120      	bne.n	8003f70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f2e:	4814      	ldr	r0, [pc, #80]	; (8003f80 <prvCheckForValidListAndQueue+0x64>)
 8003f30:	f7fd ff36 	bl	8001da0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003f34:	4813      	ldr	r0, [pc, #76]	; (8003f84 <prvCheckForValidListAndQueue+0x68>)
 8003f36:	f7fd ff33 	bl	8001da0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f3a:	4b13      	ldr	r3, [pc, #76]	; (8003f88 <prvCheckForValidListAndQueue+0x6c>)
 8003f3c:	4a10      	ldr	r2, [pc, #64]	; (8003f80 <prvCheckForValidListAndQueue+0x64>)
 8003f3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f40:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <prvCheckForValidListAndQueue+0x70>)
 8003f42:	4a10      	ldr	r2, [pc, #64]	; (8003f84 <prvCheckForValidListAndQueue+0x68>)
 8003f44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003f46:	2300      	movs	r3, #0
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <prvCheckForValidListAndQueue+0x74>)
 8003f4c:	4a11      	ldr	r2, [pc, #68]	; (8003f94 <prvCheckForValidListAndQueue+0x78>)
 8003f4e:	2110      	movs	r1, #16
 8003f50:	200a      	movs	r0, #10
 8003f52:	f7fe f841 	bl	8001fd8 <xQueueGenericCreateStatic>
 8003f56:	4603      	mov	r3, r0
 8003f58:	4a08      	ldr	r2, [pc, #32]	; (8003f7c <prvCheckForValidListAndQueue+0x60>)
 8003f5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003f5c:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <prvCheckForValidListAndQueue+0x60>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f64:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <prvCheckForValidListAndQueue+0x60>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	490b      	ldr	r1, [pc, #44]	; (8003f98 <prvCheckForValidListAndQueue+0x7c>)
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe fc5a 	bl	8002824 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f70:	f000 f970 	bl	8004254 <vPortExitCritical>
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000c6c 	.word	0x20000c6c
 8003f80:	20000c3c 	.word	0x20000c3c
 8003f84:	20000c50 	.word	0x20000c50
 8003f88:	20000c64 	.word	0x20000c64
 8003f8c:	20000c68 	.word	0x20000c68
 8003f90:	20000d18 	.word	0x20000d18
 8003f94:	20000c78 	.word	0x20000c78
 8003f98:	080048cc 	.word	0x080048cc

08003f9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3b04      	subs	r3, #4
 8003fac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3b04      	subs	r3, #4
 8003fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f023 0201 	bic.w	r2, r3, #1
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3b04      	subs	r3, #4
 8003fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003fcc:	4a0c      	ldr	r2, [pc, #48]	; (8004000 <pxPortInitialiseStack+0x64>)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	3b14      	subs	r3, #20
 8003fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3b04      	subs	r3, #4
 8003fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f06f 0202 	mvn.w	r2, #2
 8003fea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	3b20      	subs	r3, #32
 8003ff0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	08004005 	.word	0x08004005

08004004 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800400a:	2300      	movs	r3, #0
 800400c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800400e:	4b12      	ldr	r3, [pc, #72]	; (8004058 <prvTaskExitError+0x54>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004016:	d00a      	beq.n	800402e <prvTaskExitError+0x2a>
	__asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	60fb      	str	r3, [r7, #12]
}
 800402a:	bf00      	nop
 800402c:	e7fe      	b.n	800402c <prvTaskExitError+0x28>
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	60bb      	str	r3, [r7, #8]
}
 8004040:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004042:	bf00      	nop
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0fc      	beq.n	8004044 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800404a:	bf00      	nop
 800404c:	bf00      	nop
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	2000000c 	.word	0x2000000c
 800405c:	00000000 	.word	0x00000000

08004060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004060:	4b07      	ldr	r3, [pc, #28]	; (8004080 <pxCurrentTCBConst2>)
 8004062:	6819      	ldr	r1, [r3, #0]
 8004064:	6808      	ldr	r0, [r1, #0]
 8004066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800406a:	f380 8809 	msr	PSP, r0
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f04f 0000 	mov.w	r0, #0
 8004076:	f380 8811 	msr	BASEPRI, r0
 800407a:	4770      	bx	lr
 800407c:	f3af 8000 	nop.w

08004080 <pxCurrentTCBConst2>:
 8004080:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop

08004088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004088:	4808      	ldr	r0, [pc, #32]	; (80040ac <prvPortStartFirstTask+0x24>)
 800408a:	6800      	ldr	r0, [r0, #0]
 800408c:	6800      	ldr	r0, [r0, #0]
 800408e:	f380 8808 	msr	MSP, r0
 8004092:	f04f 0000 	mov.w	r0, #0
 8004096:	f380 8814 	msr	CONTROL, r0
 800409a:	b662      	cpsie	i
 800409c:	b661      	cpsie	f
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	df00      	svc	0
 80040a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040aa:	bf00      	nop
 80040ac:	e000ed08 	.word	0xe000ed08

080040b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040b6:	4b46      	ldr	r3, [pc, #280]	; (80041d0 <xPortStartScheduler+0x120>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a46      	ldr	r2, [pc, #280]	; (80041d4 <xPortStartScheduler+0x124>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d10a      	bne.n	80040d6 <xPortStartScheduler+0x26>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	613b      	str	r3, [r7, #16]
}
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80040d6:	4b3e      	ldr	r3, [pc, #248]	; (80041d0 <xPortStartScheduler+0x120>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a3f      	ldr	r2, [pc, #252]	; (80041d8 <xPortStartScheduler+0x128>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d10a      	bne.n	80040f6 <xPortStartScheduler+0x46>
	__asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	60fb      	str	r3, [r7, #12]
}
 80040f2:	bf00      	nop
 80040f4:	e7fe      	b.n	80040f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040f6:	4b39      	ldr	r3, [pc, #228]	; (80041dc <xPortStartScheduler+0x12c>)
 80040f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	22ff      	movs	r2, #255	; 0xff
 8004106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	b2db      	uxtb	r3, r3
 8004114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004118:	b2da      	uxtb	r2, r3
 800411a:	4b31      	ldr	r3, [pc, #196]	; (80041e0 <xPortStartScheduler+0x130>)
 800411c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800411e:	4b31      	ldr	r3, [pc, #196]	; (80041e4 <xPortStartScheduler+0x134>)
 8004120:	2207      	movs	r2, #7
 8004122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004124:	e009      	b.n	800413a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004126:	4b2f      	ldr	r3, [pc, #188]	; (80041e4 <xPortStartScheduler+0x134>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3b01      	subs	r3, #1
 800412c:	4a2d      	ldr	r2, [pc, #180]	; (80041e4 <xPortStartScheduler+0x134>)
 800412e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	b2db      	uxtb	r3, r3
 8004138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800413a:	78fb      	ldrb	r3, [r7, #3]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004142:	2b80      	cmp	r3, #128	; 0x80
 8004144:	d0ef      	beq.n	8004126 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004146:	4b27      	ldr	r3, [pc, #156]	; (80041e4 <xPortStartScheduler+0x134>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f1c3 0307 	rsb	r3, r3, #7
 800414e:	2b04      	cmp	r3, #4
 8004150:	d00a      	beq.n	8004168 <xPortStartScheduler+0xb8>
	__asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	60bb      	str	r3, [r7, #8]
}
 8004164:	bf00      	nop
 8004166:	e7fe      	b.n	8004166 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004168:	4b1e      	ldr	r3, [pc, #120]	; (80041e4 <xPortStartScheduler+0x134>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	021b      	lsls	r3, r3, #8
 800416e:	4a1d      	ldr	r2, [pc, #116]	; (80041e4 <xPortStartScheduler+0x134>)
 8004170:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004172:	4b1c      	ldr	r3, [pc, #112]	; (80041e4 <xPortStartScheduler+0x134>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800417a:	4a1a      	ldr	r2, [pc, #104]	; (80041e4 <xPortStartScheduler+0x134>)
 800417c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	b2da      	uxtb	r2, r3
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004186:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <xPortStartScheduler+0x138>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a17      	ldr	r2, [pc, #92]	; (80041e8 <xPortStartScheduler+0x138>)
 800418c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004190:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <xPortStartScheduler+0x138>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a14      	ldr	r2, [pc, #80]	; (80041e8 <xPortStartScheduler+0x138>)
 8004198:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800419c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800419e:	f000 f8dd 	bl	800435c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041a2:	4b12      	ldr	r3, [pc, #72]	; (80041ec <xPortStartScheduler+0x13c>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80041a8:	f000 f8fc 	bl	80043a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041ac:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <xPortStartScheduler+0x140>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a0f      	ldr	r2, [pc, #60]	; (80041f0 <xPortStartScheduler+0x140>)
 80041b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80041b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80041b8:	f7ff ff66 	bl	8004088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80041bc:	f7fe ff42 	bl	8003044 <vTaskSwitchContext>
	prvTaskExitError();
 80041c0:	f7ff ff20 	bl	8004004 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	e000ed00 	.word	0xe000ed00
 80041d4:	410fc271 	.word	0x410fc271
 80041d8:	410fc270 	.word	0x410fc270
 80041dc:	e000e400 	.word	0xe000e400
 80041e0:	20000d68 	.word	0x20000d68
 80041e4:	20000d6c 	.word	0x20000d6c
 80041e8:	e000ed20 	.word	0xe000ed20
 80041ec:	2000000c 	.word	0x2000000c
 80041f0:	e000ef34 	.word	0xe000ef34

080041f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	607b      	str	r3, [r7, #4]
}
 800420c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <vPortEnterCritical+0x58>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3301      	adds	r3, #1
 8004214:	4a0d      	ldr	r2, [pc, #52]	; (800424c <vPortEnterCritical+0x58>)
 8004216:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <vPortEnterCritical+0x58>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d10f      	bne.n	8004240 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <vPortEnterCritical+0x5c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <vPortEnterCritical+0x4c>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	603b      	str	r3, [r7, #0]
}
 800423c:	bf00      	nop
 800423e:	e7fe      	b.n	800423e <vPortEnterCritical+0x4a>
	}
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	2000000c 	.word	0x2000000c
 8004250:	e000ed04 	.word	0xe000ed04

08004254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <vPortExitCritical+0x50>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <vPortExitCritical+0x24>
	__asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	607b      	str	r3, [r7, #4]
}
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <vPortExitCritical+0x50>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3b01      	subs	r3, #1
 800427e:	4a09      	ldr	r2, [pc, #36]	; (80042a4 <vPortExitCritical+0x50>)
 8004280:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004282:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <vPortExitCritical+0x50>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d105      	bne.n	8004296 <vPortExitCritical+0x42>
 800428a:	2300      	movs	r3, #0
 800428c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	f383 8811 	msr	BASEPRI, r3
}
 8004294:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	2000000c 	.word	0x2000000c
	...

080042b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042b0:	f3ef 8009 	mrs	r0, PSP
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	4b15      	ldr	r3, [pc, #84]	; (8004310 <pxCurrentTCBConst>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	f01e 0f10 	tst.w	lr, #16
 80042c0:	bf08      	it	eq
 80042c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ca:	6010      	str	r0, [r2, #0]
 80042cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042d4:	f380 8811 	msr	BASEPRI, r0
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f7fe feb0 	bl	8003044 <vTaskSwitchContext>
 80042e4:	f04f 0000 	mov.w	r0, #0
 80042e8:	f380 8811 	msr	BASEPRI, r0
 80042ec:	bc09      	pop	{r0, r3}
 80042ee:	6819      	ldr	r1, [r3, #0]
 80042f0:	6808      	ldr	r0, [r1, #0]
 80042f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f6:	f01e 0f10 	tst.w	lr, #16
 80042fa:	bf08      	it	eq
 80042fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004300:	f380 8809 	msr	PSP, r0
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	f3af 8000 	nop.w

08004310 <pxCurrentTCBConst>:
 8004310:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004314:	bf00      	nop
 8004316:	bf00      	nop

08004318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
	__asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	607b      	str	r3, [r7, #4]
}
 8004330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004332:	f7fe fdcd 	bl	8002ed0 <xTaskIncrementTick>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <xPortSysTickHandler+0x40>)
 800433e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	2300      	movs	r3, #0
 8004346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	f383 8811 	msr	BASEPRI, r3
}
 800434e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004350:	bf00      	nop
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	e000ed04 	.word	0xe000ed04

0800435c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <vPortSetupTimerInterrupt+0x34>)
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004366:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <vPortSetupTimerInterrupt+0x38>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800436c:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <vPortSetupTimerInterrupt+0x3c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a0a      	ldr	r2, [pc, #40]	; (800439c <vPortSetupTimerInterrupt+0x40>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	099b      	lsrs	r3, r3, #6
 8004378:	4a09      	ldr	r2, [pc, #36]	; (80043a0 <vPortSetupTimerInterrupt+0x44>)
 800437a:	3b01      	subs	r3, #1
 800437c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800437e:	4b04      	ldr	r3, [pc, #16]	; (8004390 <vPortSetupTimerInterrupt+0x34>)
 8004380:	2207      	movs	r2, #7
 8004382:	601a      	str	r2, [r3, #0]
}
 8004384:	bf00      	nop
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	e000e010 	.word	0xe000e010
 8004394:	e000e018 	.word	0xe000e018
 8004398:	20000000 	.word	0x20000000
 800439c:	10624dd3 	.word	0x10624dd3
 80043a0:	e000e014 	.word	0xe000e014

080043a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80043a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80043b4 <vPortEnableVFP+0x10>
 80043a8:	6801      	ldr	r1, [r0, #0]
 80043aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80043ae:	6001      	str	r1, [r0, #0]
 80043b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80043b2:	bf00      	nop
 80043b4:	e000ed88 	.word	0xe000ed88

080043b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80043be:	f3ef 8305 	mrs	r3, IPSR
 80043c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b0f      	cmp	r3, #15
 80043c8:	d914      	bls.n	80043f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80043ca:	4a17      	ldr	r2, [pc, #92]	; (8004428 <vPortValidateInterruptPriority+0x70>)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4413      	add	r3, r2
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80043d4:	4b15      	ldr	r3, [pc, #84]	; (800442c <vPortValidateInterruptPriority+0x74>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	7afa      	ldrb	r2, [r7, #11]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d20a      	bcs.n	80043f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	607b      	str	r3, [r7, #4]
}
 80043f0:	bf00      	nop
 80043f2:	e7fe      	b.n	80043f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80043f4:	4b0e      	ldr	r3, [pc, #56]	; (8004430 <vPortValidateInterruptPriority+0x78>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043fc:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <vPortValidateInterruptPriority+0x7c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d90a      	bls.n	800441a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	603b      	str	r3, [r7, #0]
}
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <vPortValidateInterruptPriority+0x60>
	}
 800441a:	bf00      	nop
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	e000e3f0 	.word	0xe000e3f0
 800442c:	20000d68 	.word	0x20000d68
 8004430:	e000ed0c 	.word	0xe000ed0c
 8004434:	20000d6c 	.word	0x20000d6c

08004438 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08a      	sub	sp, #40	; 0x28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004440:	2300      	movs	r3, #0
 8004442:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004444:	f7fe fc88 	bl	8002d58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004448:	4b5b      	ldr	r3, [pc, #364]	; (80045b8 <pvPortMalloc+0x180>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004450:	f000 f920 	bl	8004694 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004454:	4b59      	ldr	r3, [pc, #356]	; (80045bc <pvPortMalloc+0x184>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	f040 8093 	bne.w	8004588 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01d      	beq.n	80044a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004468:	2208      	movs	r2, #8
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4413      	add	r3, r2
 800446e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	2b00      	cmp	r3, #0
 8004478:	d014      	beq.n	80044a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f023 0307 	bic.w	r3, r3, #7
 8004480:	3308      	adds	r3, #8
 8004482:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <pvPortMalloc+0x6c>
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	617b      	str	r3, [r7, #20]
}
 80044a0:	bf00      	nop
 80044a2:	e7fe      	b.n	80044a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d06e      	beq.n	8004588 <pvPortMalloc+0x150>
 80044aa:	4b45      	ldr	r3, [pc, #276]	; (80045c0 <pvPortMalloc+0x188>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d869      	bhi.n	8004588 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80044b4:	4b43      	ldr	r3, [pc, #268]	; (80045c4 <pvPortMalloc+0x18c>)
 80044b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80044b8:	4b42      	ldr	r3, [pc, #264]	; (80045c4 <pvPortMalloc+0x18c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044be:	e004      	b.n	80044ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d903      	bls.n	80044dc <pvPortMalloc+0xa4>
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1f1      	bne.n	80044c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044dc:	4b36      	ldr	r3, [pc, #216]	; (80045b8 <pvPortMalloc+0x180>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d050      	beq.n	8004588 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2208      	movs	r2, #8
 80044ec:	4413      	add	r3, r2
 80044ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	1ad2      	subs	r2, r2, r3
 8004500:	2308      	movs	r3, #8
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	429a      	cmp	r2, r3
 8004506:	d91f      	bls.n	8004548 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4413      	add	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <pvPortMalloc+0xf8>
	__asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	613b      	str	r3, [r7, #16]
}
 800452c:	bf00      	nop
 800452e:	e7fe      	b.n	800452e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	1ad2      	subs	r2, r2, r3
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004542:	69b8      	ldr	r0, [r7, #24]
 8004544:	f000 f908 	bl	8004758 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004548:	4b1d      	ldr	r3, [pc, #116]	; (80045c0 <pvPortMalloc+0x188>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	4a1b      	ldr	r2, [pc, #108]	; (80045c0 <pvPortMalloc+0x188>)
 8004554:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004556:	4b1a      	ldr	r3, [pc, #104]	; (80045c0 <pvPortMalloc+0x188>)
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <pvPortMalloc+0x190>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d203      	bcs.n	800456a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004562:	4b17      	ldr	r3, [pc, #92]	; (80045c0 <pvPortMalloc+0x188>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <pvPortMalloc+0x190>)
 8004568:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	4b13      	ldr	r3, [pc, #76]	; (80045bc <pvPortMalloc+0x184>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	431a      	orrs	r2, r3
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800457e:	4b13      	ldr	r3, [pc, #76]	; (80045cc <pvPortMalloc+0x194>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3301      	adds	r3, #1
 8004584:	4a11      	ldr	r2, [pc, #68]	; (80045cc <pvPortMalloc+0x194>)
 8004586:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004588:	f7fe fbf4 	bl	8002d74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <pvPortMalloc+0x174>
	__asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	60fb      	str	r3, [r7, #12]
}
 80045a8:	bf00      	nop
 80045aa:	e7fe      	b.n	80045aa <pvPortMalloc+0x172>
	return pvReturn;
 80045ac:	69fb      	ldr	r3, [r7, #28]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3728      	adds	r7, #40	; 0x28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20004978 	.word	0x20004978
 80045bc:	2000498c 	.word	0x2000498c
 80045c0:	2000497c 	.word	0x2000497c
 80045c4:	20004970 	.word	0x20004970
 80045c8:	20004980 	.word	0x20004980
 80045cc:	20004984 	.word	0x20004984

080045d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d04d      	beq.n	800467e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045e2:	2308      	movs	r3, #8
 80045e4:	425b      	negs	r3, r3
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4413      	add	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	4b24      	ldr	r3, [pc, #144]	; (8004688 <vPortFree+0xb8>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10a      	bne.n	8004614 <vPortFree+0x44>
	__asm volatile
 80045fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	60fb      	str	r3, [r7, #12]
}
 8004610:	bf00      	nop
 8004612:	e7fe      	b.n	8004612 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <vPortFree+0x62>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	60bb      	str	r3, [r7, #8]
}
 800462e:	bf00      	nop
 8004630:	e7fe      	b.n	8004630 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	4b14      	ldr	r3, [pc, #80]	; (8004688 <vPortFree+0xb8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4013      	ands	r3, r2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01e      	beq.n	800467e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d11a      	bne.n	800467e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	4b0e      	ldr	r3, [pc, #56]	; (8004688 <vPortFree+0xb8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	43db      	mvns	r3, r3
 8004652:	401a      	ands	r2, r3
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004658:	f7fe fb7e 	bl	8002d58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	4b0a      	ldr	r3, [pc, #40]	; (800468c <vPortFree+0xbc>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4413      	add	r3, r2
 8004666:	4a09      	ldr	r2, [pc, #36]	; (800468c <vPortFree+0xbc>)
 8004668:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800466a:	6938      	ldr	r0, [r7, #16]
 800466c:	f000 f874 	bl	8004758 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004670:	4b07      	ldr	r3, [pc, #28]	; (8004690 <vPortFree+0xc0>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3301      	adds	r3, #1
 8004676:	4a06      	ldr	r2, [pc, #24]	; (8004690 <vPortFree+0xc0>)
 8004678:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800467a:	f7fe fb7b 	bl	8002d74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800467e:	bf00      	nop
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	2000498c 	.word	0x2000498c
 800468c:	2000497c 	.word	0x2000497c
 8004690:	20004988 	.word	0x20004988

08004694 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800469a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800469e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80046a0:	4b27      	ldr	r3, [pc, #156]	; (8004740 <prvHeapInit+0xac>)
 80046a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00c      	beq.n	80046c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3307      	adds	r3, #7
 80046b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0307 	bic.w	r3, r3, #7
 80046ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	4a1f      	ldr	r2, [pc, #124]	; (8004740 <prvHeapInit+0xac>)
 80046c4:	4413      	add	r3, r2
 80046c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046cc:	4a1d      	ldr	r2, [pc, #116]	; (8004744 <prvHeapInit+0xb0>)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80046d2:	4b1c      	ldr	r3, [pc, #112]	; (8004744 <prvHeapInit+0xb0>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	4413      	add	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80046e0:	2208      	movs	r2, #8
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0307 	bic.w	r3, r3, #7
 80046ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4a15      	ldr	r2, [pc, #84]	; (8004748 <prvHeapInit+0xb4>)
 80046f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046f6:	4b14      	ldr	r3, [pc, #80]	; (8004748 <prvHeapInit+0xb4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046fe:	4b12      	ldr	r3, [pc, #72]	; (8004748 <prvHeapInit+0xb4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	1ad2      	subs	r2, r2, r3
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004714:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <prvHeapInit+0xb4>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4a0a      	ldr	r2, [pc, #40]	; (800474c <prvHeapInit+0xb8>)
 8004722:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4a09      	ldr	r2, [pc, #36]	; (8004750 <prvHeapInit+0xbc>)
 800472a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800472c:	4b09      	ldr	r3, [pc, #36]	; (8004754 <prvHeapInit+0xc0>)
 800472e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004732:	601a      	str	r2, [r3, #0]
}
 8004734:	bf00      	nop
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	20000d70 	.word	0x20000d70
 8004744:	20004970 	.word	0x20004970
 8004748:	20004978 	.word	0x20004978
 800474c:	20004980 	.word	0x20004980
 8004750:	2000497c 	.word	0x2000497c
 8004754:	2000498c 	.word	0x2000498c

08004758 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004760:	4b28      	ldr	r3, [pc, #160]	; (8004804 <prvInsertBlockIntoFreeList+0xac>)
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e002      	b.n	800476c <prvInsertBlockIntoFreeList+0x14>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	429a      	cmp	r2, r3
 8004774:	d8f7      	bhi.n	8004766 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	4413      	add	r3, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	429a      	cmp	r2, r3
 8004786:	d108      	bne.n	800479a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	441a      	add	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	441a      	add	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d118      	bne.n	80047e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <prvInsertBlockIntoFreeList+0xb0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d00d      	beq.n	80047d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	441a      	add	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	e008      	b.n	80047e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047d6:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <prvInsertBlockIntoFreeList+0xb0>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e003      	b.n	80047e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d002      	beq.n	80047f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047f6:	bf00      	nop
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	20004970 	.word	0x20004970
 8004808:	20004978 	.word	0x20004978

0800480c <memset>:
 800480c:	4402      	add	r2, r0
 800480e:	4603      	mov	r3, r0
 8004810:	4293      	cmp	r3, r2
 8004812:	d100      	bne.n	8004816 <memset+0xa>
 8004814:	4770      	bx	lr
 8004816:	f803 1b01 	strb.w	r1, [r3], #1
 800481a:	e7f9      	b.n	8004810 <memset+0x4>

0800481c <__libc_init_array>:
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	4d0d      	ldr	r5, [pc, #52]	; (8004854 <__libc_init_array+0x38>)
 8004820:	4c0d      	ldr	r4, [pc, #52]	; (8004858 <__libc_init_array+0x3c>)
 8004822:	1b64      	subs	r4, r4, r5
 8004824:	10a4      	asrs	r4, r4, #2
 8004826:	2600      	movs	r6, #0
 8004828:	42a6      	cmp	r6, r4
 800482a:	d109      	bne.n	8004840 <__libc_init_array+0x24>
 800482c:	4d0b      	ldr	r5, [pc, #44]	; (800485c <__libc_init_array+0x40>)
 800482e:	4c0c      	ldr	r4, [pc, #48]	; (8004860 <__libc_init_array+0x44>)
 8004830:	f000 f826 	bl	8004880 <_init>
 8004834:	1b64      	subs	r4, r4, r5
 8004836:	10a4      	asrs	r4, r4, #2
 8004838:	2600      	movs	r6, #0
 800483a:	42a6      	cmp	r6, r4
 800483c:	d105      	bne.n	800484a <__libc_init_array+0x2e>
 800483e:	bd70      	pop	{r4, r5, r6, pc}
 8004840:	f855 3b04 	ldr.w	r3, [r5], #4
 8004844:	4798      	blx	r3
 8004846:	3601      	adds	r6, #1
 8004848:	e7ee      	b.n	8004828 <__libc_init_array+0xc>
 800484a:	f855 3b04 	ldr.w	r3, [r5], #4
 800484e:	4798      	blx	r3
 8004850:	3601      	adds	r6, #1
 8004852:	e7f2      	b.n	800483a <__libc_init_array+0x1e>
 8004854:	08004958 	.word	0x08004958
 8004858:	08004958 	.word	0x08004958
 800485c:	08004958 	.word	0x08004958
 8004860:	0800495c 	.word	0x0800495c

08004864 <memcpy>:
 8004864:	440a      	add	r2, r1
 8004866:	4291      	cmp	r1, r2
 8004868:	f100 33ff 	add.w	r3, r0, #4294967295
 800486c:	d100      	bne.n	8004870 <memcpy+0xc>
 800486e:	4770      	bx	lr
 8004870:	b510      	push	{r4, lr}
 8004872:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004876:	f803 4f01 	strb.w	r4, [r3, #1]!
 800487a:	4291      	cmp	r1, r2
 800487c:	d1f9      	bne.n	8004872 <memcpy+0xe>
 800487e:	bd10      	pop	{r4, pc}

08004880 <_init>:
 8004880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004882:	bf00      	nop
 8004884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004886:	bc08      	pop	{r3}
 8004888:	469e      	mov	lr, r3
 800488a:	4770      	bx	lr

0800488c <_fini>:
 800488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488e:	bf00      	nop
 8004890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004892:	bc08      	pop	{r3}
 8004894:	469e      	mov	lr, r3
 8004896:	4770      	bx	lr
