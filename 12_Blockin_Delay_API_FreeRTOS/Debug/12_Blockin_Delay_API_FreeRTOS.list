
12_Blockin_Delay_API_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cdc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004eac  08004eac  00014eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f84  08004f84  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f8c  08004f8c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f8c  08004f8c  00014f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f90  08004f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b28  20000060  08004ff4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b88  08004ff4  00024b88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0ae  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002712  00000000  00000000  0002e181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  00030898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000979  00000000  00000000  00031530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000034fc  00000000  00000000  00031ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ebda  00000000  00000000  000353a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cff0b  00000000  00000000  00043f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037b8  00000000  00000000  00113e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00117644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e94 	.word	0x08004e94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08004e94 	.word	0x08004e94

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 f9fc 	bl	80009ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f824 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f882 	bl	80006c0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005bc:	f001 fa90 	bl	8001ae0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005c0:	4a09      	ldr	r2, [pc, #36]	; (80005e8 <main+0x3c>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	4809      	ldr	r0, [pc, #36]	; (80005ec <main+0x40>)
 80005c6:	f001 fad5 	bl	8001b74 <osThreadNew>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a08      	ldr	r2, [pc, #32]	; (80005f0 <main+0x44>)
 80005ce:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80005d0:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <main+0x48>)
 80005d2:	2100      	movs	r1, #0
 80005d4:	4808      	ldr	r0, [pc, #32]	; (80005f8 <main+0x4c>)
 80005d6:	f001 facd 	bl	8001b74 <osThreadNew>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <main+0x50>)
 80005de:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e0:	f001 faa2 	bl	8001b28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0x38>
 80005e6:	bf00      	nop
 80005e8:	08004ef8 	.word	0x08004ef8
 80005ec:	080007cd 	.word	0x080007cd
 80005f0:	2000007c 	.word	0x2000007c
 80005f4:	08004f1c 	.word	0x08004f1c
 80005f8:	08000801 	.word	0x08000801
 80005fc:	20000080 	.word	0x20000080

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	2234      	movs	r2, #52	; 0x34
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 ffbc 	bl	800458c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SystemClock_Config+0xb8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a22      	ldr	r2, [pc, #136]	; (80006b8 <SystemClock_Config+0xb8>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <SystemClock_Config+0xb8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000640:	2300      	movs	r3, #0
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <SystemClock_Config+0xbc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800064c:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <SystemClock_Config+0xbc>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <SystemClock_Config+0xbc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066c:	2300      	movs	r3, #0
 800066e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4618      	mov	r0, r3
 8000676:	f000 ff61 	bl	800153c <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000680:	f000 f8cc 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fcbc 	bl	800101c <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006aa:	f000 f8b7 	bl	800081c <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	4b38      	ldr	r3, [pc, #224]	; (80007bc <MX_GPIO_Init+0xfc>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a37      	ldr	r2, [pc, #220]	; (80007bc <MX_GPIO_Init+0xfc>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b35      	ldr	r3, [pc, #212]	; (80007bc <MX_GPIO_Init+0xfc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b31      	ldr	r3, [pc, #196]	; (80007bc <MX_GPIO_Init+0xfc>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a30      	ldr	r2, [pc, #192]	; (80007bc <MX_GPIO_Init+0xfc>)
 80006fc:	f043 0320 	orr.w	r3, r3, #32
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <MX_GPIO_Init+0xfc>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0320 	and.w	r3, r3, #32
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <MX_GPIO_Init+0xfc>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a29      	ldr	r2, [pc, #164]	; (80007bc <MX_GPIO_Init+0xfc>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b27      	ldr	r3, [pc, #156]	; (80007bc <MX_GPIO_Init+0xfc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000730:	4823      	ldr	r0, [pc, #140]	; (80007c0 <MX_GPIO_Init+0x100>)
 8000732:	f000 fc3f 	bl	8000fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2107      	movs	r1, #7
 800073a:	4822      	ldr	r0, [pc, #136]	; (80007c4 <MX_GPIO_Init+0x104>)
 800073c:	f000 fc3a 	bl	8000fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000740:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	4819      	ldr	r0, [pc, #100]	; (80007c0 <MX_GPIO_Init+0x100>)
 800075a:	f000 fa7f 	bl	8000c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800075e:	2307      	movs	r3, #7
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4813      	ldr	r0, [pc, #76]	; (80007c4 <MX_GPIO_Init+0x104>)
 8000776:	f000 fa71 	bl	8000c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800077a:	2302      	movs	r3, #2
 800077c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	4619      	mov	r1, r3
 800078c:	480e      	ldr	r0, [pc, #56]	; (80007c8 <MX_GPIO_Init+0x108>)
 800078e:	f000 fa65 	bl	8000c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000792:	230c      	movs	r3, #12
 8000794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079e:	2303      	movs	r3, #3
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007a2:	2307      	movs	r3, #7
 80007a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	4619      	mov	r1, r3
 80007ac:	4806      	ldr	r0, [pc, #24]	; (80007c8 <MX_GPIO_Init+0x108>)
 80007ae:	f000 fa55 	bl	8000c5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b2:	bf00      	nop
 80007b4:	3720      	adds	r7, #32
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020800 	.word	0x40020800
 80007c4:	40021400 	.word	0x40021400
 80007c8:	40020000 	.word	0x40020000

080007cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    sprintf(myMessage," Status of the leds: %d\r\n", HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2));
 80007d4:	2107      	movs	r1, #7
 80007d6:	4807      	ldr	r0, [pc, #28]	; (80007f4 <StartDefaultTask+0x28>)
 80007d8:	f000 fbd4 	bl	8000f84 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	461a      	mov	r2, r3
 80007e0:	4905      	ldr	r1, [pc, #20]	; (80007f8 <StartDefaultTask+0x2c>)
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <StartDefaultTask+0x30>)
 80007e4:	f003 feb2 	bl	800454c <siprintf>
    vTaskDelay(pdMS_TO_TICKS(1000));
 80007e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ec:	f002 f9ca 	bl	8002b84 <vTaskDelay>
    sprintf(myMessage," Status of the leds: %d\r\n", HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2));
 80007f0:	e7f0      	b.n	80007d4 <StartDefaultTask+0x8>
 80007f2:	bf00      	nop
 80007f4:	40021400 	.word	0x40021400
 80007f8:	08004ec4 	.word	0x08004ec4
 80007fc:	20000084 	.word	0x20000084

08000800 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2);
 8000808:	2107      	movs	r1, #7
 800080a:	4803      	ldr	r0, [pc, #12]	; (8000818 <StartTask02+0x18>)
 800080c:	f000 fbeb 	bl	8000fe6 <HAL_GPIO_TogglePin>
      vTaskDelay(pdMS_TO_TICKS(100));
 8000810:	2064      	movs	r0, #100	; 0x64
 8000812:	f002 f9b7 	bl	8002b84 <vTaskDelay>
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2);
 8000816:	e7f7      	b.n	8000808 <StartTask02+0x8>
 8000818:	40021400 	.word	0x40021400

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>
	...

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_MspInit+0x54>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	4a11      	ldr	r2, [pc, #68]	; (800087c <HAL_MspInit+0x54>)
 8000838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083c:	6453      	str	r3, [r2, #68]	; 0x44
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_MspInit+0x54>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <HAL_MspInit+0x54>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <HAL_MspInit+0x54>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_MspInit+0x54>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	210f      	movs	r1, #15
 800086a:	f06f 0001 	mvn.w	r0, #1
 800086e:	f000 f9cc 	bl	8000c0a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <NMI_Handler+0x4>

08000886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <MemManage_Handler+0x4>

08000892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <UsageFault_Handler+0x4>

0800089e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b0:	f000 f8ce 	bl	8000a50 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008b4:	f002 fde2 	bl	800347c <xTaskGetSchedulerState>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d001      	beq.n	80008c2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008be:	f003 fbcb 	bl	8004058 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d0:	4a14      	ldr	r2, [pc, #80]	; (8000924 <_sbrk+0x5c>)
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <_sbrk+0x60>)
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d102      	bne.n	80008ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <_sbrk+0x64>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <_sbrk+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d207      	bcs.n	8000908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f8:	f003 fe50 	bl	800459c <__errno>
 80008fc:	4603      	mov	r3, r0
 80008fe:	220c      	movs	r2, #12
 8000900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
 8000906:	e009      	b.n	800091c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	4a05      	ldr	r2, [pc, #20]	; (800092c <_sbrk+0x64>)
 8000918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20020000 	.word	0x20020000
 8000928:	00000400 	.word	0x00000400
 800092c:	200000e8 	.word	0x200000e8
 8000930:	20004b88 	.word	0x20004b88

08000934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <SystemInit+0x20>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <SystemInit+0x20>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000990 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800095e:	490e      	ldr	r1, [pc, #56]	; (8000998 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000974:	4c0b      	ldr	r4, [pc, #44]	; (80009a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000982:	f7ff ffd7 	bl	8000934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000986:	f003 fe0f 	bl	80045a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098a:	f7ff fe0f 	bl	80005ac <main>
  bx  lr    
 800098e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000990:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800099c:	08004f94 	.word	0x08004f94
  ldr r2, =_sbss
 80009a0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009a4:	20004b88 	.word	0x20004b88

080009a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC_IRQHandler>
	...

080009ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009b0:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <HAL_Init+0x40>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <HAL_Init+0x40>)
 80009b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_Init+0x40>)
 80009c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_Init+0x40>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a07      	ldr	r2, [pc, #28]	; (80009ec <HAL_Init+0x40>)
 80009ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d4:	2003      	movs	r0, #3
 80009d6:	f000 f90d 	bl	8000bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009da:	200f      	movs	r0, #15
 80009dc:	f000 f808 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e0:	f7ff ff22 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023c00 	.word	0x40023c00

080009f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_InitTick+0x54>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_InitTick+0x58>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f917 	bl	8000c42 <HAL_SYSTICK_Config>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e00e      	b.n	8000a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d80a      	bhi.n	8000a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a24:	2200      	movs	r2, #0
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	f000 f8ed 	bl	8000c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <HAL_InitTick+0x5c>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e000      	b.n	8000a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	20000004 	.word	0x20000004

08000a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_IncTick+0x20>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_IncTick+0x24>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <HAL_IncTick+0x24>)
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000008 	.word	0x20000008
 8000a74:	200000ec 	.word	0x200000ec

08000a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <HAL_GetTick+0x14>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	200000ec 	.word	0x200000ec

08000a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	60d3      	str	r3, [r2, #12]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	f003 0307 	and.w	r3, r3, #7
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db0a      	blt.n	8000b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	490c      	ldr	r1, [pc, #48]	; (8000b40 <__NVIC_SetPriority+0x4c>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	0112      	lsls	r2, r2, #4
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b1c:	e00a      	b.n	8000b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4908      	ldr	r1, [pc, #32]	; (8000b44 <__NVIC_SetPriority+0x50>)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	0112      	lsls	r2, r2, #4
 8000b2e:	b2d2      	uxtb	r2, r2
 8000b30:	440b      	add	r3, r1
 8000b32:	761a      	strb	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	f1c3 0307 	rsb	r3, r3, #7
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	bf28      	it	cs
 8000b66:	2304      	movcs	r3, #4
 8000b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	d902      	bls.n	8000b78 <NVIC_EncodePriority+0x30>
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3b03      	subs	r3, #3
 8000b76:	e000      	b.n	8000b7a <NVIC_EncodePriority+0x32>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43da      	mvns	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b90:	f04f 31ff 	mov.w	r1, #4294967295
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43d9      	mvns	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	4313      	orrs	r3, r2
         );
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3724      	adds	r7, #36	; 0x24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc0:	d301      	bcc.n	8000bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00f      	b.n	8000be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <SysTick_Config+0x40>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bce:	210f      	movs	r1, #15
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f7ff ff8e 	bl	8000af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <SysTick_Config+0x40>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <SysTick_Config+0x40>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	e000e010 	.word	0xe000e010

08000bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ff47 	bl	8000a90 <__NVIC_SetPriorityGrouping>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
 8000c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1c:	f7ff ff5c 	bl	8000ad8 <__NVIC_GetPriorityGrouping>
 8000c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	6978      	ldr	r0, [r7, #20]
 8000c28:	f7ff ff8e 	bl	8000b48 <NVIC_EncodePriority>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff5d 	bl	8000af4 <__NVIC_SetPriority>
}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffb0 	bl	8000bb0 <SysTick_Config>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	; 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
 8000c76:	e165      	b.n	8000f44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c78:	2201      	movs	r2, #1
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	697a      	ldr	r2, [r7, #20]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	f040 8154 	bne.w	8000f3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d005      	beq.n	8000cae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d130      	bne.n	8000d10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	68da      	ldr	r2, [r3, #12]
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	091b      	lsrs	r3, r3, #4
 8000cfa:	f003 0201 	and.w	r2, r3, #1
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	d017      	beq.n	8000d4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2203      	movs	r2, #3
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d123      	bne.n	8000da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	08da      	lsrs	r2, r3, #3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3208      	adds	r2, #8
 8000d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	f003 0307 	and.w	r3, r3, #7
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	220f      	movs	r2, #15
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	691a      	ldr	r2, [r3, #16]
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	08da      	lsrs	r2, r3, #3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3208      	adds	r2, #8
 8000d9a:	69b9      	ldr	r1, [r7, #24]
 8000d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2203      	movs	r2, #3
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0203 	and.w	r2, r3, #3
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f000 80ae 	beq.w	8000f3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b5d      	ldr	r3, [pc, #372]	; (8000f5c <HAL_GPIO_Init+0x300>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a5c      	ldr	r2, [pc, #368]	; (8000f5c <HAL_GPIO_Init+0x300>)
 8000dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b5a      	ldr	r3, [pc, #360]	; (8000f5c <HAL_GPIO_Init+0x300>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dfe:	4a58      	ldr	r2, [pc, #352]	; (8000f60 <HAL_GPIO_Init+0x304>)
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	3302      	adds	r3, #2
 8000e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	220f      	movs	r2, #15
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a4f      	ldr	r2, [pc, #316]	; (8000f64 <HAL_GPIO_Init+0x308>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d025      	beq.n	8000e76 <HAL_GPIO_Init+0x21a>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a4e      	ldr	r2, [pc, #312]	; (8000f68 <HAL_GPIO_Init+0x30c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d01f      	beq.n	8000e72 <HAL_GPIO_Init+0x216>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a4d      	ldr	r2, [pc, #308]	; (8000f6c <HAL_GPIO_Init+0x310>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d019      	beq.n	8000e6e <HAL_GPIO_Init+0x212>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4c      	ldr	r2, [pc, #304]	; (8000f70 <HAL_GPIO_Init+0x314>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d013      	beq.n	8000e6a <HAL_GPIO_Init+0x20e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4b      	ldr	r2, [pc, #300]	; (8000f74 <HAL_GPIO_Init+0x318>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d00d      	beq.n	8000e66 <HAL_GPIO_Init+0x20a>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4a      	ldr	r2, [pc, #296]	; (8000f78 <HAL_GPIO_Init+0x31c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d007      	beq.n	8000e62 <HAL_GPIO_Init+0x206>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a49      	ldr	r2, [pc, #292]	; (8000f7c <HAL_GPIO_Init+0x320>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d101      	bne.n	8000e5e <HAL_GPIO_Init+0x202>
 8000e5a:	2306      	movs	r3, #6
 8000e5c:	e00c      	b.n	8000e78 <HAL_GPIO_Init+0x21c>
 8000e5e:	2307      	movs	r3, #7
 8000e60:	e00a      	b.n	8000e78 <HAL_GPIO_Init+0x21c>
 8000e62:	2305      	movs	r3, #5
 8000e64:	e008      	b.n	8000e78 <HAL_GPIO_Init+0x21c>
 8000e66:	2304      	movs	r3, #4
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x21c>
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e004      	b.n	8000e78 <HAL_GPIO_Init+0x21c>
 8000e6e:	2302      	movs	r3, #2
 8000e70:	e002      	b.n	8000e78 <HAL_GPIO_Init+0x21c>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <HAL_GPIO_Init+0x21c>
 8000e76:	2300      	movs	r3, #0
 8000e78:	69fa      	ldr	r2, [r7, #28]
 8000e7a:	f002 0203 	and.w	r2, r2, #3
 8000e7e:	0092      	lsls	r2, r2, #2
 8000e80:	4093      	lsls	r3, r2
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e88:	4935      	ldr	r1, [pc, #212]	; (8000f60 <HAL_GPIO_Init+0x304>)
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e96:	4b3a      	ldr	r3, [pc, #232]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eba:	4a31      	ldr	r2, [pc, #196]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ee4:	4a26      	ldr	r2, [pc, #152]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eea:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f0e:	4a1c      	ldr	r2, [pc, #112]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f38:	4a11      	ldr	r2, [pc, #68]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3301      	adds	r3, #1
 8000f42:	61fb      	str	r3, [r7, #28]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	f67f ae96 	bls.w	8000c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3724      	adds	r7, #36	; 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40013800 	.word	0x40013800
 8000f64:	40020000 	.word	0x40020000
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	40020800 	.word	0x40020800
 8000f70:	40020c00 	.word	0x40020c00
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40021400 	.word	0x40021400
 8000f7c:	40021800 	.word	0x40021800
 8000f80:	40013c00 	.word	0x40013c00

08000f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	691a      	ldr	r2, [r3, #16]
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	e001      	b.n	8000fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc4:	787b      	ldrb	r3, [r7, #1]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fca:	887a      	ldrh	r2, [r7, #2]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fd0:	e003      	b.n	8000fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fd2:	887b      	ldrh	r3, [r7, #2]
 8000fd4:	041a      	lsls	r2, r3, #16
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	619a      	str	r2, [r3, #24]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b085      	sub	sp, #20
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ff8:	887a      	ldrh	r2, [r7, #2]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	041a      	lsls	r2, r3, #16
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	43d9      	mvns	r1, r3
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	400b      	ands	r3, r1
 8001008:	431a      	orrs	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	619a      	str	r2, [r3, #24]
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e0cc      	b.n	80011ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001030:	4b68      	ldr	r3, [pc, #416]	; (80011d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 030f 	and.w	r3, r3, #15
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d90c      	bls.n	8001058 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800103e:	4b65      	ldr	r3, [pc, #404]	; (80011d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001046:	4b63      	ldr	r3, [pc, #396]	; (80011d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	429a      	cmp	r2, r3
 8001052:	d001      	beq.n	8001058 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e0b8      	b.n	80011ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d020      	beq.n	80010a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001070:	4b59      	ldr	r3, [pc, #356]	; (80011d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	4a58      	ldr	r2, [pc, #352]	; (80011d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001076:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800107a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0308 	and.w	r3, r3, #8
 8001084:	2b00      	cmp	r3, #0
 8001086:	d005      	beq.n	8001094 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001088:	4b53      	ldr	r3, [pc, #332]	; (80011d8 <HAL_RCC_ClockConfig+0x1bc>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	4a52      	ldr	r2, [pc, #328]	; (80011d8 <HAL_RCC_ClockConfig+0x1bc>)
 800108e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001092:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001094:	4b50      	ldr	r3, [pc, #320]	; (80011d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	494d      	ldr	r1, [pc, #308]	; (80011d8 <HAL_RCC_ClockConfig+0x1bc>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d044      	beq.n	800113c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d107      	bne.n	80010ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ba:	4b47      	ldr	r3, [pc, #284]	; (80011d8 <HAL_RCC_ClockConfig+0x1bc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d119      	bne.n	80010fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e07f      	b.n	80011ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d003      	beq.n	80010da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d107      	bne.n	80010ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010da:	4b3f      	ldr	r3, [pc, #252]	; (80011d8 <HAL_RCC_ClockConfig+0x1bc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d109      	bne.n	80010fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e06f      	b.n	80011ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ea:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <HAL_RCC_ClockConfig+0x1bc>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e067      	b.n	80011ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010fa:	4b37      	ldr	r3, [pc, #220]	; (80011d8 <HAL_RCC_ClockConfig+0x1bc>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f023 0203 	bic.w	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	4934      	ldr	r1, [pc, #208]	; (80011d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001108:	4313      	orrs	r3, r2
 800110a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800110c:	f7ff fcb4 	bl	8000a78 <HAL_GetTick>
 8001110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001112:	e00a      	b.n	800112a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001114:	f7ff fcb0 	bl	8000a78 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001122:	4293      	cmp	r3, r2
 8001124:	d901      	bls.n	800112a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e04f      	b.n	80011ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_RCC_ClockConfig+0x1bc>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 020c 	and.w	r2, r3, #12
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	429a      	cmp	r2, r3
 800113a:	d1eb      	bne.n	8001114 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800113c:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <HAL_RCC_ClockConfig+0x1b8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 030f 	and.w	r3, r3, #15
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d20c      	bcs.n	8001164 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <HAL_RCC_ClockConfig+0x1b8>)
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	d001      	beq.n	8001164 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e032      	b.n	80011ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	2b00      	cmp	r3, #0
 800116e:	d008      	beq.n	8001182 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	4916      	ldr	r1, [pc, #88]	; (80011d8 <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	4313      	orrs	r3, r2
 8001180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	2b00      	cmp	r3, #0
 800118c:	d009      	beq.n	80011a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	490e      	ldr	r1, [pc, #56]	; (80011d8 <HAL_RCC_ClockConfig+0x1bc>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011a2:	f000 f821 	bl	80011e8 <HAL_RCC_GetSysClockFreq>
 80011a6:	4602      	mov	r2, r0
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	091b      	lsrs	r3, r3, #4
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	490a      	ldr	r1, [pc, #40]	; (80011dc <HAL_RCC_ClockConfig+0x1c0>)
 80011b4:	5ccb      	ldrb	r3, [r1, r3]
 80011b6:	fa22 f303 	lsr.w	r3, r2, r3
 80011ba:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <HAL_RCC_ClockConfig+0x1c4>)
 80011bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_RCC_ClockConfig+0x1c8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fc14 	bl	80009f0 <HAL_InitTick>

  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023c00 	.word	0x40023c00
 80011d8:	40023800 	.word	0x40023800
 80011dc:	08004f40 	.word	0x08004f40
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000004 	.word	0x20000004

080011e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011ec:	b0a6      	sub	sp, #152	; 0x98
 80011ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001202:	2300      	movs	r3, #0
 8001204:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800120e:	4bc8      	ldr	r3, [pc, #800]	; (8001530 <HAL_RCC_GetSysClockFreq+0x348>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
 8001216:	2b0c      	cmp	r3, #12
 8001218:	f200 817e 	bhi.w	8001518 <HAL_RCC_GetSysClockFreq+0x330>
 800121c:	a201      	add	r2, pc, #4	; (adr r2, 8001224 <HAL_RCC_GetSysClockFreq+0x3c>)
 800121e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001222:	bf00      	nop
 8001224:	08001259 	.word	0x08001259
 8001228:	08001519 	.word	0x08001519
 800122c:	08001519 	.word	0x08001519
 8001230:	08001519 	.word	0x08001519
 8001234:	08001261 	.word	0x08001261
 8001238:	08001519 	.word	0x08001519
 800123c:	08001519 	.word	0x08001519
 8001240:	08001519 	.word	0x08001519
 8001244:	08001269 	.word	0x08001269
 8001248:	08001519 	.word	0x08001519
 800124c:	08001519 	.word	0x08001519
 8001250:	08001519 	.word	0x08001519
 8001254:	080013d3 	.word	0x080013d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001258:	4bb6      	ldr	r3, [pc, #728]	; (8001534 <HAL_RCC_GetSysClockFreq+0x34c>)
 800125a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800125e:	e15f      	b.n	8001520 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001260:	4bb5      	ldr	r3, [pc, #724]	; (8001538 <HAL_RCC_GetSysClockFreq+0x350>)
 8001262:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001266:	e15b      	b.n	8001520 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001268:	4bb1      	ldr	r3, [pc, #708]	; (8001530 <HAL_RCC_GetSysClockFreq+0x348>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001270:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001274:	4bae      	ldr	r3, [pc, #696]	; (8001530 <HAL_RCC_GetSysClockFreq+0x348>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d031      	beq.n	80012e4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001280:	4bab      	ldr	r3, [pc, #684]	; (8001530 <HAL_RCC_GetSysClockFreq+0x348>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	099b      	lsrs	r3, r3, #6
 8001286:	2200      	movs	r2, #0
 8001288:	66bb      	str	r3, [r7, #104]	; 0x68
 800128a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800128c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800128e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001292:	663b      	str	r3, [r7, #96]	; 0x60
 8001294:	2300      	movs	r3, #0
 8001296:	667b      	str	r3, [r7, #100]	; 0x64
 8001298:	4ba7      	ldr	r3, [pc, #668]	; (8001538 <HAL_RCC_GetSysClockFreq+0x350>)
 800129a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800129e:	462a      	mov	r2, r5
 80012a0:	fb03 f202 	mul.w	r2, r3, r2
 80012a4:	2300      	movs	r3, #0
 80012a6:	4621      	mov	r1, r4
 80012a8:	fb01 f303 	mul.w	r3, r1, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	4aa2      	ldr	r2, [pc, #648]	; (8001538 <HAL_RCC_GetSysClockFreq+0x350>)
 80012b0:	4621      	mov	r1, r4
 80012b2:	fba1 1202 	umull	r1, r2, r1, r2
 80012b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80012b8:	460a      	mov	r2, r1
 80012ba:	67ba      	str	r2, [r7, #120]	; 0x78
 80012bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80012be:	4413      	add	r3, r2
 80012c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80012c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012c6:	2200      	movs	r2, #0
 80012c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80012ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80012cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80012d0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80012d4:	f7fe ffec 	bl	80002b0 <__aeabi_uldivmod>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4613      	mov	r3, r2
 80012de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80012e2:	e064      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012e4:	4b92      	ldr	r3, [pc, #584]	; (8001530 <HAL_RCC_GetSysClockFreq+0x348>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	099b      	lsrs	r3, r3, #6
 80012ea:	2200      	movs	r2, #0
 80012ec:	653b      	str	r3, [r7, #80]	; 0x50
 80012ee:	657a      	str	r2, [r7, #84]	; 0x54
 80012f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80012f8:	2300      	movs	r3, #0
 80012fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012fc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001300:	4622      	mov	r2, r4
 8001302:	462b      	mov	r3, r5
 8001304:	f04f 0000 	mov.w	r0, #0
 8001308:	f04f 0100 	mov.w	r1, #0
 800130c:	0159      	lsls	r1, r3, #5
 800130e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001312:	0150      	lsls	r0, r2, #5
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4621      	mov	r1, r4
 800131a:	1a51      	subs	r1, r2, r1
 800131c:	6139      	str	r1, [r7, #16]
 800131e:	4629      	mov	r1, r5
 8001320:	eb63 0301 	sbc.w	r3, r3, r1
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001332:	4659      	mov	r1, fp
 8001334:	018b      	lsls	r3, r1, #6
 8001336:	4651      	mov	r1, sl
 8001338:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800133c:	4651      	mov	r1, sl
 800133e:	018a      	lsls	r2, r1, #6
 8001340:	4651      	mov	r1, sl
 8001342:	ebb2 0801 	subs.w	r8, r2, r1
 8001346:	4659      	mov	r1, fp
 8001348:	eb63 0901 	sbc.w	r9, r3, r1
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001358:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800135c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001360:	4690      	mov	r8, r2
 8001362:	4699      	mov	r9, r3
 8001364:	4623      	mov	r3, r4
 8001366:	eb18 0303 	adds.w	r3, r8, r3
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	462b      	mov	r3, r5
 800136e:	eb49 0303 	adc.w	r3, r9, r3
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001380:	4629      	mov	r1, r5
 8001382:	028b      	lsls	r3, r1, #10
 8001384:	4621      	mov	r1, r4
 8001386:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800138a:	4621      	mov	r1, r4
 800138c:	028a      	lsls	r2, r1, #10
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001396:	2200      	movs	r2, #0
 8001398:	643b      	str	r3, [r7, #64]	; 0x40
 800139a:	647a      	str	r2, [r7, #68]	; 0x44
 800139c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80013a0:	f7fe ff86 	bl	80002b0 <__aeabi_uldivmod>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4613      	mov	r3, r2
 80013aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013ae:	4b60      	ldr	r3, [pc, #384]	; (8001530 <HAL_RCC_GetSysClockFreq+0x348>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	0c1b      	lsrs	r3, r3, #16
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	3301      	adds	r3, #1
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80013c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80013c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80013d0:	e0a6      	b.n	8001520 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013d2:	4b57      	ldr	r3, [pc, #348]	; (8001530 <HAL_RCC_GetSysClockFreq+0x348>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013de:	4b54      	ldr	r3, [pc, #336]	; (8001530 <HAL_RCC_GetSysClockFreq+0x348>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d02a      	beq.n	8001440 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ea:	4b51      	ldr	r3, [pc, #324]	; (8001530 <HAL_RCC_GetSysClockFreq+0x348>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	099b      	lsrs	r3, r3, #6
 80013f0:	2200      	movs	r2, #0
 80013f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80013f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80013f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80013fc:	2100      	movs	r1, #0
 80013fe:	4b4e      	ldr	r3, [pc, #312]	; (8001538 <HAL_RCC_GetSysClockFreq+0x350>)
 8001400:	fb03 f201 	mul.w	r2, r3, r1
 8001404:	2300      	movs	r3, #0
 8001406:	fb00 f303 	mul.w	r3, r0, r3
 800140a:	4413      	add	r3, r2
 800140c:	4a4a      	ldr	r2, [pc, #296]	; (8001538 <HAL_RCC_GetSysClockFreq+0x350>)
 800140e:	fba0 1202 	umull	r1, r2, r0, r2
 8001412:	677a      	str	r2, [r7, #116]	; 0x74
 8001414:	460a      	mov	r2, r1
 8001416:	673a      	str	r2, [r7, #112]	; 0x70
 8001418:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800141a:	4413      	add	r3, r2
 800141c:	677b      	str	r3, [r7, #116]	; 0x74
 800141e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001422:	2200      	movs	r2, #0
 8001424:	633b      	str	r3, [r7, #48]	; 0x30
 8001426:	637a      	str	r2, [r7, #52]	; 0x34
 8001428:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800142c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001430:	f7fe ff3e 	bl	80002b0 <__aeabi_uldivmod>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4613      	mov	r3, r2
 800143a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800143e:	e05b      	b.n	80014f8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001440:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <HAL_RCC_GetSysClockFreq+0x348>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	099b      	lsrs	r3, r3, #6
 8001446:	2200      	movs	r2, #0
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
 800144a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800144c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001452:	623b      	str	r3, [r7, #32]
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
 8001458:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800145c:	4642      	mov	r2, r8
 800145e:	464b      	mov	r3, r9
 8001460:	f04f 0000 	mov.w	r0, #0
 8001464:	f04f 0100 	mov.w	r1, #0
 8001468:	0159      	lsls	r1, r3, #5
 800146a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800146e:	0150      	lsls	r0, r2, #5
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4641      	mov	r1, r8
 8001476:	ebb2 0a01 	subs.w	sl, r2, r1
 800147a:	4649      	mov	r1, r9
 800147c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800148c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001490:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001494:	ebb2 040a 	subs.w	r4, r2, sl
 8001498:	eb63 050b 	sbc.w	r5, r3, fp
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	00eb      	lsls	r3, r5, #3
 80014a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014aa:	00e2      	lsls	r2, r4, #3
 80014ac:	4614      	mov	r4, r2
 80014ae:	461d      	mov	r5, r3
 80014b0:	4643      	mov	r3, r8
 80014b2:	18e3      	adds	r3, r4, r3
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	464b      	mov	r3, r9
 80014b8:	eb45 0303 	adc.w	r3, r5, r3
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014ca:	4629      	mov	r1, r5
 80014cc:	028b      	lsls	r3, r1, #10
 80014ce:	4621      	mov	r1, r4
 80014d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014d4:	4621      	mov	r1, r4
 80014d6:	028a      	lsls	r2, r1, #10
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80014e0:	2200      	movs	r2, #0
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	61fa      	str	r2, [r7, #28]
 80014e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014ea:	f7fe fee1 	bl	80002b0 <__aeabi_uldivmod>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4613      	mov	r3, r2
 80014f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_RCC_GetSysClockFreq+0x348>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	0f1b      	lsrs	r3, r3, #28
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001506:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800150a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001516:	e003      	b.n	8001520 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_RCC_GetSysClockFreq+0x34c>)
 800151a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800151e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001520:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001524:	4618      	mov	r0, r3
 8001526:	3798      	adds	r7, #152	; 0x98
 8001528:	46bd      	mov	sp, r7
 800152a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	00f42400 	.word	0x00f42400
 8001538:	017d7840 	.word	0x017d7840

0800153c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e28d      	b.n	8001a6a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8083 	beq.w	8001662 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800155c:	4b94      	ldr	r3, [pc, #592]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b04      	cmp	r3, #4
 8001566:	d019      	beq.n	800159c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001568:	4b91      	ldr	r3, [pc, #580]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001570:	2b08      	cmp	r3, #8
 8001572:	d106      	bne.n	8001582 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001574:	4b8e      	ldr	r3, [pc, #568]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800157c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001580:	d00c      	beq.n	800159c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001582:	4b8b      	ldr	r3, [pc, #556]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800158a:	2b0c      	cmp	r3, #12
 800158c:	d112      	bne.n	80015b4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800158e:	4b88      	ldr	r3, [pc, #544]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800159a:	d10b      	bne.n	80015b4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159c:	4b84      	ldr	r3, [pc, #528]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d05b      	beq.n	8001660 <HAL_RCC_OscConfig+0x124>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d157      	bne.n	8001660 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e25a      	b.n	8001a6a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015bc:	d106      	bne.n	80015cc <HAL_RCC_OscConfig+0x90>
 80015be:	4b7c      	ldr	r3, [pc, #496]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a7b      	ldr	r2, [pc, #492]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 80015c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e01d      	b.n	8001608 <HAL_RCC_OscConfig+0xcc>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0xb4>
 80015d6:	4b76      	ldr	r3, [pc, #472]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a75      	ldr	r2, [pc, #468]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 80015dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4b73      	ldr	r3, [pc, #460]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a72      	ldr	r2, [pc, #456]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 80015e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e00b      	b.n	8001608 <HAL_RCC_OscConfig+0xcc>
 80015f0:	4b6f      	ldr	r3, [pc, #444]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a6e      	ldr	r2, [pc, #440]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 80015f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	4b6c      	ldr	r3, [pc, #432]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a6b      	ldr	r2, [pc, #428]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 8001602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d013      	beq.n	8001638 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fa32 	bl	8000a78 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001618:	f7ff fa2e 	bl	8000a78 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	; 0x64
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e21f      	b.n	8001a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	4b61      	ldr	r3, [pc, #388]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0xdc>
 8001636:	e014      	b.n	8001662 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001638:	f7ff fa1e 	bl	8000a78 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001640:	f7ff fa1a 	bl	8000a78 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b64      	cmp	r3, #100	; 0x64
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e20b      	b.n	8001a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001652:	4b57      	ldr	r3, [pc, #348]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x104>
 800165e:	e000      	b.n	8001662 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d06f      	beq.n	800174e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800166e:	4b50      	ldr	r3, [pc, #320]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b00      	cmp	r3, #0
 8001678:	d017      	beq.n	80016aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800167a:	4b4d      	ldr	r3, [pc, #308]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001682:	2b08      	cmp	r3, #8
 8001684:	d105      	bne.n	8001692 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001686:	4b4a      	ldr	r3, [pc, #296]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00b      	beq.n	80016aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001692:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800169a:	2b0c      	cmp	r3, #12
 800169c:	d11c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169e:	4b44      	ldr	r3, [pc, #272]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d116      	bne.n	80016d8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016aa:	4b41      	ldr	r3, [pc, #260]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d005      	beq.n	80016c2 <HAL_RCC_OscConfig+0x186>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e1d3      	b.n	8001a6a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c2:	4b3b      	ldr	r3, [pc, #236]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4937      	ldr	r1, [pc, #220]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d6:	e03a      	b.n	800174e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d020      	beq.n	8001722 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e0:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <HAL_RCC_OscConfig+0x278>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e6:	f7ff f9c7 	bl	8000a78 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ee:	f7ff f9c3 	bl	8000a78 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e1b4      	b.n	8001a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170c:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4925      	ldr	r1, [pc, #148]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
 8001720:	e015      	b.n	800174e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001722:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <HAL_RCC_OscConfig+0x278>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff f9a6 	bl	8000a78 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001730:	f7ff f9a2 	bl	8000a78 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e193      	b.n	8001a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d036      	beq.n	80017c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d016      	beq.n	8001790 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_RCC_OscConfig+0x27c>)
 8001764:	2201      	movs	r2, #1
 8001766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff f986 	bl	8000a78 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001770:	f7ff f982 	bl	8000a78 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e173      	b.n	8001a6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 8001784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x234>
 800178e:	e01b      	b.n	80017c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_RCC_OscConfig+0x27c>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001796:	f7ff f96f 	bl	8000a78 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179c:	e00e      	b.n	80017bc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800179e:	f7ff f96b 	bl	8000a78 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d907      	bls.n	80017bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e15c      	b.n	8001a6a <HAL_RCC_OscConfig+0x52e>
 80017b0:	40023800 	.word	0x40023800
 80017b4:	42470000 	.word	0x42470000
 80017b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017bc:	4b8a      	ldr	r3, [pc, #552]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 80017be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1ea      	bne.n	800179e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 8097 	beq.w	8001904 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017da:	4b83      	ldr	r3, [pc, #524]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10f      	bne.n	8001806 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b7f      	ldr	r3, [pc, #508]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	4a7e      	ldr	r2, [pc, #504]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	6413      	str	r3, [r2, #64]	; 0x40
 80017f6:	4b7c      	ldr	r3, [pc, #496]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001802:	2301      	movs	r3, #1
 8001804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001806:	4b79      	ldr	r3, [pc, #484]	; (80019ec <HAL_RCC_OscConfig+0x4b0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180e:	2b00      	cmp	r3, #0
 8001810:	d118      	bne.n	8001844 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001812:	4b76      	ldr	r3, [pc, #472]	; (80019ec <HAL_RCC_OscConfig+0x4b0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a75      	ldr	r2, [pc, #468]	; (80019ec <HAL_RCC_OscConfig+0x4b0>)
 8001818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181e:	f7ff f92b 	bl	8000a78 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001826:	f7ff f927 	bl	8000a78 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e118      	b.n	8001a6a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001838:	4b6c      	ldr	r3, [pc, #432]	; (80019ec <HAL_RCC_OscConfig+0x4b0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d106      	bne.n	800185a <HAL_RCC_OscConfig+0x31e>
 800184c:	4b66      	ldr	r3, [pc, #408]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 800184e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001850:	4a65      	ldr	r2, [pc, #404]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6713      	str	r3, [r2, #112]	; 0x70
 8001858:	e01c      	b.n	8001894 <HAL_RCC_OscConfig+0x358>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b05      	cmp	r3, #5
 8001860:	d10c      	bne.n	800187c <HAL_RCC_OscConfig+0x340>
 8001862:	4b61      	ldr	r3, [pc, #388]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001866:	4a60      	ldr	r2, [pc, #384]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6713      	str	r3, [r2, #112]	; 0x70
 800186e:	4b5e      	ldr	r3, [pc, #376]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001872:	4a5d      	ldr	r2, [pc, #372]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6713      	str	r3, [r2, #112]	; 0x70
 800187a:	e00b      	b.n	8001894 <HAL_RCC_OscConfig+0x358>
 800187c:	4b5a      	ldr	r3, [pc, #360]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001880:	4a59      	ldr	r2, [pc, #356]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	6713      	str	r3, [r2, #112]	; 0x70
 8001888:	4b57      	ldr	r3, [pc, #348]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188c:	4a56      	ldr	r2, [pc, #344]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 800188e:	f023 0304 	bic.w	r3, r3, #4
 8001892:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d015      	beq.n	80018c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189c:	f7ff f8ec 	bl	8000a78 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a4:	f7ff f8e8 	bl	8000a78 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e0d7      	b.n	8001a6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ba:	4b4b      	ldr	r3, [pc, #300]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0ee      	beq.n	80018a4 <HAL_RCC_OscConfig+0x368>
 80018c6:	e014      	b.n	80018f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c8:	f7ff f8d6 	bl	8000a78 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f7ff f8d2 	bl	8000a78 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e0c1      	b.n	8001a6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e6:	4b40      	ldr	r3, [pc, #256]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1ee      	bne.n	80018d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d105      	bne.n	8001904 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f8:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	4a3a      	ldr	r2, [pc, #232]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 80018fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001902:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80ad 	beq.w	8001a68 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800190e:	4b36      	ldr	r3, [pc, #216]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b08      	cmp	r3, #8
 8001918:	d060      	beq.n	80019dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d145      	bne.n	80019ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001922:	4b33      	ldr	r3, [pc, #204]	; (80019f0 <HAL_RCC_OscConfig+0x4b4>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff f8a6 	bl	8000a78 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff f8a2 	bl	8000a78 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e093      	b.n	8001a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001942:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69da      	ldr	r2, [r3, #28]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	019b      	lsls	r3, r3, #6
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	3b01      	subs	r3, #1
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	061b      	lsls	r3, r3, #24
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	071b      	lsls	r3, r3, #28
 800197a:	491b      	ldr	r1, [pc, #108]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001980:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <HAL_RCC_OscConfig+0x4b4>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001986:	f7ff f877 	bl	8000a78 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198e:	f7ff f873 	bl	8000a78 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e064      	b.n	8001a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x452>
 80019ac:	e05c      	b.n	8001a68 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <HAL_RCC_OscConfig+0x4b4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff f860 	bl	8000a78 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019bc:	f7ff f85c 	bl	8000a78 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e04d      	b.n	8001a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_RCC_OscConfig+0x4ac>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x480>
 80019da:	e045      	b.n	8001a68 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e040      	b.n	8001a6a <HAL_RCC_OscConfig+0x52e>
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40007000 	.word	0x40007000
 80019f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <HAL_RCC_OscConfig+0x538>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d030      	beq.n	8001a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d129      	bne.n	8001a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d122      	bne.n	8001a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a24:	4013      	ands	r3, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d119      	bne.n	8001a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	085b      	lsrs	r3, r3, #1
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d10f      	bne.n	8001a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d107      	bne.n	8001a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800

08001a78 <__NVIC_SetPriority>:
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	6039      	str	r1, [r7, #0]
 8001a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	db0a      	blt.n	8001aa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	490c      	ldr	r1, [pc, #48]	; (8001ac4 <__NVIC_SetPriority+0x4c>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	0112      	lsls	r2, r2, #4
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001aa0:	e00a      	b.n	8001ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4908      	ldr	r1, [pc, #32]	; (8001ac8 <__NVIC_SetPriority+0x50>)
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	3b04      	subs	r3, #4
 8001ab0:	0112      	lsls	r2, r2, #4
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	761a      	strb	r2, [r3, #24]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000e100 	.word	0xe000e100
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	f06f 0004 	mvn.w	r0, #4
 8001ad6:	f7ff ffcf 	bl	8001a78 <__NVIC_SetPriority>
#endif
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ae6:	f3ef 8305 	mrs	r3, IPSR
 8001aea:	603b      	str	r3, [r7, #0]
  return(result);
 8001aec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001af2:	f06f 0305 	mvn.w	r3, #5
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	e00c      	b.n	8001b14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <osKernelInitialize+0x44>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d105      	bne.n	8001b0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <osKernelInitialize+0x44>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	e002      	b.n	8001b14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001b14:	687b      	ldr	r3, [r7, #4]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	200000f0 	.word	0x200000f0

08001b28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b2e:	f3ef 8305 	mrs	r3, IPSR
 8001b32:	603b      	str	r3, [r7, #0]
  return(result);
 8001b34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001b3a:	f06f 0305 	mvn.w	r3, #5
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	e010      	b.n	8001b64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <osKernelStart+0x48>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d109      	bne.n	8001b5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001b4a:	f7ff ffbf 	bl	8001acc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <osKernelStart+0x48>)
 8001b50:	2202      	movs	r2, #2
 8001b52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001b54:	f001 f84a 	bl	8002bec <vTaskStartScheduler>
      stat = osOK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	e002      	b.n	8001b64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001b64:	687b      	ldr	r3, [r7, #4]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200000f0 	.word	0x200000f0

08001b74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08e      	sub	sp, #56	; 0x38
 8001b78:	af04      	add	r7, sp, #16
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b84:	f3ef 8305 	mrs	r3, IPSR
 8001b88:	617b      	str	r3, [r7, #20]
  return(result);
 8001b8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d17e      	bne.n	8001c8e <osThreadNew+0x11a>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d07b      	beq.n	8001c8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001b9a:	2318      	movs	r3, #24
 8001b9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d045      	beq.n	8001c3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <osThreadNew+0x48>
        name = attr->name;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d008      	beq.n	8001be2 <osThreadNew+0x6e>
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	2b38      	cmp	r3, #56	; 0x38
 8001bd4:	d805      	bhi.n	8001be2 <osThreadNew+0x6e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <osThreadNew+0x72>
        return (NULL);
 8001be2:	2300      	movs	r3, #0
 8001be4:	e054      	b.n	8001c90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00e      	beq.n	8001c1c <osThreadNew+0xa8>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2b5b      	cmp	r3, #91	; 0x5b
 8001c04:	d90a      	bls.n	8001c1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <osThreadNew+0xa8>
        mem = 1;
 8001c16:	2301      	movs	r3, #1
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	e010      	b.n	8001c3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10c      	bne.n	8001c3e <osThreadNew+0xca>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d108      	bne.n	8001c3e <osThreadNew+0xca>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d104      	bne.n	8001c3e <osThreadNew+0xca>
          mem = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]
 8001c38:	e001      	b.n	8001c3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d110      	bne.n	8001c66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001c4c:	9202      	str	r2, [sp, #8]
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	6a3a      	ldr	r2, [r7, #32]
 8001c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 fdf0 	bl	8002840 <xTaskCreateStatic>
 8001c60:	4603      	mov	r3, r0
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	e013      	b.n	8001c8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d110      	bne.n	8001c8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 fe3b 	bl	80028fa <xTaskCreate>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d001      	beq.n	8001c8e <osThreadNew+0x11a>
            hTask = NULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001c8e:	693b      	ldr	r3, [r7, #16]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3728      	adds	r7, #40	; 0x28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001ca8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	4a06      	ldr	r2, [pc, #24]	; (8001cc8 <vApplicationGetIdleTaskMemory+0x30>)
 8001cae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2280      	movs	r2, #128	; 0x80
 8001cb4:	601a      	str	r2, [r3, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	200000f4 	.word	0x200000f4
 8001cc8:	20000150 	.word	0x20000150

08001ccc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <vApplicationGetTimerTaskMemory+0x2c>)
 8001cdc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <vApplicationGetTimerTaskMemory+0x30>)
 8001ce2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cea:	601a      	str	r2, [r3, #0]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	20000350 	.word	0x20000350
 8001cfc:	200003ac 	.word	0x200003ac

08001d00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f103 0208 	add.w	r2, r3, #8
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f103 0208 	add.w	r2, r3, #8
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f103 0208 	add.w	r2, r3, #8
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b085      	sub	sp, #20
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	601a      	str	r2, [r3, #0]
}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001da2:	b480      	push	{r7}
 8001da4:	b085      	sub	sp, #20
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db8:	d103      	bne.n	8001dc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	e00c      	b.n	8001ddc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3308      	adds	r3, #8
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	e002      	b.n	8001dd0 <vListInsert+0x2e>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d2f6      	bcs.n	8001dca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	601a      	str	r2, [r3, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6892      	ldr	r2, [r2, #8]
 8001e2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6852      	ldr	r2, [r2, #4]
 8001e34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d103      	bne.n	8001e48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	1e5a      	subs	r2, r3, #1
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10a      	bne.n	8001e92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e80:	f383 8811 	msr	BASEPRI, r3
 8001e84:	f3bf 8f6f 	isb	sy
 8001e88:	f3bf 8f4f 	dsb	sy
 8001e8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001e8e:	bf00      	nop
 8001e90:	e7fe      	b.n	8001e90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001e92:	f002 f84f 	bl	8003f34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9e:	68f9      	ldr	r1, [r7, #12]
 8001ea0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
 8001ea6:	441a      	add	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	68f9      	ldr	r1, [r7, #12]
 8001ec6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ec8:	fb01 f303 	mul.w	r3, r1, r3
 8001ecc:	441a      	add	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	22ff      	movs	r2, #255	; 0xff
 8001ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	22ff      	movs	r2, #255	; 0xff
 8001ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d114      	bne.n	8001f12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d01a      	beq.n	8001f26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	3310      	adds	r3, #16
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f001 f903 	bl	8003100 <xTaskRemoveFromEventList>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d012      	beq.n	8001f26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <xQueueGenericReset+0xcc>)
 8001f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	f3bf 8f4f 	dsb	sy
 8001f0c:	f3bf 8f6f 	isb	sy
 8001f10:	e009      	b.n	8001f26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	3310      	adds	r3, #16
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fef2 	bl	8001d00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3324      	adds	r3, #36	; 0x24
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff feed 	bl	8001d00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001f26:	f002 f835 	bl	8003f94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001f2a:	2301      	movs	r3, #1
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	e000ed04 	.word	0xe000ed04

08001f38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08e      	sub	sp, #56	; 0x38
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10a      	bne.n	8001f62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f50:	f383 8811 	msr	BASEPRI, r3
 8001f54:	f3bf 8f6f 	isb	sy
 8001f58:	f3bf 8f4f 	dsb	sy
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001f5e:	bf00      	nop
 8001f60:	e7fe      	b.n	8001f60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10a      	bne.n	8001f7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f6c:	f383 8811 	msr	BASEPRI, r3
 8001f70:	f3bf 8f6f 	isb	sy
 8001f74:	f3bf 8f4f 	dsb	sy
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001f7a:	bf00      	nop
 8001f7c:	e7fe      	b.n	8001f7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <xQueueGenericCreateStatic+0x52>
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <xQueueGenericCreateStatic+0x56>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <xQueueGenericCreateStatic+0x58>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10a      	bne.n	8001faa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f98:	f383 8811 	msr	BASEPRI, r3
 8001f9c:	f3bf 8f6f 	isb	sy
 8001fa0:	f3bf 8f4f 	dsb	sy
 8001fa4:	623b      	str	r3, [r7, #32]
}
 8001fa6:	bf00      	nop
 8001fa8:	e7fe      	b.n	8001fa8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d102      	bne.n	8001fb6 <xQueueGenericCreateStatic+0x7e>
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <xQueueGenericCreateStatic+0x82>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <xQueueGenericCreateStatic+0x84>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10a      	bne.n	8001fd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc4:	f383 8811 	msr	BASEPRI, r3
 8001fc8:	f3bf 8f6f 	isb	sy
 8001fcc:	f3bf 8f4f 	dsb	sy
 8001fd0:	61fb      	str	r3, [r7, #28]
}
 8001fd2:	bf00      	nop
 8001fd4:	e7fe      	b.n	8001fd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001fd6:	2350      	movs	r3, #80	; 0x50
 8001fd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2b50      	cmp	r3, #80	; 0x50
 8001fde:	d00a      	beq.n	8001ff6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe4:	f383 8811 	msr	BASEPRI, r3
 8001fe8:	f3bf 8f6f 	isb	sy
 8001fec:	f3bf 8f4f 	dsb	sy
 8001ff0:	61bb      	str	r3, [r7, #24]
}
 8001ff2:	bf00      	nop
 8001ff4:	e7fe      	b.n	8001ff4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001ff6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00d      	beq.n	800201e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800200a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	4613      	mov	r3, r2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	68b9      	ldr	r1, [r7, #8]
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f805 	bl	8002028 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800201e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002020:	4618      	mov	r0, r3
 8002022:	3730      	adds	r7, #48	; 0x30
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d103      	bne.n	8002044 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	e002      	b.n	800204a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002056:	2101      	movs	r1, #1
 8002058:	69b8      	ldr	r0, [r7, #24]
 800205a:	f7ff ff05 	bl	8001e68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08e      	sub	sp, #56	; 0x38
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800207e:	2300      	movs	r3, #0
 8002080:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10a      	bne.n	80020a2 <xQueueGenericSend+0x32>
	__asm volatile
 800208c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002090:	f383 8811 	msr	BASEPRI, r3
 8002094:	f3bf 8f6f 	isb	sy
 8002098:	f3bf 8f4f 	dsb	sy
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800209e:	bf00      	nop
 80020a0:	e7fe      	b.n	80020a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d103      	bne.n	80020b0 <xQueueGenericSend+0x40>
 80020a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <xQueueGenericSend+0x44>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <xQueueGenericSend+0x46>
 80020b4:	2300      	movs	r3, #0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10a      	bne.n	80020d0 <xQueueGenericSend+0x60>
	__asm volatile
 80020ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020be:	f383 8811 	msr	BASEPRI, r3
 80020c2:	f3bf 8f6f 	isb	sy
 80020c6:	f3bf 8f4f 	dsb	sy
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80020cc:	bf00      	nop
 80020ce:	e7fe      	b.n	80020ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d103      	bne.n	80020de <xQueueGenericSend+0x6e>
 80020d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <xQueueGenericSend+0x72>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <xQueueGenericSend+0x74>
 80020e2:	2300      	movs	r3, #0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10a      	bne.n	80020fe <xQueueGenericSend+0x8e>
	__asm volatile
 80020e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ec:	f383 8811 	msr	BASEPRI, r3
 80020f0:	f3bf 8f6f 	isb	sy
 80020f4:	f3bf 8f4f 	dsb	sy
 80020f8:	623b      	str	r3, [r7, #32]
}
 80020fa:	bf00      	nop
 80020fc:	e7fe      	b.n	80020fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020fe:	f001 f9bd 	bl	800347c <xTaskGetSchedulerState>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <xQueueGenericSend+0x9e>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <xQueueGenericSend+0xa2>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <xQueueGenericSend+0xa4>
 8002112:	2300      	movs	r3, #0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10a      	bne.n	800212e <xQueueGenericSend+0xbe>
	__asm volatile
 8002118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211c:	f383 8811 	msr	BASEPRI, r3
 8002120:	f3bf 8f6f 	isb	sy
 8002124:	f3bf 8f4f 	dsb	sy
 8002128:	61fb      	str	r3, [r7, #28]
}
 800212a:	bf00      	nop
 800212c:	e7fe      	b.n	800212c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800212e:	f001 ff01 	bl	8003f34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213a:	429a      	cmp	r2, r3
 800213c:	d302      	bcc.n	8002144 <xQueueGenericSend+0xd4>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d129      	bne.n	8002198 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	68b9      	ldr	r1, [r7, #8]
 8002148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800214a:	f000 fa0b 	bl	8002564 <prvCopyDataToQueue>
 800214e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	2b00      	cmp	r3, #0
 8002156:	d010      	beq.n	800217a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215a:	3324      	adds	r3, #36	; 0x24
 800215c:	4618      	mov	r0, r3
 800215e:	f000 ffcf 	bl	8003100 <xTaskRemoveFromEventList>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d013      	beq.n	8002190 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002168:	4b3f      	ldr	r3, [pc, #252]	; (8002268 <xQueueGenericSend+0x1f8>)
 800216a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	f3bf 8f4f 	dsb	sy
 8002174:	f3bf 8f6f 	isb	sy
 8002178:	e00a      	b.n	8002190 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217c:	2b00      	cmp	r3, #0
 800217e:	d007      	beq.n	8002190 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002180:	4b39      	ldr	r3, [pc, #228]	; (8002268 <xQueueGenericSend+0x1f8>)
 8002182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002190:	f001 ff00 	bl	8003f94 <vPortExitCritical>
				return pdPASS;
 8002194:	2301      	movs	r3, #1
 8002196:	e063      	b.n	8002260 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d103      	bne.n	80021a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800219e:	f001 fef9 	bl	8003f94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e05c      	b.n	8002260 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80021a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d106      	bne.n	80021ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	4618      	mov	r0, r3
 80021b2:	f001 f809 	bl	80031c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80021b6:	2301      	movs	r3, #1
 80021b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80021ba:	f001 feeb 	bl	8003f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80021be:	f000 fd7b 	bl	8002cb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80021c2:	f001 feb7 	bl	8003f34 <vPortEnterCritical>
 80021c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021cc:	b25b      	sxtb	r3, r3
 80021ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d2:	d103      	bne.n	80021dc <xQueueGenericSend+0x16c>
 80021d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021e2:	b25b      	sxtb	r3, r3
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d103      	bne.n	80021f2 <xQueueGenericSend+0x182>
 80021ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021f2:	f001 fecf 	bl	8003f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021f6:	1d3a      	adds	r2, r7, #4
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4611      	mov	r1, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fff8 	bl	80031f4 <xTaskCheckForTimeOut>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d124      	bne.n	8002254 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800220a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800220c:	f000 faa2 	bl	8002754 <prvIsQueueFull>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d018      	beq.n	8002248 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002218:	3310      	adds	r3, #16
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	4611      	mov	r1, r2
 800221e:	4618      	mov	r0, r3
 8002220:	f000 ff1e 	bl	8003060 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002226:	f000 fa2d 	bl	8002684 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800222a:	f000 fd53 	bl	8002cd4 <xTaskResumeAll>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	f47f af7c 	bne.w	800212e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <xQueueGenericSend+0x1f8>)
 8002238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	f3bf 8f4f 	dsb	sy
 8002242:	f3bf 8f6f 	isb	sy
 8002246:	e772      	b.n	800212e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800224a:	f000 fa1b 	bl	8002684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800224e:	f000 fd41 	bl	8002cd4 <xTaskResumeAll>
 8002252:	e76c      	b.n	800212e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002256:	f000 fa15 	bl	8002684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800225a:	f000 fd3b 	bl	8002cd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800225e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002260:	4618      	mov	r0, r3
 8002262:	3738      	adds	r7, #56	; 0x38
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	e000ed04 	.word	0xe000ed04

0800226c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b090      	sub	sp, #64	; 0x40
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800227e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10a      	bne.n	800229a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002288:	f383 8811 	msr	BASEPRI, r3
 800228c:	f3bf 8f6f 	isb	sy
 8002290:	f3bf 8f4f 	dsb	sy
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002296:	bf00      	nop
 8002298:	e7fe      	b.n	8002298 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d103      	bne.n	80022a8 <xQueueGenericSendFromISR+0x3c>
 80022a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <xQueueGenericSendFromISR+0x40>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <xQueueGenericSendFromISR+0x42>
 80022ac:	2300      	movs	r3, #0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10a      	bne.n	80022c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80022b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b6:	f383 8811 	msr	BASEPRI, r3
 80022ba:	f3bf 8f6f 	isb	sy
 80022be:	f3bf 8f4f 	dsb	sy
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80022c4:	bf00      	nop
 80022c6:	e7fe      	b.n	80022c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d103      	bne.n	80022d6 <xQueueGenericSendFromISR+0x6a>
 80022ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <xQueueGenericSendFromISR+0x6e>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <xQueueGenericSendFromISR+0x70>
 80022da:	2300      	movs	r3, #0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10a      	bne.n	80022f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80022e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e4:	f383 8811 	msr	BASEPRI, r3
 80022e8:	f3bf 8f6f 	isb	sy
 80022ec:	f3bf 8f4f 	dsb	sy
 80022f0:	623b      	str	r3, [r7, #32]
}
 80022f2:	bf00      	nop
 80022f4:	e7fe      	b.n	80022f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80022f6:	f001 feff 	bl	80040f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80022fa:	f3ef 8211 	mrs	r2, BASEPRI
 80022fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002302:	f383 8811 	msr	BASEPRI, r3
 8002306:	f3bf 8f6f 	isb	sy
 800230a:	f3bf 8f4f 	dsb	sy
 800230e:	61fa      	str	r2, [r7, #28]
 8002310:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002312:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002314:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800231a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231e:	429a      	cmp	r2, r3
 8002320:	d302      	bcc.n	8002328 <xQueueGenericSendFromISR+0xbc>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d12f      	bne.n	8002388 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800232e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800233e:	f000 f911 	bl	8002564 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002342:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234a:	d112      	bne.n	8002372 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	2b00      	cmp	r3, #0
 8002352:	d016      	beq.n	8002382 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002356:	3324      	adds	r3, #36	; 0x24
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fed1 	bl	8003100 <xTaskRemoveFromEventList>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00e      	beq.n	8002382 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	e007      	b.n	8002382 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002372:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002376:	3301      	adds	r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	b25a      	sxtb	r2, r3
 800237c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002382:	2301      	movs	r3, #1
 8002384:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002386:	e001      	b.n	800238c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002388:	2300      	movs	r3, #0
 800238a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800238c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002396:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800239a:	4618      	mov	r0, r3
 800239c:	3740      	adds	r7, #64	; 0x40
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08c      	sub	sp, #48	; 0x30
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80023b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10a      	bne.n	80023d4 <xQueueReceive+0x30>
	__asm volatile
 80023be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c2:	f383 8811 	msr	BASEPRI, r3
 80023c6:	f3bf 8f6f 	isb	sy
 80023ca:	f3bf 8f4f 	dsb	sy
 80023ce:	623b      	str	r3, [r7, #32]
}
 80023d0:	bf00      	nop
 80023d2:	e7fe      	b.n	80023d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d103      	bne.n	80023e2 <xQueueReceive+0x3e>
 80023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <xQueueReceive+0x42>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <xQueueReceive+0x44>
 80023e6:	2300      	movs	r3, #0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10a      	bne.n	8002402 <xQueueReceive+0x5e>
	__asm volatile
 80023ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f0:	f383 8811 	msr	BASEPRI, r3
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	61fb      	str	r3, [r7, #28]
}
 80023fe:	bf00      	nop
 8002400:	e7fe      	b.n	8002400 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002402:	f001 f83b 	bl	800347c <xTaskGetSchedulerState>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d102      	bne.n	8002412 <xQueueReceive+0x6e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <xQueueReceive+0x72>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <xQueueReceive+0x74>
 8002416:	2300      	movs	r3, #0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <xQueueReceive+0x8e>
	__asm volatile
 800241c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	61bb      	str	r3, [r7, #24]
}
 800242e:	bf00      	nop
 8002430:	e7fe      	b.n	8002430 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002432:	f001 fd7f 	bl	8003f34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	2b00      	cmp	r3, #0
 8002440:	d01f      	beq.n	8002482 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002446:	f000 f8f7 	bl	8002638 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	1e5a      	subs	r2, r3, #1
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00f      	beq.n	800247a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	3310      	adds	r3, #16
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fe4e 	bl	8003100 <xTaskRemoveFromEventList>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800246a:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <xQueueReceive+0x1bc>)
 800246c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800247a:	f001 fd8b 	bl	8003f94 <vPortExitCritical>
				return pdPASS;
 800247e:	2301      	movs	r3, #1
 8002480:	e069      	b.n	8002556 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d103      	bne.n	8002490 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002488:	f001 fd84 	bl	8003f94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800248c:	2300      	movs	r3, #0
 800248e:	e062      	b.n	8002556 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002496:	f107 0310 	add.w	r3, r7, #16
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fe94 	bl	80031c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024a0:	2301      	movs	r3, #1
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024a4:	f001 fd76 	bl	8003f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024a8:	f000 fc06 	bl	8002cb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024ac:	f001 fd42 	bl	8003f34 <vPortEnterCritical>
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024b6:	b25b      	sxtb	r3, r3
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d103      	bne.n	80024c6 <xQueueReceive+0x122>
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024cc:	b25b      	sxtb	r3, r3
 80024ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d2:	d103      	bne.n	80024dc <xQueueReceive+0x138>
 80024d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024dc:	f001 fd5a 	bl	8003f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024e0:	1d3a      	adds	r2, r7, #4
 80024e2:	f107 0310 	add.w	r3, r7, #16
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 fe83 	bl	80031f4 <xTaskCheckForTimeOut>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d123      	bne.n	800253c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024f6:	f000 f917 	bl	8002728 <prvIsQueueEmpty>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d017      	beq.n	8002530 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002502:	3324      	adds	r3, #36	; 0x24
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fda9 	bl	8003060 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800250e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002510:	f000 f8b8 	bl	8002684 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002514:	f000 fbde 	bl	8002cd4 <xTaskResumeAll>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d189      	bne.n	8002432 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800251e:	4b10      	ldr	r3, [pc, #64]	; (8002560 <xQueueReceive+0x1bc>)
 8002520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	f3bf 8f4f 	dsb	sy
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	e780      	b.n	8002432 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002532:	f000 f8a7 	bl	8002684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002536:	f000 fbcd 	bl	8002cd4 <xTaskResumeAll>
 800253a:	e77a      	b.n	8002432 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800253c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800253e:	f000 f8a1 	bl	8002684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002542:	f000 fbc7 	bl	8002cd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002548:	f000 f8ee 	bl	8002728 <prvIsQueueEmpty>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	f43f af6f 	beq.w	8002432 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002554:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002556:	4618      	mov	r0, r3
 8002558:	3730      	adds	r7, #48	; 0x30
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	e000ed04 	.word	0xe000ed04

08002564 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10d      	bne.n	800259e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d14d      	bne.n	8002626 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	4618      	mov	r0, r3
 8002590:	f000 ff92 	bl	80034b8 <xTaskPriorityDisinherit>
 8002594:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	e043      	b.n	8002626 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d119      	bne.n	80025d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6858      	ldr	r0, [r3, #4]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	461a      	mov	r2, r3
 80025ae:	68b9      	ldr	r1, [r7, #8]
 80025b0:	f002 f820 	bl	80045f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	441a      	add	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d32b      	bcc.n	8002626 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	e026      	b.n	8002626 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	68d8      	ldr	r0, [r3, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	461a      	mov	r2, r3
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	f002 f806 	bl	80045f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	425b      	negs	r3, r3
 80025f2:	441a      	add	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d207      	bcs.n	8002614 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	425b      	negs	r3, r3
 800260e:	441a      	add	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d105      	bne.n	8002626 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	3b01      	subs	r3, #1
 8002624:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800262e:	697b      	ldr	r3, [r7, #20]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d018      	beq.n	800267c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	441a      	add	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	429a      	cmp	r2, r3
 8002662:	d303      	bcc.n	800266c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68d9      	ldr	r1, [r3, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	461a      	mov	r2, r3
 8002676:	6838      	ldr	r0, [r7, #0]
 8002678:	f001 ffbc 	bl	80045f4 <memcpy>
	}
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800268c:	f001 fc52 	bl	8003f34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002696:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002698:	e011      	b.n	80026be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d012      	beq.n	80026c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3324      	adds	r3, #36	; 0x24
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fd2a 	bl	8003100 <xTaskRemoveFromEventList>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80026b2:	f000 fe01 	bl	80032b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	dce9      	bgt.n	800269a <prvUnlockQueue+0x16>
 80026c6:	e000      	b.n	80026ca <prvUnlockQueue+0x46>
					break;
 80026c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	22ff      	movs	r2, #255	; 0xff
 80026ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80026d2:	f001 fc5f 	bl	8003f94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80026d6:	f001 fc2d 	bl	8003f34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80026e2:	e011      	b.n	8002708 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d012      	beq.n	8002712 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3310      	adds	r3, #16
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fd05 	bl	8003100 <xTaskRemoveFromEventList>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80026fc:	f000 fddc 	bl	80032b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002700:	7bbb      	ldrb	r3, [r7, #14]
 8002702:	3b01      	subs	r3, #1
 8002704:	b2db      	uxtb	r3, r3
 8002706:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002708:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800270c:	2b00      	cmp	r3, #0
 800270e:	dce9      	bgt.n	80026e4 <prvUnlockQueue+0x60>
 8002710:	e000      	b.n	8002714 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002712:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	22ff      	movs	r2, #255	; 0xff
 8002718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800271c:	f001 fc3a 	bl	8003f94 <vPortExitCritical>
}
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002730:	f001 fc00 	bl	8003f34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800273c:	2301      	movs	r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e001      	b.n	8002746 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002746:	f001 fc25 	bl	8003f94 <vPortExitCritical>

	return xReturn;
 800274a:	68fb      	ldr	r3, [r7, #12]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800275c:	f001 fbea 	bl	8003f34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002768:	429a      	cmp	r2, r3
 800276a:	d102      	bne.n	8002772 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800276c:	2301      	movs	r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	e001      	b.n	8002776 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002776:	f001 fc0d 	bl	8003f94 <vPortExitCritical>

	return xReturn;
 800277a:	68fb      	ldr	r3, [r7, #12]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	e014      	b.n	80027be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002794:	4a0f      	ldr	r2, [pc, #60]	; (80027d4 <vQueueAddToRegistry+0x50>)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10b      	bne.n	80027b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80027a0:	490c      	ldr	r1, [pc, #48]	; (80027d4 <vQueueAddToRegistry+0x50>)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80027aa:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <vQueueAddToRegistry+0x50>)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4413      	add	r3, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80027b6:	e006      	b.n	80027c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	3301      	adds	r3, #1
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b07      	cmp	r3, #7
 80027c2:	d9e7      	bls.n	8002794 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	200007ac 	.word	0x200007ac

080027d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80027e8:	f001 fba4 	bl	8003f34 <vPortEnterCritical>
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027f2:	b25b      	sxtb	r3, r3
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f8:	d103      	bne.n	8002802 <vQueueWaitForMessageRestricted+0x2a>
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002808:	b25b      	sxtb	r3, r3
 800280a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280e:	d103      	bne.n	8002818 <vQueueWaitForMessageRestricted+0x40>
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002818:	f001 fbbc 	bl	8003f94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002820:	2b00      	cmp	r3, #0
 8002822:	d106      	bne.n	8002832 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3324      	adds	r3, #36	; 0x24
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	4618      	mov	r0, r3
 800282e:	f000 fc3b 	bl	80030a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002832:	6978      	ldr	r0, [r7, #20]
 8002834:	f7ff ff26 	bl	8002684 <prvUnlockQueue>
	}
 8002838:	bf00      	nop
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08e      	sub	sp, #56	; 0x38
 8002844:	af04      	add	r7, sp, #16
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800284e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10a      	bne.n	800286a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	623b      	str	r3, [r7, #32]
}
 8002866:	bf00      	nop
 8002868:	e7fe      	b.n	8002868 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800286a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10a      	bne.n	8002886 <xTaskCreateStatic+0x46>
	__asm volatile
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	61fb      	str	r3, [r7, #28]
}
 8002882:	bf00      	nop
 8002884:	e7fe      	b.n	8002884 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002886:	235c      	movs	r3, #92	; 0x5c
 8002888:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	2b5c      	cmp	r3, #92	; 0x5c
 800288e:	d00a      	beq.n	80028a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8002890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002894:	f383 8811 	msr	BASEPRI, r3
 8002898:	f3bf 8f6f 	isb	sy
 800289c:	f3bf 8f4f 	dsb	sy
 80028a0:	61bb      	str	r3, [r7, #24]
}
 80028a2:	bf00      	nop
 80028a4:	e7fe      	b.n	80028a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80028a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80028a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d01e      	beq.n	80028ec <xTaskCreateStatic+0xac>
 80028ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01b      	beq.n	80028ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	2202      	movs	r2, #2
 80028c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80028c6:	2300      	movs	r3, #0
 80028c8:	9303      	str	r3, [sp, #12]
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	f107 0314 	add.w	r3, r7, #20
 80028d2:	9301      	str	r3, [sp, #4]
 80028d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f850 	bl	8002984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80028e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028e6:	f000 f8dd 	bl	8002aa4 <prvAddNewTaskToReadyList>
 80028ea:	e001      	b.n	80028f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80028f0:	697b      	ldr	r3, [r7, #20]
	}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3728      	adds	r7, #40	; 0x28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b08c      	sub	sp, #48	; 0x30
 80028fe:	af04      	add	r7, sp, #16
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	603b      	str	r3, [r7, #0]
 8002906:	4613      	mov	r3, r2
 8002908:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4618      	mov	r0, r3
 8002910:	f001 fc32 	bl	8004178 <pvPortMalloc>
 8002914:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00e      	beq.n	800293a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800291c:	205c      	movs	r0, #92	; 0x5c
 800291e:	f001 fc2b 	bl	8004178 <pvPortMalloc>
 8002922:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
 8002930:	e005      	b.n	800293e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002932:	6978      	ldr	r0, [r7, #20]
 8002934:	f001 fcec 	bl	8004310 <vPortFree>
 8002938:	e001      	b.n	800293e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d017      	beq.n	8002974 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800294c:	88fa      	ldrh	r2, [r7, #6]
 800294e:	2300      	movs	r3, #0
 8002950:	9303      	str	r3, [sp, #12]
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	9302      	str	r3, [sp, #8]
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f80e 	bl	8002984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002968:	69f8      	ldr	r0, [r7, #28]
 800296a:	f000 f89b 	bl	8002aa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800296e:	2301      	movs	r3, #1
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	e002      	b.n	800297a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002974:	f04f 33ff 	mov.w	r3, #4294967295
 8002978:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800297a:	69bb      	ldr	r3, [r7, #24]
	}
 800297c:	4618      	mov	r0, r3
 800297e:	3720      	adds	r7, #32
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002994:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	461a      	mov	r2, r3
 800299c:	21a5      	movs	r1, #165	; 0xa5
 800299e:	f001 fdf5 	bl	800458c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029ac:	3b01      	subs	r3, #1
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	f023 0307 	bic.w	r3, r3, #7
 80029ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <prvInitialiseNewTask+0x58>
	__asm volatile
 80029c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ca:	f383 8811 	msr	BASEPRI, r3
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	f3bf 8f4f 	dsb	sy
 80029d6:	617b      	str	r3, [r7, #20]
}
 80029d8:	bf00      	nop
 80029da:	e7fe      	b.n	80029da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d01f      	beq.n	8002a22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	e012      	b.n	8002a0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	4413      	add	r3, r2
 80029ee:	7819      	ldrb	r1, [r3, #0]
 80029f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	4413      	add	r3, r2
 80029f6:	3334      	adds	r3, #52	; 0x34
 80029f8:	460a      	mov	r2, r1
 80029fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	4413      	add	r3, r2
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d006      	beq.n	8002a16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	2b0f      	cmp	r3, #15
 8002a12:	d9e9      	bls.n	80029e8 <prvInitialiseNewTask+0x64>
 8002a14:	e000      	b.n	8002a18 <prvInitialiseNewTask+0x94>
			{
				break;
 8002a16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a20:	e003      	b.n	8002a2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2c:	2b37      	cmp	r3, #55	; 0x37
 8002a2e:	d901      	bls.n	8002a34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a30:	2337      	movs	r3, #55	; 0x37
 8002a32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	2200      	movs	r2, #0
 8002a44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a48:	3304      	adds	r3, #4
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f978 	bl	8001d40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a52:	3318      	adds	r3, #24
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff f973 	bl	8001d40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a72:	2200      	movs	r2, #0
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	68f9      	ldr	r1, [r7, #12]
 8002a82:	69b8      	ldr	r0, [r7, #24]
 8002a84:	f001 f928 	bl	8003cd8 <pxPortInitialiseStack>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a9a:	bf00      	nop
 8002a9c:	3720      	adds	r7, #32
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002aac:	f001 fa42 	bl	8003f34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ab0:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <prvAddNewTaskToReadyList+0xc4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	4a2c      	ldr	r2, [pc, #176]	; (8002b68 <prvAddNewTaskToReadyList+0xc4>)
 8002ab8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002aba:	4b2c      	ldr	r3, [pc, #176]	; (8002b6c <prvAddNewTaskToReadyList+0xc8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ac2:	4a2a      	ldr	r2, [pc, #168]	; (8002b6c <prvAddNewTaskToReadyList+0xc8>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ac8:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <prvAddNewTaskToReadyList+0xc4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d110      	bne.n	8002af2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ad0:	f000 fc16 	bl	8003300 <prvInitialiseTaskLists>
 8002ad4:	e00d      	b.n	8002af2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ad6:	4b26      	ldr	r3, [pc, #152]	; (8002b70 <prvAddNewTaskToReadyList+0xcc>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ade:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <prvAddNewTaskToReadyList+0xc8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d802      	bhi.n	8002af2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002aec:	4a1f      	ldr	r2, [pc, #124]	; (8002b6c <prvAddNewTaskToReadyList+0xc8>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002af2:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <prvAddNewTaskToReadyList+0xd0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	3301      	adds	r3, #1
 8002af8:	4a1e      	ldr	r2, [pc, #120]	; (8002b74 <prvAddNewTaskToReadyList+0xd0>)
 8002afa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002afc:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <prvAddNewTaskToReadyList+0xd0>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b08:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <prvAddNewTaskToReadyList+0xd4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d903      	bls.n	8002b18 <prvAddNewTaskToReadyList+0x74>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	4a18      	ldr	r2, [pc, #96]	; (8002b78 <prvAddNewTaskToReadyList+0xd4>)
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4a15      	ldr	r2, [pc, #84]	; (8002b7c <prvAddNewTaskToReadyList+0xd8>)
 8002b26:	441a      	add	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f7ff f913 	bl	8001d5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b34:	f001 fa2e 	bl	8003f94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b38:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <prvAddNewTaskToReadyList+0xcc>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00e      	beq.n	8002b5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b40:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <prvAddNewTaskToReadyList+0xc8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d207      	bcs.n	8002b5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <prvAddNewTaskToReadyList+0xdc>)
 8002b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	f3bf 8f4f 	dsb	sy
 8002b5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000cc0 	.word	0x20000cc0
 8002b6c:	200007ec 	.word	0x200007ec
 8002b70:	20000ccc 	.word	0x20000ccc
 8002b74:	20000cdc 	.word	0x20000cdc
 8002b78:	20000cc8 	.word	0x20000cc8
 8002b7c:	200007f0 	.word	0x200007f0
 8002b80:	e000ed04 	.word	0xe000ed04

08002b84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d017      	beq.n	8002bc6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002b96:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <vTaskDelay+0x60>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <vTaskDelay+0x30>
	__asm volatile
 8002b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	60bb      	str	r3, [r7, #8]
}
 8002bb0:	bf00      	nop
 8002bb2:	e7fe      	b.n	8002bb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002bb4:	f000 f880 	bl	8002cb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002bb8:	2100      	movs	r1, #0
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fcea 	bl	8003594 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002bc0:	f000 f888 	bl	8002cd4 <xTaskResumeAll>
 8002bc4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d107      	bne.n	8002bdc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <vTaskDelay+0x64>)
 8002bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20000ce8 	.word	0x20000ce8
 8002be8:	e000ed04 	.word	0xe000ed04

08002bec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	; 0x28
 8002bf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002bfa:	463a      	mov	r2, r7
 8002bfc:	1d39      	adds	r1, r7, #4
 8002bfe:	f107 0308 	add.w	r3, r7, #8
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff f848 	bl	8001c98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002c08:	6839      	ldr	r1, [r7, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	9202      	str	r2, [sp, #8]
 8002c10:	9301      	str	r3, [sp, #4]
 8002c12:	2300      	movs	r3, #0
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	2300      	movs	r3, #0
 8002c18:	460a      	mov	r2, r1
 8002c1a:	4921      	ldr	r1, [pc, #132]	; (8002ca0 <vTaskStartScheduler+0xb4>)
 8002c1c:	4821      	ldr	r0, [pc, #132]	; (8002ca4 <vTaskStartScheduler+0xb8>)
 8002c1e:	f7ff fe0f 	bl	8002840 <xTaskCreateStatic>
 8002c22:	4603      	mov	r3, r0
 8002c24:	4a20      	ldr	r2, [pc, #128]	; (8002ca8 <vTaskStartScheduler+0xbc>)
 8002c26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002c28:	4b1f      	ldr	r3, [pc, #124]	; (8002ca8 <vTaskStartScheduler+0xbc>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002c30:	2301      	movs	r3, #1
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	e001      	b.n	8002c3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d102      	bne.n	8002c46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002c40:	f000 fcfc 	bl	800363c <xTimerCreateTimerTask>
 8002c44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d116      	bne.n	8002c7a <vTaskStartScheduler+0x8e>
	__asm volatile
 8002c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	613b      	str	r3, [r7, #16]
}
 8002c5e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002c60:	4b12      	ldr	r3, [pc, #72]	; (8002cac <vTaskStartScheduler+0xc0>)
 8002c62:	f04f 32ff 	mov.w	r2, #4294967295
 8002c66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <vTaskStartScheduler+0xc4>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c6e:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <vTaskStartScheduler+0xc8>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002c74:	f001 f8bc 	bl	8003df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002c78:	e00e      	b.n	8002c98 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c80:	d10a      	bne.n	8002c98 <vTaskStartScheduler+0xac>
	__asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	60fb      	str	r3, [r7, #12]
}
 8002c94:	bf00      	nop
 8002c96:	e7fe      	b.n	8002c96 <vTaskStartScheduler+0xaa>
}
 8002c98:	bf00      	nop
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	08004ee0 	.word	0x08004ee0
 8002ca4:	080032d1 	.word	0x080032d1
 8002ca8:	20000ce4 	.word	0x20000ce4
 8002cac:	20000ce0 	.word	0x20000ce0
 8002cb0:	20000ccc 	.word	0x20000ccc
 8002cb4:	20000cc4 	.word	0x20000cc4

08002cb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <vTaskSuspendAll+0x18>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	4a03      	ldr	r2, [pc, #12]	; (8002cd0 <vTaskSuspendAll+0x18>)
 8002cc4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002cc6:	bf00      	nop
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	20000ce8 	.word	0x20000ce8

08002cd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ce2:	4b42      	ldr	r3, [pc, #264]	; (8002dec <xTaskResumeAll+0x118>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10a      	bne.n	8002d00 <xTaskResumeAll+0x2c>
	__asm volatile
 8002cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	603b      	str	r3, [r7, #0]
}
 8002cfc:	bf00      	nop
 8002cfe:	e7fe      	b.n	8002cfe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d00:	f001 f918 	bl	8003f34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d04:	4b39      	ldr	r3, [pc, #228]	; (8002dec <xTaskResumeAll+0x118>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	4a38      	ldr	r2, [pc, #224]	; (8002dec <xTaskResumeAll+0x118>)
 8002d0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d0e:	4b37      	ldr	r3, [pc, #220]	; (8002dec <xTaskResumeAll+0x118>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d162      	bne.n	8002ddc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d16:	4b36      	ldr	r3, [pc, #216]	; (8002df0 <xTaskResumeAll+0x11c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d05e      	beq.n	8002ddc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d1e:	e02f      	b.n	8002d80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d20:	4b34      	ldr	r3, [pc, #208]	; (8002df4 <xTaskResumeAll+0x120>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3318      	adds	r3, #24
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff f871 	bl	8001e14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3304      	adds	r3, #4
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff f86c 	bl	8001e14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d40:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <xTaskResumeAll+0x124>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d903      	bls.n	8002d50 <xTaskResumeAll+0x7c>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	4a2a      	ldr	r2, [pc, #168]	; (8002df8 <xTaskResumeAll+0x124>)
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4a27      	ldr	r2, [pc, #156]	; (8002dfc <xTaskResumeAll+0x128>)
 8002d5e:	441a      	add	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3304      	adds	r3, #4
 8002d64:	4619      	mov	r1, r3
 8002d66:	4610      	mov	r0, r2
 8002d68:	f7fe fff7 	bl	8001d5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d70:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <xTaskResumeAll+0x12c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d302      	bcc.n	8002d80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002d7a:	4b22      	ldr	r3, [pc, #136]	; (8002e04 <xTaskResumeAll+0x130>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d80:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <xTaskResumeAll+0x120>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1cb      	bne.n	8002d20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002d8e:	f000 fb55 	bl	800343c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002d92:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <xTaskResumeAll+0x134>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d010      	beq.n	8002dc0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002d9e:	f000 f847 	bl	8002e30 <xTaskIncrementTick>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002da8:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <xTaskResumeAll+0x130>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3b01      	subs	r3, #1
 8002db2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f1      	bne.n	8002d9e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002dba:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <xTaskResumeAll+0x134>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002dc0:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <xTaskResumeAll+0x130>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d009      	beq.n	8002ddc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <xTaskResumeAll+0x138>)
 8002dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ddc:	f001 f8da 	bl	8003f94 <vPortExitCritical>

	return xAlreadyYielded;
 8002de0:	68bb      	ldr	r3, [r7, #8]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000ce8 	.word	0x20000ce8
 8002df0:	20000cc0 	.word	0x20000cc0
 8002df4:	20000c80 	.word	0x20000c80
 8002df8:	20000cc8 	.word	0x20000cc8
 8002dfc:	200007f0 	.word	0x200007f0
 8002e00:	200007ec 	.word	0x200007ec
 8002e04:	20000cd4 	.word	0x20000cd4
 8002e08:	20000cd0 	.word	0x20000cd0
 8002e0c:	e000ed04 	.word	0xe000ed04

08002e10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002e16:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <xTaskGetTickCount+0x1c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002e1c:	687b      	ldr	r3, [r7, #4]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20000cc4 	.word	0x20000cc4

08002e30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e3a:	4b4f      	ldr	r3, [pc, #316]	; (8002f78 <xTaskIncrementTick+0x148>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f040 808f 	bne.w	8002f62 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e44:	4b4d      	ldr	r3, [pc, #308]	; (8002f7c <xTaskIncrementTick+0x14c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e4c:	4a4b      	ldr	r2, [pc, #300]	; (8002f7c <xTaskIncrementTick+0x14c>)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d120      	bne.n	8002e9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002e58:	4b49      	ldr	r3, [pc, #292]	; (8002f80 <xTaskIncrementTick+0x150>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <xTaskIncrementTick+0x48>
	__asm volatile
 8002e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	603b      	str	r3, [r7, #0]
}
 8002e74:	bf00      	nop
 8002e76:	e7fe      	b.n	8002e76 <xTaskIncrementTick+0x46>
 8002e78:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <xTaskIncrementTick+0x150>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	4b41      	ldr	r3, [pc, #260]	; (8002f84 <xTaskIncrementTick+0x154>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a3f      	ldr	r2, [pc, #252]	; (8002f80 <xTaskIncrementTick+0x150>)
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	4a3f      	ldr	r2, [pc, #252]	; (8002f84 <xTaskIncrementTick+0x154>)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	4b3e      	ldr	r3, [pc, #248]	; (8002f88 <xTaskIncrementTick+0x158>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3301      	adds	r3, #1
 8002e92:	4a3d      	ldr	r2, [pc, #244]	; (8002f88 <xTaskIncrementTick+0x158>)
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	f000 fad1 	bl	800343c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002e9a:	4b3c      	ldr	r3, [pc, #240]	; (8002f8c <xTaskIncrementTick+0x15c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d349      	bcc.n	8002f38 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ea4:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <xTaskIncrementTick+0x150>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d104      	bne.n	8002eb8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eae:	4b37      	ldr	r3, [pc, #220]	; (8002f8c <xTaskIncrementTick+0x15c>)
 8002eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb4:	601a      	str	r2, [r3, #0]
					break;
 8002eb6:	e03f      	b.n	8002f38 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002eb8:	4b31      	ldr	r3, [pc, #196]	; (8002f80 <xTaskIncrementTick+0x150>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d203      	bcs.n	8002ed8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002ed0:	4a2e      	ldr	r2, [pc, #184]	; (8002f8c <xTaskIncrementTick+0x15c>)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ed6:	e02f      	b.n	8002f38 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	3304      	adds	r3, #4
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe ff99 	bl	8001e14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d004      	beq.n	8002ef4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	3318      	adds	r3, #24
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe ff90 	bl	8001e14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef8:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <xTaskIncrementTick+0x160>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d903      	bls.n	8002f08 <xTaskIncrementTick+0xd8>
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	4a22      	ldr	r2, [pc, #136]	; (8002f90 <xTaskIncrementTick+0x160>)
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4a1f      	ldr	r2, [pc, #124]	; (8002f94 <xTaskIncrementTick+0x164>)
 8002f16:	441a      	add	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f7fe ff1b 	bl	8001d5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f28:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <xTaskIncrementTick+0x168>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d3b8      	bcc.n	8002ea4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002f32:	2301      	movs	r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f36:	e7b5      	b.n	8002ea4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f38:	4b17      	ldr	r3, [pc, #92]	; (8002f98 <xTaskIncrementTick+0x168>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3e:	4915      	ldr	r1, [pc, #84]	; (8002f94 <xTaskIncrementTick+0x164>)
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d901      	bls.n	8002f54 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002f50:	2301      	movs	r3, #1
 8002f52:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002f54:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <xTaskIncrementTick+0x16c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	e004      	b.n	8002f6c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002f62:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <xTaskIncrementTick+0x170>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3301      	adds	r3, #1
 8002f68:	4a0d      	ldr	r2, [pc, #52]	; (8002fa0 <xTaskIncrementTick+0x170>)
 8002f6a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002f6c:	697b      	ldr	r3, [r7, #20]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000ce8 	.word	0x20000ce8
 8002f7c:	20000cc4 	.word	0x20000cc4
 8002f80:	20000c78 	.word	0x20000c78
 8002f84:	20000c7c 	.word	0x20000c7c
 8002f88:	20000cd8 	.word	0x20000cd8
 8002f8c:	20000ce0 	.word	0x20000ce0
 8002f90:	20000cc8 	.word	0x20000cc8
 8002f94:	200007f0 	.word	0x200007f0
 8002f98:	200007ec 	.word	0x200007ec
 8002f9c:	20000cd4 	.word	0x20000cd4
 8002fa0:	20000cd0 	.word	0x20000cd0

08002fa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002faa:	4b28      	ldr	r3, [pc, #160]	; (800304c <vTaskSwitchContext+0xa8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002fb2:	4b27      	ldr	r3, [pc, #156]	; (8003050 <vTaskSwitchContext+0xac>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002fb8:	e041      	b.n	800303e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8002fba:	4b25      	ldr	r3, [pc, #148]	; (8003050 <vTaskSwitchContext+0xac>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fc0:	4b24      	ldr	r3, [pc, #144]	; (8003054 <vTaskSwitchContext+0xb0>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	e010      	b.n	8002fea <vTaskSwitchContext+0x46>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10a      	bne.n	8002fe4 <vTaskSwitchContext+0x40>
	__asm volatile
 8002fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd2:	f383 8811 	msr	BASEPRI, r3
 8002fd6:	f3bf 8f6f 	isb	sy
 8002fda:	f3bf 8f4f 	dsb	sy
 8002fde:	607b      	str	r3, [r7, #4]
}
 8002fe0:	bf00      	nop
 8002fe2:	e7fe      	b.n	8002fe2 <vTaskSwitchContext+0x3e>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	491b      	ldr	r1, [pc, #108]	; (8003058 <vTaskSwitchContext+0xb4>)
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0e4      	beq.n	8002fc8 <vTaskSwitchContext+0x24>
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4a13      	ldr	r2, [pc, #76]	; (8003058 <vTaskSwitchContext+0xb4>)
 800300a:	4413      	add	r3, r2
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	605a      	str	r2, [r3, #4]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	3308      	adds	r3, #8
 8003020:	429a      	cmp	r2, r3
 8003022:	d104      	bne.n	800302e <vTaskSwitchContext+0x8a>
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4a09      	ldr	r2, [pc, #36]	; (800305c <vTaskSwitchContext+0xb8>)
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	4a06      	ldr	r2, [pc, #24]	; (8003054 <vTaskSwitchContext+0xb0>)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6013      	str	r3, [r2, #0]
}
 800303e:	bf00      	nop
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20000ce8 	.word	0x20000ce8
 8003050:	20000cd4 	.word	0x20000cd4
 8003054:	20000cc8 	.word	0x20000cc8
 8003058:	200007f0 	.word	0x200007f0
 800305c:	200007ec 	.word	0x200007ec

08003060 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10a      	bne.n	8003086 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	60fb      	str	r3, [r7, #12]
}
 8003082:	bf00      	nop
 8003084:	e7fe      	b.n	8003084 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003086:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <vTaskPlaceOnEventList+0x44>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3318      	adds	r3, #24
 800308c:	4619      	mov	r1, r3
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fe fe87 	bl	8001da2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003094:	2101      	movs	r1, #1
 8003096:	6838      	ldr	r0, [r7, #0]
 8003098:	f000 fa7c 	bl	8003594 <prvAddCurrentTaskToDelayedList>
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	200007ec 	.word	0x200007ec

080030a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10a      	bne.n	80030d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	617b      	str	r3, [r7, #20]
}
 80030cc:	bf00      	nop
 80030ce:	e7fe      	b.n	80030ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030d0:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <vTaskPlaceOnEventListRestricted+0x54>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3318      	adds	r3, #24
 80030d6:	4619      	mov	r1, r3
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f7fe fe3e 	bl	8001d5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80030e4:	f04f 33ff 	mov.w	r3, #4294967295
 80030e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	68b8      	ldr	r0, [r7, #8]
 80030ee:	f000 fa51 	bl	8003594 <prvAddCurrentTaskToDelayedList>
	}
 80030f2:	bf00      	nop
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	200007ec 	.word	0x200007ec

08003100 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10a      	bne.n	800312c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	60fb      	str	r3, [r7, #12]
}
 8003128:	bf00      	nop
 800312a:	e7fe      	b.n	800312a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	3318      	adds	r3, #24
 8003130:	4618      	mov	r0, r3
 8003132:	f7fe fe6f 	bl	8001e14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003136:	4b1e      	ldr	r3, [pc, #120]	; (80031b0 <xTaskRemoveFromEventList+0xb0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d11d      	bne.n	800317a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	3304      	adds	r3, #4
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe fe66 	bl	8001e14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314c:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <xTaskRemoveFromEventList+0xb4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d903      	bls.n	800315c <xTaskRemoveFromEventList+0x5c>
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	4a16      	ldr	r2, [pc, #88]	; (80031b4 <xTaskRemoveFromEventList+0xb4>)
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4a13      	ldr	r2, [pc, #76]	; (80031b8 <xTaskRemoveFromEventList+0xb8>)
 800316a:	441a      	add	r2, r3
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	3304      	adds	r3, #4
 8003170:	4619      	mov	r1, r3
 8003172:	4610      	mov	r0, r2
 8003174:	f7fe fdf1 	bl	8001d5a <vListInsertEnd>
 8003178:	e005      	b.n	8003186 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	3318      	adds	r3, #24
 800317e:	4619      	mov	r1, r3
 8003180:	480e      	ldr	r0, [pc, #56]	; (80031bc <xTaskRemoveFromEventList+0xbc>)
 8003182:	f7fe fdea 	bl	8001d5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800318a:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <xTaskRemoveFromEventList+0xc0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	429a      	cmp	r2, r3
 8003192:	d905      	bls.n	80031a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003194:	2301      	movs	r3, #1
 8003196:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <xTaskRemoveFromEventList+0xc4>)
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	e001      	b.n	80031a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80031a4:	697b      	ldr	r3, [r7, #20]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000ce8 	.word	0x20000ce8
 80031b4:	20000cc8 	.word	0x20000cc8
 80031b8:	200007f0 	.word	0x200007f0
 80031bc:	20000c80 	.word	0x20000c80
 80031c0:	200007ec 	.word	0x200007ec
 80031c4:	20000cd4 	.word	0x20000cd4

080031c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <vTaskInternalSetTimeOutState+0x24>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <vTaskInternalSetTimeOutState+0x28>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	605a      	str	r2, [r3, #4]
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	20000cd8 	.word	0x20000cd8
 80031f0:	20000cc4 	.word	0x20000cc4

080031f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10a      	bne.n	800321a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	613b      	str	r3, [r7, #16]
}
 8003216:	bf00      	nop
 8003218:	e7fe      	b.n	8003218 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10a      	bne.n	8003236 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	60fb      	str	r3, [r7, #12]
}
 8003232:	bf00      	nop
 8003234:	e7fe      	b.n	8003234 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003236:	f000 fe7d 	bl	8003f34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <xTaskCheckForTimeOut+0xbc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003252:	d102      	bne.n	800325a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003254:	2300      	movs	r3, #0
 8003256:	61fb      	str	r3, [r7, #28]
 8003258:	e023      	b.n	80032a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <xTaskCheckForTimeOut+0xc0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d007      	beq.n	8003276 <xTaskCheckForTimeOut+0x82>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	429a      	cmp	r2, r3
 800326e:	d302      	bcc.n	8003276 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003270:	2301      	movs	r3, #1
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	e015      	b.n	80032a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	429a      	cmp	r2, r3
 800327e:	d20b      	bcs.n	8003298 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	1ad2      	subs	r2, r2, r3
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff ff9b 	bl	80031c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	e004      	b.n	80032a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800329e:	2301      	movs	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80032a2:	f000 fe77 	bl	8003f94 <vPortExitCritical>

	return xReturn;
 80032a6:	69fb      	ldr	r3, [r7, #28]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3720      	adds	r7, #32
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20000cc4 	.word	0x20000cc4
 80032b4:	20000cd8 	.word	0x20000cd8

080032b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <vTaskMissedYield+0x14>)
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
}
 80032c2:	bf00      	nop
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	20000cd4 	.word	0x20000cd4

080032d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80032d8:	f000 f852 	bl	8003380 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <prvIdleTask+0x28>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d9f9      	bls.n	80032d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80032e4:	4b05      	ldr	r3, [pc, #20]	; (80032fc <prvIdleTask+0x2c>)
 80032e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80032f4:	e7f0      	b.n	80032d8 <prvIdleTask+0x8>
 80032f6:	bf00      	nop
 80032f8:	200007f0 	.word	0x200007f0
 80032fc:	e000ed04 	.word	0xe000ed04

08003300 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003306:	2300      	movs	r3, #0
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	e00c      	b.n	8003326 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4a12      	ldr	r2, [pc, #72]	; (8003360 <prvInitialiseTaskLists+0x60>)
 8003318:	4413      	add	r3, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe fcf0 	bl	8001d00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3301      	adds	r3, #1
 8003324:	607b      	str	r3, [r7, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b37      	cmp	r3, #55	; 0x37
 800332a:	d9ef      	bls.n	800330c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800332c:	480d      	ldr	r0, [pc, #52]	; (8003364 <prvInitialiseTaskLists+0x64>)
 800332e:	f7fe fce7 	bl	8001d00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003332:	480d      	ldr	r0, [pc, #52]	; (8003368 <prvInitialiseTaskLists+0x68>)
 8003334:	f7fe fce4 	bl	8001d00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003338:	480c      	ldr	r0, [pc, #48]	; (800336c <prvInitialiseTaskLists+0x6c>)
 800333a:	f7fe fce1 	bl	8001d00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800333e:	480c      	ldr	r0, [pc, #48]	; (8003370 <prvInitialiseTaskLists+0x70>)
 8003340:	f7fe fcde 	bl	8001d00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003344:	480b      	ldr	r0, [pc, #44]	; (8003374 <prvInitialiseTaskLists+0x74>)
 8003346:	f7fe fcdb 	bl	8001d00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800334a:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <prvInitialiseTaskLists+0x78>)
 800334c:	4a05      	ldr	r2, [pc, #20]	; (8003364 <prvInitialiseTaskLists+0x64>)
 800334e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003350:	4b0a      	ldr	r3, [pc, #40]	; (800337c <prvInitialiseTaskLists+0x7c>)
 8003352:	4a05      	ldr	r2, [pc, #20]	; (8003368 <prvInitialiseTaskLists+0x68>)
 8003354:	601a      	str	r2, [r3, #0]
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	200007f0 	.word	0x200007f0
 8003364:	20000c50 	.word	0x20000c50
 8003368:	20000c64 	.word	0x20000c64
 800336c:	20000c80 	.word	0x20000c80
 8003370:	20000c94 	.word	0x20000c94
 8003374:	20000cac 	.word	0x20000cac
 8003378:	20000c78 	.word	0x20000c78
 800337c:	20000c7c 	.word	0x20000c7c

08003380 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003386:	e019      	b.n	80033bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003388:	f000 fdd4 	bl	8003f34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800338c:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <prvCheckTasksWaitingTermination+0x50>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3304      	adds	r3, #4
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe fd3b 	bl	8001e14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <prvCheckTasksWaitingTermination+0x54>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	4a0b      	ldr	r2, [pc, #44]	; (80033d4 <prvCheckTasksWaitingTermination+0x54>)
 80033a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <prvCheckTasksWaitingTermination+0x58>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	4a0a      	ldr	r2, [pc, #40]	; (80033d8 <prvCheckTasksWaitingTermination+0x58>)
 80033b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80033b2:	f000 fdef 	bl	8003f94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f810 	bl	80033dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <prvCheckTasksWaitingTermination+0x58>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1e1      	bne.n	8003388 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000c94 	.word	0x20000c94
 80033d4:	20000cc0 	.word	0x20000cc0
 80033d8:	20000ca8 	.word	0x20000ca8

080033dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d108      	bne.n	8003400 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 ff8c 	bl	8004310 <vPortFree>
				vPortFree( pxTCB );
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 ff89 	bl	8004310 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80033fe:	e018      	b.n	8003432 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003406:	2b01      	cmp	r3, #1
 8003408:	d103      	bne.n	8003412 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 ff80 	bl	8004310 <vPortFree>
	}
 8003410:	e00f      	b.n	8003432 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003418:	2b02      	cmp	r3, #2
 800341a:	d00a      	beq.n	8003432 <prvDeleteTCB+0x56>
	__asm volatile
 800341c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	60fb      	str	r3, [r7, #12]
}
 800342e:	bf00      	nop
 8003430:	e7fe      	b.n	8003430 <prvDeleteTCB+0x54>
	}
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003442:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <prvResetNextTaskUnblockTime+0x38>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d104      	bne.n	8003456 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800344c:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <prvResetNextTaskUnblockTime+0x3c>)
 800344e:	f04f 32ff 	mov.w	r2, #4294967295
 8003452:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003454:	e008      	b.n	8003468 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003456:	4b07      	ldr	r3, [pc, #28]	; (8003474 <prvResetNextTaskUnblockTime+0x38>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4a04      	ldr	r2, [pc, #16]	; (8003478 <prvResetNextTaskUnblockTime+0x3c>)
 8003466:	6013      	str	r3, [r2, #0]
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	20000c78 	.word	0x20000c78
 8003478:	20000ce0 	.word	0x20000ce0

0800347c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003482:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <xTaskGetSchedulerState+0x34>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800348a:	2301      	movs	r3, #1
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	e008      	b.n	80034a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <xTaskGetSchedulerState+0x38>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d102      	bne.n	800349e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003498:	2302      	movs	r3, #2
 800349a:	607b      	str	r3, [r7, #4]
 800349c:	e001      	b.n	80034a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800349e:	2300      	movs	r3, #0
 80034a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80034a2:	687b      	ldr	r3, [r7, #4]
	}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	20000ccc 	.word	0x20000ccc
 80034b4:	20000ce8 	.word	0x20000ce8

080034b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d056      	beq.n	800357c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80034ce:	4b2e      	ldr	r3, [pc, #184]	; (8003588 <xTaskPriorityDisinherit+0xd0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d00a      	beq.n	80034ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	60fb      	str	r3, [r7, #12]
}
 80034ea:	bf00      	nop
 80034ec:	e7fe      	b.n	80034ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10a      	bne.n	800350c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80034f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	60bb      	str	r3, [r7, #8]
}
 8003508:	bf00      	nop
 800350a:	e7fe      	b.n	800350a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003510:	1e5a      	subs	r2, r3, #1
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351e:	429a      	cmp	r2, r3
 8003520:	d02c      	beq.n	800357c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003526:	2b00      	cmp	r3, #0
 8003528:	d128      	bne.n	800357c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	3304      	adds	r3, #4
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe fc70 	bl	8001e14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354c:	4b0f      	ldr	r3, [pc, #60]	; (800358c <xTaskPriorityDisinherit+0xd4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d903      	bls.n	800355c <xTaskPriorityDisinherit+0xa4>
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	4a0c      	ldr	r2, [pc, #48]	; (800358c <xTaskPriorityDisinherit+0xd4>)
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4a09      	ldr	r2, [pc, #36]	; (8003590 <xTaskPriorityDisinherit+0xd8>)
 800356a:	441a      	add	r2, r3
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	3304      	adds	r3, #4
 8003570:	4619      	mov	r1, r3
 8003572:	4610      	mov	r0, r2
 8003574:	f7fe fbf1 	bl	8001d5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003578:	2301      	movs	r3, #1
 800357a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800357c:	697b      	ldr	r3, [r7, #20]
	}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	200007ec 	.word	0x200007ec
 800358c:	20000cc8 	.word	0x20000cc8
 8003590:	200007f0 	.word	0x200007f0

08003594 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800359e:	4b21      	ldr	r3, [pc, #132]	; (8003624 <prvAddCurrentTaskToDelayedList+0x90>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035a4:	4b20      	ldr	r3, [pc, #128]	; (8003628 <prvAddCurrentTaskToDelayedList+0x94>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3304      	adds	r3, #4
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe fc32 	bl	8001e14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b6:	d10a      	bne.n	80035ce <prvAddCurrentTaskToDelayedList+0x3a>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d007      	beq.n	80035ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035be:	4b1a      	ldr	r3, [pc, #104]	; (8003628 <prvAddCurrentTaskToDelayedList+0x94>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3304      	adds	r3, #4
 80035c4:	4619      	mov	r1, r3
 80035c6:	4819      	ldr	r0, [pc, #100]	; (800362c <prvAddCurrentTaskToDelayedList+0x98>)
 80035c8:	f7fe fbc7 	bl	8001d5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80035cc:	e026      	b.n	800361c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4413      	add	r3, r2
 80035d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035d6:	4b14      	ldr	r3, [pc, #80]	; (8003628 <prvAddCurrentTaskToDelayedList+0x94>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d209      	bcs.n	80035fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035e6:	4b12      	ldr	r3, [pc, #72]	; (8003630 <prvAddCurrentTaskToDelayedList+0x9c>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <prvAddCurrentTaskToDelayedList+0x94>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3304      	adds	r3, #4
 80035f0:	4619      	mov	r1, r3
 80035f2:	4610      	mov	r0, r2
 80035f4:	f7fe fbd5 	bl	8001da2 <vListInsert>
}
 80035f8:	e010      	b.n	800361c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035fa:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <prvAddCurrentTaskToDelayedList+0xa0>)
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <prvAddCurrentTaskToDelayedList+0x94>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3304      	adds	r3, #4
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f7fe fbcb 	bl	8001da2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800360c:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <prvAddCurrentTaskToDelayedList+0xa4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	429a      	cmp	r2, r3
 8003614:	d202      	bcs.n	800361c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003616:	4a08      	ldr	r2, [pc, #32]	; (8003638 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	6013      	str	r3, [r2, #0]
}
 800361c:	bf00      	nop
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	20000cc4 	.word	0x20000cc4
 8003628:	200007ec 	.word	0x200007ec
 800362c:	20000cac 	.word	0x20000cac
 8003630:	20000c7c 	.word	0x20000c7c
 8003634:	20000c78 	.word	0x20000c78
 8003638:	20000ce0 	.word	0x20000ce0

0800363c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	; 0x28
 8003640:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003646:	f000 fb07 	bl	8003c58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800364a:	4b1c      	ldr	r3, [pc, #112]	; (80036bc <xTimerCreateTimerTask+0x80>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d021      	beq.n	8003696 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003656:	2300      	movs	r3, #0
 8003658:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800365a:	1d3a      	adds	r2, r7, #4
 800365c:	f107 0108 	add.w	r1, r7, #8
 8003660:	f107 030c 	add.w	r3, r7, #12
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe fb31 	bl	8001ccc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	9202      	str	r2, [sp, #8]
 8003672:	9301      	str	r3, [sp, #4]
 8003674:	2302      	movs	r3, #2
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	2300      	movs	r3, #0
 800367a:	460a      	mov	r2, r1
 800367c:	4910      	ldr	r1, [pc, #64]	; (80036c0 <xTimerCreateTimerTask+0x84>)
 800367e:	4811      	ldr	r0, [pc, #68]	; (80036c4 <xTimerCreateTimerTask+0x88>)
 8003680:	f7ff f8de 	bl	8002840 <xTaskCreateStatic>
 8003684:	4603      	mov	r3, r0
 8003686:	4a10      	ldr	r2, [pc, #64]	; (80036c8 <xTimerCreateTimerTask+0x8c>)
 8003688:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800368a:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <xTimerCreateTimerTask+0x8c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003692:	2301      	movs	r3, #1
 8003694:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10a      	bne.n	80036b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	613b      	str	r3, [r7, #16]
}
 80036ae:	bf00      	nop
 80036b0:	e7fe      	b.n	80036b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80036b2:	697b      	ldr	r3, [r7, #20]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	20000d1c 	.word	0x20000d1c
 80036c0:	08004ee8 	.word	0x08004ee8
 80036c4:	08003801 	.word	0x08003801
 80036c8:	20000d20 	.word	0x20000d20

080036cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	; 0x28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80036da:	2300      	movs	r3, #0
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <xTimerGenericCommand+0x2e>
	__asm volatile
 80036e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	623b      	str	r3, [r7, #32]
}
 80036f6:	bf00      	nop
 80036f8:	e7fe      	b.n	80036f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80036fa:	4b1a      	ldr	r3, [pc, #104]	; (8003764 <xTimerGenericCommand+0x98>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d02a      	beq.n	8003758 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b05      	cmp	r3, #5
 8003712:	dc18      	bgt.n	8003746 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003714:	f7ff feb2 	bl	800347c <xTaskGetSchedulerState>
 8003718:	4603      	mov	r3, r0
 800371a:	2b02      	cmp	r3, #2
 800371c:	d109      	bne.n	8003732 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800371e:	4b11      	ldr	r3, [pc, #68]	; (8003764 <xTimerGenericCommand+0x98>)
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	f107 0110 	add.w	r1, r7, #16
 8003726:	2300      	movs	r3, #0
 8003728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800372a:	f7fe fca1 	bl	8002070 <xQueueGenericSend>
 800372e:	6278      	str	r0, [r7, #36]	; 0x24
 8003730:	e012      	b.n	8003758 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003732:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <xTimerGenericCommand+0x98>)
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	f107 0110 	add.w	r1, r7, #16
 800373a:	2300      	movs	r3, #0
 800373c:	2200      	movs	r2, #0
 800373e:	f7fe fc97 	bl	8002070 <xQueueGenericSend>
 8003742:	6278      	str	r0, [r7, #36]	; 0x24
 8003744:	e008      	b.n	8003758 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003746:	4b07      	ldr	r3, [pc, #28]	; (8003764 <xTimerGenericCommand+0x98>)
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	f107 0110 	add.w	r1, r7, #16
 800374e:	2300      	movs	r3, #0
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	f7fe fd8b 	bl	800226c <xQueueGenericSendFromISR>
 8003756:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800375a:	4618      	mov	r0, r3
 800375c:	3728      	adds	r7, #40	; 0x28
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000d1c 	.word	0x20000d1c

08003768 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af02      	add	r7, sp, #8
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003772:	4b22      	ldr	r3, [pc, #136]	; (80037fc <prvProcessExpiredTimer+0x94>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	3304      	adds	r3, #4
 8003780:	4618      	mov	r0, r3
 8003782:	f7fe fb47 	bl	8001e14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d022      	beq.n	80037da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	699a      	ldr	r2, [r3, #24]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	18d1      	adds	r1, r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	6978      	ldr	r0, [r7, #20]
 80037a2:	f000 f8d1 	bl	8003948 <prvInsertTimerInActiveList>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01f      	beq.n	80037ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80037ac:	2300      	movs	r3, #0
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2300      	movs	r3, #0
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	2100      	movs	r1, #0
 80037b6:	6978      	ldr	r0, [r7, #20]
 80037b8:	f7ff ff88 	bl	80036cc <xTimerGenericCommand>
 80037bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d113      	bne.n	80037ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 80037c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c8:	f383 8811 	msr	BASEPRI, r3
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	60fb      	str	r3, [r7, #12]
}
 80037d6:	bf00      	nop
 80037d8:	e7fe      	b.n	80037d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	6978      	ldr	r0, [r7, #20]
 80037f2:	4798      	blx	r3
}
 80037f4:	bf00      	nop
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000d14 	.word	0x20000d14

08003800 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003808:	f107 0308 	add.w	r3, r7, #8
 800380c:	4618      	mov	r0, r3
 800380e:	f000 f857 	bl	80038c0 <prvGetNextExpireTime>
 8003812:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4619      	mov	r1, r3
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f803 	bl	8003824 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800381e:	f000 f8d5 	bl	80039cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003822:	e7f1      	b.n	8003808 <prvTimerTask+0x8>

08003824 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800382e:	f7ff fa43 	bl	8002cb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003832:	f107 0308 	add.w	r3, r7, #8
 8003836:	4618      	mov	r0, r3
 8003838:	f000 f866 	bl	8003908 <prvSampleTimeNow>
 800383c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d130      	bne.n	80038a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10a      	bne.n	8003860 <prvProcessTimerOrBlockTask+0x3c>
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	429a      	cmp	r2, r3
 8003850:	d806      	bhi.n	8003860 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003852:	f7ff fa3f 	bl	8002cd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003856:	68f9      	ldr	r1, [r7, #12]
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff ff85 	bl	8003768 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800385e:	e024      	b.n	80038aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003866:	4b13      	ldr	r3, [pc, #76]	; (80038b4 <prvProcessTimerOrBlockTask+0x90>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <prvProcessTimerOrBlockTask+0x50>
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <prvProcessTimerOrBlockTask+0x52>
 8003874:	2300      	movs	r3, #0
 8003876:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003878:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <prvProcessTimerOrBlockTask+0x94>)
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	4619      	mov	r1, r3
 8003886:	f7fe ffa7 	bl	80027d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800388a:	f7ff fa23 	bl	8002cd4 <xTaskResumeAll>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003894:	4b09      	ldr	r3, [pc, #36]	; (80038bc <prvProcessTimerOrBlockTask+0x98>)
 8003896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	f3bf 8f6f 	isb	sy
}
 80038a4:	e001      	b.n	80038aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80038a6:	f7ff fa15 	bl	8002cd4 <xTaskResumeAll>
}
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000d18 	.word	0x20000d18
 80038b8:	20000d1c 	.word	0x20000d1c
 80038bc:	e000ed04 	.word	0xe000ed04

080038c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80038c8:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <prvGetNextExpireTime+0x44>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <prvGetNextExpireTime+0x16>
 80038d2:	2201      	movs	r2, #1
 80038d4:	e000      	b.n	80038d8 <prvGetNextExpireTime+0x18>
 80038d6:	2200      	movs	r2, #0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d105      	bne.n	80038f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038e4:	4b07      	ldr	r3, [pc, #28]	; (8003904 <prvGetNextExpireTime+0x44>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	e001      	b.n	80038f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80038f4:	68fb      	ldr	r3, [r7, #12]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20000d14 	.word	0x20000d14

08003908 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003910:	f7ff fa7e 	bl	8002e10 <xTaskGetTickCount>
 8003914:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003916:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <prvSampleTimeNow+0x3c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	429a      	cmp	r2, r3
 800391e:	d205      	bcs.n	800392c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003920:	f000 f936 	bl	8003b90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	e002      	b.n	8003932 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003932:	4a04      	ldr	r2, [pc, #16]	; (8003944 <prvSampleTimeNow+0x3c>)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003938:	68fb      	ldr	r3, [r7, #12]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000d24 	.word	0x20000d24

08003948 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	d812      	bhi.n	8003994 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	1ad2      	subs	r2, r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	429a      	cmp	r2, r3
 800397a:	d302      	bcc.n	8003982 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800397c:	2301      	movs	r3, #1
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	e01b      	b.n	80039ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003982:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <prvInsertTimerInActiveList+0x7c>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3304      	adds	r3, #4
 800398a:	4619      	mov	r1, r3
 800398c:	4610      	mov	r0, r2
 800398e:	f7fe fa08 	bl	8001da2 <vListInsert>
 8003992:	e012      	b.n	80039ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d206      	bcs.n	80039aa <prvInsertTimerInActiveList+0x62>
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d302      	bcc.n	80039aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80039a4:	2301      	movs	r3, #1
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	e007      	b.n	80039ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80039aa:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <prvInsertTimerInActiveList+0x80>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3304      	adds	r3, #4
 80039b2:	4619      	mov	r1, r3
 80039b4:	4610      	mov	r0, r2
 80039b6:	f7fe f9f4 	bl	8001da2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80039ba:	697b      	ldr	r3, [r7, #20]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20000d18 	.word	0x20000d18
 80039c8:	20000d14 	.word	0x20000d14

080039cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08e      	sub	sp, #56	; 0x38
 80039d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039d2:	e0ca      	b.n	8003b6a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	da18      	bge.n	8003a0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80039da:	1d3b      	adds	r3, r7, #4
 80039dc:	3304      	adds	r3, #4
 80039de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80039e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10a      	bne.n	80039fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80039e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	61fb      	str	r3, [r7, #28]
}
 80039f8:	bf00      	nop
 80039fa:	e7fe      	b.n	80039fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80039fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a02:	6850      	ldr	r0, [r2, #4]
 8003a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a06:	6892      	ldr	r2, [r2, #8]
 8003a08:	4611      	mov	r1, r2
 8003a0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f2c0 80ab 	blt.w	8003b6a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d004      	beq.n	8003a2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	3304      	adds	r3, #4
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fe f9f5 	bl	8001e14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a2a:	463b      	mov	r3, r7
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff ff6b 	bl	8003908 <prvSampleTimeNow>
 8003a32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b09      	cmp	r3, #9
 8003a38:	f200 8096 	bhi.w	8003b68 <prvProcessReceivedCommands+0x19c>
 8003a3c:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <prvProcessReceivedCommands+0x78>)
 8003a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a42:	bf00      	nop
 8003a44:	08003a6d 	.word	0x08003a6d
 8003a48:	08003a6d 	.word	0x08003a6d
 8003a4c:	08003a6d 	.word	0x08003a6d
 8003a50:	08003ae1 	.word	0x08003ae1
 8003a54:	08003af5 	.word	0x08003af5
 8003a58:	08003b3f 	.word	0x08003b3f
 8003a5c:	08003a6d 	.word	0x08003a6d
 8003a60:	08003a6d 	.word	0x08003a6d
 8003a64:	08003ae1 	.word	0x08003ae1
 8003a68:	08003af5 	.word	0x08003af5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	18d1      	adds	r1, r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a8c:	f7ff ff5c 	bl	8003948 <prvInsertTimerInActiveList>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d069      	beq.n	8003b6a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d05e      	beq.n	8003b6a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	441a      	add	r2, r3
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2100      	movs	r1, #0
 8003abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003abe:	f7ff fe05 	bl	80036cc <xTimerGenericCommand>
 8003ac2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d14f      	bne.n	8003b6a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	61bb      	str	r3, [r7, #24]
}
 8003adc:	bf00      	nop
 8003ade:	e7fe      	b.n	8003ade <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003af2:	e03a      	b.n	8003b6a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	617b      	str	r3, [r7, #20]
}
 8003b26:	bf00      	nop
 8003b28:	e7fe      	b.n	8003b28 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	699a      	ldr	r2, [r3, #24]
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	18d1      	adds	r1, r2, r3
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b38:	f7ff ff06 	bl	8003948 <prvInsertTimerInActiveList>
					break;
 8003b3c:	e015      	b.n	8003b6a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d103      	bne.n	8003b54 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b4e:	f000 fbdf 	bl	8004310 <vPortFree>
 8003b52:	e00a      	b.n	8003b6a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003b66:	e000      	b.n	8003b6a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8003b68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b6a:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <prvProcessReceivedCommands+0x1c0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	1d39      	adds	r1, r7, #4
 8003b70:	2200      	movs	r2, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe fc16 	bl	80023a4 <xQueueReceive>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f47f af2a 	bne.w	80039d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	3730      	adds	r7, #48	; 0x30
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000d1c 	.word	0x20000d1c

08003b90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b96:	e048      	b.n	8003c2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b98:	4b2d      	ldr	r3, [pc, #180]	; (8003c50 <prvSwitchTimerLists+0xc0>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ba2:	4b2b      	ldr	r3, [pc, #172]	; (8003c50 <prvSwitchTimerLists+0xc0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fe f92f 	bl	8001e14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d02e      	beq.n	8003c2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d90e      	bls.n	8003bfc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003bea:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <prvSwitchTimerLists+0xc0>)
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	f7fe f8d4 	bl	8001da2 <vListInsert>
 8003bfa:	e016      	b.n	8003c2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	2300      	movs	r3, #0
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	2100      	movs	r1, #0
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f7ff fd60 	bl	80036cc <xTimerGenericCommand>
 8003c0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	603b      	str	r3, [r7, #0]
}
 8003c26:	bf00      	nop
 8003c28:	e7fe      	b.n	8003c28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c2a:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <prvSwitchTimerLists+0xc0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1b1      	bne.n	8003b98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <prvSwitchTimerLists+0xc0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003c3a:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <prvSwitchTimerLists+0xc4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <prvSwitchTimerLists+0xc0>)
 8003c40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003c42:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <prvSwitchTimerLists+0xc4>)
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	6013      	str	r3, [r2, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000d14 	.word	0x20000d14
 8003c54:	20000d18 	.word	0x20000d18

08003c58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003c5e:	f000 f969 	bl	8003f34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003c62:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <prvCheckForValidListAndQueue+0x60>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d120      	bne.n	8003cac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003c6a:	4814      	ldr	r0, [pc, #80]	; (8003cbc <prvCheckForValidListAndQueue+0x64>)
 8003c6c:	f7fe f848 	bl	8001d00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003c70:	4813      	ldr	r0, [pc, #76]	; (8003cc0 <prvCheckForValidListAndQueue+0x68>)
 8003c72:	f7fe f845 	bl	8001d00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003c76:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <prvCheckForValidListAndQueue+0x6c>)
 8003c78:	4a10      	ldr	r2, [pc, #64]	; (8003cbc <prvCheckForValidListAndQueue+0x64>)
 8003c7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <prvCheckForValidListAndQueue+0x70>)
 8003c7e:	4a10      	ldr	r2, [pc, #64]	; (8003cc0 <prvCheckForValidListAndQueue+0x68>)
 8003c80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003c82:	2300      	movs	r3, #0
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <prvCheckForValidListAndQueue+0x74>)
 8003c88:	4a11      	ldr	r2, [pc, #68]	; (8003cd0 <prvCheckForValidListAndQueue+0x78>)
 8003c8a:	2110      	movs	r1, #16
 8003c8c:	200a      	movs	r0, #10
 8003c8e:	f7fe f953 	bl	8001f38 <xQueueGenericCreateStatic>
 8003c92:	4603      	mov	r3, r0
 8003c94:	4a08      	ldr	r2, [pc, #32]	; (8003cb8 <prvCheckForValidListAndQueue+0x60>)
 8003c96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003c98:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <prvCheckForValidListAndQueue+0x60>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <prvCheckForValidListAndQueue+0x60>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	490b      	ldr	r1, [pc, #44]	; (8003cd4 <prvCheckForValidListAndQueue+0x7c>)
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe fd6c 	bl	8002784 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cac:	f000 f972 	bl	8003f94 <vPortExitCritical>
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000d1c 	.word	0x20000d1c
 8003cbc:	20000cec 	.word	0x20000cec
 8003cc0:	20000d00 	.word	0x20000d00
 8003cc4:	20000d14 	.word	0x20000d14
 8003cc8:	20000d18 	.word	0x20000d18
 8003ccc:	20000dc8 	.word	0x20000dc8
 8003cd0:	20000d28 	.word	0x20000d28
 8003cd4:	08004ef0 	.word	0x08004ef0

08003cd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3b04      	subs	r3, #4
 8003ce8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3b04      	subs	r3, #4
 8003cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f023 0201 	bic.w	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3b04      	subs	r3, #4
 8003d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d08:	4a0c      	ldr	r2, [pc, #48]	; (8003d3c <pxPortInitialiseStack+0x64>)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3b14      	subs	r3, #20
 8003d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	3b04      	subs	r3, #4
 8003d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f06f 0202 	mvn.w	r2, #2
 8003d26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	3b20      	subs	r3, #32
 8003d2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	08003d41 	.word	0x08003d41

08003d40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d4a:	4b12      	ldr	r3, [pc, #72]	; (8003d94 <prvTaskExitError+0x54>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d52:	d00a      	beq.n	8003d6a <prvTaskExitError+0x2a>
	__asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	60fb      	str	r3, [r7, #12]
}
 8003d66:	bf00      	nop
 8003d68:	e7fe      	b.n	8003d68 <prvTaskExitError+0x28>
	__asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	60bb      	str	r3, [r7, #8]
}
 8003d7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003d7e:	bf00      	nop
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0fc      	beq.n	8003d80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d86:	bf00      	nop
 8003d88:	bf00      	nop
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	2000000c 	.word	0x2000000c
	...

08003da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003da0:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <pxCurrentTCBConst2>)
 8003da2:	6819      	ldr	r1, [r3, #0]
 8003da4:	6808      	ldr	r0, [r1, #0]
 8003da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003daa:	f380 8809 	msr	PSP, r0
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f04f 0000 	mov.w	r0, #0
 8003db6:	f380 8811 	msr	BASEPRI, r0
 8003dba:	4770      	bx	lr
 8003dbc:	f3af 8000 	nop.w

08003dc0 <pxCurrentTCBConst2>:
 8003dc0:	200007ec 	.word	0x200007ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop

08003dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003dc8:	4808      	ldr	r0, [pc, #32]	; (8003dec <prvPortStartFirstTask+0x24>)
 8003dca:	6800      	ldr	r0, [r0, #0]
 8003dcc:	6800      	ldr	r0, [r0, #0]
 8003dce:	f380 8808 	msr	MSP, r0
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f380 8814 	msr	CONTROL, r0
 8003dda:	b662      	cpsie	i
 8003ddc:	b661      	cpsie	f
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	df00      	svc	0
 8003de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003dea:	bf00      	nop
 8003dec:	e000ed08 	.word	0xe000ed08

08003df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003df6:	4b46      	ldr	r3, [pc, #280]	; (8003f10 <xPortStartScheduler+0x120>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a46      	ldr	r2, [pc, #280]	; (8003f14 <xPortStartScheduler+0x124>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d10a      	bne.n	8003e16 <xPortStartScheduler+0x26>
	__asm volatile
 8003e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	613b      	str	r3, [r7, #16]
}
 8003e12:	bf00      	nop
 8003e14:	e7fe      	b.n	8003e14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e16:	4b3e      	ldr	r3, [pc, #248]	; (8003f10 <xPortStartScheduler+0x120>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a3f      	ldr	r2, [pc, #252]	; (8003f18 <xPortStartScheduler+0x128>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d10a      	bne.n	8003e36 <xPortStartScheduler+0x46>
	__asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	60fb      	str	r3, [r7, #12]
}
 8003e32:	bf00      	nop
 8003e34:	e7fe      	b.n	8003e34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e36:	4b39      	ldr	r3, [pc, #228]	; (8003f1c <xPortStartScheduler+0x12c>)
 8003e38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	22ff      	movs	r2, #255	; 0xff
 8003e46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	4b31      	ldr	r3, [pc, #196]	; (8003f20 <xPortStartScheduler+0x130>)
 8003e5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e5e:	4b31      	ldr	r3, [pc, #196]	; (8003f24 <xPortStartScheduler+0x134>)
 8003e60:	2207      	movs	r2, #7
 8003e62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e64:	e009      	b.n	8003e7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003e66:	4b2f      	ldr	r3, [pc, #188]	; (8003f24 <xPortStartScheduler+0x134>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	4a2d      	ldr	r2, [pc, #180]	; (8003f24 <xPortStartScheduler+0x134>)
 8003e6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	2b80      	cmp	r3, #128	; 0x80
 8003e84:	d0ef      	beq.n	8003e66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e86:	4b27      	ldr	r3, [pc, #156]	; (8003f24 <xPortStartScheduler+0x134>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f1c3 0307 	rsb	r3, r3, #7
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d00a      	beq.n	8003ea8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	60bb      	str	r3, [r7, #8]
}
 8003ea4:	bf00      	nop
 8003ea6:	e7fe      	b.n	8003ea6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ea8:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <xPortStartScheduler+0x134>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	4a1d      	ldr	r2, [pc, #116]	; (8003f24 <xPortStartScheduler+0x134>)
 8003eb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003eb2:	4b1c      	ldr	r3, [pc, #112]	; (8003f24 <xPortStartScheduler+0x134>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003eba:	4a1a      	ldr	r2, [pc, #104]	; (8003f24 <xPortStartScheduler+0x134>)
 8003ebc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003ec6:	4b18      	ldr	r3, [pc, #96]	; (8003f28 <xPortStartScheduler+0x138>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a17      	ldr	r2, [pc, #92]	; (8003f28 <xPortStartScheduler+0x138>)
 8003ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ed0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003ed2:	4b15      	ldr	r3, [pc, #84]	; (8003f28 <xPortStartScheduler+0x138>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a14      	ldr	r2, [pc, #80]	; (8003f28 <xPortStartScheduler+0x138>)
 8003ed8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003edc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ede:	f000 f8dd 	bl	800409c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003ee2:	4b12      	ldr	r3, [pc, #72]	; (8003f2c <xPortStartScheduler+0x13c>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003ee8:	f000 f8fc 	bl	80040e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003eec:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <xPortStartScheduler+0x140>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a0f      	ldr	r2, [pc, #60]	; (8003f30 <xPortStartScheduler+0x140>)
 8003ef2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003ef6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ef8:	f7ff ff66 	bl	8003dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003efc:	f7ff f852 	bl	8002fa4 <vTaskSwitchContext>
	prvTaskExitError();
 8003f00:	f7ff ff1e 	bl	8003d40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	e000ed00 	.word	0xe000ed00
 8003f14:	410fc271 	.word	0x410fc271
 8003f18:	410fc270 	.word	0x410fc270
 8003f1c:	e000e400 	.word	0xe000e400
 8003f20:	20000e18 	.word	0x20000e18
 8003f24:	20000e1c 	.word	0x20000e1c
 8003f28:	e000ed20 	.word	0xe000ed20
 8003f2c:	2000000c 	.word	0x2000000c
 8003f30:	e000ef34 	.word	0xe000ef34

08003f34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
	__asm volatile
 8003f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	607b      	str	r3, [r7, #4]
}
 8003f4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f4e:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <vPortEnterCritical+0x58>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3301      	adds	r3, #1
 8003f54:	4a0d      	ldr	r2, [pc, #52]	; (8003f8c <vPortEnterCritical+0x58>)
 8003f56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <vPortEnterCritical+0x58>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d10f      	bne.n	8003f80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <vPortEnterCritical+0x5c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <vPortEnterCritical+0x4c>
	__asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	603b      	str	r3, [r7, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	e7fe      	b.n	8003f7e <vPortEnterCritical+0x4a>
	}
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	2000000c 	.word	0x2000000c
 8003f90:	e000ed04 	.word	0xe000ed04

08003f94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f9a:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <vPortExitCritical+0x50>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <vPortExitCritical+0x24>
	__asm volatile
 8003fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	607b      	str	r3, [r7, #4]
}
 8003fb4:	bf00      	nop
 8003fb6:	e7fe      	b.n	8003fb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <vPortExitCritical+0x50>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	4a09      	ldr	r2, [pc, #36]	; (8003fe4 <vPortExitCritical+0x50>)
 8003fc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003fc2:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <vPortExitCritical+0x50>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d105      	bne.n	8003fd6 <vPortExitCritical+0x42>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	f383 8811 	msr	BASEPRI, r3
}
 8003fd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	2000000c 	.word	0x2000000c
	...

08003ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ff0:	f3ef 8009 	mrs	r0, PSP
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	4b15      	ldr	r3, [pc, #84]	; (8004050 <pxCurrentTCBConst>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	f01e 0f10 	tst.w	lr, #16
 8004000:	bf08      	it	eq
 8004002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400a:	6010      	str	r0, [r2, #0]
 800400c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004010:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004014:	f380 8811 	msr	BASEPRI, r0
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f7fe ffc0 	bl	8002fa4 <vTaskSwitchContext>
 8004024:	f04f 0000 	mov.w	r0, #0
 8004028:	f380 8811 	msr	BASEPRI, r0
 800402c:	bc09      	pop	{r0, r3}
 800402e:	6819      	ldr	r1, [r3, #0]
 8004030:	6808      	ldr	r0, [r1, #0]
 8004032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004036:	f01e 0f10 	tst.w	lr, #16
 800403a:	bf08      	it	eq
 800403c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004040:	f380 8809 	msr	PSP, r0
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	f3af 8000 	nop.w

08004050 <pxCurrentTCBConst>:
 8004050:	200007ec 	.word	0x200007ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop

08004058 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	607b      	str	r3, [r7, #4]
}
 8004070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004072:	f7fe fedd 	bl	8002e30 <xTaskIncrementTick>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <xPortSysTickHandler+0x40>)
 800407e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	2300      	movs	r3, #0
 8004086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f383 8811 	msr	BASEPRI, r3
}
 800408e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	e000ed04 	.word	0xe000ed04

0800409c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <vPortSetupTimerInterrupt+0x34>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <vPortSetupTimerInterrupt+0x38>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <vPortSetupTimerInterrupt+0x3c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <vPortSetupTimerInterrupt+0x40>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	099b      	lsrs	r3, r3, #6
 80040b8:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <vPortSetupTimerInterrupt+0x44>)
 80040ba:	3b01      	subs	r3, #1
 80040bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040be:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <vPortSetupTimerInterrupt+0x34>)
 80040c0:	2207      	movs	r2, #7
 80040c2:	601a      	str	r2, [r3, #0]
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	e000e010 	.word	0xe000e010
 80040d4:	e000e018 	.word	0xe000e018
 80040d8:	20000000 	.word	0x20000000
 80040dc:	10624dd3 	.word	0x10624dd3
 80040e0:	e000e014 	.word	0xe000e014

080040e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80040e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80040f4 <vPortEnableVFP+0x10>
 80040e8:	6801      	ldr	r1, [r0, #0]
 80040ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80040ee:	6001      	str	r1, [r0, #0]
 80040f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80040f2:	bf00      	nop
 80040f4:	e000ed88 	.word	0xe000ed88

080040f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80040fe:	f3ef 8305 	mrs	r3, IPSR
 8004102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b0f      	cmp	r3, #15
 8004108:	d914      	bls.n	8004134 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800410a:	4a17      	ldr	r2, [pc, #92]	; (8004168 <vPortValidateInterruptPriority+0x70>)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4413      	add	r3, r2
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004114:	4b15      	ldr	r3, [pc, #84]	; (800416c <vPortValidateInterruptPriority+0x74>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	7afa      	ldrb	r2, [r7, #11]
 800411a:	429a      	cmp	r2, r3
 800411c:	d20a      	bcs.n	8004134 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	607b      	str	r3, [r7, #4]
}
 8004130:	bf00      	nop
 8004132:	e7fe      	b.n	8004132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004134:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <vPortValidateInterruptPriority+0x78>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800413c:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <vPortValidateInterruptPriority+0x7c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d90a      	bls.n	800415a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	603b      	str	r3, [r7, #0]
}
 8004156:	bf00      	nop
 8004158:	e7fe      	b.n	8004158 <vPortValidateInterruptPriority+0x60>
	}
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	e000e3f0 	.word	0xe000e3f0
 800416c:	20000e18 	.word	0x20000e18
 8004170:	e000ed0c 	.word	0xe000ed0c
 8004174:	20000e1c 	.word	0x20000e1c

08004178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08a      	sub	sp, #40	; 0x28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004180:	2300      	movs	r3, #0
 8004182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004184:	f7fe fd98 	bl	8002cb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004188:	4b5b      	ldr	r3, [pc, #364]	; (80042f8 <pvPortMalloc+0x180>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004190:	f000 f920 	bl	80043d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004194:	4b59      	ldr	r3, [pc, #356]	; (80042fc <pvPortMalloc+0x184>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4013      	ands	r3, r2
 800419c:	2b00      	cmp	r3, #0
 800419e:	f040 8093 	bne.w	80042c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d01d      	beq.n	80041e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80041a8:	2208      	movs	r2, #8
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d014      	beq.n	80041e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f023 0307 	bic.w	r3, r3, #7
 80041c0:	3308      	adds	r3, #8
 80041c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <pvPortMalloc+0x6c>
	__asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	617b      	str	r3, [r7, #20]
}
 80041e0:	bf00      	nop
 80041e2:	e7fe      	b.n	80041e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d06e      	beq.n	80042c8 <pvPortMalloc+0x150>
 80041ea:	4b45      	ldr	r3, [pc, #276]	; (8004300 <pvPortMalloc+0x188>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d869      	bhi.n	80042c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80041f4:	4b43      	ldr	r3, [pc, #268]	; (8004304 <pvPortMalloc+0x18c>)
 80041f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80041f8:	4b42      	ldr	r3, [pc, #264]	; (8004304 <pvPortMalloc+0x18c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041fe:	e004      	b.n	800420a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	429a      	cmp	r2, r3
 8004212:	d903      	bls.n	800421c <pvPortMalloc+0xa4>
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f1      	bne.n	8004200 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800421c:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <pvPortMalloc+0x180>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004222:	429a      	cmp	r2, r3
 8004224:	d050      	beq.n	80042c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2208      	movs	r2, #8
 800422c:	4413      	add	r3, r2
 800422e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	1ad2      	subs	r2, r2, r3
 8004240:	2308      	movs	r3, #8
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	429a      	cmp	r2, r3
 8004246:	d91f      	bls.n	8004288 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4413      	add	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <pvPortMalloc+0xf8>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	613b      	str	r3, [r7, #16]
}
 800426c:	bf00      	nop
 800426e:	e7fe      	b.n	800426e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	1ad2      	subs	r2, r2, r3
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004282:	69b8      	ldr	r0, [r7, #24]
 8004284:	f000 f908 	bl	8004498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004288:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <pvPortMalloc+0x188>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	4a1b      	ldr	r2, [pc, #108]	; (8004300 <pvPortMalloc+0x188>)
 8004294:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004296:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <pvPortMalloc+0x188>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <pvPortMalloc+0x190>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d203      	bcs.n	80042aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042a2:	4b17      	ldr	r3, [pc, #92]	; (8004300 <pvPortMalloc+0x188>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a18      	ldr	r2, [pc, #96]	; (8004308 <pvPortMalloc+0x190>)
 80042a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	4b13      	ldr	r3, [pc, #76]	; (80042fc <pvPortMalloc+0x184>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <pvPortMalloc+0x194>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3301      	adds	r3, #1
 80042c4:	4a11      	ldr	r2, [pc, #68]	; (800430c <pvPortMalloc+0x194>)
 80042c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80042c8:	f7fe fd04 	bl	8002cd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <pvPortMalloc+0x174>
	__asm volatile
 80042d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042da:	f383 8811 	msr	BASEPRI, r3
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	60fb      	str	r3, [r7, #12]
}
 80042e8:	bf00      	nop
 80042ea:	e7fe      	b.n	80042ea <pvPortMalloc+0x172>
	return pvReturn;
 80042ec:	69fb      	ldr	r3, [r7, #28]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3728      	adds	r7, #40	; 0x28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20004a28 	.word	0x20004a28
 80042fc:	20004a3c 	.word	0x20004a3c
 8004300:	20004a2c 	.word	0x20004a2c
 8004304:	20004a20 	.word	0x20004a20
 8004308:	20004a30 	.word	0x20004a30
 800430c:	20004a34 	.word	0x20004a34

08004310 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d04d      	beq.n	80043be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004322:	2308      	movs	r3, #8
 8004324:	425b      	negs	r3, r3
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4413      	add	r3, r2
 800432a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	4b24      	ldr	r3, [pc, #144]	; (80043c8 <vPortFree+0xb8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4013      	ands	r3, r2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <vPortFree+0x44>
	__asm volatile
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	60fb      	str	r3, [r7, #12]
}
 8004350:	bf00      	nop
 8004352:	e7fe      	b.n	8004352 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <vPortFree+0x62>
	__asm volatile
 800435c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	60bb      	str	r3, [r7, #8]
}
 800436e:	bf00      	nop
 8004370:	e7fe      	b.n	8004370 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <vPortFree+0xb8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01e      	beq.n	80043be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d11a      	bne.n	80043be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <vPortFree+0xb8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	43db      	mvns	r3, r3
 8004392:	401a      	ands	r2, r3
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004398:	f7fe fc8e 	bl	8002cb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <vPortFree+0xbc>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4413      	add	r3, r2
 80043a6:	4a09      	ldr	r2, [pc, #36]	; (80043cc <vPortFree+0xbc>)
 80043a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043aa:	6938      	ldr	r0, [r7, #16]
 80043ac:	f000 f874 	bl	8004498 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80043b0:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <vPortFree+0xc0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3301      	adds	r3, #1
 80043b6:	4a06      	ldr	r2, [pc, #24]	; (80043d0 <vPortFree+0xc0>)
 80043b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80043ba:	f7fe fc8b 	bl	8002cd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80043be:	bf00      	nop
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20004a3c 	.word	0x20004a3c
 80043cc:	20004a2c 	.word	0x20004a2c
 80043d0:	20004a38 	.word	0x20004a38

080043d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80043de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80043e0:	4b27      	ldr	r3, [pc, #156]	; (8004480 <prvHeapInit+0xac>)
 80043e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00c      	beq.n	8004408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3307      	adds	r3, #7
 80043f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0307 	bic.w	r3, r3, #7
 80043fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	4a1f      	ldr	r2, [pc, #124]	; (8004480 <prvHeapInit+0xac>)
 8004404:	4413      	add	r3, r2
 8004406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800440c:	4a1d      	ldr	r2, [pc, #116]	; (8004484 <prvHeapInit+0xb0>)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004412:	4b1c      	ldr	r3, [pc, #112]	; (8004484 <prvHeapInit+0xb0>)
 8004414:	2200      	movs	r2, #0
 8004416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	4413      	add	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004420:	2208      	movs	r2, #8
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0307 	bic.w	r3, r3, #7
 800442e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4a15      	ldr	r2, [pc, #84]	; (8004488 <prvHeapInit+0xb4>)
 8004434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004436:	4b14      	ldr	r3, [pc, #80]	; (8004488 <prvHeapInit+0xb4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2200      	movs	r2, #0
 800443c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800443e:	4b12      	ldr	r3, [pc, #72]	; (8004488 <prvHeapInit+0xb4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	1ad2      	subs	r2, r2, r3
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <prvHeapInit+0xb4>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	4a0a      	ldr	r2, [pc, #40]	; (800448c <prvHeapInit+0xb8>)
 8004462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	4a09      	ldr	r2, [pc, #36]	; (8004490 <prvHeapInit+0xbc>)
 800446a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800446c:	4b09      	ldr	r3, [pc, #36]	; (8004494 <prvHeapInit+0xc0>)
 800446e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004472:	601a      	str	r2, [r3, #0]
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	20000e20 	.word	0x20000e20
 8004484:	20004a20 	.word	0x20004a20
 8004488:	20004a28 	.word	0x20004a28
 800448c:	20004a30 	.word	0x20004a30
 8004490:	20004a2c 	.word	0x20004a2c
 8004494:	20004a3c 	.word	0x20004a3c

08004498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044a0:	4b28      	ldr	r3, [pc, #160]	; (8004544 <prvInsertBlockIntoFreeList+0xac>)
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	e002      	b.n	80044ac <prvInsertBlockIntoFreeList+0x14>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d8f7      	bhi.n	80044a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	4413      	add	r3, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d108      	bne.n	80044da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	441a      	add	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	441a      	add	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d118      	bne.n	8004520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	4b15      	ldr	r3, [pc, #84]	; (8004548 <prvInsertBlockIntoFreeList+0xb0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d00d      	beq.n	8004516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	441a      	add	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	e008      	b.n	8004528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004516:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <prvInsertBlockIntoFreeList+0xb0>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e003      	b.n	8004528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	429a      	cmp	r2, r3
 800452e:	d002      	beq.n	8004536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	20004a20 	.word	0x20004a20
 8004548:	20004a28 	.word	0x20004a28

0800454c <siprintf>:
 800454c:	b40e      	push	{r1, r2, r3}
 800454e:	b500      	push	{lr}
 8004550:	b09c      	sub	sp, #112	; 0x70
 8004552:	ab1d      	add	r3, sp, #116	; 0x74
 8004554:	9002      	str	r0, [sp, #8]
 8004556:	9006      	str	r0, [sp, #24]
 8004558:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800455c:	4809      	ldr	r0, [pc, #36]	; (8004584 <siprintf+0x38>)
 800455e:	9107      	str	r1, [sp, #28]
 8004560:	9104      	str	r1, [sp, #16]
 8004562:	4909      	ldr	r1, [pc, #36]	; (8004588 <siprintf+0x3c>)
 8004564:	f853 2b04 	ldr.w	r2, [r3], #4
 8004568:	9105      	str	r1, [sp, #20]
 800456a:	6800      	ldr	r0, [r0, #0]
 800456c:	9301      	str	r3, [sp, #4]
 800456e:	a902      	add	r1, sp, #8
 8004570:	f000 f9a0 	bl	80048b4 <_svfiprintf_r>
 8004574:	9b02      	ldr	r3, [sp, #8]
 8004576:	2200      	movs	r2, #0
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	b01c      	add	sp, #112	; 0x70
 800457c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004580:	b003      	add	sp, #12
 8004582:	4770      	bx	lr
 8004584:	2000005c 	.word	0x2000005c
 8004588:	ffff0208 	.word	0xffff0208

0800458c <memset>:
 800458c:	4402      	add	r2, r0
 800458e:	4603      	mov	r3, r0
 8004590:	4293      	cmp	r3, r2
 8004592:	d100      	bne.n	8004596 <memset+0xa>
 8004594:	4770      	bx	lr
 8004596:	f803 1b01 	strb.w	r1, [r3], #1
 800459a:	e7f9      	b.n	8004590 <memset+0x4>

0800459c <__errno>:
 800459c:	4b01      	ldr	r3, [pc, #4]	; (80045a4 <__errno+0x8>)
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	2000005c 	.word	0x2000005c

080045a8 <__libc_init_array>:
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	4d0d      	ldr	r5, [pc, #52]	; (80045e0 <__libc_init_array+0x38>)
 80045ac:	4c0d      	ldr	r4, [pc, #52]	; (80045e4 <__libc_init_array+0x3c>)
 80045ae:	1b64      	subs	r4, r4, r5
 80045b0:	10a4      	asrs	r4, r4, #2
 80045b2:	2600      	movs	r6, #0
 80045b4:	42a6      	cmp	r6, r4
 80045b6:	d109      	bne.n	80045cc <__libc_init_array+0x24>
 80045b8:	4d0b      	ldr	r5, [pc, #44]	; (80045e8 <__libc_init_array+0x40>)
 80045ba:	4c0c      	ldr	r4, [pc, #48]	; (80045ec <__libc_init_array+0x44>)
 80045bc:	f000 fc6a 	bl	8004e94 <_init>
 80045c0:	1b64      	subs	r4, r4, r5
 80045c2:	10a4      	asrs	r4, r4, #2
 80045c4:	2600      	movs	r6, #0
 80045c6:	42a6      	cmp	r6, r4
 80045c8:	d105      	bne.n	80045d6 <__libc_init_array+0x2e>
 80045ca:	bd70      	pop	{r4, r5, r6, pc}
 80045cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d0:	4798      	blx	r3
 80045d2:	3601      	adds	r6, #1
 80045d4:	e7ee      	b.n	80045b4 <__libc_init_array+0xc>
 80045d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045da:	4798      	blx	r3
 80045dc:	3601      	adds	r6, #1
 80045de:	e7f2      	b.n	80045c6 <__libc_init_array+0x1e>
 80045e0:	08004f8c 	.word	0x08004f8c
 80045e4:	08004f8c 	.word	0x08004f8c
 80045e8:	08004f8c 	.word	0x08004f8c
 80045ec:	08004f90 	.word	0x08004f90

080045f0 <__retarget_lock_acquire_recursive>:
 80045f0:	4770      	bx	lr

080045f2 <__retarget_lock_release_recursive>:
 80045f2:	4770      	bx	lr

080045f4 <memcpy>:
 80045f4:	440a      	add	r2, r1
 80045f6:	4291      	cmp	r1, r2
 80045f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80045fc:	d100      	bne.n	8004600 <memcpy+0xc>
 80045fe:	4770      	bx	lr
 8004600:	b510      	push	{r4, lr}
 8004602:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800460a:	4291      	cmp	r1, r2
 800460c:	d1f9      	bne.n	8004602 <memcpy+0xe>
 800460e:	bd10      	pop	{r4, pc}

08004610 <_free_r>:
 8004610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004612:	2900      	cmp	r1, #0
 8004614:	d044      	beq.n	80046a0 <_free_r+0x90>
 8004616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800461a:	9001      	str	r0, [sp, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	f1a1 0404 	sub.w	r4, r1, #4
 8004622:	bfb8      	it	lt
 8004624:	18e4      	addlt	r4, r4, r3
 8004626:	f000 f8df 	bl	80047e8 <__malloc_lock>
 800462a:	4a1e      	ldr	r2, [pc, #120]	; (80046a4 <_free_r+0x94>)
 800462c:	9801      	ldr	r0, [sp, #4]
 800462e:	6813      	ldr	r3, [r2, #0]
 8004630:	b933      	cbnz	r3, 8004640 <_free_r+0x30>
 8004632:	6063      	str	r3, [r4, #4]
 8004634:	6014      	str	r4, [r2, #0]
 8004636:	b003      	add	sp, #12
 8004638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800463c:	f000 b8da 	b.w	80047f4 <__malloc_unlock>
 8004640:	42a3      	cmp	r3, r4
 8004642:	d908      	bls.n	8004656 <_free_r+0x46>
 8004644:	6825      	ldr	r5, [r4, #0]
 8004646:	1961      	adds	r1, r4, r5
 8004648:	428b      	cmp	r3, r1
 800464a:	bf01      	itttt	eq
 800464c:	6819      	ldreq	r1, [r3, #0]
 800464e:	685b      	ldreq	r3, [r3, #4]
 8004650:	1949      	addeq	r1, r1, r5
 8004652:	6021      	streq	r1, [r4, #0]
 8004654:	e7ed      	b.n	8004632 <_free_r+0x22>
 8004656:	461a      	mov	r2, r3
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	b10b      	cbz	r3, 8004660 <_free_r+0x50>
 800465c:	42a3      	cmp	r3, r4
 800465e:	d9fa      	bls.n	8004656 <_free_r+0x46>
 8004660:	6811      	ldr	r1, [r2, #0]
 8004662:	1855      	adds	r5, r2, r1
 8004664:	42a5      	cmp	r5, r4
 8004666:	d10b      	bne.n	8004680 <_free_r+0x70>
 8004668:	6824      	ldr	r4, [r4, #0]
 800466a:	4421      	add	r1, r4
 800466c:	1854      	adds	r4, r2, r1
 800466e:	42a3      	cmp	r3, r4
 8004670:	6011      	str	r1, [r2, #0]
 8004672:	d1e0      	bne.n	8004636 <_free_r+0x26>
 8004674:	681c      	ldr	r4, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	6053      	str	r3, [r2, #4]
 800467a:	440c      	add	r4, r1
 800467c:	6014      	str	r4, [r2, #0]
 800467e:	e7da      	b.n	8004636 <_free_r+0x26>
 8004680:	d902      	bls.n	8004688 <_free_r+0x78>
 8004682:	230c      	movs	r3, #12
 8004684:	6003      	str	r3, [r0, #0]
 8004686:	e7d6      	b.n	8004636 <_free_r+0x26>
 8004688:	6825      	ldr	r5, [r4, #0]
 800468a:	1961      	adds	r1, r4, r5
 800468c:	428b      	cmp	r3, r1
 800468e:	bf04      	itt	eq
 8004690:	6819      	ldreq	r1, [r3, #0]
 8004692:	685b      	ldreq	r3, [r3, #4]
 8004694:	6063      	str	r3, [r4, #4]
 8004696:	bf04      	itt	eq
 8004698:	1949      	addeq	r1, r1, r5
 800469a:	6021      	streq	r1, [r4, #0]
 800469c:	6054      	str	r4, [r2, #4]
 800469e:	e7ca      	b.n	8004636 <_free_r+0x26>
 80046a0:	b003      	add	sp, #12
 80046a2:	bd30      	pop	{r4, r5, pc}
 80046a4:	20004b80 	.word	0x20004b80

080046a8 <sbrk_aligned>:
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	4e0e      	ldr	r6, [pc, #56]	; (80046e4 <sbrk_aligned+0x3c>)
 80046ac:	460c      	mov	r4, r1
 80046ae:	6831      	ldr	r1, [r6, #0]
 80046b0:	4605      	mov	r5, r0
 80046b2:	b911      	cbnz	r1, 80046ba <sbrk_aligned+0x12>
 80046b4:	f000 fba6 	bl	8004e04 <_sbrk_r>
 80046b8:	6030      	str	r0, [r6, #0]
 80046ba:	4621      	mov	r1, r4
 80046bc:	4628      	mov	r0, r5
 80046be:	f000 fba1 	bl	8004e04 <_sbrk_r>
 80046c2:	1c43      	adds	r3, r0, #1
 80046c4:	d00a      	beq.n	80046dc <sbrk_aligned+0x34>
 80046c6:	1cc4      	adds	r4, r0, #3
 80046c8:	f024 0403 	bic.w	r4, r4, #3
 80046cc:	42a0      	cmp	r0, r4
 80046ce:	d007      	beq.n	80046e0 <sbrk_aligned+0x38>
 80046d0:	1a21      	subs	r1, r4, r0
 80046d2:	4628      	mov	r0, r5
 80046d4:	f000 fb96 	bl	8004e04 <_sbrk_r>
 80046d8:	3001      	adds	r0, #1
 80046da:	d101      	bne.n	80046e0 <sbrk_aligned+0x38>
 80046dc:	f04f 34ff 	mov.w	r4, #4294967295
 80046e0:	4620      	mov	r0, r4
 80046e2:	bd70      	pop	{r4, r5, r6, pc}
 80046e4:	20004b84 	.word	0x20004b84

080046e8 <_malloc_r>:
 80046e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046ec:	1ccd      	adds	r5, r1, #3
 80046ee:	f025 0503 	bic.w	r5, r5, #3
 80046f2:	3508      	adds	r5, #8
 80046f4:	2d0c      	cmp	r5, #12
 80046f6:	bf38      	it	cc
 80046f8:	250c      	movcc	r5, #12
 80046fa:	2d00      	cmp	r5, #0
 80046fc:	4607      	mov	r7, r0
 80046fe:	db01      	blt.n	8004704 <_malloc_r+0x1c>
 8004700:	42a9      	cmp	r1, r5
 8004702:	d905      	bls.n	8004710 <_malloc_r+0x28>
 8004704:	230c      	movs	r3, #12
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	2600      	movs	r6, #0
 800470a:	4630      	mov	r0, r6
 800470c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004710:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80047e4 <_malloc_r+0xfc>
 8004714:	f000 f868 	bl	80047e8 <__malloc_lock>
 8004718:	f8d8 3000 	ldr.w	r3, [r8]
 800471c:	461c      	mov	r4, r3
 800471e:	bb5c      	cbnz	r4, 8004778 <_malloc_r+0x90>
 8004720:	4629      	mov	r1, r5
 8004722:	4638      	mov	r0, r7
 8004724:	f7ff ffc0 	bl	80046a8 <sbrk_aligned>
 8004728:	1c43      	adds	r3, r0, #1
 800472a:	4604      	mov	r4, r0
 800472c:	d155      	bne.n	80047da <_malloc_r+0xf2>
 800472e:	f8d8 4000 	ldr.w	r4, [r8]
 8004732:	4626      	mov	r6, r4
 8004734:	2e00      	cmp	r6, #0
 8004736:	d145      	bne.n	80047c4 <_malloc_r+0xdc>
 8004738:	2c00      	cmp	r4, #0
 800473a:	d048      	beq.n	80047ce <_malloc_r+0xe6>
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	4631      	mov	r1, r6
 8004740:	4638      	mov	r0, r7
 8004742:	eb04 0903 	add.w	r9, r4, r3
 8004746:	f000 fb5d 	bl	8004e04 <_sbrk_r>
 800474a:	4581      	cmp	r9, r0
 800474c:	d13f      	bne.n	80047ce <_malloc_r+0xe6>
 800474e:	6821      	ldr	r1, [r4, #0]
 8004750:	1a6d      	subs	r5, r5, r1
 8004752:	4629      	mov	r1, r5
 8004754:	4638      	mov	r0, r7
 8004756:	f7ff ffa7 	bl	80046a8 <sbrk_aligned>
 800475a:	3001      	adds	r0, #1
 800475c:	d037      	beq.n	80047ce <_malloc_r+0xe6>
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	442b      	add	r3, r5
 8004762:	6023      	str	r3, [r4, #0]
 8004764:	f8d8 3000 	ldr.w	r3, [r8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d038      	beq.n	80047de <_malloc_r+0xf6>
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	42a2      	cmp	r2, r4
 8004770:	d12b      	bne.n	80047ca <_malloc_r+0xe2>
 8004772:	2200      	movs	r2, #0
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	e00f      	b.n	8004798 <_malloc_r+0xb0>
 8004778:	6822      	ldr	r2, [r4, #0]
 800477a:	1b52      	subs	r2, r2, r5
 800477c:	d41f      	bmi.n	80047be <_malloc_r+0xd6>
 800477e:	2a0b      	cmp	r2, #11
 8004780:	d917      	bls.n	80047b2 <_malloc_r+0xca>
 8004782:	1961      	adds	r1, r4, r5
 8004784:	42a3      	cmp	r3, r4
 8004786:	6025      	str	r5, [r4, #0]
 8004788:	bf18      	it	ne
 800478a:	6059      	strne	r1, [r3, #4]
 800478c:	6863      	ldr	r3, [r4, #4]
 800478e:	bf08      	it	eq
 8004790:	f8c8 1000 	streq.w	r1, [r8]
 8004794:	5162      	str	r2, [r4, r5]
 8004796:	604b      	str	r3, [r1, #4]
 8004798:	4638      	mov	r0, r7
 800479a:	f104 060b 	add.w	r6, r4, #11
 800479e:	f000 f829 	bl	80047f4 <__malloc_unlock>
 80047a2:	f026 0607 	bic.w	r6, r6, #7
 80047a6:	1d23      	adds	r3, r4, #4
 80047a8:	1af2      	subs	r2, r6, r3
 80047aa:	d0ae      	beq.n	800470a <_malloc_r+0x22>
 80047ac:	1b9b      	subs	r3, r3, r6
 80047ae:	50a3      	str	r3, [r4, r2]
 80047b0:	e7ab      	b.n	800470a <_malloc_r+0x22>
 80047b2:	42a3      	cmp	r3, r4
 80047b4:	6862      	ldr	r2, [r4, #4]
 80047b6:	d1dd      	bne.n	8004774 <_malloc_r+0x8c>
 80047b8:	f8c8 2000 	str.w	r2, [r8]
 80047bc:	e7ec      	b.n	8004798 <_malloc_r+0xb0>
 80047be:	4623      	mov	r3, r4
 80047c0:	6864      	ldr	r4, [r4, #4]
 80047c2:	e7ac      	b.n	800471e <_malloc_r+0x36>
 80047c4:	4634      	mov	r4, r6
 80047c6:	6876      	ldr	r6, [r6, #4]
 80047c8:	e7b4      	b.n	8004734 <_malloc_r+0x4c>
 80047ca:	4613      	mov	r3, r2
 80047cc:	e7cc      	b.n	8004768 <_malloc_r+0x80>
 80047ce:	230c      	movs	r3, #12
 80047d0:	603b      	str	r3, [r7, #0]
 80047d2:	4638      	mov	r0, r7
 80047d4:	f000 f80e 	bl	80047f4 <__malloc_unlock>
 80047d8:	e797      	b.n	800470a <_malloc_r+0x22>
 80047da:	6025      	str	r5, [r4, #0]
 80047dc:	e7dc      	b.n	8004798 <_malloc_r+0xb0>
 80047de:	605b      	str	r3, [r3, #4]
 80047e0:	deff      	udf	#255	; 0xff
 80047e2:	bf00      	nop
 80047e4:	20004b80 	.word	0x20004b80

080047e8 <__malloc_lock>:
 80047e8:	4801      	ldr	r0, [pc, #4]	; (80047f0 <__malloc_lock+0x8>)
 80047ea:	f7ff bf01 	b.w	80045f0 <__retarget_lock_acquire_recursive>
 80047ee:	bf00      	nop
 80047f0:	20004b7c 	.word	0x20004b7c

080047f4 <__malloc_unlock>:
 80047f4:	4801      	ldr	r0, [pc, #4]	; (80047fc <__malloc_unlock+0x8>)
 80047f6:	f7ff befc 	b.w	80045f2 <__retarget_lock_release_recursive>
 80047fa:	bf00      	nop
 80047fc:	20004b7c 	.word	0x20004b7c

08004800 <__ssputs_r>:
 8004800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004804:	688e      	ldr	r6, [r1, #8]
 8004806:	461f      	mov	r7, r3
 8004808:	42be      	cmp	r6, r7
 800480a:	680b      	ldr	r3, [r1, #0]
 800480c:	4682      	mov	sl, r0
 800480e:	460c      	mov	r4, r1
 8004810:	4690      	mov	r8, r2
 8004812:	d82c      	bhi.n	800486e <__ssputs_r+0x6e>
 8004814:	898a      	ldrh	r2, [r1, #12]
 8004816:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800481a:	d026      	beq.n	800486a <__ssputs_r+0x6a>
 800481c:	6965      	ldr	r5, [r4, #20]
 800481e:	6909      	ldr	r1, [r1, #16]
 8004820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004824:	eba3 0901 	sub.w	r9, r3, r1
 8004828:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800482c:	1c7b      	adds	r3, r7, #1
 800482e:	444b      	add	r3, r9
 8004830:	106d      	asrs	r5, r5, #1
 8004832:	429d      	cmp	r5, r3
 8004834:	bf38      	it	cc
 8004836:	461d      	movcc	r5, r3
 8004838:	0553      	lsls	r3, r2, #21
 800483a:	d527      	bpl.n	800488c <__ssputs_r+0x8c>
 800483c:	4629      	mov	r1, r5
 800483e:	f7ff ff53 	bl	80046e8 <_malloc_r>
 8004842:	4606      	mov	r6, r0
 8004844:	b360      	cbz	r0, 80048a0 <__ssputs_r+0xa0>
 8004846:	6921      	ldr	r1, [r4, #16]
 8004848:	464a      	mov	r2, r9
 800484a:	f7ff fed3 	bl	80045f4 <memcpy>
 800484e:	89a3      	ldrh	r3, [r4, #12]
 8004850:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004858:	81a3      	strh	r3, [r4, #12]
 800485a:	6126      	str	r6, [r4, #16]
 800485c:	6165      	str	r5, [r4, #20]
 800485e:	444e      	add	r6, r9
 8004860:	eba5 0509 	sub.w	r5, r5, r9
 8004864:	6026      	str	r6, [r4, #0]
 8004866:	60a5      	str	r5, [r4, #8]
 8004868:	463e      	mov	r6, r7
 800486a:	42be      	cmp	r6, r7
 800486c:	d900      	bls.n	8004870 <__ssputs_r+0x70>
 800486e:	463e      	mov	r6, r7
 8004870:	6820      	ldr	r0, [r4, #0]
 8004872:	4632      	mov	r2, r6
 8004874:	4641      	mov	r1, r8
 8004876:	f000 faab 	bl	8004dd0 <memmove>
 800487a:	68a3      	ldr	r3, [r4, #8]
 800487c:	1b9b      	subs	r3, r3, r6
 800487e:	60a3      	str	r3, [r4, #8]
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	4433      	add	r3, r6
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	2000      	movs	r0, #0
 8004888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800488c:	462a      	mov	r2, r5
 800488e:	f000 fac9 	bl	8004e24 <_realloc_r>
 8004892:	4606      	mov	r6, r0
 8004894:	2800      	cmp	r0, #0
 8004896:	d1e0      	bne.n	800485a <__ssputs_r+0x5a>
 8004898:	6921      	ldr	r1, [r4, #16]
 800489a:	4650      	mov	r0, sl
 800489c:	f7ff feb8 	bl	8004610 <_free_r>
 80048a0:	230c      	movs	r3, #12
 80048a2:	f8ca 3000 	str.w	r3, [sl]
 80048a6:	89a3      	ldrh	r3, [r4, #12]
 80048a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ac:	81a3      	strh	r3, [r4, #12]
 80048ae:	f04f 30ff 	mov.w	r0, #4294967295
 80048b2:	e7e9      	b.n	8004888 <__ssputs_r+0x88>

080048b4 <_svfiprintf_r>:
 80048b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b8:	4698      	mov	r8, r3
 80048ba:	898b      	ldrh	r3, [r1, #12]
 80048bc:	061b      	lsls	r3, r3, #24
 80048be:	b09d      	sub	sp, #116	; 0x74
 80048c0:	4607      	mov	r7, r0
 80048c2:	460d      	mov	r5, r1
 80048c4:	4614      	mov	r4, r2
 80048c6:	d50e      	bpl.n	80048e6 <_svfiprintf_r+0x32>
 80048c8:	690b      	ldr	r3, [r1, #16]
 80048ca:	b963      	cbnz	r3, 80048e6 <_svfiprintf_r+0x32>
 80048cc:	2140      	movs	r1, #64	; 0x40
 80048ce:	f7ff ff0b 	bl	80046e8 <_malloc_r>
 80048d2:	6028      	str	r0, [r5, #0]
 80048d4:	6128      	str	r0, [r5, #16]
 80048d6:	b920      	cbnz	r0, 80048e2 <_svfiprintf_r+0x2e>
 80048d8:	230c      	movs	r3, #12
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	f04f 30ff 	mov.w	r0, #4294967295
 80048e0:	e0d0      	b.n	8004a84 <_svfiprintf_r+0x1d0>
 80048e2:	2340      	movs	r3, #64	; 0x40
 80048e4:	616b      	str	r3, [r5, #20]
 80048e6:	2300      	movs	r3, #0
 80048e8:	9309      	str	r3, [sp, #36]	; 0x24
 80048ea:	2320      	movs	r3, #32
 80048ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80048f4:	2330      	movs	r3, #48	; 0x30
 80048f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a9c <_svfiprintf_r+0x1e8>
 80048fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048fe:	f04f 0901 	mov.w	r9, #1
 8004902:	4623      	mov	r3, r4
 8004904:	469a      	mov	sl, r3
 8004906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800490a:	b10a      	cbz	r2, 8004910 <_svfiprintf_r+0x5c>
 800490c:	2a25      	cmp	r2, #37	; 0x25
 800490e:	d1f9      	bne.n	8004904 <_svfiprintf_r+0x50>
 8004910:	ebba 0b04 	subs.w	fp, sl, r4
 8004914:	d00b      	beq.n	800492e <_svfiprintf_r+0x7a>
 8004916:	465b      	mov	r3, fp
 8004918:	4622      	mov	r2, r4
 800491a:	4629      	mov	r1, r5
 800491c:	4638      	mov	r0, r7
 800491e:	f7ff ff6f 	bl	8004800 <__ssputs_r>
 8004922:	3001      	adds	r0, #1
 8004924:	f000 80a9 	beq.w	8004a7a <_svfiprintf_r+0x1c6>
 8004928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800492a:	445a      	add	r2, fp
 800492c:	9209      	str	r2, [sp, #36]	; 0x24
 800492e:	f89a 3000 	ldrb.w	r3, [sl]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80a1 	beq.w	8004a7a <_svfiprintf_r+0x1c6>
 8004938:	2300      	movs	r3, #0
 800493a:	f04f 32ff 	mov.w	r2, #4294967295
 800493e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004942:	f10a 0a01 	add.w	sl, sl, #1
 8004946:	9304      	str	r3, [sp, #16]
 8004948:	9307      	str	r3, [sp, #28]
 800494a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800494e:	931a      	str	r3, [sp, #104]	; 0x68
 8004950:	4654      	mov	r4, sl
 8004952:	2205      	movs	r2, #5
 8004954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004958:	4850      	ldr	r0, [pc, #320]	; (8004a9c <_svfiprintf_r+0x1e8>)
 800495a:	f7fb fc59 	bl	8000210 <memchr>
 800495e:	9a04      	ldr	r2, [sp, #16]
 8004960:	b9d8      	cbnz	r0, 800499a <_svfiprintf_r+0xe6>
 8004962:	06d0      	lsls	r0, r2, #27
 8004964:	bf44      	itt	mi
 8004966:	2320      	movmi	r3, #32
 8004968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800496c:	0711      	lsls	r1, r2, #28
 800496e:	bf44      	itt	mi
 8004970:	232b      	movmi	r3, #43	; 0x2b
 8004972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004976:	f89a 3000 	ldrb.w	r3, [sl]
 800497a:	2b2a      	cmp	r3, #42	; 0x2a
 800497c:	d015      	beq.n	80049aa <_svfiprintf_r+0xf6>
 800497e:	9a07      	ldr	r2, [sp, #28]
 8004980:	4654      	mov	r4, sl
 8004982:	2000      	movs	r0, #0
 8004984:	f04f 0c0a 	mov.w	ip, #10
 8004988:	4621      	mov	r1, r4
 800498a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800498e:	3b30      	subs	r3, #48	; 0x30
 8004990:	2b09      	cmp	r3, #9
 8004992:	d94d      	bls.n	8004a30 <_svfiprintf_r+0x17c>
 8004994:	b1b0      	cbz	r0, 80049c4 <_svfiprintf_r+0x110>
 8004996:	9207      	str	r2, [sp, #28]
 8004998:	e014      	b.n	80049c4 <_svfiprintf_r+0x110>
 800499a:	eba0 0308 	sub.w	r3, r0, r8
 800499e:	fa09 f303 	lsl.w	r3, r9, r3
 80049a2:	4313      	orrs	r3, r2
 80049a4:	9304      	str	r3, [sp, #16]
 80049a6:	46a2      	mov	sl, r4
 80049a8:	e7d2      	b.n	8004950 <_svfiprintf_r+0x9c>
 80049aa:	9b03      	ldr	r3, [sp, #12]
 80049ac:	1d19      	adds	r1, r3, #4
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	9103      	str	r1, [sp, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	bfbb      	ittet	lt
 80049b6:	425b      	neglt	r3, r3
 80049b8:	f042 0202 	orrlt.w	r2, r2, #2
 80049bc:	9307      	strge	r3, [sp, #28]
 80049be:	9307      	strlt	r3, [sp, #28]
 80049c0:	bfb8      	it	lt
 80049c2:	9204      	strlt	r2, [sp, #16]
 80049c4:	7823      	ldrb	r3, [r4, #0]
 80049c6:	2b2e      	cmp	r3, #46	; 0x2e
 80049c8:	d10c      	bne.n	80049e4 <_svfiprintf_r+0x130>
 80049ca:	7863      	ldrb	r3, [r4, #1]
 80049cc:	2b2a      	cmp	r3, #42	; 0x2a
 80049ce:	d134      	bne.n	8004a3a <_svfiprintf_r+0x186>
 80049d0:	9b03      	ldr	r3, [sp, #12]
 80049d2:	1d1a      	adds	r2, r3, #4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	9203      	str	r2, [sp, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bfb8      	it	lt
 80049dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80049e0:	3402      	adds	r4, #2
 80049e2:	9305      	str	r3, [sp, #20]
 80049e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004aac <_svfiprintf_r+0x1f8>
 80049e8:	7821      	ldrb	r1, [r4, #0]
 80049ea:	2203      	movs	r2, #3
 80049ec:	4650      	mov	r0, sl
 80049ee:	f7fb fc0f 	bl	8000210 <memchr>
 80049f2:	b138      	cbz	r0, 8004a04 <_svfiprintf_r+0x150>
 80049f4:	9b04      	ldr	r3, [sp, #16]
 80049f6:	eba0 000a 	sub.w	r0, r0, sl
 80049fa:	2240      	movs	r2, #64	; 0x40
 80049fc:	4082      	lsls	r2, r0
 80049fe:	4313      	orrs	r3, r2
 8004a00:	3401      	adds	r4, #1
 8004a02:	9304      	str	r3, [sp, #16]
 8004a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a08:	4825      	ldr	r0, [pc, #148]	; (8004aa0 <_svfiprintf_r+0x1ec>)
 8004a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a0e:	2206      	movs	r2, #6
 8004a10:	f7fb fbfe 	bl	8000210 <memchr>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	d038      	beq.n	8004a8a <_svfiprintf_r+0x1d6>
 8004a18:	4b22      	ldr	r3, [pc, #136]	; (8004aa4 <_svfiprintf_r+0x1f0>)
 8004a1a:	bb1b      	cbnz	r3, 8004a64 <_svfiprintf_r+0x1b0>
 8004a1c:	9b03      	ldr	r3, [sp, #12]
 8004a1e:	3307      	adds	r3, #7
 8004a20:	f023 0307 	bic.w	r3, r3, #7
 8004a24:	3308      	adds	r3, #8
 8004a26:	9303      	str	r3, [sp, #12]
 8004a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a2a:	4433      	add	r3, r6
 8004a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a2e:	e768      	b.n	8004902 <_svfiprintf_r+0x4e>
 8004a30:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a34:	460c      	mov	r4, r1
 8004a36:	2001      	movs	r0, #1
 8004a38:	e7a6      	b.n	8004988 <_svfiprintf_r+0xd4>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	3401      	adds	r4, #1
 8004a3e:	9305      	str	r3, [sp, #20]
 8004a40:	4619      	mov	r1, r3
 8004a42:	f04f 0c0a 	mov.w	ip, #10
 8004a46:	4620      	mov	r0, r4
 8004a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a4c:	3a30      	subs	r2, #48	; 0x30
 8004a4e:	2a09      	cmp	r2, #9
 8004a50:	d903      	bls.n	8004a5a <_svfiprintf_r+0x1a6>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0c6      	beq.n	80049e4 <_svfiprintf_r+0x130>
 8004a56:	9105      	str	r1, [sp, #20]
 8004a58:	e7c4      	b.n	80049e4 <_svfiprintf_r+0x130>
 8004a5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a5e:	4604      	mov	r4, r0
 8004a60:	2301      	movs	r3, #1
 8004a62:	e7f0      	b.n	8004a46 <_svfiprintf_r+0x192>
 8004a64:	ab03      	add	r3, sp, #12
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	462a      	mov	r2, r5
 8004a6a:	4b0f      	ldr	r3, [pc, #60]	; (8004aa8 <_svfiprintf_r+0x1f4>)
 8004a6c:	a904      	add	r1, sp, #16
 8004a6e:	4638      	mov	r0, r7
 8004a70:	f3af 8000 	nop.w
 8004a74:	1c42      	adds	r2, r0, #1
 8004a76:	4606      	mov	r6, r0
 8004a78:	d1d6      	bne.n	8004a28 <_svfiprintf_r+0x174>
 8004a7a:	89ab      	ldrh	r3, [r5, #12]
 8004a7c:	065b      	lsls	r3, r3, #25
 8004a7e:	f53f af2d 	bmi.w	80048dc <_svfiprintf_r+0x28>
 8004a82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a84:	b01d      	add	sp, #116	; 0x74
 8004a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a8a:	ab03      	add	r3, sp, #12
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	462a      	mov	r2, r5
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <_svfiprintf_r+0x1f4>)
 8004a92:	a904      	add	r1, sp, #16
 8004a94:	4638      	mov	r0, r7
 8004a96:	f000 f879 	bl	8004b8c <_printf_i>
 8004a9a:	e7eb      	b.n	8004a74 <_svfiprintf_r+0x1c0>
 8004a9c:	08004f50 	.word	0x08004f50
 8004aa0:	08004f5a 	.word	0x08004f5a
 8004aa4:	00000000 	.word	0x00000000
 8004aa8:	08004801 	.word	0x08004801
 8004aac:	08004f56 	.word	0x08004f56

08004ab0 <_printf_common>:
 8004ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab4:	4616      	mov	r6, r2
 8004ab6:	4699      	mov	r9, r3
 8004ab8:	688a      	ldr	r2, [r1, #8]
 8004aba:	690b      	ldr	r3, [r1, #16]
 8004abc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	bfb8      	it	lt
 8004ac4:	4613      	movlt	r3, r2
 8004ac6:	6033      	str	r3, [r6, #0]
 8004ac8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004acc:	4607      	mov	r7, r0
 8004ace:	460c      	mov	r4, r1
 8004ad0:	b10a      	cbz	r2, 8004ad6 <_printf_common+0x26>
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	6033      	str	r3, [r6, #0]
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	0699      	lsls	r1, r3, #26
 8004ada:	bf42      	ittt	mi
 8004adc:	6833      	ldrmi	r3, [r6, #0]
 8004ade:	3302      	addmi	r3, #2
 8004ae0:	6033      	strmi	r3, [r6, #0]
 8004ae2:	6825      	ldr	r5, [r4, #0]
 8004ae4:	f015 0506 	ands.w	r5, r5, #6
 8004ae8:	d106      	bne.n	8004af8 <_printf_common+0x48>
 8004aea:	f104 0a19 	add.w	sl, r4, #25
 8004aee:	68e3      	ldr	r3, [r4, #12]
 8004af0:	6832      	ldr	r2, [r6, #0]
 8004af2:	1a9b      	subs	r3, r3, r2
 8004af4:	42ab      	cmp	r3, r5
 8004af6:	dc26      	bgt.n	8004b46 <_printf_common+0x96>
 8004af8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004afc:	1e13      	subs	r3, r2, #0
 8004afe:	6822      	ldr	r2, [r4, #0]
 8004b00:	bf18      	it	ne
 8004b02:	2301      	movne	r3, #1
 8004b04:	0692      	lsls	r2, r2, #26
 8004b06:	d42b      	bmi.n	8004b60 <_printf_common+0xb0>
 8004b08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	4638      	mov	r0, r7
 8004b10:	47c0      	blx	r8
 8004b12:	3001      	adds	r0, #1
 8004b14:	d01e      	beq.n	8004b54 <_printf_common+0xa4>
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	6922      	ldr	r2, [r4, #16]
 8004b1a:	f003 0306 	and.w	r3, r3, #6
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	bf02      	ittt	eq
 8004b22:	68e5      	ldreq	r5, [r4, #12]
 8004b24:	6833      	ldreq	r3, [r6, #0]
 8004b26:	1aed      	subeq	r5, r5, r3
 8004b28:	68a3      	ldr	r3, [r4, #8]
 8004b2a:	bf0c      	ite	eq
 8004b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b30:	2500      	movne	r5, #0
 8004b32:	4293      	cmp	r3, r2
 8004b34:	bfc4      	itt	gt
 8004b36:	1a9b      	subgt	r3, r3, r2
 8004b38:	18ed      	addgt	r5, r5, r3
 8004b3a:	2600      	movs	r6, #0
 8004b3c:	341a      	adds	r4, #26
 8004b3e:	42b5      	cmp	r5, r6
 8004b40:	d11a      	bne.n	8004b78 <_printf_common+0xc8>
 8004b42:	2000      	movs	r0, #0
 8004b44:	e008      	b.n	8004b58 <_printf_common+0xa8>
 8004b46:	2301      	movs	r3, #1
 8004b48:	4652      	mov	r2, sl
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	4638      	mov	r0, r7
 8004b4e:	47c0      	blx	r8
 8004b50:	3001      	adds	r0, #1
 8004b52:	d103      	bne.n	8004b5c <_printf_common+0xac>
 8004b54:	f04f 30ff 	mov.w	r0, #4294967295
 8004b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b5c:	3501      	adds	r5, #1
 8004b5e:	e7c6      	b.n	8004aee <_printf_common+0x3e>
 8004b60:	18e1      	adds	r1, r4, r3
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	2030      	movs	r0, #48	; 0x30
 8004b66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b6a:	4422      	add	r2, r4
 8004b6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b74:	3302      	adds	r3, #2
 8004b76:	e7c7      	b.n	8004b08 <_printf_common+0x58>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	4622      	mov	r2, r4
 8004b7c:	4649      	mov	r1, r9
 8004b7e:	4638      	mov	r0, r7
 8004b80:	47c0      	blx	r8
 8004b82:	3001      	adds	r0, #1
 8004b84:	d0e6      	beq.n	8004b54 <_printf_common+0xa4>
 8004b86:	3601      	adds	r6, #1
 8004b88:	e7d9      	b.n	8004b3e <_printf_common+0x8e>
	...

08004b8c <_printf_i>:
 8004b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b90:	7e0f      	ldrb	r7, [r1, #24]
 8004b92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b94:	2f78      	cmp	r7, #120	; 0x78
 8004b96:	4691      	mov	r9, r2
 8004b98:	4680      	mov	r8, r0
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	469a      	mov	sl, r3
 8004b9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ba2:	d807      	bhi.n	8004bb4 <_printf_i+0x28>
 8004ba4:	2f62      	cmp	r7, #98	; 0x62
 8004ba6:	d80a      	bhi.n	8004bbe <_printf_i+0x32>
 8004ba8:	2f00      	cmp	r7, #0
 8004baa:	f000 80d4 	beq.w	8004d56 <_printf_i+0x1ca>
 8004bae:	2f58      	cmp	r7, #88	; 0x58
 8004bb0:	f000 80c0 	beq.w	8004d34 <_printf_i+0x1a8>
 8004bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bbc:	e03a      	b.n	8004c34 <_printf_i+0xa8>
 8004bbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bc2:	2b15      	cmp	r3, #21
 8004bc4:	d8f6      	bhi.n	8004bb4 <_printf_i+0x28>
 8004bc6:	a101      	add	r1, pc, #4	; (adr r1, 8004bcc <_printf_i+0x40>)
 8004bc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bcc:	08004c25 	.word	0x08004c25
 8004bd0:	08004c39 	.word	0x08004c39
 8004bd4:	08004bb5 	.word	0x08004bb5
 8004bd8:	08004bb5 	.word	0x08004bb5
 8004bdc:	08004bb5 	.word	0x08004bb5
 8004be0:	08004bb5 	.word	0x08004bb5
 8004be4:	08004c39 	.word	0x08004c39
 8004be8:	08004bb5 	.word	0x08004bb5
 8004bec:	08004bb5 	.word	0x08004bb5
 8004bf0:	08004bb5 	.word	0x08004bb5
 8004bf4:	08004bb5 	.word	0x08004bb5
 8004bf8:	08004d3d 	.word	0x08004d3d
 8004bfc:	08004c65 	.word	0x08004c65
 8004c00:	08004cf7 	.word	0x08004cf7
 8004c04:	08004bb5 	.word	0x08004bb5
 8004c08:	08004bb5 	.word	0x08004bb5
 8004c0c:	08004d5f 	.word	0x08004d5f
 8004c10:	08004bb5 	.word	0x08004bb5
 8004c14:	08004c65 	.word	0x08004c65
 8004c18:	08004bb5 	.word	0x08004bb5
 8004c1c:	08004bb5 	.word	0x08004bb5
 8004c20:	08004cff 	.word	0x08004cff
 8004c24:	682b      	ldr	r3, [r5, #0]
 8004c26:	1d1a      	adds	r2, r3, #4
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	602a      	str	r2, [r5, #0]
 8004c2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c34:	2301      	movs	r3, #1
 8004c36:	e09f      	b.n	8004d78 <_printf_i+0x1ec>
 8004c38:	6820      	ldr	r0, [r4, #0]
 8004c3a:	682b      	ldr	r3, [r5, #0]
 8004c3c:	0607      	lsls	r7, r0, #24
 8004c3e:	f103 0104 	add.w	r1, r3, #4
 8004c42:	6029      	str	r1, [r5, #0]
 8004c44:	d501      	bpl.n	8004c4a <_printf_i+0xbe>
 8004c46:	681e      	ldr	r6, [r3, #0]
 8004c48:	e003      	b.n	8004c52 <_printf_i+0xc6>
 8004c4a:	0646      	lsls	r6, r0, #25
 8004c4c:	d5fb      	bpl.n	8004c46 <_printf_i+0xba>
 8004c4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c52:	2e00      	cmp	r6, #0
 8004c54:	da03      	bge.n	8004c5e <_printf_i+0xd2>
 8004c56:	232d      	movs	r3, #45	; 0x2d
 8004c58:	4276      	negs	r6, r6
 8004c5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c5e:	485a      	ldr	r0, [pc, #360]	; (8004dc8 <_printf_i+0x23c>)
 8004c60:	230a      	movs	r3, #10
 8004c62:	e012      	b.n	8004c8a <_printf_i+0xfe>
 8004c64:	682b      	ldr	r3, [r5, #0]
 8004c66:	6820      	ldr	r0, [r4, #0]
 8004c68:	1d19      	adds	r1, r3, #4
 8004c6a:	6029      	str	r1, [r5, #0]
 8004c6c:	0605      	lsls	r5, r0, #24
 8004c6e:	d501      	bpl.n	8004c74 <_printf_i+0xe8>
 8004c70:	681e      	ldr	r6, [r3, #0]
 8004c72:	e002      	b.n	8004c7a <_printf_i+0xee>
 8004c74:	0641      	lsls	r1, r0, #25
 8004c76:	d5fb      	bpl.n	8004c70 <_printf_i+0xe4>
 8004c78:	881e      	ldrh	r6, [r3, #0]
 8004c7a:	4853      	ldr	r0, [pc, #332]	; (8004dc8 <_printf_i+0x23c>)
 8004c7c:	2f6f      	cmp	r7, #111	; 0x6f
 8004c7e:	bf0c      	ite	eq
 8004c80:	2308      	moveq	r3, #8
 8004c82:	230a      	movne	r3, #10
 8004c84:	2100      	movs	r1, #0
 8004c86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c8a:	6865      	ldr	r5, [r4, #4]
 8004c8c:	60a5      	str	r5, [r4, #8]
 8004c8e:	2d00      	cmp	r5, #0
 8004c90:	bfa2      	ittt	ge
 8004c92:	6821      	ldrge	r1, [r4, #0]
 8004c94:	f021 0104 	bicge.w	r1, r1, #4
 8004c98:	6021      	strge	r1, [r4, #0]
 8004c9a:	b90e      	cbnz	r6, 8004ca0 <_printf_i+0x114>
 8004c9c:	2d00      	cmp	r5, #0
 8004c9e:	d04b      	beq.n	8004d38 <_printf_i+0x1ac>
 8004ca0:	4615      	mov	r5, r2
 8004ca2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ca6:	fb03 6711 	mls	r7, r3, r1, r6
 8004caa:	5dc7      	ldrb	r7, [r0, r7]
 8004cac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cb0:	4637      	mov	r7, r6
 8004cb2:	42bb      	cmp	r3, r7
 8004cb4:	460e      	mov	r6, r1
 8004cb6:	d9f4      	bls.n	8004ca2 <_printf_i+0x116>
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d10b      	bne.n	8004cd4 <_printf_i+0x148>
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	07de      	lsls	r6, r3, #31
 8004cc0:	d508      	bpl.n	8004cd4 <_printf_i+0x148>
 8004cc2:	6923      	ldr	r3, [r4, #16]
 8004cc4:	6861      	ldr	r1, [r4, #4]
 8004cc6:	4299      	cmp	r1, r3
 8004cc8:	bfde      	ittt	le
 8004cca:	2330      	movle	r3, #48	; 0x30
 8004ccc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cd4:	1b52      	subs	r2, r2, r5
 8004cd6:	6122      	str	r2, [r4, #16]
 8004cd8:	f8cd a000 	str.w	sl, [sp]
 8004cdc:	464b      	mov	r3, r9
 8004cde:	aa03      	add	r2, sp, #12
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	4640      	mov	r0, r8
 8004ce4:	f7ff fee4 	bl	8004ab0 <_printf_common>
 8004ce8:	3001      	adds	r0, #1
 8004cea:	d14a      	bne.n	8004d82 <_printf_i+0x1f6>
 8004cec:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf0:	b004      	add	sp, #16
 8004cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	f043 0320 	orr.w	r3, r3, #32
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	4833      	ldr	r0, [pc, #204]	; (8004dcc <_printf_i+0x240>)
 8004d00:	2778      	movs	r7, #120	; 0x78
 8004d02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	6829      	ldr	r1, [r5, #0]
 8004d0a:	061f      	lsls	r7, r3, #24
 8004d0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d10:	d402      	bmi.n	8004d18 <_printf_i+0x18c>
 8004d12:	065f      	lsls	r7, r3, #25
 8004d14:	bf48      	it	mi
 8004d16:	b2b6      	uxthmi	r6, r6
 8004d18:	07df      	lsls	r7, r3, #31
 8004d1a:	bf48      	it	mi
 8004d1c:	f043 0320 	orrmi.w	r3, r3, #32
 8004d20:	6029      	str	r1, [r5, #0]
 8004d22:	bf48      	it	mi
 8004d24:	6023      	strmi	r3, [r4, #0]
 8004d26:	b91e      	cbnz	r6, 8004d30 <_printf_i+0x1a4>
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	f023 0320 	bic.w	r3, r3, #32
 8004d2e:	6023      	str	r3, [r4, #0]
 8004d30:	2310      	movs	r3, #16
 8004d32:	e7a7      	b.n	8004c84 <_printf_i+0xf8>
 8004d34:	4824      	ldr	r0, [pc, #144]	; (8004dc8 <_printf_i+0x23c>)
 8004d36:	e7e4      	b.n	8004d02 <_printf_i+0x176>
 8004d38:	4615      	mov	r5, r2
 8004d3a:	e7bd      	b.n	8004cb8 <_printf_i+0x12c>
 8004d3c:	682b      	ldr	r3, [r5, #0]
 8004d3e:	6826      	ldr	r6, [r4, #0]
 8004d40:	6961      	ldr	r1, [r4, #20]
 8004d42:	1d18      	adds	r0, r3, #4
 8004d44:	6028      	str	r0, [r5, #0]
 8004d46:	0635      	lsls	r5, r6, #24
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	d501      	bpl.n	8004d50 <_printf_i+0x1c4>
 8004d4c:	6019      	str	r1, [r3, #0]
 8004d4e:	e002      	b.n	8004d56 <_printf_i+0x1ca>
 8004d50:	0670      	lsls	r0, r6, #25
 8004d52:	d5fb      	bpl.n	8004d4c <_printf_i+0x1c0>
 8004d54:	8019      	strh	r1, [r3, #0]
 8004d56:	2300      	movs	r3, #0
 8004d58:	6123      	str	r3, [r4, #16]
 8004d5a:	4615      	mov	r5, r2
 8004d5c:	e7bc      	b.n	8004cd8 <_printf_i+0x14c>
 8004d5e:	682b      	ldr	r3, [r5, #0]
 8004d60:	1d1a      	adds	r2, r3, #4
 8004d62:	602a      	str	r2, [r5, #0]
 8004d64:	681d      	ldr	r5, [r3, #0]
 8004d66:	6862      	ldr	r2, [r4, #4]
 8004d68:	2100      	movs	r1, #0
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f7fb fa50 	bl	8000210 <memchr>
 8004d70:	b108      	cbz	r0, 8004d76 <_printf_i+0x1ea>
 8004d72:	1b40      	subs	r0, r0, r5
 8004d74:	6060      	str	r0, [r4, #4]
 8004d76:	6863      	ldr	r3, [r4, #4]
 8004d78:	6123      	str	r3, [r4, #16]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d80:	e7aa      	b.n	8004cd8 <_printf_i+0x14c>
 8004d82:	6923      	ldr	r3, [r4, #16]
 8004d84:	462a      	mov	r2, r5
 8004d86:	4649      	mov	r1, r9
 8004d88:	4640      	mov	r0, r8
 8004d8a:	47d0      	blx	sl
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	d0ad      	beq.n	8004cec <_printf_i+0x160>
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	079b      	lsls	r3, r3, #30
 8004d94:	d413      	bmi.n	8004dbe <_printf_i+0x232>
 8004d96:	68e0      	ldr	r0, [r4, #12]
 8004d98:	9b03      	ldr	r3, [sp, #12]
 8004d9a:	4298      	cmp	r0, r3
 8004d9c:	bfb8      	it	lt
 8004d9e:	4618      	movlt	r0, r3
 8004da0:	e7a6      	b.n	8004cf0 <_printf_i+0x164>
 8004da2:	2301      	movs	r3, #1
 8004da4:	4632      	mov	r2, r6
 8004da6:	4649      	mov	r1, r9
 8004da8:	4640      	mov	r0, r8
 8004daa:	47d0      	blx	sl
 8004dac:	3001      	adds	r0, #1
 8004dae:	d09d      	beq.n	8004cec <_printf_i+0x160>
 8004db0:	3501      	adds	r5, #1
 8004db2:	68e3      	ldr	r3, [r4, #12]
 8004db4:	9903      	ldr	r1, [sp, #12]
 8004db6:	1a5b      	subs	r3, r3, r1
 8004db8:	42ab      	cmp	r3, r5
 8004dba:	dcf2      	bgt.n	8004da2 <_printf_i+0x216>
 8004dbc:	e7eb      	b.n	8004d96 <_printf_i+0x20a>
 8004dbe:	2500      	movs	r5, #0
 8004dc0:	f104 0619 	add.w	r6, r4, #25
 8004dc4:	e7f5      	b.n	8004db2 <_printf_i+0x226>
 8004dc6:	bf00      	nop
 8004dc8:	08004f61 	.word	0x08004f61
 8004dcc:	08004f72 	.word	0x08004f72

08004dd0 <memmove>:
 8004dd0:	4288      	cmp	r0, r1
 8004dd2:	b510      	push	{r4, lr}
 8004dd4:	eb01 0402 	add.w	r4, r1, r2
 8004dd8:	d902      	bls.n	8004de0 <memmove+0x10>
 8004dda:	4284      	cmp	r4, r0
 8004ddc:	4623      	mov	r3, r4
 8004dde:	d807      	bhi.n	8004df0 <memmove+0x20>
 8004de0:	1e43      	subs	r3, r0, #1
 8004de2:	42a1      	cmp	r1, r4
 8004de4:	d008      	beq.n	8004df8 <memmove+0x28>
 8004de6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dee:	e7f8      	b.n	8004de2 <memmove+0x12>
 8004df0:	4402      	add	r2, r0
 8004df2:	4601      	mov	r1, r0
 8004df4:	428a      	cmp	r2, r1
 8004df6:	d100      	bne.n	8004dfa <memmove+0x2a>
 8004df8:	bd10      	pop	{r4, pc}
 8004dfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e02:	e7f7      	b.n	8004df4 <memmove+0x24>

08004e04 <_sbrk_r>:
 8004e04:	b538      	push	{r3, r4, r5, lr}
 8004e06:	4d06      	ldr	r5, [pc, #24]	; (8004e20 <_sbrk_r+0x1c>)
 8004e08:	2300      	movs	r3, #0
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	4608      	mov	r0, r1
 8004e0e:	602b      	str	r3, [r5, #0]
 8004e10:	f7fb fd5a 	bl	80008c8 <_sbrk>
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	d102      	bne.n	8004e1e <_sbrk_r+0x1a>
 8004e18:	682b      	ldr	r3, [r5, #0]
 8004e1a:	b103      	cbz	r3, 8004e1e <_sbrk_r+0x1a>
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	bd38      	pop	{r3, r4, r5, pc}
 8004e20:	20004b78 	.word	0x20004b78

08004e24 <_realloc_r>:
 8004e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e28:	4680      	mov	r8, r0
 8004e2a:	4614      	mov	r4, r2
 8004e2c:	460e      	mov	r6, r1
 8004e2e:	b921      	cbnz	r1, 8004e3a <_realloc_r+0x16>
 8004e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e34:	4611      	mov	r1, r2
 8004e36:	f7ff bc57 	b.w	80046e8 <_malloc_r>
 8004e3a:	b92a      	cbnz	r2, 8004e48 <_realloc_r+0x24>
 8004e3c:	f7ff fbe8 	bl	8004610 <_free_r>
 8004e40:	4625      	mov	r5, r4
 8004e42:	4628      	mov	r0, r5
 8004e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e48:	f000 f81b 	bl	8004e82 <_malloc_usable_size_r>
 8004e4c:	4284      	cmp	r4, r0
 8004e4e:	4607      	mov	r7, r0
 8004e50:	d802      	bhi.n	8004e58 <_realloc_r+0x34>
 8004e52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e56:	d812      	bhi.n	8004e7e <_realloc_r+0x5a>
 8004e58:	4621      	mov	r1, r4
 8004e5a:	4640      	mov	r0, r8
 8004e5c:	f7ff fc44 	bl	80046e8 <_malloc_r>
 8004e60:	4605      	mov	r5, r0
 8004e62:	2800      	cmp	r0, #0
 8004e64:	d0ed      	beq.n	8004e42 <_realloc_r+0x1e>
 8004e66:	42bc      	cmp	r4, r7
 8004e68:	4622      	mov	r2, r4
 8004e6a:	4631      	mov	r1, r6
 8004e6c:	bf28      	it	cs
 8004e6e:	463a      	movcs	r2, r7
 8004e70:	f7ff fbc0 	bl	80045f4 <memcpy>
 8004e74:	4631      	mov	r1, r6
 8004e76:	4640      	mov	r0, r8
 8004e78:	f7ff fbca 	bl	8004610 <_free_r>
 8004e7c:	e7e1      	b.n	8004e42 <_realloc_r+0x1e>
 8004e7e:	4635      	mov	r5, r6
 8004e80:	e7df      	b.n	8004e42 <_realloc_r+0x1e>

08004e82 <_malloc_usable_size_r>:
 8004e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e86:	1f18      	subs	r0, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	bfbc      	itt	lt
 8004e8c:	580b      	ldrlt	r3, [r1, r0]
 8004e8e:	18c0      	addlt	r0, r0, r3
 8004e90:	4770      	bx	lr
	...

08004e94 <_init>:
 8004e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e96:	bf00      	nop
 8004e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9a:	bc08      	pop	{r3}
 8004e9c:	469e      	mov	lr, r3
 8004e9e:	4770      	bx	lr

08004ea0 <_fini>:
 8004ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea2:	bf00      	nop
 8004ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea6:	bc08      	pop	{r3}
 8004ea8:	469e      	mov	lr, r3
 8004eaa:	4770      	bx	lr
