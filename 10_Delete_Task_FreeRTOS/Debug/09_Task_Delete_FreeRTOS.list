
09_Task_Delete_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a58  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004c28  08004c28  00014c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cb8  08004cb8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004cb8  08004cb8  00014cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cc0  08004cc0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cc0  08004cc0  00014cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c0  20000010  08004cd8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049d0  08004cd8  000249d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001353f  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e82  00000000  00000000  000335c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  00036448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd7  00000000  00000000  00037640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d11  00000000  00000000  00038417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013eca  00000000  00000000  0003b128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7e72  00000000  00000000  0004eff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b48  00000000  00000000  00126e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0012b9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004c10 	.word	0x08004c10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004c10 	.word	0x08004c10

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fa5e 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f824 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f882 	bl	8000620 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800051c:	f001 fdce 	bl	80020bc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000520:	4a09      	ldr	r2, [pc, #36]	; (8000548 <main+0x3c>)
 8000522:	2100      	movs	r1, #0
 8000524:	4809      	ldr	r0, [pc, #36]	; (800054c <main+0x40>)
 8000526:	f001 fe13 	bl	8002150 <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a08      	ldr	r2, [pc, #32]	; (8000550 <main+0x44>)
 800052e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <main+0x48>)
 8000532:	2100      	movs	r1, #0
 8000534:	4808      	ldr	r0, [pc, #32]	; (8000558 <main+0x4c>)
 8000536:	f001 fe0b 	bl	8002150 <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a07      	ldr	r2, [pc, #28]	; (800055c <main+0x50>)
 800053e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000540:	f001 fde0 	bl	8002104 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x38>
 8000546:	bf00      	nop
 8000548:	08004c58 	.word	0x08004c58
 800054c:	08000751 	.word	0x08000751
 8000550:	2000002c 	.word	0x2000002c
 8000554:	08004c7c 	.word	0x08004c7c
 8000558:	0800078d 	.word	0x0800078d
 800055c:	20000030 	.word	0x20000030

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2234      	movs	r2, #52	; 0x34
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f004 fb14 	bl	8004b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b23      	ldr	r3, [pc, #140]	; (8000618 <SystemClock_Config+0xb8>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a22      	ldr	r2, [pc, #136]	; (8000618 <SystemClock_Config+0xb8>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b20      	ldr	r3, [pc, #128]	; (8000618 <SystemClock_Config+0xb8>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a0:	2300      	movs	r3, #0
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <SystemClock_Config+0xbc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ac:	4a1b      	ldr	r2, [pc, #108]	; (800061c <SystemClock_Config+0xbc>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b19      	ldr	r3, [pc, #100]	; (800061c <SystemClock_Config+0xbc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 ffe1 	bl	800159c <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005e0:	f000 f8f6 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fcea 	bl	8000fd8 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800060a:	f000 f8e1 	bl	80007d0 <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3750      	adds	r7, #80	; 0x50
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	4b30      	ldr	r3, [pc, #192]	; (80006fc <MX_GPIO_Init+0xdc>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a2f      	ldr	r2, [pc, #188]	; (80006fc <MX_GPIO_Init+0xdc>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <MX_GPIO_Init+0xdc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	4b29      	ldr	r3, [pc, #164]	; (80006fc <MX_GPIO_Init+0xdc>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a28      	ldr	r2, [pc, #160]	; (80006fc <MX_GPIO_Init+0xdc>)
 800065c:	f043 0320 	orr.w	r3, r3, #32
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b26      	ldr	r3, [pc, #152]	; (80006fc <MX_GPIO_Init+0xdc>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0320 	and.w	r3, r3, #32
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	4b22      	ldr	r3, [pc, #136]	; (80006fc <MX_GPIO_Init+0xdc>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a21      	ldr	r2, [pc, #132]	; (80006fc <MX_GPIO_Init+0xdc>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <MX_GPIO_Init+0xdc>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000690:	481b      	ldr	r0, [pc, #108]	; (8000700 <MX_GPIO_Init+0xe0>)
 8000692:	f000 fc6d 	bl	8000f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2107      	movs	r1, #7
 800069a:	481a      	ldr	r0, [pc, #104]	; (8000704 <MX_GPIO_Init+0xe4>)
 800069c:	f000 fc68 	bl	8000f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80006a0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80006a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	4619      	mov	r1, r3
 80006b8:	4811      	ldr	r0, [pc, #68]	; (8000700 <MX_GPIO_Init+0xe0>)
 80006ba:	f000 faad 	bl	8000c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80006be:	2307      	movs	r3, #7
 80006c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	4619      	mov	r1, r3
 80006d4:	480b      	ldr	r0, [pc, #44]	; (8000704 <MX_GPIO_Init+0xe4>)
 80006d6:	f000 fa9f 	bl	8000c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006da:	2302      	movs	r3, #2
 80006dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4619      	mov	r1, r3
 80006ec:	4806      	ldr	r0, [pc, #24]	; (8000708 <MX_GPIO_Init+0xe8>)
 80006ee:	f000 fa93 	bl	8000c18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f2:	bf00      	nop
 80006f4:	3720      	adds	r7, #32
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020800 	.word	0x40020800
 8000704:	40021400 	.word	0x40021400
 8000708:	40020000 	.word	0x40020000

0800070c <freeRTOS_Delay>:

/* USER CODE BEGIN 4 */
void freeRTOS_Delay(uint32_t delayMS)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	uint32_t currentTick = xTaskGetTickCount();
 8000714:	f002 fea8 	bl	8003468 <xTaskGetTickCount>
 8000718:	60f8      	str	r0, [r7, #12]
	uint32_t delayTick = pdMS_TO_TICKS(delayMS);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000720:	fb02 f303 	mul.w	r3, r2, r3
 8000724:	4a09      	ldr	r2, [pc, #36]	; (800074c <freeRTOS_Delay+0x40>)
 8000726:	fba2 2303 	umull	r2, r3, r2, r3
 800072a:	099b      	lsrs	r3, r3, #6
 800072c:	60bb      	str	r3, [r7, #8]
	while(xTaskGetTickCount() < (currentTick + delayTick));
 800072e:	bf00      	nop
 8000730:	f002 fe9a 	bl	8003468 <xTaskGetTickCount>
 8000734:	4601      	mov	r1, r0
 8000736:	68fa      	ldr	r2, [r7, #12]
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	4413      	add	r3, r2
 800073c:	4299      	cmp	r1, r3
 800073e:	d3f7      	bcc.n	8000730 <freeRTOS_Delay+0x24>
}
 8000740:	bf00      	nop
 8000742:	bf00      	nop
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	10624dd3 	.word	0x10624dd3

08000750 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2);
 8000758:	2107      	movs	r1, #7
 800075a:	4809      	ldr	r0, [pc, #36]	; (8000780 <StartDefaultTask+0x30>)
 800075c:	f000 fc21 	bl	8000fa2 <HAL_GPIO_TogglePin>

    //osDelay(200); osDelay beklerken görev önceliği düşük task çalışıyor bunu önlemek için kendi delay fonk yazdık
	  freeRTOS_Delay(200);
 8000760:	20c8      	movs	r0, #200	; 0xc8
 8000762:	f7ff ffd3 	bl	800070c <freeRTOS_Delay>
     if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET)
 8000766:	2102      	movs	r1, #2
 8000768:	4806      	ldr	r0, [pc, #24]	; (8000784 <StartDefaultTask+0x34>)
 800076a:	f000 fbe9 	bl	8000f40 <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d1f1      	bne.n	8000758 <StartDefaultTask+0x8>
    {
    	vTaskDelete(defaultTaskHandle);
 8000774:	4b04      	ldr	r3, [pc, #16]	; (8000788 <StartDefaultTask+0x38>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4618      	mov	r0, r3
 800077a:	f002 fcf1 	bl	8003160 <vTaskDelete>
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2);
 800077e:	e7eb      	b.n	8000758 <StartDefaultTask+0x8>
 8000780:	40021400 	.word	0x40021400
 8000784:	40020000 	.word	0x40020000
 8000788:	2000002c 	.word	0x2000002c

0800078c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_14);
 8000794:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000798:	4803      	ldr	r0, [pc, #12]	; (80007a8 <StartTask02+0x1c>)
 800079a:	f000 fc02 	bl	8000fa2 <HAL_GPIO_TogglePin>
	  freeRTOS_Delay(200);
 800079e:	20c8      	movs	r0, #200	; 0xc8
 80007a0:	f7ff ffb4 	bl	800070c <freeRTOS_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_14);
 80007a4:	e7f6      	b.n	8000794 <StartTask02+0x8>
 80007a6:	bf00      	nop
 80007a8:	40020800 	.word	0x40020800

080007ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d101      	bne.n	80007c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007be:	f000 f929 	bl	8000a14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40010000 	.word	0x40010000

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>
	...

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_MspInit+0x54>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	4a11      	ldr	r2, [pc, #68]	; (8000830 <HAL_MspInit+0x54>)
 80007ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f0:	6453      	str	r3, [r2, #68]	; 0x44
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_MspInit+0x54>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <HAL_MspInit+0x54>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <HAL_MspInit+0x54>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	6413      	str	r3, [r2, #64]	; 0x40
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <HAL_MspInit+0x54>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	210f      	movs	r1, #15
 800081e:	f06f 0001 	mvn.w	r0, #1
 8000822:	f000 f9cf 	bl	8000bc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <HAL_InitTick+0xd0>)
 800084a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084c:	4a2d      	ldr	r2, [pc, #180]	; (8000904 <HAL_InitTick+0xd0>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	6453      	str	r3, [r2, #68]	; 0x44
 8000854:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <HAL_InitTick+0xd0>)
 8000856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000860:	f107 020c 	add.w	r2, r7, #12
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	4611      	mov	r1, r2
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fcba 	bl	80011e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000870:	f000 fca4 	bl	80011bc <HAL_RCC_GetPCLK2Freq>
 8000874:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000878:	4a23      	ldr	r2, [pc, #140]	; (8000908 <HAL_InitTick+0xd4>)
 800087a:	fba2 2303 	umull	r2, r3, r2, r3
 800087e:	0c9b      	lsrs	r3, r3, #18
 8000880:	3b01      	subs	r3, #1
 8000882:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <HAL_InitTick+0xd8>)
 8000886:	4a22      	ldr	r2, [pc, #136]	; (8000910 <HAL_InitTick+0xdc>)
 8000888:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800088a:	4b20      	ldr	r3, [pc, #128]	; (800090c <HAL_InitTick+0xd8>)
 800088c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000890:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000892:	4a1e      	ldr	r2, [pc, #120]	; (800090c <HAL_InitTick+0xd8>)
 8000894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000896:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000898:	4b1c      	ldr	r3, [pc, #112]	; (800090c <HAL_InitTick+0xd8>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b1b      	ldr	r3, [pc, #108]	; (800090c <HAL_InitTick+0xd8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b19      	ldr	r3, [pc, #100]	; (800090c <HAL_InitTick+0xd8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008aa:	4818      	ldr	r0, [pc, #96]	; (800090c <HAL_InitTick+0xd8>)
 80008ac:	f001 f914 	bl	8001ad8 <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80008b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d11b      	bne.n	80008f6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008be:	4813      	ldr	r0, [pc, #76]	; (800090c <HAL_InitTick+0xd8>)
 80008c0:	f001 f964 	bl	8001b8c <HAL_TIM_Base_Start_IT>
 80008c4:	4603      	mov	r3, r0
 80008c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80008ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d111      	bne.n	80008f6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008d2:	2019      	movs	r0, #25
 80008d4:	f000 f992 	bl	8000bfc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b0f      	cmp	r3, #15
 80008dc:	d808      	bhi.n	80008f0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80008de:	2200      	movs	r2, #0
 80008e0:	6879      	ldr	r1, [r7, #4]
 80008e2:	2019      	movs	r0, #25
 80008e4:	f000 f96e 	bl	8000bc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008e8:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <HAL_InitTick+0xe0>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	e002      	b.n	80008f6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3730      	adds	r7, #48	; 0x30
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	431bde83 	.word	0x431bde83
 800090c:	20000034 	.word	0x20000034
 8000910:	40010000 	.word	0x40010000
 8000914:	20000004 	.word	0x20000004

08000918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800091c:	e7fe      	b.n	800091c <NMI_Handler+0x4>

0800091e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <HardFault_Handler+0x4>

08000924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <MemManage_Handler+0x4>

0800092a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <UsageFault_Handler+0x4>

08000936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800094a:	f001 f98f 	bl	8001c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000034 	.word	0x20000034

08000958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <SystemInit+0x20>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <SystemInit+0x20>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000982:	490e      	ldr	r1, [pc, #56]	; (80009bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000998:	4c0b      	ldr	r4, [pc, #44]	; (80009c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009a6:	f7ff ffd7 	bl	8000958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009aa:	f004 f8ff 	bl	8004bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ae:	f7ff fdad 	bl	800050c <main>
  bx  lr    
 80009b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009c0:	08004cc8 	.word	0x08004cc8
  ldr r2, =_sbss
 80009c4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009c8:	200049d0 	.word	0x200049d0

080009cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_Init+0x40>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <HAL_Init+0x40>)
 80009da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_Init+0x40>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_Init+0x40>)
 80009e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <HAL_Init+0x40>)
 80009f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f8d8 	bl	8000bae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fe:	200f      	movs	r0, #15
 8000a00:	f7ff ff18 	bl	8000834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff feea 	bl	80007dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023c00 	.word	0x40023c00

08000a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x20>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x24>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_IncTick+0x24>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000008 	.word	0x20000008
 8000a38:	2000007c 	.word	0x2000007c

08000a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_GetTick+0x14>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	2000007c 	.word	0x2000007c

08000a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a70:	4013      	ands	r3, r2
 8000a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	60d3      	str	r3, [r2, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	f003 0307 	and.w	r3, r3, #7
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db0b      	blt.n	8000ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	f003 021f 	and.w	r2, r3, #31
 8000ad0:	4907      	ldr	r1, [pc, #28]	; (8000af0 <__NVIC_EnableIRQ+0x38>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	095b      	lsrs	r3, r3, #5
 8000ad8:	2001      	movs	r0, #1
 8000ada:	fa00 f202 	lsl.w	r2, r0, r2
 8000ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000e100 	.word	0xe000e100

08000af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db0a      	blt.n	8000b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	490c      	ldr	r1, [pc, #48]	; (8000b40 <__NVIC_SetPriority+0x4c>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	0112      	lsls	r2, r2, #4
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b1c:	e00a      	b.n	8000b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4908      	ldr	r1, [pc, #32]	; (8000b44 <__NVIC_SetPriority+0x50>)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	0112      	lsls	r2, r2, #4
 8000b2e:	b2d2      	uxtb	r2, r2
 8000b30:	440b      	add	r3, r1
 8000b32:	761a      	strb	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	f1c3 0307 	rsb	r3, r3, #7
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	bf28      	it	cs
 8000b66:	2304      	movcs	r3, #4
 8000b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	d902      	bls.n	8000b78 <NVIC_EncodePriority+0x30>
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3b03      	subs	r3, #3
 8000b76:	e000      	b.n	8000b7a <NVIC_EncodePriority+0x32>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43da      	mvns	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b90:	f04f 31ff 	mov.w	r1, #4294967295
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43d9      	mvns	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	4313      	orrs	r3, r2
         );
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3724      	adds	r7, #36	; 0x24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ff4c 	bl	8000a54 <__NVIC_SetPriorityGrouping>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd6:	f7ff ff61 	bl	8000a9c <__NVIC_GetPriorityGrouping>
 8000bda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	68b9      	ldr	r1, [r7, #8]
 8000be0:	6978      	ldr	r0, [r7, #20]
 8000be2:	f7ff ffb1 	bl	8000b48 <NVIC_EncodePriority>
 8000be6:	4602      	mov	r2, r0
 8000be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bec:	4611      	mov	r1, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff80 	bl	8000af4 <__NVIC_SetPriority>
}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff54 	bl	8000ab8 <__NVIC_EnableIRQ>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	; 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
 8000c32:	e165      	b.n	8000f00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c34:	2201      	movs	r2, #1
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	f040 8154 	bne.w	8000efa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d005      	beq.n	8000c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d130      	bne.n	8000ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	091b      	lsrs	r3, r3, #4
 8000cb6:	f003 0201 	and.w	r2, r3, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d017      	beq.n	8000d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d123      	bne.n	8000d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	08da      	lsrs	r2, r3, #3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	220f      	movs	r2, #15
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	691a      	ldr	r2, [r3, #16]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	08da      	lsrs	r2, r3, #3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3208      	adds	r2, #8
 8000d56:	69b9      	ldr	r1, [r7, #24]
 8000d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0203 	and.w	r2, r3, #3
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f000 80ae 	beq.w	8000efa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b5d      	ldr	r3, [pc, #372]	; (8000f18 <HAL_GPIO_Init+0x300>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a5c      	ldr	r2, [pc, #368]	; (8000f18 <HAL_GPIO_Init+0x300>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b5a      	ldr	r3, [pc, #360]	; (8000f18 <HAL_GPIO_Init+0x300>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dba:	4a58      	ldr	r2, [pc, #352]	; (8000f1c <HAL_GPIO_Init+0x304>)
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a4f      	ldr	r2, [pc, #316]	; (8000f20 <HAL_GPIO_Init+0x308>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d025      	beq.n	8000e32 <HAL_GPIO_Init+0x21a>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a4e      	ldr	r2, [pc, #312]	; (8000f24 <HAL_GPIO_Init+0x30c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d01f      	beq.n	8000e2e <HAL_GPIO_Init+0x216>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a4d      	ldr	r2, [pc, #308]	; (8000f28 <HAL_GPIO_Init+0x310>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d019      	beq.n	8000e2a <HAL_GPIO_Init+0x212>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a4c      	ldr	r2, [pc, #304]	; (8000f2c <HAL_GPIO_Init+0x314>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d013      	beq.n	8000e26 <HAL_GPIO_Init+0x20e>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a4b      	ldr	r2, [pc, #300]	; (8000f30 <HAL_GPIO_Init+0x318>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00d      	beq.n	8000e22 <HAL_GPIO_Init+0x20a>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4a      	ldr	r2, [pc, #296]	; (8000f34 <HAL_GPIO_Init+0x31c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d007      	beq.n	8000e1e <HAL_GPIO_Init+0x206>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a49      	ldr	r2, [pc, #292]	; (8000f38 <HAL_GPIO_Init+0x320>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d101      	bne.n	8000e1a <HAL_GPIO_Init+0x202>
 8000e16:	2306      	movs	r3, #6
 8000e18:	e00c      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	e00a      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e1e:	2305      	movs	r3, #5
 8000e20:	e008      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e22:	2304      	movs	r3, #4
 8000e24:	e006      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e26:	2303      	movs	r3, #3
 8000e28:	e004      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e002      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e32:	2300      	movs	r3, #0
 8000e34:	69fa      	ldr	r2, [r7, #28]
 8000e36:	f002 0203 	and.w	r2, r2, #3
 8000e3a:	0092      	lsls	r2, r2, #2
 8000e3c:	4093      	lsls	r3, r2
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e44:	4935      	ldr	r1, [pc, #212]	; (8000f1c <HAL_GPIO_Init+0x304>)
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	089b      	lsrs	r3, r3, #2
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e52:	4b3a      	ldr	r3, [pc, #232]	; (8000f3c <HAL_GPIO_Init+0x324>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e76:	4a31      	ldr	r2, [pc, #196]	; (8000f3c <HAL_GPIO_Init+0x324>)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e7c:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <HAL_GPIO_Init+0x324>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea0:	4a26      	ldr	r2, [pc, #152]	; (8000f3c <HAL_GPIO_Init+0x324>)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ea6:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <HAL_GPIO_Init+0x324>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eca:	4a1c      	ldr	r2, [pc, #112]	; (8000f3c <HAL_GPIO_Init+0x324>)
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <HAL_GPIO_Init+0x324>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ef4:	4a11      	ldr	r2, [pc, #68]	; (8000f3c <HAL_GPIO_Init+0x324>)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3301      	adds	r3, #1
 8000efe:	61fb      	str	r3, [r7, #28]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	2b0f      	cmp	r3, #15
 8000f04:	f67f ae96 	bls.w	8000c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40013800 	.word	0x40013800
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40020400 	.word	0x40020400
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020c00 	.word	0x40020c00
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40021400 	.word	0x40021400
 8000f38:	40021800 	.word	0x40021800
 8000f3c:	40013c00 	.word	0x40013c00

08000f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691a      	ldr	r2, [r3, #16]
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d002      	beq.n	8000f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	e001      	b.n	8000f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f80:	787b      	ldrb	r3, [r7, #1]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f8c:	e003      	b.n	8000f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	041a      	lsls	r2, r3, #16
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	619a      	str	r2, [r3, #24]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b085      	sub	sp, #20
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	460b      	mov	r3, r1
 8000fac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fb4:	887a      	ldrh	r2, [r7, #2]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	041a      	lsls	r2, r3, #16
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	887b      	ldrh	r3, [r7, #2]
 8000fc2:	400b      	ands	r3, r1
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	619a      	str	r2, [r3, #24]
}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e0cc      	b.n	8001186 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fec:	4b68      	ldr	r3, [pc, #416]	; (8001190 <HAL_RCC_ClockConfig+0x1b8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 030f 	and.w	r3, r3, #15
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d90c      	bls.n	8001014 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ffa:	4b65      	ldr	r3, [pc, #404]	; (8001190 <HAL_RCC_ClockConfig+0x1b8>)
 8000ffc:	683a      	ldr	r2, [r7, #0]
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001002:	4b63      	ldr	r3, [pc, #396]	; (8001190 <HAL_RCC_ClockConfig+0x1b8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	429a      	cmp	r2, r3
 800100e:	d001      	beq.n	8001014 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e0b8      	b.n	8001186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d020      	beq.n	8001062 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800102c:	4b59      	ldr	r3, [pc, #356]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	4a58      	ldr	r2, [pc, #352]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 8001032:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001036:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001044:	4b53      	ldr	r3, [pc, #332]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	4a52      	ldr	r2, [pc, #328]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 800104a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800104e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001050:	4b50      	ldr	r3, [pc, #320]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	494d      	ldr	r1, [pc, #308]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 800105e:	4313      	orrs	r3, r2
 8001060:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	d044      	beq.n	80010f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d107      	bne.n	8001086 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001076:	4b47      	ldr	r3, [pc, #284]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d119      	bne.n	80010b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e07f      	b.n	8001186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d003      	beq.n	8001096 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001092:	2b03      	cmp	r3, #3
 8001094:	d107      	bne.n	80010a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001096:	4b3f      	ldr	r3, [pc, #252]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d109      	bne.n	80010b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e06f      	b.n	8001186 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a6:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e067      	b.n	8001186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010b6:	4b37      	ldr	r3, [pc, #220]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f023 0203 	bic.w	r2, r3, #3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	4934      	ldr	r1, [pc, #208]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010c8:	f7ff fcb8 	bl	8000a3c <HAL_GetTick>
 80010cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ce:	e00a      	b.n	80010e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010d0:	f7ff fcb4 	bl	8000a3c <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	f241 3288 	movw	r2, #5000	; 0x1388
 80010de:	4293      	cmp	r3, r2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e04f      	b.n	8001186 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010e6:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 020c 	and.w	r2, r3, #12
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d1eb      	bne.n	80010d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010f8:	4b25      	ldr	r3, [pc, #148]	; (8001190 <HAL_RCC_ClockConfig+0x1b8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 030f 	and.w	r3, r3, #15
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	429a      	cmp	r2, r3
 8001104:	d20c      	bcs.n	8001120 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001106:	4b22      	ldr	r3, [pc, #136]	; (8001190 <HAL_RCC_ClockConfig+0x1b8>)
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800110e:	4b20      	ldr	r3, [pc, #128]	; (8001190 <HAL_RCC_ClockConfig+0x1b8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	429a      	cmp	r2, r3
 800111a:	d001      	beq.n	8001120 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e032      	b.n	8001186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	2b00      	cmp	r3, #0
 800112a:	d008      	beq.n	800113e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	4916      	ldr	r1, [pc, #88]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 800113a:	4313      	orrs	r3, r2
 800113c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b00      	cmp	r3, #0
 8001148:	d009      	beq.n	800115e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	490e      	ldr	r1, [pc, #56]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	4313      	orrs	r3, r2
 800115c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800115e:	f000 f873 	bl	8001248 <HAL_RCC_GetSysClockFreq>
 8001162:	4602      	mov	r2, r0
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	091b      	lsrs	r3, r3, #4
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	490a      	ldr	r1, [pc, #40]	; (8001198 <HAL_RCC_ClockConfig+0x1c0>)
 8001170:	5ccb      	ldrb	r3, [r1, r3]
 8001172:	fa22 f303 	lsr.w	r3, r2, r3
 8001176:	4a09      	ldr	r2, [pc, #36]	; (800119c <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_RCC_ClockConfig+0x1c8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fb58 	bl	8000834 <HAL_InitTick>

  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023c00 	.word	0x40023c00
 8001194:	40023800 	.word	0x40023800
 8001198:	08004ca0 	.word	0x08004ca0
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000004 	.word	0x20000004

080011a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000000 	.word	0x20000000

080011bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80011c0:	f7ff fff0 	bl	80011a4 <HAL_RCC_GetHCLKFreq>
 80011c4:	4602      	mov	r2, r0
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	0b5b      	lsrs	r3, r3, #13
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	4903      	ldr	r1, [pc, #12]	; (80011e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80011d2:	5ccb      	ldrb	r3, [r1, r3]
 80011d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011d8:	4618      	mov	r0, r3
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800
 80011e0:	08004cb0 	.word	0x08004cb0

080011e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	220f      	movs	r2, #15
 80011f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_RCC_GetClockConfig+0x5c>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 0203 	and.w	r2, r3, #3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_RCC_GetClockConfig+0x5c>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_RCC_GetClockConfig+0x5c>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <HAL_RCC_GetClockConfig+0x5c>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	08db      	lsrs	r3, r3, #3
 800121e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <HAL_RCC_GetClockConfig+0x60>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 020f 	and.w	r2, r3, #15
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	601a      	str	r2, [r3, #0]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800
 8001244:	40023c00 	.word	0x40023c00

08001248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800124c:	b0a6      	sub	sp, #152	; 0x98
 800124e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800126e:	4bc8      	ldr	r3, [pc, #800]	; (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b0c      	cmp	r3, #12
 8001278:	f200 817e 	bhi.w	8001578 <HAL_RCC_GetSysClockFreq+0x330>
 800127c:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <HAL_RCC_GetSysClockFreq+0x3c>)
 800127e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001282:	bf00      	nop
 8001284:	080012b9 	.word	0x080012b9
 8001288:	08001579 	.word	0x08001579
 800128c:	08001579 	.word	0x08001579
 8001290:	08001579 	.word	0x08001579
 8001294:	080012c1 	.word	0x080012c1
 8001298:	08001579 	.word	0x08001579
 800129c:	08001579 	.word	0x08001579
 80012a0:	08001579 	.word	0x08001579
 80012a4:	080012c9 	.word	0x080012c9
 80012a8:	08001579 	.word	0x08001579
 80012ac:	08001579 	.word	0x08001579
 80012b0:	08001579 	.word	0x08001579
 80012b4:	08001433 	.word	0x08001433
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012b8:	4bb6      	ldr	r3, [pc, #728]	; (8001594 <HAL_RCC_GetSysClockFreq+0x34c>)
 80012ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80012be:	e15f      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012c0:	4bb5      	ldr	r3, [pc, #724]	; (8001598 <HAL_RCC_GetSysClockFreq+0x350>)
 80012c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80012c6:	e15b      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012c8:	4bb1      	ldr	r3, [pc, #708]	; (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012d4:	4bae      	ldr	r3, [pc, #696]	; (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d031      	beq.n	8001344 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012e0:	4bab      	ldr	r3, [pc, #684]	; (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	099b      	lsrs	r3, r3, #6
 80012e6:	2200      	movs	r2, #0
 80012e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80012ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80012ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012f2:	663b      	str	r3, [r7, #96]	; 0x60
 80012f4:	2300      	movs	r3, #0
 80012f6:	667b      	str	r3, [r7, #100]	; 0x64
 80012f8:	4ba7      	ldr	r3, [pc, #668]	; (8001598 <HAL_RCC_GetSysClockFreq+0x350>)
 80012fa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80012fe:	462a      	mov	r2, r5
 8001300:	fb03 f202 	mul.w	r2, r3, r2
 8001304:	2300      	movs	r3, #0
 8001306:	4621      	mov	r1, r4
 8001308:	fb01 f303 	mul.w	r3, r1, r3
 800130c:	4413      	add	r3, r2
 800130e:	4aa2      	ldr	r2, [pc, #648]	; (8001598 <HAL_RCC_GetSysClockFreq+0x350>)
 8001310:	4621      	mov	r1, r4
 8001312:	fba1 1202 	umull	r1, r2, r1, r2
 8001316:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001318:	460a      	mov	r2, r1
 800131a:	67ba      	str	r2, [r7, #120]	; 0x78
 800131c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800131e:	4413      	add	r3, r2
 8001320:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001322:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001326:	2200      	movs	r2, #0
 8001328:	65bb      	str	r3, [r7, #88]	; 0x58
 800132a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800132c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001330:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001334:	f7fe ff6c 	bl	8000210 <__aeabi_uldivmod>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4613      	mov	r3, r2
 800133e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001342:	e064      	b.n	800140e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001344:	4b92      	ldr	r3, [pc, #584]	; (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	099b      	lsrs	r3, r3, #6
 800134a:	2200      	movs	r2, #0
 800134c:	653b      	str	r3, [r7, #80]	; 0x50
 800134e:	657a      	str	r2, [r7, #84]	; 0x54
 8001350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001356:	64bb      	str	r3, [r7, #72]	; 0x48
 8001358:	2300      	movs	r3, #0
 800135a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800135c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001360:	4622      	mov	r2, r4
 8001362:	462b      	mov	r3, r5
 8001364:	f04f 0000 	mov.w	r0, #0
 8001368:	f04f 0100 	mov.w	r1, #0
 800136c:	0159      	lsls	r1, r3, #5
 800136e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001372:	0150      	lsls	r0, r2, #5
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4621      	mov	r1, r4
 800137a:	1a51      	subs	r1, r2, r1
 800137c:	6139      	str	r1, [r7, #16]
 800137e:	4629      	mov	r1, r5
 8001380:	eb63 0301 	sbc.w	r3, r3, r1
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001392:	4659      	mov	r1, fp
 8001394:	018b      	lsls	r3, r1, #6
 8001396:	4651      	mov	r1, sl
 8001398:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800139c:	4651      	mov	r1, sl
 800139e:	018a      	lsls	r2, r1, #6
 80013a0:	4651      	mov	r1, sl
 80013a2:	ebb2 0801 	subs.w	r8, r2, r1
 80013a6:	4659      	mov	r1, fp
 80013a8:	eb63 0901 	sbc.w	r9, r3, r1
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013c0:	4690      	mov	r8, r2
 80013c2:	4699      	mov	r9, r3
 80013c4:	4623      	mov	r3, r4
 80013c6:	eb18 0303 	adds.w	r3, r8, r3
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	462b      	mov	r3, r5
 80013ce:	eb49 0303 	adc.w	r3, r9, r3
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80013e0:	4629      	mov	r1, r5
 80013e2:	028b      	lsls	r3, r1, #10
 80013e4:	4621      	mov	r1, r4
 80013e6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013ea:	4621      	mov	r1, r4
 80013ec:	028a      	lsls	r2, r1, #10
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013f6:	2200      	movs	r2, #0
 80013f8:	643b      	str	r3, [r7, #64]	; 0x40
 80013fa:	647a      	str	r2, [r7, #68]	; 0x44
 80013fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001400:	f7fe ff06 	bl	8000210 <__aeabi_uldivmod>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4613      	mov	r3, r2
 800140a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800140e:	4b60      	ldr	r3, [pc, #384]	; (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	0c1b      	lsrs	r3, r3, #16
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	3301      	adds	r3, #1
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001420:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001424:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001428:	fbb2 f3f3 	udiv	r3, r2, r3
 800142c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001430:	e0a6      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001432:	4b57      	ldr	r3, [pc, #348]	; (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800143a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800143e:	4b54      	ldr	r3, [pc, #336]	; (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d02a      	beq.n	80014a0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800144a:	4b51      	ldr	r3, [pc, #324]	; (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	099b      	lsrs	r3, r3, #6
 8001450:	2200      	movs	r2, #0
 8001452:	63bb      	str	r3, [r7, #56]	; 0x38
 8001454:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001458:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800145c:	2100      	movs	r1, #0
 800145e:	4b4e      	ldr	r3, [pc, #312]	; (8001598 <HAL_RCC_GetSysClockFreq+0x350>)
 8001460:	fb03 f201 	mul.w	r2, r3, r1
 8001464:	2300      	movs	r3, #0
 8001466:	fb00 f303 	mul.w	r3, r0, r3
 800146a:	4413      	add	r3, r2
 800146c:	4a4a      	ldr	r2, [pc, #296]	; (8001598 <HAL_RCC_GetSysClockFreq+0x350>)
 800146e:	fba0 1202 	umull	r1, r2, r0, r2
 8001472:	677a      	str	r2, [r7, #116]	; 0x74
 8001474:	460a      	mov	r2, r1
 8001476:	673a      	str	r2, [r7, #112]	; 0x70
 8001478:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800147a:	4413      	add	r3, r2
 800147c:	677b      	str	r3, [r7, #116]	; 0x74
 800147e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001482:	2200      	movs	r2, #0
 8001484:	633b      	str	r3, [r7, #48]	; 0x30
 8001486:	637a      	str	r2, [r7, #52]	; 0x34
 8001488:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800148c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001490:	f7fe febe 	bl	8000210 <__aeabi_uldivmod>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4613      	mov	r3, r2
 800149a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800149e:	e05b      	b.n	8001558 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014a0:	4b3b      	ldr	r3, [pc, #236]	; (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	099b      	lsrs	r3, r3, #6
 80014a6:	2200      	movs	r2, #0
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80014aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80014ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014b2:	623b      	str	r3, [r7, #32]
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
 80014b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80014bc:	4642      	mov	r2, r8
 80014be:	464b      	mov	r3, r9
 80014c0:	f04f 0000 	mov.w	r0, #0
 80014c4:	f04f 0100 	mov.w	r1, #0
 80014c8:	0159      	lsls	r1, r3, #5
 80014ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014ce:	0150      	lsls	r0, r2, #5
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4641      	mov	r1, r8
 80014d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80014da:	4649      	mov	r1, r9
 80014dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80014ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80014f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80014f4:	ebb2 040a 	subs.w	r4, r2, sl
 80014f8:	eb63 050b 	sbc.w	r5, r3, fp
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	00eb      	lsls	r3, r5, #3
 8001506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800150a:	00e2      	lsls	r2, r4, #3
 800150c:	4614      	mov	r4, r2
 800150e:	461d      	mov	r5, r3
 8001510:	4643      	mov	r3, r8
 8001512:	18e3      	adds	r3, r4, r3
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	464b      	mov	r3, r9
 8001518:	eb45 0303 	adc.w	r3, r5, r3
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	e9d7 4500 	ldrd	r4, r5, [r7]
 800152a:	4629      	mov	r1, r5
 800152c:	028b      	lsls	r3, r1, #10
 800152e:	4621      	mov	r1, r4
 8001530:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001534:	4621      	mov	r1, r4
 8001536:	028a      	lsls	r2, r1, #10
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001540:	2200      	movs	r2, #0
 8001542:	61bb      	str	r3, [r7, #24]
 8001544:	61fa      	str	r2, [r7, #28]
 8001546:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800154a:	f7fe fe61 	bl	8000210 <__aeabi_uldivmod>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4613      	mov	r3, r2
 8001554:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_RCC_GetSysClockFreq+0x348>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	0f1b      	lsrs	r3, r3, #28
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001566:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800156a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001576:	e003      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_RCC_GetSysClockFreq+0x34c>)
 800157a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800157e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001580:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001584:	4618      	mov	r0, r3
 8001586:	3798      	adds	r7, #152	; 0x98
 8001588:	46bd      	mov	sp, r7
 800158a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	00f42400 	.word	0x00f42400
 8001598:	017d7840 	.word	0x017d7840

0800159c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e28d      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 8083 	beq.w	80016c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015bc:	4b94      	ldr	r3, [pc, #592]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d019      	beq.n	80015fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015c8:	4b91      	ldr	r3, [pc, #580]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015d4:	4b8e      	ldr	r3, [pc, #568]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015e0:	d00c      	beq.n	80015fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e2:	4b8b      	ldr	r3, [pc, #556]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015ea:	2b0c      	cmp	r3, #12
 80015ec:	d112      	bne.n	8001614 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ee:	4b88      	ldr	r3, [pc, #544]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015fa:	d10b      	bne.n	8001614 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fc:	4b84      	ldr	r3, [pc, #528]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d05b      	beq.n	80016c0 <HAL_RCC_OscConfig+0x124>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d157      	bne.n	80016c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e25a      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161c:	d106      	bne.n	800162c <HAL_RCC_OscConfig+0x90>
 800161e:	4b7c      	ldr	r3, [pc, #496]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a7b      	ldr	r2, [pc, #492]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 8001624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e01d      	b.n	8001668 <HAL_RCC_OscConfig+0xcc>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0xb4>
 8001636:	4b76      	ldr	r3, [pc, #472]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a75      	ldr	r2, [pc, #468]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 800163c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b73      	ldr	r3, [pc, #460]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a72      	ldr	r2, [pc, #456]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e00b      	b.n	8001668 <HAL_RCC_OscConfig+0xcc>
 8001650:	4b6f      	ldr	r3, [pc, #444]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a6e      	ldr	r2, [pc, #440]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 8001656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b6c      	ldr	r3, [pc, #432]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a6b      	ldr	r2, [pc, #428]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 8001662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d013      	beq.n	8001698 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff f9e4 	bl	8000a3c <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff f9e0 	bl	8000a3c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e21f      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b61      	ldr	r3, [pc, #388]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0xdc>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff f9d0 	bl	8000a3c <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff f9cc 	bl	8000a3c <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e20b      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b2:	4b57      	ldr	r3, [pc, #348]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x104>
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d06f      	beq.n	80017ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016ce:	4b50      	ldr	r3, [pc, #320]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d017      	beq.n	800170a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016da:	4b4d      	ldr	r3, [pc, #308]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d105      	bne.n	80016f2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016e6:	4b4a      	ldr	r3, [pc, #296]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00b      	beq.n	800170a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016f2:	4b47      	ldr	r3, [pc, #284]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016fa:	2b0c      	cmp	r3, #12
 80016fc:	d11c      	bne.n	8001738 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fe:	4b44      	ldr	r3, [pc, #272]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d116      	bne.n	8001738 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170a:	4b41      	ldr	r3, [pc, #260]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <HAL_RCC_OscConfig+0x186>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d001      	beq.n	8001722 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e1d3      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001722:	4b3b      	ldr	r3, [pc, #236]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4937      	ldr	r1, [pc, #220]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 8001732:	4313      	orrs	r3, r2
 8001734:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001736:	e03a      	b.n	80017ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d020      	beq.n	8001782 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001740:	4b34      	ldr	r3, [pc, #208]	; (8001814 <HAL_RCC_OscConfig+0x278>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001746:	f7ff f979 	bl	8000a3c <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174e:	f7ff f975 	bl	8000a3c <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e1b4      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001760:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176c:	4b28      	ldr	r3, [pc, #160]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4925      	ldr	r1, [pc, #148]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 800177c:	4313      	orrs	r3, r2
 800177e:	600b      	str	r3, [r1, #0]
 8001780:	e015      	b.n	80017ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001782:	4b24      	ldr	r3, [pc, #144]	; (8001814 <HAL_RCC_OscConfig+0x278>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff f958 	bl	8000a3c <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001790:	f7ff f954 	bl	8000a3c <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e193      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d036      	beq.n	8001828 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d016      	beq.n	80017f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_RCC_OscConfig+0x27c>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c8:	f7ff f938 	bl	8000a3c <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d0:	f7ff f934 	bl	8000a3c <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e173      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 80017e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x234>
 80017ee:	e01b      	b.n	8001828 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_RCC_OscConfig+0x27c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f6:	f7ff f921 	bl	8000a3c <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fc:	e00e      	b.n	800181c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017fe:	f7ff f91d 	bl	8000a3c <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d907      	bls.n	800181c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e15c      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 8001810:	40023800 	.word	0x40023800
 8001814:	42470000 	.word	0x42470000
 8001818:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181c:	4b8a      	ldr	r3, [pc, #552]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 800181e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1ea      	bne.n	80017fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 8097 	beq.w	8001964 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183a:	4b83      	ldr	r3, [pc, #524]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10f      	bne.n	8001866 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	4b7f      	ldr	r3, [pc, #508]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a7e      	ldr	r2, [pc, #504]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b7c      	ldr	r3, [pc, #496]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001862:	2301      	movs	r3, #1
 8001864:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001866:	4b79      	ldr	r3, [pc, #484]	; (8001a4c <HAL_RCC_OscConfig+0x4b0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d118      	bne.n	80018a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001872:	4b76      	ldr	r3, [pc, #472]	; (8001a4c <HAL_RCC_OscConfig+0x4b0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a75      	ldr	r2, [pc, #468]	; (8001a4c <HAL_RCC_OscConfig+0x4b0>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187e:	f7ff f8dd 	bl	8000a3c <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001886:	f7ff f8d9 	bl	8000a3c <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e118      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	4b6c      	ldr	r3, [pc, #432]	; (8001a4c <HAL_RCC_OscConfig+0x4b0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d106      	bne.n	80018ba <HAL_RCC_OscConfig+0x31e>
 80018ac:	4b66      	ldr	r3, [pc, #408]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b0:	4a65      	ldr	r2, [pc, #404]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6713      	str	r3, [r2, #112]	; 0x70
 80018b8:	e01c      	b.n	80018f4 <HAL_RCC_OscConfig+0x358>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b05      	cmp	r3, #5
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x340>
 80018c2:	4b61      	ldr	r3, [pc, #388]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c6:	4a60      	ldr	r2, [pc, #384]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	6713      	str	r3, [r2, #112]	; 0x70
 80018ce:	4b5e      	ldr	r3, [pc, #376]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d2:	4a5d      	ldr	r2, [pc, #372]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6713      	str	r3, [r2, #112]	; 0x70
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0x358>
 80018dc:	4b5a      	ldr	r3, [pc, #360]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e0:	4a59      	ldr	r2, [pc, #356]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	6713      	str	r3, [r2, #112]	; 0x70
 80018e8:	4b57      	ldr	r3, [pc, #348]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ec:	4a56      	ldr	r2, [pc, #344]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018ee:	f023 0304 	bic.w	r3, r3, #4
 80018f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d015      	beq.n	8001928 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff f89e 	bl	8000a3c <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001902:	e00a      	b.n	800191a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001904:	f7ff f89a 	bl	8000a3c <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e0d7      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191a:	4b4b      	ldr	r3, [pc, #300]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0ee      	beq.n	8001904 <HAL_RCC_OscConfig+0x368>
 8001926:	e014      	b.n	8001952 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001928:	f7ff f888 	bl	8000a3c <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192e:	e00a      	b.n	8001946 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001930:	f7ff f884 	bl	8000a3c <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f241 3288 	movw	r2, #5000	; 0x1388
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e0c1      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001946:	4b40      	ldr	r3, [pc, #256]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 8001948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1ee      	bne.n	8001930 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001952:	7dfb      	ldrb	r3, [r7, #23]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001958:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	4a3a      	ldr	r2, [pc, #232]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 800195e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001962:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80ad 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800196e:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b08      	cmp	r3, #8
 8001978:	d060      	beq.n	8001a3c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d145      	bne.n	8001a0e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001982:	4b33      	ldr	r3, [pc, #204]	; (8001a50 <HAL_RCC_OscConfig+0x4b4>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff f858 	bl	8000a3c <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff f854 	bl	8000a3c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e093      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a2:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69da      	ldr	r2, [r3, #28]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	019b      	lsls	r3, r3, #6
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c4:	085b      	lsrs	r3, r3, #1
 80019c6:	3b01      	subs	r3, #1
 80019c8:	041b      	lsls	r3, r3, #16
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	061b      	lsls	r3, r3, #24
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	071b      	lsls	r3, r3, #28
 80019da:	491b      	ldr	r1, [pc, #108]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e0:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <HAL_RCC_OscConfig+0x4b4>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff f829 	bl	8000a3c <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ee:	f7ff f825 	bl	8000a3c <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e064      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x452>
 8001a0c:	e05c      	b.n	8001ac8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <HAL_RCC_OscConfig+0x4b4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7ff f812 	bl	8000a3c <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff f80e 	bl	8000a3c <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e04d      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x480>
 8001a3a:	e045      	b.n	8001ac8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d107      	bne.n	8001a54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e040      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40007000 	.word	0x40007000
 8001a50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <HAL_RCC_OscConfig+0x538>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d030      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d129      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d122      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a84:	4013      	ands	r3, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d119      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9a:	085b      	lsrs	r3, r3, #1
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d10f      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e041      	b.n	8001b6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d106      	bne.n	8001b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f839 	bl	8001b76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3304      	adds	r3, #4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f000 f9d8 	bl	8001ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d001      	beq.n	8001ba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e04e      	b.n	8001c42 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a23      	ldr	r2, [pc, #140]	; (8001c50 <HAL_TIM_Base_Start_IT+0xc4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d022      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bce:	d01d      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1f      	ldr	r2, [pc, #124]	; (8001c54 <HAL_TIM_Base_Start_IT+0xc8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d018      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1e      	ldr	r2, [pc, #120]	; (8001c58 <HAL_TIM_Base_Start_IT+0xcc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d013      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1c      	ldr	r2, [pc, #112]	; (8001c5c <HAL_TIM_Base_Start_IT+0xd0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00e      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a1b      	ldr	r2, [pc, #108]	; (8001c60 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d009      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d004      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d111      	bne.n	8001c30 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d010      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c2e:	e007      	b.n	8001c40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40010000 	.word	0x40010000
 8001c54:	40000400 	.word	0x40000400
 8001c58:	40000800 	.word	0x40000800
 8001c5c:	40000c00 	.word	0x40000c00
 8001c60:	40010400 	.word	0x40010400
 8001c64:	40014000 	.word	0x40014000
 8001c68:	40001800 	.word	0x40001800

08001c6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d122      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d11b      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0202 	mvn.w	r2, #2
 8001c98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8ee 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
 8001cb4:	e005      	b.n	8001cc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f8e0 	bl	8001e7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f8f1 	bl	8001ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d122      	bne.n	8001d1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d11b      	bne.n	8001d1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0204 	mvn.w	r2, #4
 8001cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f8c4 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
 8001d08:	e005      	b.n	8001d16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f8b6 	bl	8001e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f8c7 	bl	8001ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d122      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d11b      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0208 	mvn.w	r2, #8
 8001d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2204      	movs	r2, #4
 8001d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f89a 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
 8001d5c:	e005      	b.n	8001d6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f88c 	bl	8001e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f89d 	bl	8001ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d122      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b10      	cmp	r3, #16
 8001d8a:	d11b      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0210 	mvn.w	r2, #16
 8001d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2208      	movs	r2, #8
 8001d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f870 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
 8001db0:	e005      	b.n	8001dbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f862 	bl	8001e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f873 	bl	8001ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d10e      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d107      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0201 	mvn.w	r2, #1
 8001de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7fe fcde 	bl	80007ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfa:	2b80      	cmp	r3, #128	; 0x80
 8001dfc:	d10e      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e08:	2b80      	cmp	r3, #128	; 0x80
 8001e0a:	d107      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f902 	bl	8002020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e26:	2b40      	cmp	r3, #64	; 0x40
 8001e28:	d10e      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e34:	2b40      	cmp	r3, #64	; 0x40
 8001e36:	d107      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f838 	bl	8001eb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0320 	and.w	r3, r3, #32
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d10e      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	2b20      	cmp	r3, #32
 8001e62:	d107      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0220 	mvn.w	r2, #32
 8001e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f8cc 	bl	800200c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a40      	ldr	r2, [pc, #256]	; (8001fe0 <TIM_Base_SetConfig+0x114>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d013      	beq.n	8001f0c <TIM_Base_SetConfig+0x40>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eea:	d00f      	beq.n	8001f0c <TIM_Base_SetConfig+0x40>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a3d      	ldr	r2, [pc, #244]	; (8001fe4 <TIM_Base_SetConfig+0x118>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d00b      	beq.n	8001f0c <TIM_Base_SetConfig+0x40>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a3c      	ldr	r2, [pc, #240]	; (8001fe8 <TIM_Base_SetConfig+0x11c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d007      	beq.n	8001f0c <TIM_Base_SetConfig+0x40>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a3b      	ldr	r2, [pc, #236]	; (8001fec <TIM_Base_SetConfig+0x120>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d003      	beq.n	8001f0c <TIM_Base_SetConfig+0x40>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a3a      	ldr	r2, [pc, #232]	; (8001ff0 <TIM_Base_SetConfig+0x124>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d108      	bne.n	8001f1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a2f      	ldr	r2, [pc, #188]	; (8001fe0 <TIM_Base_SetConfig+0x114>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d02b      	beq.n	8001f7e <TIM_Base_SetConfig+0xb2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2c:	d027      	beq.n	8001f7e <TIM_Base_SetConfig+0xb2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a2c      	ldr	r2, [pc, #176]	; (8001fe4 <TIM_Base_SetConfig+0x118>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d023      	beq.n	8001f7e <TIM_Base_SetConfig+0xb2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a2b      	ldr	r2, [pc, #172]	; (8001fe8 <TIM_Base_SetConfig+0x11c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01f      	beq.n	8001f7e <TIM_Base_SetConfig+0xb2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a2a      	ldr	r2, [pc, #168]	; (8001fec <TIM_Base_SetConfig+0x120>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d01b      	beq.n	8001f7e <TIM_Base_SetConfig+0xb2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a29      	ldr	r2, [pc, #164]	; (8001ff0 <TIM_Base_SetConfig+0x124>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d017      	beq.n	8001f7e <TIM_Base_SetConfig+0xb2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a28      	ldr	r2, [pc, #160]	; (8001ff4 <TIM_Base_SetConfig+0x128>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d013      	beq.n	8001f7e <TIM_Base_SetConfig+0xb2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a27      	ldr	r2, [pc, #156]	; (8001ff8 <TIM_Base_SetConfig+0x12c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00f      	beq.n	8001f7e <TIM_Base_SetConfig+0xb2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a26      	ldr	r2, [pc, #152]	; (8001ffc <TIM_Base_SetConfig+0x130>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00b      	beq.n	8001f7e <TIM_Base_SetConfig+0xb2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a25      	ldr	r2, [pc, #148]	; (8002000 <TIM_Base_SetConfig+0x134>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d007      	beq.n	8001f7e <TIM_Base_SetConfig+0xb2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a24      	ldr	r2, [pc, #144]	; (8002004 <TIM_Base_SetConfig+0x138>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d003      	beq.n	8001f7e <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a23      	ldr	r2, [pc, #140]	; (8002008 <TIM_Base_SetConfig+0x13c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d108      	bne.n	8001f90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <TIM_Base_SetConfig+0x114>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d003      	beq.n	8001fc4 <TIM_Base_SetConfig+0xf8>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <TIM_Base_SetConfig+0x124>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d103      	bne.n	8001fcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	615a      	str	r2, [r3, #20]
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	40000800 	.word	0x40000800
 8001fec:	40000c00 	.word	0x40000c00
 8001ff0:	40010400 	.word	0x40010400
 8001ff4:	40014000 	.word	0x40014000
 8001ff8:	40014400 	.word	0x40014400
 8001ffc:	40014800 	.word	0x40014800
 8002000:	40001800 	.word	0x40001800
 8002004:	40001c00 	.word	0x40001c00
 8002008:	40002000 	.word	0x40002000

0800200c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <__NVIC_SetPriority>:
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	db0a      	blt.n	800205e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	490c      	ldr	r1, [pc, #48]	; (8002080 <__NVIC_SetPriority+0x4c>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	440b      	add	r3, r1
 8002058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800205c:	e00a      	b.n	8002074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4908      	ldr	r1, [pc, #32]	; (8002084 <__NVIC_SetPriority+0x50>)
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	3b04      	subs	r3, #4
 800206c:	0112      	lsls	r2, r2, #4
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	440b      	add	r3, r1
 8002072:	761a      	strb	r2, [r3, #24]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000e100 	.word	0xe000e100
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <SysTick_Handler+0x1c>)
 800208e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002090:	f001 fd20 	bl	8003ad4 <xTaskGetSchedulerState>
 8002094:	4603      	mov	r3, r0
 8002096:	2b01      	cmp	r3, #1
 8002098:	d001      	beq.n	800209e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800209a:	f002 fb05 	bl	80046a8 <xPortSysTickHandler>
  }
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	e000e010 	.word	0xe000e010

080020a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80020ac:	2100      	movs	r1, #0
 80020ae:	f06f 0004 	mvn.w	r0, #4
 80020b2:	f7ff ffbf 	bl	8002034 <__NVIC_SetPriority>
#endif
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020c2:	f3ef 8305 	mrs	r3, IPSR
 80020c6:	603b      	str	r3, [r7, #0]
  return(result);
 80020c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80020ce:	f06f 0305 	mvn.w	r3, #5
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	e00c      	b.n	80020f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <osKernelInitialize+0x44>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d105      	bne.n	80020ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80020de:	4b08      	ldr	r3, [pc, #32]	; (8002100 <osKernelInitialize+0x44>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	e002      	b.n	80020f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
 80020ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80020f0:	687b      	ldr	r3, [r7, #4]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000080 	.word	0x20000080

08002104 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800210a:	f3ef 8305 	mrs	r3, IPSR
 800210e:	603b      	str	r3, [r7, #0]
  return(result);
 8002110:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002116:	f06f 0305 	mvn.w	r3, #5
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	e010      	b.n	8002140 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <osKernelStart+0x48>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d109      	bne.n	800213a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002126:	f7ff ffbf 	bl	80020a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <osKernelStart+0x48>)
 800212c:	2202      	movs	r2, #2
 800212e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002130:	f001 f888 	bl	8003244 <vTaskStartScheduler>
      stat = osOK;
 8002134:	2300      	movs	r3, #0
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	e002      	b.n	8002140 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
 800213e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002140:	687b      	ldr	r3, [r7, #4]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000080 	.word	0x20000080

08002150 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b08e      	sub	sp, #56	; 0x38
 8002154:	af04      	add	r7, sp, #16
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800215c:	2300      	movs	r3, #0
 800215e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002160:	f3ef 8305 	mrs	r3, IPSR
 8002164:	617b      	str	r3, [r7, #20]
  return(result);
 8002166:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002168:	2b00      	cmp	r3, #0
 800216a:	d17e      	bne.n	800226a <osThreadNew+0x11a>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d07b      	beq.n	800226a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002176:	2318      	movs	r3, #24
 8002178:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
 8002182:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d045      	beq.n	8002216 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <osThreadNew+0x48>
        name = attr->name;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <osThreadNew+0x6e>
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	2b38      	cmp	r3, #56	; 0x38
 80021b0:	d805      	bhi.n	80021be <osThreadNew+0x6e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <osThreadNew+0x72>
        return (NULL);
 80021be:	2300      	movs	r3, #0
 80021c0:	e054      	b.n	800226c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	089b      	lsrs	r3, r3, #2
 80021d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00e      	beq.n	80021f8 <osThreadNew+0xa8>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b5b      	cmp	r3, #91	; 0x5b
 80021e0:	d90a      	bls.n	80021f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d006      	beq.n	80021f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <osThreadNew+0xa8>
        mem = 1;
 80021f2:	2301      	movs	r3, #1
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	e010      	b.n	800221a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10c      	bne.n	800221a <osThreadNew+0xca>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d108      	bne.n	800221a <osThreadNew+0xca>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d104      	bne.n	800221a <osThreadNew+0xca>
          mem = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	e001      	b.n	800221a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d110      	bne.n	8002242 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002228:	9202      	str	r2, [sp, #8]
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	6a3a      	ldr	r2, [r7, #32]
 8002234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 fdf0 	bl	8002e1c <xTaskCreateStatic>
 800223c:	4603      	mov	r3, r0
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	e013      	b.n	800226a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d110      	bne.n	800226a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	b29a      	uxth	r2, r3
 800224c:	f107 0310 	add.w	r3, r7, #16
 8002250:	9301      	str	r3, [sp, #4]
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 fe3b 	bl	8002ed6 <xTaskCreate>
 8002260:	4603      	mov	r3, r0
 8002262:	2b01      	cmp	r3, #1
 8002264:	d001      	beq.n	800226a <osThreadNew+0x11a>
            hTask = NULL;
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800226a:	693b      	ldr	r3, [r7, #16]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3728      	adds	r7, #40	; 0x28
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002284:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	4a06      	ldr	r2, [pc, #24]	; (80022a4 <vApplicationGetIdleTaskMemory+0x30>)
 800228a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2280      	movs	r2, #128	; 0x80
 8002290:	601a      	str	r2, [r3, #0]
}
 8002292:	bf00      	nop
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000084 	.word	0x20000084
 80022a4:	200000e0 	.word	0x200000e0

080022a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80022b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4a06      	ldr	r2, [pc, #24]	; (80022d8 <vApplicationGetTimerTaskMemory+0x30>)
 80022be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022c6:	601a      	str	r2, [r3, #0]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	200002e0 	.word	0x200002e0
 80022d8:	2000033c 	.word	0x2000033c

080022dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f103 0208 	add.w	r2, r3, #8
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295
 80022f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f103 0208 	add.w	r2, r3, #8
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f103 0208 	add.w	r2, r3, #8
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002336:	b480      	push	{r7}
 8002338:	b085      	sub	sp, #20
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	601a      	str	r2, [r3, #0]
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002394:	d103      	bne.n	800239e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	e00c      	b.n	80023b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3308      	adds	r3, #8
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	e002      	b.n	80023ac <vListInsert+0x2e>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d2f6      	bcs.n	80023a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	601a      	str	r2, [r3, #0]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6892      	ldr	r2, [r2, #8]
 8002406:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6852      	ldr	r2, [r2, #4]
 8002410:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	429a      	cmp	r2, r3
 800241a:	d103      	bne.n	8002424 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	1e5a      	subs	r2, r3, #1
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10a      	bne.n	800246e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245c:	f383 8811 	msr	BASEPRI, r3
 8002460:	f3bf 8f6f 	isb	sy
 8002464:	f3bf 8f4f 	dsb	sy
 8002468:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800246a:	bf00      	nop
 800246c:	e7fe      	b.n	800246c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800246e:	f002 f889 	bl	8004584 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247a:	68f9      	ldr	r1, [r7, #12]
 800247c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	441a      	add	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249e:	3b01      	subs	r3, #1
 80024a0:	68f9      	ldr	r1, [r7, #12]
 80024a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	441a      	add	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	22ff      	movs	r2, #255	; 0xff
 80024b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	22ff      	movs	r2, #255	; 0xff
 80024ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d114      	bne.n	80024ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d01a      	beq.n	8002502 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	3310      	adds	r3, #16
 80024d0:	4618      	mov	r0, r3
 80024d2:	f001 f941 	bl	8003758 <xTaskRemoveFromEventList>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d012      	beq.n	8002502 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <xQueueGenericReset+0xcc>)
 80024de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	e009      	b.n	8002502 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	3310      	adds	r3, #16
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fef2 	bl	80022dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	3324      	adds	r3, #36	; 0x24
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff feed 	bl	80022dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002502:	f002 f86f 	bl	80045e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002506:	2301      	movs	r3, #1
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	e000ed04 	.word	0xe000ed04

08002514 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08e      	sub	sp, #56	; 0x38
 8002518:	af02      	add	r7, sp, #8
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800253a:	bf00      	nop
 800253c:	e7fe      	b.n	800253c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10a      	bne.n	800255a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002548:	f383 8811 	msr	BASEPRI, r3
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002556:	bf00      	nop
 8002558:	e7fe      	b.n	8002558 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <xQueueGenericCreateStatic+0x52>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <xQueueGenericCreateStatic+0x56>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <xQueueGenericCreateStatic+0x58>
 800256a:	2300      	movs	r3, #0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10a      	bne.n	8002586 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002574:	f383 8811 	msr	BASEPRI, r3
 8002578:	f3bf 8f6f 	isb	sy
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	623b      	str	r3, [r7, #32]
}
 8002582:	bf00      	nop
 8002584:	e7fe      	b.n	8002584 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d102      	bne.n	8002592 <xQueueGenericCreateStatic+0x7e>
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <xQueueGenericCreateStatic+0x82>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <xQueueGenericCreateStatic+0x84>
 8002596:	2300      	movs	r3, #0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10a      	bne.n	80025b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800259c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a0:	f383 8811 	msr	BASEPRI, r3
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	f3bf 8f4f 	dsb	sy
 80025ac:	61fb      	str	r3, [r7, #28]
}
 80025ae:	bf00      	nop
 80025b0:	e7fe      	b.n	80025b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80025b2:	2350      	movs	r3, #80	; 0x50
 80025b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2b50      	cmp	r3, #80	; 0x50
 80025ba:	d00a      	beq.n	80025d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80025bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c0:	f383 8811 	msr	BASEPRI, r3
 80025c4:	f3bf 8f6f 	isb	sy
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	61bb      	str	r3, [r7, #24]
}
 80025ce:	bf00      	nop
 80025d0:	e7fe      	b.n	80025d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80025d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00d      	beq.n	80025fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80025de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80025ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	4613      	mov	r3, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	68b9      	ldr	r1, [r7, #8]
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f805 	bl	8002604 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3730      	adds	r7, #48	; 0x30
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d103      	bne.n	8002620 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	e002      	b.n	8002626 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002632:	2101      	movs	r1, #1
 8002634:	69b8      	ldr	r0, [r7, #24]
 8002636:	f7ff ff05 	bl	8002444 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08e      	sub	sp, #56	; 0x38
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800265a:	2300      	movs	r3, #0
 800265c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10a      	bne.n	800267e <xQueueGenericSend+0x32>
	__asm volatile
 8002668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266c:	f383 8811 	msr	BASEPRI, r3
 8002670:	f3bf 8f6f 	isb	sy
 8002674:	f3bf 8f4f 	dsb	sy
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800267a:	bf00      	nop
 800267c:	e7fe      	b.n	800267c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d103      	bne.n	800268c <xQueueGenericSend+0x40>
 8002684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <xQueueGenericSend+0x44>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <xQueueGenericSend+0x46>
 8002690:	2300      	movs	r3, #0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10a      	bne.n	80026ac <xQueueGenericSend+0x60>
	__asm volatile
 8002696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269a:	f383 8811 	msr	BASEPRI, r3
 800269e:	f3bf 8f6f 	isb	sy
 80026a2:	f3bf 8f4f 	dsb	sy
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026a8:	bf00      	nop
 80026aa:	e7fe      	b.n	80026aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d103      	bne.n	80026ba <xQueueGenericSend+0x6e>
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <xQueueGenericSend+0x72>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <xQueueGenericSend+0x74>
 80026be:	2300      	movs	r3, #0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10a      	bne.n	80026da <xQueueGenericSend+0x8e>
	__asm volatile
 80026c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c8:	f383 8811 	msr	BASEPRI, r3
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	623b      	str	r3, [r7, #32]
}
 80026d6:	bf00      	nop
 80026d8:	e7fe      	b.n	80026d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026da:	f001 f9fb 	bl	8003ad4 <xTaskGetSchedulerState>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <xQueueGenericSend+0x9e>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <xQueueGenericSend+0xa2>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <xQueueGenericSend+0xa4>
 80026ee:	2300      	movs	r3, #0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10a      	bne.n	800270a <xQueueGenericSend+0xbe>
	__asm volatile
 80026f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	61fb      	str	r3, [r7, #28]
}
 8002706:	bf00      	nop
 8002708:	e7fe      	b.n	8002708 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800270a:	f001 ff3b 	bl	8004584 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002716:	429a      	cmp	r2, r3
 8002718:	d302      	bcc.n	8002720 <xQueueGenericSend+0xd4>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d129      	bne.n	8002774 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002726:	f000 fa0b 	bl	8002b40 <prvCopyDataToQueue>
 800272a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	2b00      	cmp	r3, #0
 8002732:	d010      	beq.n	8002756 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002736:	3324      	adds	r3, #36	; 0x24
 8002738:	4618      	mov	r0, r3
 800273a:	f001 f80d 	bl	8003758 <xTaskRemoveFromEventList>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d013      	beq.n	800276c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002744:	4b3f      	ldr	r3, [pc, #252]	; (8002844 <xQueueGenericSend+0x1f8>)
 8002746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	f3bf 8f4f 	dsb	sy
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	e00a      	b.n	800276c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800275c:	4b39      	ldr	r3, [pc, #228]	; (8002844 <xQueueGenericSend+0x1f8>)
 800275e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	f3bf 8f4f 	dsb	sy
 8002768:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800276c:	f001 ff3a 	bl	80045e4 <vPortExitCritical>
				return pdPASS;
 8002770:	2301      	movs	r3, #1
 8002772:	e063      	b.n	800283c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d103      	bne.n	8002782 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800277a:	f001 ff33 	bl	80045e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800277e:	2300      	movs	r3, #0
 8002780:	e05c      	b.n	800283c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002784:	2b00      	cmp	r3, #0
 8002786:	d106      	bne.n	8002796 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	4618      	mov	r0, r3
 800278e:	f001 f847 	bl	8003820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002792:	2301      	movs	r3, #1
 8002794:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002796:	f001 ff25 	bl	80045e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800279a:	f000 fdb9 	bl	8003310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800279e:	f001 fef1 	bl	8004584 <vPortEnterCritical>
 80027a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027a8:	b25b      	sxtb	r3, r3
 80027aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ae:	d103      	bne.n	80027b8 <xQueueGenericSend+0x16c>
 80027b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027be:	b25b      	sxtb	r3, r3
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	d103      	bne.n	80027ce <xQueueGenericSend+0x182>
 80027c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027ce:	f001 ff09 	bl	80045e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027d2:	1d3a      	adds	r2, r7, #4
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f001 f836 	bl	800384c <xTaskCheckForTimeOut>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d124      	bne.n	8002830 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027e8:	f000 faa2 	bl	8002d30 <prvIsQueueFull>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d018      	beq.n	8002824 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	3310      	adds	r3, #16
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 ff5c 	bl	80036b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002802:	f000 fa2d 	bl	8002c60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002806:	f000 fd91 	bl	800332c <xTaskResumeAll>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	f47f af7c 	bne.w	800270a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002812:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <xQueueGenericSend+0x1f8>)
 8002814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	e772      	b.n	800270a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002824:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002826:	f000 fa1b 	bl	8002c60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800282a:	f000 fd7f 	bl	800332c <xTaskResumeAll>
 800282e:	e76c      	b.n	800270a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002832:	f000 fa15 	bl	8002c60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002836:	f000 fd79 	bl	800332c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800283a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800283c:	4618      	mov	r0, r3
 800283e:	3738      	adds	r7, #56	; 0x38
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	e000ed04 	.word	0xe000ed04

08002848 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b090      	sub	sp, #64	; 0x40
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800285a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10a      	bne.n	8002876 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002864:	f383 8811 	msr	BASEPRI, r3
 8002868:	f3bf 8f6f 	isb	sy
 800286c:	f3bf 8f4f 	dsb	sy
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002872:	bf00      	nop
 8002874:	e7fe      	b.n	8002874 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d103      	bne.n	8002884 <xQueueGenericSendFromISR+0x3c>
 800287c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <xQueueGenericSendFromISR+0x40>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <xQueueGenericSendFromISR+0x42>
 8002888:	2300      	movs	r3, #0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10a      	bne.n	80028a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028a0:	bf00      	nop
 80028a2:	e7fe      	b.n	80028a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d103      	bne.n	80028b2 <xQueueGenericSendFromISR+0x6a>
 80028aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <xQueueGenericSendFromISR+0x6e>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <xQueueGenericSendFromISR+0x70>
 80028b6:	2300      	movs	r3, #0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80028bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	623b      	str	r3, [r7, #32]
}
 80028ce:	bf00      	nop
 80028d0:	e7fe      	b.n	80028d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028d2:	f001 ff39 	bl	8004748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80028d6:	f3ef 8211 	mrs	r2, BASEPRI
 80028da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028de:	f383 8811 	msr	BASEPRI, r3
 80028e2:	f3bf 8f6f 	isb	sy
 80028e6:	f3bf 8f4f 	dsb	sy
 80028ea:	61fa      	str	r2, [r7, #28]
 80028ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80028ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d302      	bcc.n	8002904 <xQueueGenericSendFromISR+0xbc>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d12f      	bne.n	8002964 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800290a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800290e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	68b9      	ldr	r1, [r7, #8]
 8002918:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800291a:	f000 f911 	bl	8002b40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800291e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002926:	d112      	bne.n	800294e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	2b00      	cmp	r3, #0
 800292e:	d016      	beq.n	800295e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002932:	3324      	adds	r3, #36	; 0x24
 8002934:	4618      	mov	r0, r3
 8002936:	f000 ff0f 	bl	8003758 <xTaskRemoveFromEventList>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00e      	beq.n	800295e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e007      	b.n	800295e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800294e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002952:	3301      	adds	r3, #1
 8002954:	b2db      	uxtb	r3, r3
 8002956:	b25a      	sxtb	r2, r3
 8002958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800295e:	2301      	movs	r3, #1
 8002960:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002962:	e001      	b.n	8002968 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002964:	2300      	movs	r3, #0
 8002966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002972:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002976:	4618      	mov	r0, r3
 8002978:	3740      	adds	r7, #64	; 0x40
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08c      	sub	sp, #48	; 0x30
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800298c:	2300      	movs	r3, #0
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10a      	bne.n	80029b0 <xQueueReceive+0x30>
	__asm volatile
 800299a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299e:	f383 8811 	msr	BASEPRI, r3
 80029a2:	f3bf 8f6f 	isb	sy
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	623b      	str	r3, [r7, #32]
}
 80029ac:	bf00      	nop
 80029ae:	e7fe      	b.n	80029ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d103      	bne.n	80029be <xQueueReceive+0x3e>
 80029b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <xQueueReceive+0x42>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <xQueueReceive+0x44>
 80029c2:	2300      	movs	r3, #0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10a      	bne.n	80029de <xQueueReceive+0x5e>
	__asm volatile
 80029c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029cc:	f383 8811 	msr	BASEPRI, r3
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	61fb      	str	r3, [r7, #28]
}
 80029da:	bf00      	nop
 80029dc:	e7fe      	b.n	80029dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029de:	f001 f879 	bl	8003ad4 <xTaskGetSchedulerState>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d102      	bne.n	80029ee <xQueueReceive+0x6e>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <xQueueReceive+0x72>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <xQueueReceive+0x74>
 80029f2:	2300      	movs	r3, #0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10a      	bne.n	8002a0e <xQueueReceive+0x8e>
	__asm volatile
 80029f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fc:	f383 8811 	msr	BASEPRI, r3
 8002a00:	f3bf 8f6f 	isb	sy
 8002a04:	f3bf 8f4f 	dsb	sy
 8002a08:	61bb      	str	r3, [r7, #24]
}
 8002a0a:	bf00      	nop
 8002a0c:	e7fe      	b.n	8002a0c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a0e:	f001 fdb9 	bl	8004584 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d01f      	beq.n	8002a5e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a1e:	68b9      	ldr	r1, [r7, #8]
 8002a20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a22:	f000 f8f7 	bl	8002c14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	1e5a      	subs	r2, r3, #1
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00f      	beq.n	8002a56 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	3310      	adds	r3, #16
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fe8c 	bl	8003758 <xTaskRemoveFromEventList>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d007      	beq.n	8002a56 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002a46:	4b3d      	ldr	r3, [pc, #244]	; (8002b3c <xQueueReceive+0x1bc>)
 8002a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	f3bf 8f4f 	dsb	sy
 8002a52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002a56:	f001 fdc5 	bl	80045e4 <vPortExitCritical>
				return pdPASS;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e069      	b.n	8002b32 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d103      	bne.n	8002a6c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a64:	f001 fdbe 	bl	80045e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e062      	b.n	8002b32 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a72:	f107 0310 	add.w	r3, r7, #16
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 fed2 	bl	8003820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a80:	f001 fdb0 	bl	80045e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a84:	f000 fc44 	bl	8003310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a88:	f001 fd7c 	bl	8004584 <vPortEnterCritical>
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a92:	b25b      	sxtb	r3, r3
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d103      	bne.n	8002aa2 <xQueueReceive+0x122>
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aa8:	b25b      	sxtb	r3, r3
 8002aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aae:	d103      	bne.n	8002ab8 <xQueueReceive+0x138>
 8002ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ab8:	f001 fd94 	bl	80045e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002abc:	1d3a      	adds	r2, r7, #4
 8002abe:	f107 0310 	add.w	r3, r7, #16
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fec1 	bl	800384c <xTaskCheckForTimeOut>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d123      	bne.n	8002b18 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ad2:	f000 f917 	bl	8002d04 <prvIsQueueEmpty>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d017      	beq.n	8002b0c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ade:	3324      	adds	r3, #36	; 0x24
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fde7 	bl	80036b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002aec:	f000 f8b8 	bl	8002c60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002af0:	f000 fc1c 	bl	800332c <xTaskResumeAll>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d189      	bne.n	8002a0e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <xQueueReceive+0x1bc>)
 8002afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	e780      	b.n	8002a0e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b0e:	f000 f8a7 	bl	8002c60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b12:	f000 fc0b 	bl	800332c <xTaskResumeAll>
 8002b16:	e77a      	b.n	8002a0e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b1a:	f000 f8a1 	bl	8002c60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b1e:	f000 fc05 	bl	800332c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b24:	f000 f8ee 	bl	8002d04 <prvIsQueueEmpty>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f43f af6f 	beq.w	8002a0e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002b30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3730      	adds	r7, #48	; 0x30
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	e000ed04 	.word	0xe000ed04

08002b40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10d      	bne.n	8002b7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d14d      	bne.n	8002c02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 ffd0 	bl	8003b10 <xTaskPriorityDisinherit>
 8002b70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	e043      	b.n	8002c02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d119      	bne.n	8002bb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6858      	ldr	r0, [r3, #4]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68b9      	ldr	r1, [r7, #8]
 8002b8c:	f002 f832 	bl	8004bf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	441a      	add	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d32b      	bcc.n	8002c02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	e026      	b.n	8002c02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	68d8      	ldr	r0, [r3, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	f002 f818 	bl	8004bf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	425b      	negs	r3, r3
 8002bce:	441a      	add	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d207      	bcs.n	8002bf0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	425b      	negs	r3, r3
 8002bea:	441a      	add	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d105      	bne.n	8002c02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002c0a:	697b      	ldr	r3, [r7, #20]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d018      	beq.n	8002c58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	441a      	add	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d303      	bcc.n	8002c48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68d9      	ldr	r1, [r3, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	461a      	mov	r2, r3
 8002c52:	6838      	ldr	r0, [r7, #0]
 8002c54:	f001 ffce 	bl	8004bf4 <memcpy>
	}
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002c68:	f001 fc8c 	bl	8004584 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c74:	e011      	b.n	8002c9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d012      	beq.n	8002ca4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3324      	adds	r3, #36	; 0x24
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fd68 	bl	8003758 <xTaskRemoveFromEventList>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c8e:	f000 fe3f 	bl	8003910 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	dce9      	bgt.n	8002c76 <prvUnlockQueue+0x16>
 8002ca2:	e000      	b.n	8002ca6 <prvUnlockQueue+0x46>
					break;
 8002ca4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	22ff      	movs	r2, #255	; 0xff
 8002caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002cae:	f001 fc99 	bl	80045e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002cb2:	f001 fc67 	bl	8004584 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cbe:	e011      	b.n	8002ce4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d012      	beq.n	8002cee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3310      	adds	r3, #16
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 fd43 	bl	8003758 <xTaskRemoveFromEventList>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002cd8:	f000 fe1a 	bl	8003910 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002cdc:	7bbb      	ldrb	r3, [r7, #14]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ce4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	dce9      	bgt.n	8002cc0 <prvUnlockQueue+0x60>
 8002cec:	e000      	b.n	8002cf0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002cee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	22ff      	movs	r2, #255	; 0xff
 8002cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002cf8:	f001 fc74 	bl	80045e4 <vPortExitCritical>
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d0c:	f001 fc3a 	bl	8004584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	e001      	b.n	8002d22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d22:	f001 fc5f 	bl	80045e4 <vPortExitCritical>

	return xReturn;
 8002d26:	68fb      	ldr	r3, [r7, #12]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d38:	f001 fc24 	bl	8004584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d102      	bne.n	8002d4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	e001      	b.n	8002d52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d52:	f001 fc47 	bl	80045e4 <vPortExitCritical>

	return xReturn;
 8002d56:	68fb      	ldr	r3, [r7, #12]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	e014      	b.n	8002d9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d70:	4a0f      	ldr	r2, [pc, #60]	; (8002db0 <vQueueAddToRegistry+0x50>)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10b      	bne.n	8002d94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d7c:	490c      	ldr	r1, [pc, #48]	; (8002db0 <vQueueAddToRegistry+0x50>)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002d86:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <vQueueAddToRegistry+0x50>)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002d92:	e006      	b.n	8002da2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3301      	adds	r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b07      	cmp	r3, #7
 8002d9e:	d9e7      	bls.n	8002d70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	2000073c 	.word	0x2000073c

08002db4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002dc4:	f001 fbde 	bl	8004584 <vPortEnterCritical>
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dce:	b25b      	sxtb	r3, r3
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd4:	d103      	bne.n	8002dde <vQueueWaitForMessageRestricted+0x2a>
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002de4:	b25b      	sxtb	r3, r3
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dea:	d103      	bne.n	8002df4 <vQueueWaitForMessageRestricted+0x40>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002df4:	f001 fbf6 	bl	80045e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d106      	bne.n	8002e0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	3324      	adds	r3, #36	; 0x24
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fc79 	bl	8003700 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002e0e:	6978      	ldr	r0, [r7, #20]
 8002e10:	f7ff ff26 	bl	8002c60 <prvUnlockQueue>
	}
 8002e14:	bf00      	nop
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08e      	sub	sp, #56	; 0x38
 8002e20:	af04      	add	r7, sp, #16
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10a      	bne.n	8002e46 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	623b      	str	r3, [r7, #32]
}
 8002e42:	bf00      	nop
 8002e44:	e7fe      	b.n	8002e44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10a      	bne.n	8002e62 <xTaskCreateStatic+0x46>
	__asm volatile
 8002e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e50:	f383 8811 	msr	BASEPRI, r3
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	61fb      	str	r3, [r7, #28]
}
 8002e5e:	bf00      	nop
 8002e60:	e7fe      	b.n	8002e60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e62:	235c      	movs	r3, #92	; 0x5c
 8002e64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	2b5c      	cmp	r3, #92	; 0x5c
 8002e6a:	d00a      	beq.n	8002e82 <xTaskCreateStatic+0x66>
	__asm volatile
 8002e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e70:	f383 8811 	msr	BASEPRI, r3
 8002e74:	f3bf 8f6f 	isb	sy
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	61bb      	str	r3, [r7, #24]
}
 8002e7e:	bf00      	nop
 8002e80:	e7fe      	b.n	8002e80 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002e82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d01e      	beq.n	8002ec8 <xTaskCreateStatic+0xac>
 8002e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d01b      	beq.n	8002ec8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	9303      	str	r3, [sp, #12]
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	9302      	str	r3, [sp, #8]
 8002eaa:	f107 0314 	add.w	r3, r7, #20
 8002eae:	9301      	str	r3, [sp, #4]
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f850 	bl	8002f60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ec2:	f000 f8dd 	bl	8003080 <prvAddNewTaskToReadyList>
 8002ec6:	e001      	b.n	8002ecc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ecc:	697b      	ldr	r3, [r7, #20]
	}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3728      	adds	r7, #40	; 0x28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b08c      	sub	sp, #48	; 0x30
 8002eda:	af04      	add	r7, sp, #16
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	603b      	str	r3, [r7, #0]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f001 fc6c 	bl	80047c8 <pvPortMalloc>
 8002ef0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00e      	beq.n	8002f16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ef8:	205c      	movs	r0, #92	; 0x5c
 8002efa:	f001 fc65 	bl	80047c8 <pvPortMalloc>
 8002efe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f0c:	e005      	b.n	8002f1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f0e:	6978      	ldr	r0, [r7, #20]
 8002f10:	f001 fd26 	bl	8004960 <vPortFree>
 8002f14:	e001      	b.n	8002f1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d017      	beq.n	8002f50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f28:	88fa      	ldrh	r2, [r7, #6]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	9303      	str	r3, [sp, #12]
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	9302      	str	r3, [sp, #8]
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	9301      	str	r3, [sp, #4]
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f80e 	bl	8002f60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f44:	69f8      	ldr	r0, [r7, #28]
 8002f46:	f000 f89b 	bl	8003080 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	e002      	b.n	8002f56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f50:	f04f 33ff 	mov.w	r3, #4294967295
 8002f54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f56:	69bb      	ldr	r3, [r7, #24]
	}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3720      	adds	r7, #32
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	461a      	mov	r2, r3
 8002f78:	21a5      	movs	r1, #165	; 0xa5
 8002f7a:	f001 fe0f 	bl	8004b9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	f023 0307 	bic.w	r3, r3, #7
 8002f96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa6:	f383 8811 	msr	BASEPRI, r3
 8002faa:	f3bf 8f6f 	isb	sy
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	617b      	str	r3, [r7, #20]
}
 8002fb4:	bf00      	nop
 8002fb6:	e7fe      	b.n	8002fb6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01f      	beq.n	8002ffe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	e012      	b.n	8002fea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	4413      	add	r3, r2
 8002fca:	7819      	ldrb	r1, [r3, #0]
 8002fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3334      	adds	r3, #52	; 0x34
 8002fd4:	460a      	mov	r2, r1
 8002fd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	4413      	add	r3, r2
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d006      	beq.n	8002ff2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	2b0f      	cmp	r3, #15
 8002fee:	d9e9      	bls.n	8002fc4 <prvInitialiseNewTask+0x64>
 8002ff0:	e000      	b.n	8002ff4 <prvInitialiseNewTask+0x94>
			{
				break;
 8002ff2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ffc:	e003      	b.n	8003006 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	2b37      	cmp	r3, #55	; 0x37
 800300a:	d901      	bls.n	8003010 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800300c:	2337      	movs	r3, #55	; 0x37
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003014:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800301a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	2200      	movs	r2, #0
 8003020:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	3304      	adds	r3, #4
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff f978 	bl	800231c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	3318      	adds	r3, #24
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff f973 	bl	800231c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800303a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003044:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800304a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304e:	2200      	movs	r2, #0
 8003050:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	68f9      	ldr	r1, [r7, #12]
 800305e:	69b8      	ldr	r0, [r7, #24]
 8003060:	f001 f966 	bl	8004330 <pxPortInitialiseStack>
 8003064:	4602      	mov	r2, r0
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800306a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003076:	bf00      	nop
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003088:	f001 fa7c 	bl	8004584 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800308c:	4b2d      	ldr	r3, [pc, #180]	; (8003144 <prvAddNewTaskToReadyList+0xc4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	3301      	adds	r3, #1
 8003092:	4a2c      	ldr	r2, [pc, #176]	; (8003144 <prvAddNewTaskToReadyList+0xc4>)
 8003094:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003096:	4b2c      	ldr	r3, [pc, #176]	; (8003148 <prvAddNewTaskToReadyList+0xc8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d109      	bne.n	80030b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800309e:	4a2a      	ldr	r2, [pc, #168]	; (8003148 <prvAddNewTaskToReadyList+0xc8>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030a4:	4b27      	ldr	r3, [pc, #156]	; (8003144 <prvAddNewTaskToReadyList+0xc4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d110      	bne.n	80030ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80030ac:	f000 fc54 	bl	8003958 <prvInitialiseTaskLists>
 80030b0:	e00d      	b.n	80030ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80030b2:	4b26      	ldr	r3, [pc, #152]	; (800314c <prvAddNewTaskToReadyList+0xcc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030ba:	4b23      	ldr	r3, [pc, #140]	; (8003148 <prvAddNewTaskToReadyList+0xc8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d802      	bhi.n	80030ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80030c8:	4a1f      	ldr	r2, [pc, #124]	; (8003148 <prvAddNewTaskToReadyList+0xc8>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80030ce:	4b20      	ldr	r3, [pc, #128]	; (8003150 <prvAddNewTaskToReadyList+0xd0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	4a1e      	ldr	r2, [pc, #120]	; (8003150 <prvAddNewTaskToReadyList+0xd0>)
 80030d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030d8:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <prvAddNewTaskToReadyList+0xd0>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e4:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <prvAddNewTaskToReadyList+0xd4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d903      	bls.n	80030f4 <prvAddNewTaskToReadyList+0x74>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	4a18      	ldr	r2, [pc, #96]	; (8003154 <prvAddNewTaskToReadyList+0xd4>)
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4a15      	ldr	r2, [pc, #84]	; (8003158 <prvAddNewTaskToReadyList+0xd8>)
 8003102:	441a      	add	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3304      	adds	r3, #4
 8003108:	4619      	mov	r1, r3
 800310a:	4610      	mov	r0, r2
 800310c:	f7ff f913 	bl	8002336 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003110:	f001 fa68 	bl	80045e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003114:	4b0d      	ldr	r3, [pc, #52]	; (800314c <prvAddNewTaskToReadyList+0xcc>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00e      	beq.n	800313a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800311c:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <prvAddNewTaskToReadyList+0xc8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	429a      	cmp	r2, r3
 8003128:	d207      	bcs.n	800313a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800312a:	4b0c      	ldr	r3, [pc, #48]	; (800315c <prvAddNewTaskToReadyList+0xdc>)
 800312c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20000c50 	.word	0x20000c50
 8003148:	2000077c 	.word	0x2000077c
 800314c:	20000c5c 	.word	0x20000c5c
 8003150:	20000c6c 	.word	0x20000c6c
 8003154:	20000c58 	.word	0x20000c58
 8003158:	20000780 	.word	0x20000780
 800315c:	e000ed04 	.word	0xe000ed04

08003160 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003168:	f001 fa0c 	bl	8004584 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d102      	bne.n	8003178 <vTaskDelete+0x18>
 8003172:	4b2c      	ldr	r3, [pc, #176]	; (8003224 <vTaskDelete+0xc4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	e000      	b.n	800317a <vTaskDelete+0x1a>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3304      	adds	r3, #4
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff f935 	bl	80023f0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	2b00      	cmp	r3, #0
 800318c:	d004      	beq.n	8003198 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	3318      	adds	r3, #24
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff f92c 	bl	80023f0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003198:	4b23      	ldr	r3, [pc, #140]	; (8003228 <vTaskDelete+0xc8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3301      	adds	r3, #1
 800319e:	4a22      	ldr	r2, [pc, #136]	; (8003228 <vTaskDelete+0xc8>)
 80031a0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80031a2:	4b20      	ldr	r3, [pc, #128]	; (8003224 <vTaskDelete+0xc4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d10b      	bne.n	80031c4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	3304      	adds	r3, #4
 80031b0:	4619      	mov	r1, r3
 80031b2:	481e      	ldr	r0, [pc, #120]	; (800322c <vTaskDelete+0xcc>)
 80031b4:	f7ff f8bf 	bl	8002336 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80031b8:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <vTaskDelete+0xd0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3301      	adds	r3, #1
 80031be:	4a1c      	ldr	r2, [pc, #112]	; (8003230 <vTaskDelete+0xd0>)
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e009      	b.n	80031d8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80031c4:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <vTaskDelete+0xd4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	4a1a      	ldr	r2, [pc, #104]	; (8003234 <vTaskDelete+0xd4>)
 80031cc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fc30 	bl	8003a34 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80031d4:	f000 fc5e 	bl	8003a94 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80031d8:	f001 fa04 	bl	80045e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80031dc:	4b16      	ldr	r3, [pc, #88]	; (8003238 <vTaskDelete+0xd8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d01b      	beq.n	800321c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <vTaskDelete+0xc4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d116      	bne.n	800321c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80031ee:	4b13      	ldr	r3, [pc, #76]	; (800323c <vTaskDelete+0xdc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <vTaskDelete+0xac>
	__asm volatile
 80031f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	60bb      	str	r3, [r7, #8]
}
 8003208:	bf00      	nop
 800320a:	e7fe      	b.n	800320a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <vTaskDelete+0xe0>)
 800320e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	2000077c 	.word	0x2000077c
 8003228:	20000c6c 	.word	0x20000c6c
 800322c:	20000c24 	.word	0x20000c24
 8003230:	20000c38 	.word	0x20000c38
 8003234:	20000c50 	.word	0x20000c50
 8003238:	20000c5c 	.word	0x20000c5c
 800323c:	20000c78 	.word	0x20000c78
 8003240:	e000ed04 	.word	0xe000ed04

08003244 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08a      	sub	sp, #40	; 0x28
 8003248:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800324e:	2300      	movs	r3, #0
 8003250:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003252:	463a      	mov	r2, r7
 8003254:	1d39      	adds	r1, r7, #4
 8003256:	f107 0308 	add.w	r3, r7, #8
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff f80a 	bl	8002274 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003260:	6839      	ldr	r1, [r7, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	9202      	str	r2, [sp, #8]
 8003268:	9301      	str	r3, [sp, #4]
 800326a:	2300      	movs	r3, #0
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	2300      	movs	r3, #0
 8003270:	460a      	mov	r2, r1
 8003272:	4921      	ldr	r1, [pc, #132]	; (80032f8 <vTaskStartScheduler+0xb4>)
 8003274:	4821      	ldr	r0, [pc, #132]	; (80032fc <vTaskStartScheduler+0xb8>)
 8003276:	f7ff fdd1 	bl	8002e1c <xTaskCreateStatic>
 800327a:	4603      	mov	r3, r0
 800327c:	4a20      	ldr	r2, [pc, #128]	; (8003300 <vTaskStartScheduler+0xbc>)
 800327e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003280:	4b1f      	ldr	r3, [pc, #124]	; (8003300 <vTaskStartScheduler+0xbc>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003288:	2301      	movs	r3, #1
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	e001      	b.n	8003292 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d102      	bne.n	800329e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003298:	f000 fcfc 	bl	8003c94 <xTimerCreateTimerTask>
 800329c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d116      	bne.n	80032d2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	613b      	str	r3, [r7, #16]
}
 80032b6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80032b8:	4b12      	ldr	r3, [pc, #72]	; (8003304 <vTaskStartScheduler+0xc0>)
 80032ba:	f04f 32ff 	mov.w	r2, #4294967295
 80032be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80032c0:	4b11      	ldr	r3, [pc, #68]	; (8003308 <vTaskStartScheduler+0xc4>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032c6:	4b11      	ldr	r3, [pc, #68]	; (800330c <vTaskStartScheduler+0xc8>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80032cc:	f001 f8b8 	bl	8004440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80032d0:	e00e      	b.n	80032f0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d10a      	bne.n	80032f0 <vTaskStartScheduler+0xac>
	__asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	60fb      	str	r3, [r7, #12]
}
 80032ec:	bf00      	nop
 80032ee:	e7fe      	b.n	80032ee <vTaskStartScheduler+0xaa>
}
 80032f0:	bf00      	nop
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	08004c40 	.word	0x08004c40
 80032fc:	08003929 	.word	0x08003929
 8003300:	20000c74 	.word	0x20000c74
 8003304:	20000c70 	.word	0x20000c70
 8003308:	20000c5c 	.word	0x20000c5c
 800330c:	20000c54 	.word	0x20000c54

08003310 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <vTaskSuspendAll+0x18>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3301      	adds	r3, #1
 800331a:	4a03      	ldr	r2, [pc, #12]	; (8003328 <vTaskSuspendAll+0x18>)
 800331c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800331e:	bf00      	nop
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	20000c78 	.word	0x20000c78

0800332c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800333a:	4b42      	ldr	r3, [pc, #264]	; (8003444 <xTaskResumeAll+0x118>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10a      	bne.n	8003358 <xTaskResumeAll+0x2c>
	__asm volatile
 8003342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003346:	f383 8811 	msr	BASEPRI, r3
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	603b      	str	r3, [r7, #0]
}
 8003354:	bf00      	nop
 8003356:	e7fe      	b.n	8003356 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003358:	f001 f914 	bl	8004584 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800335c:	4b39      	ldr	r3, [pc, #228]	; (8003444 <xTaskResumeAll+0x118>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3b01      	subs	r3, #1
 8003362:	4a38      	ldr	r2, [pc, #224]	; (8003444 <xTaskResumeAll+0x118>)
 8003364:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003366:	4b37      	ldr	r3, [pc, #220]	; (8003444 <xTaskResumeAll+0x118>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d162      	bne.n	8003434 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800336e:	4b36      	ldr	r3, [pc, #216]	; (8003448 <xTaskResumeAll+0x11c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d05e      	beq.n	8003434 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003376:	e02f      	b.n	80033d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003378:	4b34      	ldr	r3, [pc, #208]	; (800344c <xTaskResumeAll+0x120>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3318      	adds	r3, #24
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff f833 	bl	80023f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3304      	adds	r3, #4
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff f82e 	bl	80023f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003398:	4b2d      	ldr	r3, [pc, #180]	; (8003450 <xTaskResumeAll+0x124>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d903      	bls.n	80033a8 <xTaskResumeAll+0x7c>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	4a2a      	ldr	r2, [pc, #168]	; (8003450 <xTaskResumeAll+0x124>)
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4a27      	ldr	r2, [pc, #156]	; (8003454 <xTaskResumeAll+0x128>)
 80033b6:	441a      	add	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f7fe ffb9 	bl	8002336 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c8:	4b23      	ldr	r3, [pc, #140]	; (8003458 <xTaskResumeAll+0x12c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d302      	bcc.n	80033d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80033d2:	4b22      	ldr	r3, [pc, #136]	; (800345c <xTaskResumeAll+0x130>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033d8:	4b1c      	ldr	r3, [pc, #112]	; (800344c <xTaskResumeAll+0x120>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1cb      	bne.n	8003378 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80033e6:	f000 fb55 	bl	8003a94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <xTaskResumeAll+0x134>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d010      	beq.n	8003418 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80033f6:	f000 f847 	bl	8003488 <xTaskIncrementTick>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003400:	4b16      	ldr	r3, [pc, #88]	; (800345c <xTaskResumeAll+0x130>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3b01      	subs	r3, #1
 800340a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f1      	bne.n	80033f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003412:	4b13      	ldr	r3, [pc, #76]	; (8003460 <xTaskResumeAll+0x134>)
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003418:	4b10      	ldr	r3, [pc, #64]	; (800345c <xTaskResumeAll+0x130>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d009      	beq.n	8003434 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003420:	2301      	movs	r3, #1
 8003422:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003424:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <xTaskResumeAll+0x138>)
 8003426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003434:	f001 f8d6 	bl	80045e4 <vPortExitCritical>

	return xAlreadyYielded;
 8003438:	68bb      	ldr	r3, [r7, #8]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000c78 	.word	0x20000c78
 8003448:	20000c50 	.word	0x20000c50
 800344c:	20000c10 	.word	0x20000c10
 8003450:	20000c58 	.word	0x20000c58
 8003454:	20000780 	.word	0x20000780
 8003458:	2000077c 	.word	0x2000077c
 800345c:	20000c64 	.word	0x20000c64
 8003460:	20000c60 	.word	0x20000c60
 8003464:	e000ed04 	.word	0xe000ed04

08003468 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <xTaskGetTickCount+0x1c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003474:	687b      	ldr	r3, [r7, #4]
}
 8003476:	4618      	mov	r0, r3
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000c54 	.word	0x20000c54

08003488 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003492:	4b4f      	ldr	r3, [pc, #316]	; (80035d0 <xTaskIncrementTick+0x148>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f040 808f 	bne.w	80035ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800349c:	4b4d      	ldr	r3, [pc, #308]	; (80035d4 <xTaskIncrementTick+0x14c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3301      	adds	r3, #1
 80034a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80034a4:	4a4b      	ldr	r2, [pc, #300]	; (80035d4 <xTaskIncrementTick+0x14c>)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d120      	bne.n	80034f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80034b0:	4b49      	ldr	r3, [pc, #292]	; (80035d8 <xTaskIncrementTick+0x150>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	603b      	str	r3, [r7, #0]
}
 80034cc:	bf00      	nop
 80034ce:	e7fe      	b.n	80034ce <xTaskIncrementTick+0x46>
 80034d0:	4b41      	ldr	r3, [pc, #260]	; (80035d8 <xTaskIncrementTick+0x150>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	4b41      	ldr	r3, [pc, #260]	; (80035dc <xTaskIncrementTick+0x154>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a3f      	ldr	r2, [pc, #252]	; (80035d8 <xTaskIncrementTick+0x150>)
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	4a3f      	ldr	r2, [pc, #252]	; (80035dc <xTaskIncrementTick+0x154>)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	4b3e      	ldr	r3, [pc, #248]	; (80035e0 <xTaskIncrementTick+0x158>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	4a3d      	ldr	r2, [pc, #244]	; (80035e0 <xTaskIncrementTick+0x158>)
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	f000 fad1 	bl	8003a94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034f2:	4b3c      	ldr	r3, [pc, #240]	; (80035e4 <xTaskIncrementTick+0x15c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d349      	bcc.n	8003590 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034fc:	4b36      	ldr	r3, [pc, #216]	; (80035d8 <xTaskIncrementTick+0x150>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d104      	bne.n	8003510 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003506:	4b37      	ldr	r3, [pc, #220]	; (80035e4 <xTaskIncrementTick+0x15c>)
 8003508:	f04f 32ff 	mov.w	r2, #4294967295
 800350c:	601a      	str	r2, [r3, #0]
					break;
 800350e:	e03f      	b.n	8003590 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003510:	4b31      	ldr	r3, [pc, #196]	; (80035d8 <xTaskIncrementTick+0x150>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	429a      	cmp	r2, r3
 8003526:	d203      	bcs.n	8003530 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003528:	4a2e      	ldr	r2, [pc, #184]	; (80035e4 <xTaskIncrementTick+0x15c>)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800352e:	e02f      	b.n	8003590 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	3304      	adds	r3, #4
 8003534:	4618      	mov	r0, r3
 8003536:	f7fe ff5b 	bl	80023f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353e:	2b00      	cmp	r3, #0
 8003540:	d004      	beq.n	800354c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	3318      	adds	r3, #24
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe ff52 	bl	80023f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003550:	4b25      	ldr	r3, [pc, #148]	; (80035e8 <xTaskIncrementTick+0x160>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d903      	bls.n	8003560 <xTaskIncrementTick+0xd8>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	4a22      	ldr	r2, [pc, #136]	; (80035e8 <xTaskIncrementTick+0x160>)
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4a1f      	ldr	r2, [pc, #124]	; (80035ec <xTaskIncrementTick+0x164>)
 800356e:	441a      	add	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	3304      	adds	r3, #4
 8003574:	4619      	mov	r1, r3
 8003576:	4610      	mov	r0, r2
 8003578:	f7fe fedd 	bl	8002336 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003580:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <xTaskIncrementTick+0x168>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	429a      	cmp	r2, r3
 8003588:	d3b8      	bcc.n	80034fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800358a:	2301      	movs	r3, #1
 800358c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800358e:	e7b5      	b.n	80034fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003590:	4b17      	ldr	r3, [pc, #92]	; (80035f0 <xTaskIncrementTick+0x168>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003596:	4915      	ldr	r1, [pc, #84]	; (80035ec <xTaskIncrementTick+0x164>)
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d901      	bls.n	80035ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80035a8:	2301      	movs	r3, #1
 80035aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80035ac:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <xTaskIncrementTick+0x16c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d007      	beq.n	80035c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80035b4:	2301      	movs	r3, #1
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	e004      	b.n	80035c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80035ba:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <xTaskIncrementTick+0x170>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3301      	adds	r3, #1
 80035c0:	4a0d      	ldr	r2, [pc, #52]	; (80035f8 <xTaskIncrementTick+0x170>)
 80035c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80035c4:	697b      	ldr	r3, [r7, #20]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000c78 	.word	0x20000c78
 80035d4:	20000c54 	.word	0x20000c54
 80035d8:	20000c08 	.word	0x20000c08
 80035dc:	20000c0c 	.word	0x20000c0c
 80035e0:	20000c68 	.word	0x20000c68
 80035e4:	20000c70 	.word	0x20000c70
 80035e8:	20000c58 	.word	0x20000c58
 80035ec:	20000780 	.word	0x20000780
 80035f0:	2000077c 	.word	0x2000077c
 80035f4:	20000c64 	.word	0x20000c64
 80035f8:	20000c60 	.word	0x20000c60

080035fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003602:	4b28      	ldr	r3, [pc, #160]	; (80036a4 <vTaskSwitchContext+0xa8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800360a:	4b27      	ldr	r3, [pc, #156]	; (80036a8 <vTaskSwitchContext+0xac>)
 800360c:	2201      	movs	r2, #1
 800360e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003610:	e041      	b.n	8003696 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003612:	4b25      	ldr	r3, [pc, #148]	; (80036a8 <vTaskSwitchContext+0xac>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003618:	4b24      	ldr	r3, [pc, #144]	; (80036ac <vTaskSwitchContext+0xb0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	e010      	b.n	8003642 <vTaskSwitchContext+0x46>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10a      	bne.n	800363c <vTaskSwitchContext+0x40>
	__asm volatile
 8003626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362a:	f383 8811 	msr	BASEPRI, r3
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	607b      	str	r3, [r7, #4]
}
 8003638:	bf00      	nop
 800363a:	e7fe      	b.n	800363a <vTaskSwitchContext+0x3e>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	3b01      	subs	r3, #1
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	491b      	ldr	r1, [pc, #108]	; (80036b0 <vTaskSwitchContext+0xb4>)
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0e4      	beq.n	8003620 <vTaskSwitchContext+0x24>
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4a13      	ldr	r2, [pc, #76]	; (80036b0 <vTaskSwitchContext+0xb4>)
 8003662:	4413      	add	r3, r2
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	605a      	str	r2, [r3, #4]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	3308      	adds	r3, #8
 8003678:	429a      	cmp	r2, r3
 800367a:	d104      	bne.n	8003686 <vTaskSwitchContext+0x8a>
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	605a      	str	r2, [r3, #4]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4a09      	ldr	r2, [pc, #36]	; (80036b4 <vTaskSwitchContext+0xb8>)
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	4a06      	ldr	r2, [pc, #24]	; (80036ac <vTaskSwitchContext+0xb0>)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6013      	str	r3, [r2, #0]
}
 8003696:	bf00      	nop
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20000c78 	.word	0x20000c78
 80036a8:	20000c64 	.word	0x20000c64
 80036ac:	20000c58 	.word	0x20000c58
 80036b0:	20000780 	.word	0x20000780
 80036b4:	2000077c 	.word	0x2000077c

080036b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10a      	bne.n	80036de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80036c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036cc:	f383 8811 	msr	BASEPRI, r3
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	60fb      	str	r3, [r7, #12]
}
 80036da:	bf00      	nop
 80036dc:	e7fe      	b.n	80036dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036de:	4b07      	ldr	r3, [pc, #28]	; (80036fc <vTaskPlaceOnEventList+0x44>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3318      	adds	r3, #24
 80036e4:	4619      	mov	r1, r3
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fe fe49 	bl	800237e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036ec:	2101      	movs	r1, #1
 80036ee:	6838      	ldr	r0, [r7, #0]
 80036f0:	f000 fa7c 	bl	8003bec <prvAddCurrentTaskToDelayedList>
}
 80036f4:	bf00      	nop
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	2000077c 	.word	0x2000077c

08003700 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	617b      	str	r3, [r7, #20]
}
 8003724:	bf00      	nop
 8003726:	e7fe      	b.n	8003726 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003728:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <vTaskPlaceOnEventListRestricted+0x54>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3318      	adds	r3, #24
 800372e:	4619      	mov	r1, r3
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f7fe fe00 	bl	8002336 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800373c:	f04f 33ff 	mov.w	r3, #4294967295
 8003740:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	68b8      	ldr	r0, [r7, #8]
 8003746:	f000 fa51 	bl	8003bec <prvAddCurrentTaskToDelayedList>
	}
 800374a:	bf00      	nop
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	2000077c 	.word	0x2000077c

08003758 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10a      	bne.n	8003784 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	60fb      	str	r3, [r7, #12]
}
 8003780:	bf00      	nop
 8003782:	e7fe      	b.n	8003782 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	3318      	adds	r3, #24
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe fe31 	bl	80023f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800378e:	4b1e      	ldr	r3, [pc, #120]	; (8003808 <xTaskRemoveFromEventList+0xb0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d11d      	bne.n	80037d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	3304      	adds	r3, #4
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe fe28 	bl	80023f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a4:	4b19      	ldr	r3, [pc, #100]	; (800380c <xTaskRemoveFromEventList+0xb4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d903      	bls.n	80037b4 <xTaskRemoveFromEventList+0x5c>
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	4a16      	ldr	r2, [pc, #88]	; (800380c <xTaskRemoveFromEventList+0xb4>)
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4a13      	ldr	r2, [pc, #76]	; (8003810 <xTaskRemoveFromEventList+0xb8>)
 80037c2:	441a      	add	r2, r3
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4619      	mov	r1, r3
 80037ca:	4610      	mov	r0, r2
 80037cc:	f7fe fdb3 	bl	8002336 <vListInsertEnd>
 80037d0:	e005      	b.n	80037de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	3318      	adds	r3, #24
 80037d6:	4619      	mov	r1, r3
 80037d8:	480e      	ldr	r0, [pc, #56]	; (8003814 <xTaskRemoveFromEventList+0xbc>)
 80037da:	f7fe fdac 	bl	8002336 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e2:	4b0d      	ldr	r3, [pc, #52]	; (8003818 <xTaskRemoveFromEventList+0xc0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d905      	bls.n	80037f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80037ec:	2301      	movs	r3, #1
 80037ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80037f0:	4b0a      	ldr	r3, [pc, #40]	; (800381c <xTaskRemoveFromEventList+0xc4>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	e001      	b.n	80037fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80037fc:	697b      	ldr	r3, [r7, #20]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000c78 	.word	0x20000c78
 800380c:	20000c58 	.word	0x20000c58
 8003810:	20000780 	.word	0x20000780
 8003814:	20000c10 	.word	0x20000c10
 8003818:	2000077c 	.word	0x2000077c
 800381c:	20000c64 	.word	0x20000c64

08003820 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <vTaskInternalSetTimeOutState+0x24>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <vTaskInternalSetTimeOutState+0x28>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	605a      	str	r2, [r3, #4]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	20000c68 	.word	0x20000c68
 8003848:	20000c54 	.word	0x20000c54

0800384c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	613b      	str	r3, [r7, #16]
}
 800386e:	bf00      	nop
 8003870:	e7fe      	b.n	8003870 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10a      	bne.n	800388e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	60fb      	str	r3, [r7, #12]
}
 800388a:	bf00      	nop
 800388c:	e7fe      	b.n	800388c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800388e:	f000 fe79 	bl	8004584 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003892:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <xTaskCheckForTimeOut+0xbc>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038aa:	d102      	bne.n	80038b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	e023      	b.n	80038fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	4b15      	ldr	r3, [pc, #84]	; (800390c <xTaskCheckForTimeOut+0xc0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d007      	beq.n	80038ce <xTaskCheckForTimeOut+0x82>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d302      	bcc.n	80038ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80038c8:	2301      	movs	r3, #1
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	e015      	b.n	80038fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d20b      	bcs.n	80038f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	1ad2      	subs	r2, r2, r3
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ff9b 	bl	8003820 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	e004      	b.n	80038fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80038f6:	2301      	movs	r3, #1
 80038f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80038fa:	f000 fe73 	bl	80045e4 <vPortExitCritical>

	return xReturn;
 80038fe:	69fb      	ldr	r3, [r7, #28]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3720      	adds	r7, #32
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20000c54 	.word	0x20000c54
 800390c:	20000c68 	.word	0x20000c68

08003910 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003914:	4b03      	ldr	r3, [pc, #12]	; (8003924 <vTaskMissedYield+0x14>)
 8003916:	2201      	movs	r2, #1
 8003918:	601a      	str	r2, [r3, #0]
}
 800391a:	bf00      	nop
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	20000c64 	.word	0x20000c64

08003928 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003930:	f000 f852 	bl	80039d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003934:	4b06      	ldr	r3, [pc, #24]	; (8003950 <prvIdleTask+0x28>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d9f9      	bls.n	8003930 <prvIdleTask+0x8>
			{
				taskYIELD();
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <prvIdleTask+0x2c>)
 800393e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800394c:	e7f0      	b.n	8003930 <prvIdleTask+0x8>
 800394e:	bf00      	nop
 8003950:	20000780 	.word	0x20000780
 8003954:	e000ed04 	.word	0xe000ed04

08003958 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800395e:	2300      	movs	r3, #0
 8003960:	607b      	str	r3, [r7, #4]
 8003962:	e00c      	b.n	800397e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4a12      	ldr	r2, [pc, #72]	; (80039b8 <prvInitialiseTaskLists+0x60>)
 8003970:	4413      	add	r3, r2
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe fcb2 	bl	80022dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3301      	adds	r3, #1
 800397c:	607b      	str	r3, [r7, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b37      	cmp	r3, #55	; 0x37
 8003982:	d9ef      	bls.n	8003964 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003984:	480d      	ldr	r0, [pc, #52]	; (80039bc <prvInitialiseTaskLists+0x64>)
 8003986:	f7fe fca9 	bl	80022dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800398a:	480d      	ldr	r0, [pc, #52]	; (80039c0 <prvInitialiseTaskLists+0x68>)
 800398c:	f7fe fca6 	bl	80022dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003990:	480c      	ldr	r0, [pc, #48]	; (80039c4 <prvInitialiseTaskLists+0x6c>)
 8003992:	f7fe fca3 	bl	80022dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003996:	480c      	ldr	r0, [pc, #48]	; (80039c8 <prvInitialiseTaskLists+0x70>)
 8003998:	f7fe fca0 	bl	80022dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800399c:	480b      	ldr	r0, [pc, #44]	; (80039cc <prvInitialiseTaskLists+0x74>)
 800399e:	f7fe fc9d 	bl	80022dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039a2:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <prvInitialiseTaskLists+0x78>)
 80039a4:	4a05      	ldr	r2, [pc, #20]	; (80039bc <prvInitialiseTaskLists+0x64>)
 80039a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039a8:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <prvInitialiseTaskLists+0x7c>)
 80039aa:	4a05      	ldr	r2, [pc, #20]	; (80039c0 <prvInitialiseTaskLists+0x68>)
 80039ac:	601a      	str	r2, [r3, #0]
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000780 	.word	0x20000780
 80039bc:	20000be0 	.word	0x20000be0
 80039c0:	20000bf4 	.word	0x20000bf4
 80039c4:	20000c10 	.word	0x20000c10
 80039c8:	20000c24 	.word	0x20000c24
 80039cc:	20000c3c 	.word	0x20000c3c
 80039d0:	20000c08 	.word	0x20000c08
 80039d4:	20000c0c 	.word	0x20000c0c

080039d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039de:	e019      	b.n	8003a14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80039e0:	f000 fdd0 	bl	8004584 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e4:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <prvCheckTasksWaitingTermination+0x50>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3304      	adds	r3, #4
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fe fcfd 	bl	80023f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80039f6:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <prvCheckTasksWaitingTermination+0x54>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	4a0b      	ldr	r2, [pc, #44]	; (8003a2c <prvCheckTasksWaitingTermination+0x54>)
 80039fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <prvCheckTasksWaitingTermination+0x58>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <prvCheckTasksWaitingTermination+0x58>)
 8003a08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a0a:	f000 fdeb 	bl	80045e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f810 	bl	8003a34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a14:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <prvCheckTasksWaitingTermination+0x58>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e1      	bne.n	80039e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a1c:	bf00      	nop
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000c24 	.word	0x20000c24
 8003a2c:	20000c50 	.word	0x20000c50
 8003a30:	20000c38 	.word	0x20000c38

08003a34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d108      	bne.n	8003a58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 ff88 	bl	8004960 <vPortFree>
				vPortFree( pxTCB );
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 ff85 	bl	8004960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a56:	e018      	b.n	8003a8a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d103      	bne.n	8003a6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 ff7c 	bl	8004960 <vPortFree>
	}
 8003a68:	e00f      	b.n	8003a8a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d00a      	beq.n	8003a8a <prvDeleteTCB+0x56>
	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	60fb      	str	r3, [r7, #12]
}
 8003a86:	bf00      	nop
 8003a88:	e7fe      	b.n	8003a88 <prvDeleteTCB+0x54>
	}
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a9a:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <prvResetNextTaskUnblockTime+0x38>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d104      	bne.n	8003aae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <prvResetNextTaskUnblockTime+0x3c>)
 8003aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003aac:	e008      	b.n	8003ac0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aae:	4b07      	ldr	r3, [pc, #28]	; (8003acc <prvResetNextTaskUnblockTime+0x38>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4a04      	ldr	r2, [pc, #16]	; (8003ad0 <prvResetNextTaskUnblockTime+0x3c>)
 8003abe:	6013      	str	r3, [r2, #0]
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	20000c08 	.word	0x20000c08
 8003ad0:	20000c70 	.word	0x20000c70

08003ad4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ada:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <xTaskGetSchedulerState+0x34>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d102      	bne.n	8003ae8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	607b      	str	r3, [r7, #4]
 8003ae6:	e008      	b.n	8003afa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ae8:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <xTaskGetSchedulerState+0x38>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d102      	bne.n	8003af6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003af0:	2302      	movs	r3, #2
 8003af2:	607b      	str	r3, [r7, #4]
 8003af4:	e001      	b.n	8003afa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003af6:	2300      	movs	r3, #0
 8003af8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003afa:	687b      	ldr	r3, [r7, #4]
	}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	20000c5c 	.word	0x20000c5c
 8003b0c:	20000c78 	.word	0x20000c78

08003b10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d056      	beq.n	8003bd4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003b26:	4b2e      	ldr	r3, [pc, #184]	; (8003be0 <xTaskPriorityDisinherit+0xd0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d00a      	beq.n	8003b46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	60fb      	str	r3, [r7, #12]
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	60bb      	str	r3, [r7, #8]
}
 8003b60:	bf00      	nop
 8003b62:	e7fe      	b.n	8003b62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b68:	1e5a      	subs	r2, r3, #1
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d02c      	beq.n	8003bd4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d128      	bne.n	8003bd4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	3304      	adds	r3, #4
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe fc32 	bl	80023f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <xTaskPriorityDisinherit+0xd4>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d903      	bls.n	8003bb4 <xTaskPriorityDisinherit+0xa4>
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	4a0c      	ldr	r2, [pc, #48]	; (8003be4 <xTaskPriorityDisinherit+0xd4>)
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4a09      	ldr	r2, [pc, #36]	; (8003be8 <xTaskPriorityDisinherit+0xd8>)
 8003bc2:	441a      	add	r2, r3
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	f7fe fbb3 	bl	8002336 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003bd4:	697b      	ldr	r3, [r7, #20]
	}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	2000077c 	.word	0x2000077c
 8003be4:	20000c58 	.word	0x20000c58
 8003be8:	20000780 	.word	0x20000780

08003bec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003bf6:	4b21      	ldr	r3, [pc, #132]	; (8003c7c <prvAddCurrentTaskToDelayedList+0x90>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bfc:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3304      	adds	r3, #4
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe fbf4 	bl	80023f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0e:	d10a      	bne.n	8003c26 <prvAddCurrentTaskToDelayedList+0x3a>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d007      	beq.n	8003c26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c16:	4b1a      	ldr	r3, [pc, #104]	; (8003c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4819      	ldr	r0, [pc, #100]	; (8003c84 <prvAddCurrentTaskToDelayedList+0x98>)
 8003c20:	f7fe fb89 	bl	8002336 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c24:	e026      	b.n	8003c74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c2e:	4b14      	ldr	r3, [pc, #80]	; (8003c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d209      	bcs.n	8003c52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c3e:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3304      	adds	r3, #4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	f7fe fb97 	bl	800237e <vListInsert>
}
 8003c50:	e010      	b.n	8003c74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c52:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4610      	mov	r0, r2
 8003c60:	f7fe fb8d 	bl	800237e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c64:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d202      	bcs.n	8003c74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003c6e:	4a08      	ldr	r2, [pc, #32]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	6013      	str	r3, [r2, #0]
}
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000c54 	.word	0x20000c54
 8003c80:	2000077c 	.word	0x2000077c
 8003c84:	20000c3c 	.word	0x20000c3c
 8003c88:	20000c0c 	.word	0x20000c0c
 8003c8c:	20000c08 	.word	0x20000c08
 8003c90:	20000c70 	.word	0x20000c70

08003c94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08a      	sub	sp, #40	; 0x28
 8003c98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003c9e:	f000 fb07 	bl	80042b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ca2:	4b1c      	ldr	r3, [pc, #112]	; (8003d14 <xTimerCreateTimerTask+0x80>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d021      	beq.n	8003cee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003cb2:	1d3a      	adds	r2, r7, #4
 8003cb4:	f107 0108 	add.w	r1, r7, #8
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe faf3 	bl	80022a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	9202      	str	r2, [sp, #8]
 8003cca:	9301      	str	r3, [sp, #4]
 8003ccc:	2302      	movs	r3, #2
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	460a      	mov	r2, r1
 8003cd4:	4910      	ldr	r1, [pc, #64]	; (8003d18 <xTimerCreateTimerTask+0x84>)
 8003cd6:	4811      	ldr	r0, [pc, #68]	; (8003d1c <xTimerCreateTimerTask+0x88>)
 8003cd8:	f7ff f8a0 	bl	8002e1c <xTaskCreateStatic>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	4a10      	ldr	r2, [pc, #64]	; (8003d20 <xTimerCreateTimerTask+0x8c>)
 8003ce0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003ce2:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <xTimerCreateTimerTask+0x8c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003cea:	2301      	movs	r3, #1
 8003cec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10a      	bne.n	8003d0a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	613b      	str	r3, [r7, #16]
}
 8003d06:	bf00      	nop
 8003d08:	e7fe      	b.n	8003d08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003d0a:	697b      	ldr	r3, [r7, #20]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20000cac 	.word	0x20000cac
 8003d18:	08004c48 	.word	0x08004c48
 8003d1c:	08003e59 	.word	0x08003e59
 8003d20:	20000cb0 	.word	0x20000cb0

08003d24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08a      	sub	sp, #40	; 0x28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10a      	bne.n	8003d52 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	623b      	str	r3, [r7, #32]
}
 8003d4e:	bf00      	nop
 8003d50:	e7fe      	b.n	8003d50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003d52:	4b1a      	ldr	r3, [pc, #104]	; (8003dbc <xTimerGenericCommand+0x98>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d02a      	beq.n	8003db0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b05      	cmp	r3, #5
 8003d6a:	dc18      	bgt.n	8003d9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d6c:	f7ff feb2 	bl	8003ad4 <xTaskGetSchedulerState>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d109      	bne.n	8003d8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d76:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <xTimerGenericCommand+0x98>)
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	f107 0110 	add.w	r1, r7, #16
 8003d7e:	2300      	movs	r3, #0
 8003d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d82:	f7fe fc63 	bl	800264c <xQueueGenericSend>
 8003d86:	6278      	str	r0, [r7, #36]	; 0x24
 8003d88:	e012      	b.n	8003db0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d8a:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <xTimerGenericCommand+0x98>)
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	f107 0110 	add.w	r1, r7, #16
 8003d92:	2300      	movs	r3, #0
 8003d94:	2200      	movs	r2, #0
 8003d96:	f7fe fc59 	bl	800264c <xQueueGenericSend>
 8003d9a:	6278      	str	r0, [r7, #36]	; 0x24
 8003d9c:	e008      	b.n	8003db0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d9e:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <xTimerGenericCommand+0x98>)
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	f107 0110 	add.w	r1, r7, #16
 8003da6:	2300      	movs	r3, #0
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	f7fe fd4d 	bl	8002848 <xQueueGenericSendFromISR>
 8003dae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3728      	adds	r7, #40	; 0x28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000cac 	.word	0x20000cac

08003dc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dca:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <prvProcessExpiredTimer+0x94>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fe fb09 	bl	80023f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d022      	beq.n	8003e32 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	699a      	ldr	r2, [r3, #24]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	18d1      	adds	r1, r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	6978      	ldr	r0, [r7, #20]
 8003dfa:	f000 f8d1 	bl	8003fa0 <prvInsertTimerInActiveList>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01f      	beq.n	8003e44 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e04:	2300      	movs	r3, #0
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	6978      	ldr	r0, [r7, #20]
 8003e10:	f7ff ff88 	bl	8003d24 <xTimerGenericCommand>
 8003e14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d113      	bne.n	8003e44 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	60fb      	str	r3, [r7, #12]
}
 8003e2e:	bf00      	nop
 8003e30:	e7fe      	b.n	8003e30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e38:	f023 0301 	bic.w	r3, r3, #1
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	6978      	ldr	r0, [r7, #20]
 8003e4a:	4798      	blx	r3
}
 8003e4c:	bf00      	nop
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20000ca4 	.word	0x20000ca4

08003e58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e60:	f107 0308 	add.w	r3, r7, #8
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 f857 	bl	8003f18 <prvGetNextExpireTime>
 8003e6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4619      	mov	r1, r3
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 f803 	bl	8003e7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003e76:	f000 f8d5 	bl	8004024 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e7a:	e7f1      	b.n	8003e60 <prvTimerTask+0x8>

08003e7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003e86:	f7ff fa43 	bl	8003310 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e8a:	f107 0308 	add.w	r3, r7, #8
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 f866 	bl	8003f60 <prvSampleTimeNow>
 8003e94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d130      	bne.n	8003efe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10a      	bne.n	8003eb8 <prvProcessTimerOrBlockTask+0x3c>
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d806      	bhi.n	8003eb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003eaa:	f7ff fa3f 	bl	800332c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003eae:	68f9      	ldr	r1, [r7, #12]
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff ff85 	bl	8003dc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003eb6:	e024      	b.n	8003f02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d008      	beq.n	8003ed0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ebe:	4b13      	ldr	r3, [pc, #76]	; (8003f0c <prvProcessTimerOrBlockTask+0x90>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <prvProcessTimerOrBlockTask+0x50>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <prvProcessTimerOrBlockTask+0x52>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <prvProcessTimerOrBlockTask+0x94>)
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	4619      	mov	r1, r3
 8003ede:	f7fe ff69 	bl	8002db4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003ee2:	f7ff fa23 	bl	800332c <xTaskResumeAll>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003eec:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <prvProcessTimerOrBlockTask+0x98>)
 8003eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	f3bf 8f6f 	isb	sy
}
 8003efc:	e001      	b.n	8003f02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003efe:	f7ff fa15 	bl	800332c <xTaskResumeAll>
}
 8003f02:	bf00      	nop
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000ca8 	.word	0x20000ca8
 8003f10:	20000cac 	.word	0x20000cac
 8003f14:	e000ed04 	.word	0xe000ed04

08003f18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f20:	4b0e      	ldr	r3, [pc, #56]	; (8003f5c <prvGetNextExpireTime+0x44>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <prvGetNextExpireTime+0x16>
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	e000      	b.n	8003f30 <prvGetNextExpireTime+0x18>
 8003f2e:	2200      	movs	r2, #0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d105      	bne.n	8003f48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f3c:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <prvGetNextExpireTime+0x44>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	e001      	b.n	8003f4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000ca4 	.word	0x20000ca4

08003f60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003f68:	f7ff fa7e 	bl	8003468 <xTaskGetTickCount>
 8003f6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <prvSampleTimeNow+0x3c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d205      	bcs.n	8003f84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003f78:	f000 f936 	bl	80041e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e002      	b.n	8003f8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003f8a:	4a04      	ldr	r2, [pc, #16]	; (8003f9c <prvSampleTimeNow+0x3c>)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003f90:	68fb      	ldr	r3, [r7, #12]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000cb4 	.word	0x20000cb4

08003fa0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d812      	bhi.n	8003fec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	1ad2      	subs	r2, r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d302      	bcc.n	8003fda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	e01b      	b.n	8004012 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003fda:	4b10      	ldr	r3, [pc, #64]	; (800401c <prvInsertTimerInActiveList+0x7c>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	f7fe f9ca 	bl	800237e <vListInsert>
 8003fea:	e012      	b.n	8004012 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d206      	bcs.n	8004002 <prvInsertTimerInActiveList+0x62>
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d302      	bcc.n	8004002 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	e007      	b.n	8004012 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004002:	4b07      	ldr	r3, [pc, #28]	; (8004020 <prvInsertTimerInActiveList+0x80>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3304      	adds	r3, #4
 800400a:	4619      	mov	r1, r3
 800400c:	4610      	mov	r0, r2
 800400e:	f7fe f9b6 	bl	800237e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004012:	697b      	ldr	r3, [r7, #20]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20000ca8 	.word	0x20000ca8
 8004020:	20000ca4 	.word	0x20000ca4

08004024 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08e      	sub	sp, #56	; 0x38
 8004028:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800402a:	e0ca      	b.n	80041c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	da18      	bge.n	8004064 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004032:	1d3b      	adds	r3, r7, #4
 8004034:	3304      	adds	r3, #4
 8004036:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	61fb      	str	r3, [r7, #28]
}
 8004050:	bf00      	nop
 8004052:	e7fe      	b.n	8004052 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800405a:	6850      	ldr	r0, [r2, #4]
 800405c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800405e:	6892      	ldr	r2, [r2, #8]
 8004060:	4611      	mov	r1, r2
 8004062:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f2c0 80ab 	blt.w	80041c2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d004      	beq.n	8004082 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407a:	3304      	adds	r3, #4
 800407c:	4618      	mov	r0, r3
 800407e:	f7fe f9b7 	bl	80023f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004082:	463b      	mov	r3, r7
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff ff6b 	bl	8003f60 <prvSampleTimeNow>
 800408a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b09      	cmp	r3, #9
 8004090:	f200 8096 	bhi.w	80041c0 <prvProcessReceivedCommands+0x19c>
 8004094:	a201      	add	r2, pc, #4	; (adr r2, 800409c <prvProcessReceivedCommands+0x78>)
 8004096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409a:	bf00      	nop
 800409c:	080040c5 	.word	0x080040c5
 80040a0:	080040c5 	.word	0x080040c5
 80040a4:	080040c5 	.word	0x080040c5
 80040a8:	08004139 	.word	0x08004139
 80040ac:	0800414d 	.word	0x0800414d
 80040b0:	08004197 	.word	0x08004197
 80040b4:	080040c5 	.word	0x080040c5
 80040b8:	080040c5 	.word	0x080040c5
 80040bc:	08004139 	.word	0x08004139
 80040c0:	0800414d 	.word	0x0800414d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	18d1      	adds	r1, r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040e4:	f7ff ff5c 	bl	8003fa0 <prvInsertTimerInActiveList>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d069      	beq.n	80041c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d05e      	beq.n	80041c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	441a      	add	r2, r3
 800410c:	2300      	movs	r3, #0
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	2300      	movs	r3, #0
 8004112:	2100      	movs	r1, #0
 8004114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004116:	f7ff fe05 	bl	8003d24 <xTimerGenericCommand>
 800411a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d14f      	bne.n	80041c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	61bb      	str	r3, [r7, #24]
}
 8004134:	bf00      	nop
 8004136:	e7fe      	b.n	8004136 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	b2da      	uxtb	r2, r3
 8004144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004146:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800414a:	e03a      	b.n	80041c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	b2da      	uxtb	r2, r3
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004162:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	617b      	str	r3, [r7, #20]
}
 800417e:	bf00      	nop
 8004180:	e7fe      	b.n	8004180 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	18d1      	adds	r1, r2, r3
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004190:	f7ff ff06 	bl	8003fa0 <prvInsertTimerInActiveList>
					break;
 8004194:	e015      	b.n	80041c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d103      	bne.n	80041ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80041a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041a6:	f000 fbdb 	bl	8004960 <vPortFree>
 80041aa:	e00a      	b.n	80041c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041b2:	f023 0301 	bic.w	r3, r3, #1
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80041be:	e000      	b.n	80041c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80041c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041c2:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <prvProcessReceivedCommands+0x1c0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	1d39      	adds	r1, r7, #4
 80041c8:	2200      	movs	r2, #0
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe fbd8 	bl	8002980 <xQueueReceive>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f47f af2a 	bne.w	800402c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
 80041dc:	3730      	adds	r7, #48	; 0x30
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000cac 	.word	0x20000cac

080041e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041ee:	e048      	b.n	8004282 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041f0:	4b2d      	ldr	r3, [pc, #180]	; (80042a8 <prvSwitchTimerLists+0xc0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041fa:	4b2b      	ldr	r3, [pc, #172]	; (80042a8 <prvSwitchTimerLists+0xc0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3304      	adds	r3, #4
 8004208:	4618      	mov	r0, r3
 800420a:	f7fe f8f1 	bl	80023f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d02e      	beq.n	8004282 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4413      	add	r3, r2
 800422c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	429a      	cmp	r2, r3
 8004234:	d90e      	bls.n	8004254 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004242:	4b19      	ldr	r3, [pc, #100]	; (80042a8 <prvSwitchTimerLists+0xc0>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3304      	adds	r3, #4
 800424a:	4619      	mov	r1, r3
 800424c:	4610      	mov	r0, r2
 800424e:	f7fe f896 	bl	800237e <vListInsert>
 8004252:	e016      	b.n	8004282 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004254:	2300      	movs	r3, #0
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	2300      	movs	r3, #0
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	2100      	movs	r1, #0
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7ff fd60 	bl	8003d24 <xTimerGenericCommand>
 8004264:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	603b      	str	r3, [r7, #0]
}
 800427e:	bf00      	nop
 8004280:	e7fe      	b.n	8004280 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004282:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <prvSwitchTimerLists+0xc0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1b1      	bne.n	80041f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <prvSwitchTimerLists+0xc0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004292:	4b06      	ldr	r3, [pc, #24]	; (80042ac <prvSwitchTimerLists+0xc4>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a04      	ldr	r2, [pc, #16]	; (80042a8 <prvSwitchTimerLists+0xc0>)
 8004298:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800429a:	4a04      	ldr	r2, [pc, #16]	; (80042ac <prvSwitchTimerLists+0xc4>)
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	6013      	str	r3, [r2, #0]
}
 80042a0:	bf00      	nop
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	20000ca4 	.word	0x20000ca4
 80042ac:	20000ca8 	.word	0x20000ca8

080042b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80042b6:	f000 f965 	bl	8004584 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80042ba:	4b15      	ldr	r3, [pc, #84]	; (8004310 <prvCheckForValidListAndQueue+0x60>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d120      	bne.n	8004304 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80042c2:	4814      	ldr	r0, [pc, #80]	; (8004314 <prvCheckForValidListAndQueue+0x64>)
 80042c4:	f7fe f80a 	bl	80022dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80042c8:	4813      	ldr	r0, [pc, #76]	; (8004318 <prvCheckForValidListAndQueue+0x68>)
 80042ca:	f7fe f807 	bl	80022dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80042ce:	4b13      	ldr	r3, [pc, #76]	; (800431c <prvCheckForValidListAndQueue+0x6c>)
 80042d0:	4a10      	ldr	r2, [pc, #64]	; (8004314 <prvCheckForValidListAndQueue+0x64>)
 80042d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80042d4:	4b12      	ldr	r3, [pc, #72]	; (8004320 <prvCheckForValidListAndQueue+0x70>)
 80042d6:	4a10      	ldr	r2, [pc, #64]	; (8004318 <prvCheckForValidListAndQueue+0x68>)
 80042d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80042da:	2300      	movs	r3, #0
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	4b11      	ldr	r3, [pc, #68]	; (8004324 <prvCheckForValidListAndQueue+0x74>)
 80042e0:	4a11      	ldr	r2, [pc, #68]	; (8004328 <prvCheckForValidListAndQueue+0x78>)
 80042e2:	2110      	movs	r1, #16
 80042e4:	200a      	movs	r0, #10
 80042e6:	f7fe f915 	bl	8002514 <xQueueGenericCreateStatic>
 80042ea:	4603      	mov	r3, r0
 80042ec:	4a08      	ldr	r2, [pc, #32]	; (8004310 <prvCheckForValidListAndQueue+0x60>)
 80042ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80042f0:	4b07      	ldr	r3, [pc, #28]	; (8004310 <prvCheckForValidListAndQueue+0x60>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <prvCheckForValidListAndQueue+0x60>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	490b      	ldr	r1, [pc, #44]	; (800432c <prvCheckForValidListAndQueue+0x7c>)
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fe fd2e 	bl	8002d60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004304:	f000 f96e 	bl	80045e4 <vPortExitCritical>
}
 8004308:	bf00      	nop
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20000cac 	.word	0x20000cac
 8004314:	20000c7c 	.word	0x20000c7c
 8004318:	20000c90 	.word	0x20000c90
 800431c:	20000ca4 	.word	0x20000ca4
 8004320:	20000ca8 	.word	0x20000ca8
 8004324:	20000d58 	.word	0x20000d58
 8004328:	20000cb8 	.word	0x20000cb8
 800432c:	08004c50 	.word	0x08004c50

08004330 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3b04      	subs	r3, #4
 8004340:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004348:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3b04      	subs	r3, #4
 800434e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f023 0201 	bic.w	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	3b04      	subs	r3, #4
 800435e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004360:	4a0c      	ldr	r2, [pc, #48]	; (8004394 <pxPortInitialiseStack+0x64>)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3b14      	subs	r3, #20
 800436a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3b04      	subs	r3, #4
 8004376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f06f 0202 	mvn.w	r2, #2
 800437e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3b20      	subs	r3, #32
 8004384:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004386:	68fb      	ldr	r3, [r7, #12]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	08004399 	.word	0x08004399

08004398 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800439e:	2300      	movs	r3, #0
 80043a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043a2:	4b12      	ldr	r3, [pc, #72]	; (80043ec <prvTaskExitError+0x54>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043aa:	d00a      	beq.n	80043c2 <prvTaskExitError+0x2a>
	__asm volatile
 80043ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	60fb      	str	r3, [r7, #12]
}
 80043be:	bf00      	nop
 80043c0:	e7fe      	b.n	80043c0 <prvTaskExitError+0x28>
	__asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	60bb      	str	r3, [r7, #8]
}
 80043d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80043d6:	bf00      	nop
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0fc      	beq.n	80043d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80043de:	bf00      	nop
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	2000000c 	.word	0x2000000c

080043f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043f0:	4b07      	ldr	r3, [pc, #28]	; (8004410 <pxCurrentTCBConst2>)
 80043f2:	6819      	ldr	r1, [r3, #0]
 80043f4:	6808      	ldr	r0, [r1, #0]
 80043f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043fa:	f380 8809 	msr	PSP, r0
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f04f 0000 	mov.w	r0, #0
 8004406:	f380 8811 	msr	BASEPRI, r0
 800440a:	4770      	bx	lr
 800440c:	f3af 8000 	nop.w

08004410 <pxCurrentTCBConst2>:
 8004410:	2000077c 	.word	0x2000077c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004414:	bf00      	nop
 8004416:	bf00      	nop

08004418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004418:	4808      	ldr	r0, [pc, #32]	; (800443c <prvPortStartFirstTask+0x24>)
 800441a:	6800      	ldr	r0, [r0, #0]
 800441c:	6800      	ldr	r0, [r0, #0]
 800441e:	f380 8808 	msr	MSP, r0
 8004422:	f04f 0000 	mov.w	r0, #0
 8004426:	f380 8814 	msr	CONTROL, r0
 800442a:	b662      	cpsie	i
 800442c:	b661      	cpsie	f
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	df00      	svc	0
 8004438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800443a:	bf00      	nop
 800443c:	e000ed08 	.word	0xe000ed08

08004440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004446:	4b46      	ldr	r3, [pc, #280]	; (8004560 <xPortStartScheduler+0x120>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a46      	ldr	r2, [pc, #280]	; (8004564 <xPortStartScheduler+0x124>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d10a      	bne.n	8004466 <xPortStartScheduler+0x26>
	__asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	613b      	str	r3, [r7, #16]
}
 8004462:	bf00      	nop
 8004464:	e7fe      	b.n	8004464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004466:	4b3e      	ldr	r3, [pc, #248]	; (8004560 <xPortStartScheduler+0x120>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a3f      	ldr	r2, [pc, #252]	; (8004568 <xPortStartScheduler+0x128>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d10a      	bne.n	8004486 <xPortStartScheduler+0x46>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	60fb      	str	r3, [r7, #12]
}
 8004482:	bf00      	nop
 8004484:	e7fe      	b.n	8004484 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004486:	4b39      	ldr	r3, [pc, #228]	; (800456c <xPortStartScheduler+0x12c>)
 8004488:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	22ff      	movs	r2, #255	; 0xff
 8004496:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	4b31      	ldr	r3, [pc, #196]	; (8004570 <xPortStartScheduler+0x130>)
 80044ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044ae:	4b31      	ldr	r3, [pc, #196]	; (8004574 <xPortStartScheduler+0x134>)
 80044b0:	2207      	movs	r2, #7
 80044b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044b4:	e009      	b.n	80044ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80044b6:	4b2f      	ldr	r3, [pc, #188]	; (8004574 <xPortStartScheduler+0x134>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	4a2d      	ldr	r2, [pc, #180]	; (8004574 <xPortStartScheduler+0x134>)
 80044be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044ca:	78fb      	ldrb	r3, [r7, #3]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d2:	2b80      	cmp	r3, #128	; 0x80
 80044d4:	d0ef      	beq.n	80044b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044d6:	4b27      	ldr	r3, [pc, #156]	; (8004574 <xPortStartScheduler+0x134>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f1c3 0307 	rsb	r3, r3, #7
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d00a      	beq.n	80044f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	60bb      	str	r3, [r7, #8]
}
 80044f4:	bf00      	nop
 80044f6:	e7fe      	b.n	80044f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044f8:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <xPortStartScheduler+0x134>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	021b      	lsls	r3, r3, #8
 80044fe:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <xPortStartScheduler+0x134>)
 8004500:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004502:	4b1c      	ldr	r3, [pc, #112]	; (8004574 <xPortStartScheduler+0x134>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800450a:	4a1a      	ldr	r2, [pc, #104]	; (8004574 <xPortStartScheduler+0x134>)
 800450c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	b2da      	uxtb	r2, r3
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004516:	4b18      	ldr	r3, [pc, #96]	; (8004578 <xPortStartScheduler+0x138>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a17      	ldr	r2, [pc, #92]	; (8004578 <xPortStartScheduler+0x138>)
 800451c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004522:	4b15      	ldr	r3, [pc, #84]	; (8004578 <xPortStartScheduler+0x138>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a14      	ldr	r2, [pc, #80]	; (8004578 <xPortStartScheduler+0x138>)
 8004528:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800452c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800452e:	f000 f8dd 	bl	80046ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004532:	4b12      	ldr	r3, [pc, #72]	; (800457c <xPortStartScheduler+0x13c>)
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004538:	f000 f8fc 	bl	8004734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800453c:	4b10      	ldr	r3, [pc, #64]	; (8004580 <xPortStartScheduler+0x140>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a0f      	ldr	r2, [pc, #60]	; (8004580 <xPortStartScheduler+0x140>)
 8004542:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004546:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004548:	f7ff ff66 	bl	8004418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800454c:	f7ff f856 	bl	80035fc <vTaskSwitchContext>
	prvTaskExitError();
 8004550:	f7ff ff22 	bl	8004398 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	e000ed00 	.word	0xe000ed00
 8004564:	410fc271 	.word	0x410fc271
 8004568:	410fc270 	.word	0x410fc270
 800456c:	e000e400 	.word	0xe000e400
 8004570:	20000da8 	.word	0x20000da8
 8004574:	20000dac 	.word	0x20000dac
 8004578:	e000ed20 	.word	0xe000ed20
 800457c:	2000000c 	.word	0x2000000c
 8004580:	e000ef34 	.word	0xe000ef34

08004584 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
	__asm volatile
 800458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	607b      	str	r3, [r7, #4]
}
 800459c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800459e:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <vPortEnterCritical+0x58>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3301      	adds	r3, #1
 80045a4:	4a0d      	ldr	r2, [pc, #52]	; (80045dc <vPortEnterCritical+0x58>)
 80045a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045a8:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <vPortEnterCritical+0x58>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d10f      	bne.n	80045d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045b0:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <vPortEnterCritical+0x5c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	603b      	str	r3, [r7, #0]
}
 80045cc:	bf00      	nop
 80045ce:	e7fe      	b.n	80045ce <vPortEnterCritical+0x4a>
	}
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	2000000c 	.word	0x2000000c
 80045e0:	e000ed04 	.word	0xe000ed04

080045e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045ea:	4b12      	ldr	r3, [pc, #72]	; (8004634 <vPortExitCritical+0x50>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10a      	bne.n	8004608 <vPortExitCritical+0x24>
	__asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	607b      	str	r3, [r7, #4]
}
 8004604:	bf00      	nop
 8004606:	e7fe      	b.n	8004606 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004608:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <vPortExitCritical+0x50>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3b01      	subs	r3, #1
 800460e:	4a09      	ldr	r2, [pc, #36]	; (8004634 <vPortExitCritical+0x50>)
 8004610:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004612:	4b08      	ldr	r3, [pc, #32]	; (8004634 <vPortExitCritical+0x50>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d105      	bne.n	8004626 <vPortExitCritical+0x42>
 800461a:	2300      	movs	r3, #0
 800461c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	f383 8811 	msr	BASEPRI, r3
}
 8004624:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	2000000c 	.word	0x2000000c
	...

08004640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004640:	f3ef 8009 	mrs	r0, PSP
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	4b15      	ldr	r3, [pc, #84]	; (80046a0 <pxCurrentTCBConst>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	f01e 0f10 	tst.w	lr, #16
 8004650:	bf08      	it	eq
 8004652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800465a:	6010      	str	r0, [r2, #0]
 800465c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004664:	f380 8811 	msr	BASEPRI, r0
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f7fe ffc4 	bl	80035fc <vTaskSwitchContext>
 8004674:	f04f 0000 	mov.w	r0, #0
 8004678:	f380 8811 	msr	BASEPRI, r0
 800467c:	bc09      	pop	{r0, r3}
 800467e:	6819      	ldr	r1, [r3, #0]
 8004680:	6808      	ldr	r0, [r1, #0]
 8004682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004686:	f01e 0f10 	tst.w	lr, #16
 800468a:	bf08      	it	eq
 800468c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004690:	f380 8809 	msr	PSP, r0
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	f3af 8000 	nop.w

080046a0 <pxCurrentTCBConst>:
 80046a0:	2000077c 	.word	0x2000077c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop

080046a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	607b      	str	r3, [r7, #4]
}
 80046c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046c2:	f7fe fee1 	bl	8003488 <xTaskIncrementTick>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046cc:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <xPortSysTickHandler+0x40>)
 80046ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	2300      	movs	r3, #0
 80046d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	f383 8811 	msr	BASEPRI, r3
}
 80046de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80046e0:	bf00      	nop
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	e000ed04 	.word	0xe000ed04

080046ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <vPortSetupTimerInterrupt+0x34>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046f6:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <vPortSetupTimerInterrupt+0x38>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046fc:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <vPortSetupTimerInterrupt+0x3c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a0a      	ldr	r2, [pc, #40]	; (800472c <vPortSetupTimerInterrupt+0x40>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	099b      	lsrs	r3, r3, #6
 8004708:	4a09      	ldr	r2, [pc, #36]	; (8004730 <vPortSetupTimerInterrupt+0x44>)
 800470a:	3b01      	subs	r3, #1
 800470c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800470e:	4b04      	ldr	r3, [pc, #16]	; (8004720 <vPortSetupTimerInterrupt+0x34>)
 8004710:	2207      	movs	r2, #7
 8004712:	601a      	str	r2, [r3, #0]
}
 8004714:	bf00      	nop
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	e000e010 	.word	0xe000e010
 8004724:	e000e018 	.word	0xe000e018
 8004728:	20000000 	.word	0x20000000
 800472c:	10624dd3 	.word	0x10624dd3
 8004730:	e000e014 	.word	0xe000e014

08004734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004734:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004744 <vPortEnableVFP+0x10>
 8004738:	6801      	ldr	r1, [r0, #0]
 800473a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800473e:	6001      	str	r1, [r0, #0]
 8004740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004742:	bf00      	nop
 8004744:	e000ed88 	.word	0xe000ed88

08004748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800474e:	f3ef 8305 	mrs	r3, IPSR
 8004752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b0f      	cmp	r3, #15
 8004758:	d914      	bls.n	8004784 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800475a:	4a17      	ldr	r2, [pc, #92]	; (80047b8 <vPortValidateInterruptPriority+0x70>)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4413      	add	r3, r2
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004764:	4b15      	ldr	r3, [pc, #84]	; (80047bc <vPortValidateInterruptPriority+0x74>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	7afa      	ldrb	r2, [r7, #11]
 800476a:	429a      	cmp	r2, r3
 800476c:	d20a      	bcs.n	8004784 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	607b      	str	r3, [r7, #4]
}
 8004780:	bf00      	nop
 8004782:	e7fe      	b.n	8004782 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004784:	4b0e      	ldr	r3, [pc, #56]	; (80047c0 <vPortValidateInterruptPriority+0x78>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800478c:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <vPortValidateInterruptPriority+0x7c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	429a      	cmp	r2, r3
 8004792:	d90a      	bls.n	80047aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	603b      	str	r3, [r7, #0]
}
 80047a6:	bf00      	nop
 80047a8:	e7fe      	b.n	80047a8 <vPortValidateInterruptPriority+0x60>
	}
 80047aa:	bf00      	nop
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	e000e3f0 	.word	0xe000e3f0
 80047bc:	20000da8 	.word	0x20000da8
 80047c0:	e000ed0c 	.word	0xe000ed0c
 80047c4:	20000dac 	.word	0x20000dac

080047c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	; 0x28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047d0:	2300      	movs	r3, #0
 80047d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047d4:	f7fe fd9c 	bl	8003310 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047d8:	4b5b      	ldr	r3, [pc, #364]	; (8004948 <pvPortMalloc+0x180>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047e0:	f000 f920 	bl	8004a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047e4:	4b59      	ldr	r3, [pc, #356]	; (800494c <pvPortMalloc+0x184>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f040 8093 	bne.w	8004918 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01d      	beq.n	8004834 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80047f8:	2208      	movs	r2, #8
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4413      	add	r3, r2
 80047fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	2b00      	cmp	r3, #0
 8004808:	d014      	beq.n	8004834 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f023 0307 	bic.w	r3, r3, #7
 8004810:	3308      	adds	r3, #8
 8004812:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <pvPortMalloc+0x6c>
	__asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	617b      	str	r3, [r7, #20]
}
 8004830:	bf00      	nop
 8004832:	e7fe      	b.n	8004832 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d06e      	beq.n	8004918 <pvPortMalloc+0x150>
 800483a:	4b45      	ldr	r3, [pc, #276]	; (8004950 <pvPortMalloc+0x188>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	d869      	bhi.n	8004918 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004844:	4b43      	ldr	r3, [pc, #268]	; (8004954 <pvPortMalloc+0x18c>)
 8004846:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004848:	4b42      	ldr	r3, [pc, #264]	; (8004954 <pvPortMalloc+0x18c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800484e:	e004      	b.n	800485a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	429a      	cmp	r2, r3
 8004862:	d903      	bls.n	800486c <pvPortMalloc+0xa4>
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1f1      	bne.n	8004850 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800486c:	4b36      	ldr	r3, [pc, #216]	; (8004948 <pvPortMalloc+0x180>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004872:	429a      	cmp	r2, r3
 8004874:	d050      	beq.n	8004918 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2208      	movs	r2, #8
 800487c:	4413      	add	r3, r2
 800487e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	1ad2      	subs	r2, r2, r3
 8004890:	2308      	movs	r3, #8
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	429a      	cmp	r2, r3
 8004896:	d91f      	bls.n	80048d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4413      	add	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <pvPortMalloc+0xf8>
	__asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	613b      	str	r3, [r7, #16]
}
 80048bc:	bf00      	nop
 80048be:	e7fe      	b.n	80048be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	1ad2      	subs	r2, r2, r3
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048d2:	69b8      	ldr	r0, [r7, #24]
 80048d4:	f000 f908 	bl	8004ae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048d8:	4b1d      	ldr	r3, [pc, #116]	; (8004950 <pvPortMalloc+0x188>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	4a1b      	ldr	r2, [pc, #108]	; (8004950 <pvPortMalloc+0x188>)
 80048e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048e6:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <pvPortMalloc+0x188>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <pvPortMalloc+0x190>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d203      	bcs.n	80048fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048f2:	4b17      	ldr	r3, [pc, #92]	; (8004950 <pvPortMalloc+0x188>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a18      	ldr	r2, [pc, #96]	; (8004958 <pvPortMalloc+0x190>)
 80048f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	4b13      	ldr	r3, [pc, #76]	; (800494c <pvPortMalloc+0x184>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	431a      	orrs	r2, r3
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800490e:	4b13      	ldr	r3, [pc, #76]	; (800495c <pvPortMalloc+0x194>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3301      	adds	r3, #1
 8004914:	4a11      	ldr	r2, [pc, #68]	; (800495c <pvPortMalloc+0x194>)
 8004916:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004918:	f7fe fd08 	bl	800332c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <pvPortMalloc+0x174>
	__asm volatile
 8004926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	60fb      	str	r3, [r7, #12]
}
 8004938:	bf00      	nop
 800493a:	e7fe      	b.n	800493a <pvPortMalloc+0x172>
	return pvReturn;
 800493c:	69fb      	ldr	r3, [r7, #28]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3728      	adds	r7, #40	; 0x28
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	200049b8 	.word	0x200049b8
 800494c:	200049cc 	.word	0x200049cc
 8004950:	200049bc 	.word	0x200049bc
 8004954:	200049b0 	.word	0x200049b0
 8004958:	200049c0 	.word	0x200049c0
 800495c:	200049c4 	.word	0x200049c4

08004960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d04d      	beq.n	8004a0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004972:	2308      	movs	r3, #8
 8004974:	425b      	negs	r3, r3
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4413      	add	r3, r2
 800497a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <vPortFree+0xb8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4013      	ands	r3, r2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <vPortFree+0x44>
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	60fb      	str	r3, [r7, #12]
}
 80049a0:	bf00      	nop
 80049a2:	e7fe      	b.n	80049a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <vPortFree+0x62>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	60bb      	str	r3, [r7, #8]
}
 80049be:	bf00      	nop
 80049c0:	e7fe      	b.n	80049c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <vPortFree+0xb8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4013      	ands	r3, r2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d01e      	beq.n	8004a0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d11a      	bne.n	8004a0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <vPortFree+0xb8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	43db      	mvns	r3, r3
 80049e2:	401a      	ands	r2, r3
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80049e8:	f7fe fc92 	bl	8003310 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <vPortFree+0xbc>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4413      	add	r3, r2
 80049f6:	4a09      	ldr	r2, [pc, #36]	; (8004a1c <vPortFree+0xbc>)
 80049f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049fa:	6938      	ldr	r0, [r7, #16]
 80049fc:	f000 f874 	bl	8004ae8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <vPortFree+0xc0>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3301      	adds	r3, #1
 8004a06:	4a06      	ldr	r2, [pc, #24]	; (8004a20 <vPortFree+0xc0>)
 8004a08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a0a:	f7fe fc8f 	bl	800332c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a0e:	bf00      	nop
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	200049cc 	.word	0x200049cc
 8004a1c:	200049bc 	.word	0x200049bc
 8004a20:	200049c8 	.word	0x200049c8

08004a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a30:	4b27      	ldr	r3, [pc, #156]	; (8004ad0 <prvHeapInit+0xac>)
 8004a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00c      	beq.n	8004a58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3307      	adds	r3, #7
 8004a42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0307 	bic.w	r3, r3, #7
 8004a4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <prvHeapInit+0xac>)
 8004a54:	4413      	add	r3, r2
 8004a56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a5c:	4a1d      	ldr	r2, [pc, #116]	; (8004ad4 <prvHeapInit+0xb0>)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a62:	4b1c      	ldr	r3, [pc, #112]	; (8004ad4 <prvHeapInit+0xb0>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a70:	2208      	movs	r2, #8
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	1a9b      	subs	r3, r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0307 	bic.w	r3, r3, #7
 8004a7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4a15      	ldr	r2, [pc, #84]	; (8004ad8 <prvHeapInit+0xb4>)
 8004a84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a86:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <prvHeapInit+0xb4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a8e:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <prvHeapInit+0xb4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	1ad2      	subs	r2, r2, r3
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004aa4:	4b0c      	ldr	r3, [pc, #48]	; (8004ad8 <prvHeapInit+0xb4>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	4a0a      	ldr	r2, [pc, #40]	; (8004adc <prvHeapInit+0xb8>)
 8004ab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <prvHeapInit+0xbc>)
 8004aba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004abc:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <prvHeapInit+0xc0>)
 8004abe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ac2:	601a      	str	r2, [r3, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	20000db0 	.word	0x20000db0
 8004ad4:	200049b0 	.word	0x200049b0
 8004ad8:	200049b8 	.word	0x200049b8
 8004adc:	200049c0 	.word	0x200049c0
 8004ae0:	200049bc 	.word	0x200049bc
 8004ae4:	200049cc 	.word	0x200049cc

08004ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004af0:	4b28      	ldr	r3, [pc, #160]	; (8004b94 <prvInsertBlockIntoFreeList+0xac>)
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	e002      	b.n	8004afc <prvInsertBlockIntoFreeList+0x14>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d8f7      	bhi.n	8004af6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	4413      	add	r3, r2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d108      	bne.n	8004b2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	441a      	add	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	441a      	add	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d118      	bne.n	8004b70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b15      	ldr	r3, [pc, #84]	; (8004b98 <prvInsertBlockIntoFreeList+0xb0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d00d      	beq.n	8004b66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	441a      	add	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	e008      	b.n	8004b78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b66:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <prvInsertBlockIntoFreeList+0xb0>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	e003      	b.n	8004b78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d002      	beq.n	8004b86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b86:	bf00      	nop
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	200049b0 	.word	0x200049b0
 8004b98:	200049b8 	.word	0x200049b8

08004b9c <memset>:
 8004b9c:	4402      	add	r2, r0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d100      	bne.n	8004ba6 <memset+0xa>
 8004ba4:	4770      	bx	lr
 8004ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8004baa:	e7f9      	b.n	8004ba0 <memset+0x4>

08004bac <__libc_init_array>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	4d0d      	ldr	r5, [pc, #52]	; (8004be4 <__libc_init_array+0x38>)
 8004bb0:	4c0d      	ldr	r4, [pc, #52]	; (8004be8 <__libc_init_array+0x3c>)
 8004bb2:	1b64      	subs	r4, r4, r5
 8004bb4:	10a4      	asrs	r4, r4, #2
 8004bb6:	2600      	movs	r6, #0
 8004bb8:	42a6      	cmp	r6, r4
 8004bba:	d109      	bne.n	8004bd0 <__libc_init_array+0x24>
 8004bbc:	4d0b      	ldr	r5, [pc, #44]	; (8004bec <__libc_init_array+0x40>)
 8004bbe:	4c0c      	ldr	r4, [pc, #48]	; (8004bf0 <__libc_init_array+0x44>)
 8004bc0:	f000 f826 	bl	8004c10 <_init>
 8004bc4:	1b64      	subs	r4, r4, r5
 8004bc6:	10a4      	asrs	r4, r4, #2
 8004bc8:	2600      	movs	r6, #0
 8004bca:	42a6      	cmp	r6, r4
 8004bcc:	d105      	bne.n	8004bda <__libc_init_array+0x2e>
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
 8004bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bd4:	4798      	blx	r3
 8004bd6:	3601      	adds	r6, #1
 8004bd8:	e7ee      	b.n	8004bb8 <__libc_init_array+0xc>
 8004bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bde:	4798      	blx	r3
 8004be0:	3601      	adds	r6, #1
 8004be2:	e7f2      	b.n	8004bca <__libc_init_array+0x1e>
 8004be4:	08004cc0 	.word	0x08004cc0
 8004be8:	08004cc0 	.word	0x08004cc0
 8004bec:	08004cc0 	.word	0x08004cc0
 8004bf0:	08004cc4 	.word	0x08004cc4

08004bf4 <memcpy>:
 8004bf4:	440a      	add	r2, r1
 8004bf6:	4291      	cmp	r1, r2
 8004bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bfc:	d100      	bne.n	8004c00 <memcpy+0xc>
 8004bfe:	4770      	bx	lr
 8004c00:	b510      	push	{r4, lr}
 8004c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c0a:	4291      	cmp	r1, r2
 8004c0c:	d1f9      	bne.n	8004c02 <memcpy+0xe>
 8004c0e:	bd10      	pop	{r4, pc}

08004c10 <_init>:
 8004c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c12:	bf00      	nop
 8004c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c16:	bc08      	pop	{r3}
 8004c18:	469e      	mov	lr, r3
 8004c1a:	4770      	bx	lr

08004c1c <_fini>:
 8004c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1e:	bf00      	nop
 8004c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c22:	bc08      	pop	{r3}
 8004c24:	469e      	mov	lr, r3
 8004c26:	4770      	bx	lr
