
03_LED_Control_With_Button_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004750  08004750  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004750  08004750  00014750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004758  08004758  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004758  08004758  00014758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800475c  0800475c  0001475c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004980  20000010  08004770  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004990  08004770  00024990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df71  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002652  00000000  00000000  0002dff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  00030648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000096d  00000000  00000000  000312c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002764  00000000  00000000  00031c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e523  00000000  00000000  00034399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf586  00000000  00000000  000428bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003294  00000000  00000000  00111e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  001150d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004680 	.word	0x08004680

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004680 	.word	0x08004680

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fa08 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f832 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f89c 	bl	8000654 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800051c:	f001 fb22 	bl	8001b64 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(Read_Gpıo, NULL, &defaultTask_attributes);
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <main+0x4c>)
 8000522:	2100      	movs	r1, #0
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <main+0x50>)
 8000526:	f001 fb67 	bl	8001bf8 <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a0c      	ldr	r2, [pc, #48]	; (8000560 <main+0x54>)
 800052e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(Led_flash, NULL, &myTask02_attributes);
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <main+0x58>)
 8000532:	2100      	movs	r1, #0
 8000534:	480c      	ldr	r0, [pc, #48]	; (8000568 <main+0x5c>)
 8000536:	f001 fb5f 	bl	8001bf8 <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a0b      	ldr	r2, [pc, #44]	; (800056c <main+0x60>)
 800053e:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <main+0x64>)
 8000542:	2100      	movs	r1, #0
 8000544:	480b      	ldr	r0, [pc, #44]	; (8000574 <main+0x68>)
 8000546:	f001 fb57 	bl	8001bf8 <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <main+0x6c>)
 800054e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000550:	f001 fb2c 	bl	8001bac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000554:	e7fe      	b.n	8000554 <main+0x48>
 8000556:	bf00      	nop
 8000558:	080046d4 	.word	0x080046d4
 800055c:	08000711 	.word	0x08000711
 8000560:	2000002c 	.word	0x2000002c
 8000564:	080046f8 	.word	0x080046f8
 8000568:	08000761 	.word	0x08000761
 800056c:	20000030 	.word	0x20000030
 8000570:	0800471c 	.word	0x0800471c
 8000574:	080007f1 	.word	0x080007f1
 8000578:	20000034 	.word	0x20000034

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2234      	movs	r2, #52	; 0x34
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f004 f83e 	bl	800460c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b29      	ldr	r3, [pc, #164]	; (800064c <SystemClock_Config+0xd0>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a28      	ldr	r2, [pc, #160]	; (800064c <SystemClock_Config+0xd0>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b26      	ldr	r3, [pc, #152]	; (800064c <SystemClock_Config+0xd0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005bc:	2300      	movs	r3, #0
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <SystemClock_Config+0xd4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <SystemClock_Config+0xd4>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <SystemClock_Config+0xd4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2310      	movs	r3, #16
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	2302      	movs	r3, #2
 80005ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ec:	2300      	movs	r3, #0
 80005ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f0:	2308      	movs	r3, #8
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 80005f4:	2340      	movs	r3, #64	; 0x40
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000600:	2302      	movs	r3, #2
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4618      	mov	r0, r3
 800060a:	f000 ffd9 	bl	80015c0 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000614:	f000 f8f4 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000620:	2390      	movs	r3, #144	; 0x90
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f000 fcae 	bl	8000f94 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800063e:	f000 f8df 	bl	8000800 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3750      	adds	r7, #80	; 0x50
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	4b25      	ldr	r3, [pc, #148]	; (8000704 <MX_GPIO_Init+0xb0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a24      	ldr	r2, [pc, #144]	; (8000704 <MX_GPIO_Init+0xb0>)
 8000674:	f043 0320 	orr.w	r3, r3, #32
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b22      	ldr	r3, [pc, #136]	; (8000704 <MX_GPIO_Init+0xb0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0320 	and.w	r3, r3, #32
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <MX_GPIO_Init+0xb0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a1d      	ldr	r2, [pc, #116]	; (8000704 <MX_GPIO_Init+0xb0>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <MX_GPIO_Init+0xb0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_GPIO_Init+0xb0>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a16      	ldr	r2, [pc, #88]	; (8000704 <MX_GPIO_Init+0xb0>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_GPIO_Init+0xb0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2107      	movs	r1, #7
 80006c2:	4811      	ldr	r0, [pc, #68]	; (8000708 <MX_GPIO_Init+0xb4>)
 80006c4:	f000 fc32 	bl	8000f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80006c8:	2307      	movs	r3, #7
 80006ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	4619      	mov	r1, r3
 80006de:	480a      	ldr	r0, [pc, #40]	; (8000708 <MX_GPIO_Init+0xb4>)
 80006e0:	f000 fa78 	bl	8000bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	4619      	mov	r1, r3
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_GPIO_Init+0xb8>)
 80006f8:	f000 fa6c 	bl	8000bd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40021400 	.word	0x40021400
 800070c:	40020000 	.word	0x40020000

08000710 <Read_Gpıo>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void Read_Gpıo(void *argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET)
 8000718:	2102      	movs	r1, #2
 800071a:	480f      	ldr	r0, [pc, #60]	; (8000758 <Read_Gpıo+0x48>)
 800071c:	f000 fbee 	bl	8000efc <HAL_GPIO_ReadPin>
 8000720:	4603      	mov	r3, r0
 8000722:	2b01      	cmp	r3, #1
 8000724:	d114      	bne.n	8000750 <Read_Gpıo+0x40>
	  {
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET); //profosyonel yazılımda bunu istemezler
 8000726:	bf00      	nop
 8000728:	2102      	movs	r1, #2
 800072a:	480b      	ldr	r0, [pc, #44]	; (8000758 <Read_Gpıo+0x48>)
 800072c:	f000 fbe6 	bl	8000efc <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	2b01      	cmp	r3, #1
 8000734:	d0f8      	beq.n	8000728 <Read_Gpıo+0x18>
		  buttonCount ++;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <Read_Gpıo+0x4c>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b07      	ldr	r3, [pc, #28]	; (800075c <Read_Gpıo+0x4c>)
 8000740:	701a      	strb	r2, [r3, #0]

		  if(buttonCount == 5)
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <Read_Gpıo+0x4c>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b05      	cmp	r3, #5
 8000748:	d102      	bne.n	8000750 <Read_Gpıo+0x40>
			  buttonCount = 0;
 800074a:	4b04      	ldr	r3, [pc, #16]	; (800075c <Read_Gpıo+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
	  }
    osDelay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f001 fae3 	bl	8001d1c <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET)
 8000756:	e7df      	b.n	8000718 <Read_Gpıo+0x8>
 8000758:	40020000 	.word	0x40020000
 800075c:	20000038 	.word	0x20000038

08000760 <Led_flash>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void Led_flash(void *argument)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(buttonCount == 0)  //bütün ledler sönecek
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <Led_flash+0x88>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d105      	bne.n	800077c <Led_flash+0x1c>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2107      	movs	r1, #7
 8000774:	481d      	ldr	r0, [pc, #116]	; (80007ec <Led_flash+0x8c>)
 8000776:	f000 fbd9 	bl	8000f2c <HAL_GPIO_WritePin>
 800077a:	e031      	b.n	80007e0 <Led_flash+0x80>
	  }
	  else if ( buttonCount == 1) // ledler 1sn bir yanıp sönecek
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <Led_flash+0x88>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d108      	bne.n	8000796 <Led_flash+0x36>
	  {
		  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2);
 8000784:	2107      	movs	r1, #7
 8000786:	4819      	ldr	r0, [pc, #100]	; (80007ec <Led_flash+0x8c>)
 8000788:	f000 fbe9 	bl	8000f5e <HAL_GPIO_TogglePin>
		  vTaskDelay(1000);
 800078c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000790:	f002 fa56 	bl	8002c40 <vTaskDelay>
 8000794:	e024      	b.n	80007e0 <Led_flash+0x80>
	  }
	  else if(buttonCount == 2)  // ledler 750 ms bir yanacak
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <Led_flash+0x88>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b02      	cmp	r3, #2
 800079c:	d108      	bne.n	80007b0 <Led_flash+0x50>
	  {
		  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2);
 800079e:	2107      	movs	r1, #7
 80007a0:	4812      	ldr	r0, [pc, #72]	; (80007ec <Led_flash+0x8c>)
 80007a2:	f000 fbdc 	bl	8000f5e <HAL_GPIO_TogglePin>
		  vTaskDelay(750);
 80007a6:	f240 20ee 	movw	r0, #750	; 0x2ee
 80007aa:	f002 fa49 	bl	8002c40 <vTaskDelay>
 80007ae:	e017      	b.n	80007e0 <Led_flash+0x80>
	  }
	  else if(buttonCount == 3)  // ledler 500 ms bir yanacak
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <Led_flash+0x88>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	d108      	bne.n	80007ca <Led_flash+0x6a>
	  {
		  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2);
 80007b8:	2107      	movs	r1, #7
 80007ba:	480c      	ldr	r0, [pc, #48]	; (80007ec <Led_flash+0x8c>)
 80007bc:	f000 fbcf 	bl	8000f5e <HAL_GPIO_TogglePin>
		  vTaskDelay(500);
 80007c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007c4:	f002 fa3c 	bl	8002c40 <vTaskDelay>
 80007c8:	e00a      	b.n	80007e0 <Led_flash+0x80>
	  }
	  else if(buttonCount == 4)  // ledler 250 ms bir yanacak
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <Led_flash+0x88>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	d106      	bne.n	80007e0 <Led_flash+0x80>
	  {
		  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2);
 80007d2:	2107      	movs	r1, #7
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <Led_flash+0x8c>)
 80007d6:	f000 fbc2 	bl	8000f5e <HAL_GPIO_TogglePin>
		  vTaskDelay(50);
 80007da:	2032      	movs	r0, #50	; 0x32
 80007dc:	f002 fa30 	bl	8002c40 <vTaskDelay>
	  }
    osDelay(1);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f001 fa9b 	bl	8001d1c <osDelay>
	  if(buttonCount == 0)  //bütün ledler sönecek
 80007e6:	e7bf      	b.n	8000768 <Led_flash+0x8>
 80007e8:	20000038 	.word	0x20000038
 80007ec:	40021400 	.word	0x40021400

080007f0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f001 fa8f 	bl	8001d1c <osDelay>
 80007fe:	e7fb      	b.n	80007f8 <StartTask03+0x8>

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>
	...

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_MspInit+0x54>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	4a11      	ldr	r2, [pc, #68]	; (8000860 <HAL_MspInit+0x54>)
 800081c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000820:	6453      	str	r3, [r2, #68]	; 0x44
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_MspInit+0x54>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <HAL_MspInit+0x54>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <HAL_MspInit+0x54>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_MspInit+0x54>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	210f      	movs	r1, #15
 800084e:	f06f 0001 	mvn.w	r0, #1
 8000852:	f000 f996 	bl	8000b82 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <NMI_Handler+0x4>

0800086a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <HardFault_Handler+0x4>

08000870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <MemManage_Handler+0x4>

08000876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <UsageFault_Handler+0x4>

08000882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000894:	f000 f898 	bl	80009c8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000898:	f002 fe4e 	bl	8003538 <xTaskGetSchedulerState>
 800089c:	4603      	mov	r3, r0
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d001      	beq.n	80008a6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008a2:	f003 fc39 	bl	8004118 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <SystemInit+0x20>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <SystemInit+0x20>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000908 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008d6:	490e      	ldr	r1, [pc, #56]	; (8000910 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008d8:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008dc:	e002      	b.n	80008e4 <LoopCopyDataInit>

080008de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e2:	3304      	adds	r3, #4

080008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e8:	d3f9      	bcc.n	80008de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008ec:	4c0b      	ldr	r4, [pc, #44]	; (800091c <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f0:	e001      	b.n	80008f6 <LoopFillZerobss>

080008f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f4:	3204      	adds	r2, #4

080008f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f8:	d3fb      	bcc.n	80008f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008fa:	f7ff ffd7 	bl	80008ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fe:	f003 fe8d 	bl	800461c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000902:	f7ff fe03 	bl	800050c <main>
  bx  lr    
 8000906:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000914:	08004760 	.word	0x08004760
  ldr r2, =_sbss
 8000918:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800091c:	20004990 	.word	0x20004990

08000920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC_IRQHandler>
	...

08000924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_Init+0x40>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <HAL_Init+0x40>)
 800092e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <HAL_Init+0x40>)
 800093a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800093e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_Init+0x40>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <HAL_Init+0x40>)
 8000946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f90d 	bl	8000b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	200f      	movs	r0, #15
 8000954:	f000 f808 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000958:	f7ff ff58 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023c00 	.word	0x40023c00

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_InitTick+0x54>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_InitTick+0x58>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f917 	bl	8000bba <HAL_SYSTICK_Config>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e00e      	b.n	80009b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	d80a      	bhi.n	80009b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099c:	2200      	movs	r2, #0
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f000 f8ed 	bl	8000b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <HAL_InitTick+0x5c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x20>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_IncTick+0x24>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_IncTick+0x24>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000008 	.word	0x20000008
 80009ec:	2000003c 	.word	0x2000003c

080009f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <HAL_GetTick+0x14>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	2000003c 	.word	0x2000003c

08000a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a24:	4013      	ands	r3, r2
 8000a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3a:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	60d3      	str	r3, [r2, #12]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <__NVIC_GetPriorityGrouping+0x18>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	0a1b      	lsrs	r3, r3, #8
 8000a5a:	f003 0307 	and.w	r3, r3, #7
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	6039      	str	r1, [r7, #0]
 8000a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	db0a      	blt.n	8000a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	490c      	ldr	r1, [pc, #48]	; (8000ab8 <__NVIC_SetPriority+0x4c>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	0112      	lsls	r2, r2, #4
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	440b      	add	r3, r1
 8000a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a94:	e00a      	b.n	8000aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4908      	ldr	r1, [pc, #32]	; (8000abc <__NVIC_SetPriority+0x50>)
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	f003 030f 	and.w	r3, r3, #15
 8000aa2:	3b04      	subs	r3, #4
 8000aa4:	0112      	lsls	r2, r2, #4
 8000aa6:	b2d2      	uxtb	r2, r2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	761a      	strb	r2, [r3, #24]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000e100 	.word	0xe000e100
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b089      	sub	sp, #36	; 0x24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	f1c3 0307 	rsb	r3, r3, #7
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	bf28      	it	cs
 8000ade:	2304      	movcs	r3, #4
 8000ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	2b06      	cmp	r3, #6
 8000ae8:	d902      	bls.n	8000af0 <NVIC_EncodePriority+0x30>
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3b03      	subs	r3, #3
 8000aee:	e000      	b.n	8000af2 <NVIC_EncodePriority+0x32>
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	f04f 32ff 	mov.w	r2, #4294967295
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43da      	mvns	r2, r3
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	401a      	ands	r2, r3
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b12:	43d9      	mvns	r1, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	4313      	orrs	r3, r2
         );
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3724      	adds	r7, #36	; 0x24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b38:	d301      	bcc.n	8000b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00f      	b.n	8000b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <SysTick_Config+0x40>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b46:	210f      	movs	r1, #15
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f7ff ff8e 	bl	8000a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <SysTick_Config+0x40>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <SysTick_Config+0x40>)
 8000b58:	2207      	movs	r2, #7
 8000b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	e000e010 	.word	0xe000e010

08000b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff ff47 	bl	8000a08 <__NVIC_SetPriorityGrouping>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b94:	f7ff ff5c 	bl	8000a50 <__NVIC_GetPriorityGrouping>
 8000b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff ff8e 	bl	8000ac0 <NVIC_EncodePriority>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff5d 	bl	8000a6c <__NVIC_SetPriority>
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ffb0 	bl	8000b28 <SysTick_Config>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
 8000bee:	e165      	b.n	8000ebc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	f040 8154 	bne.w	8000eb6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0303 	and.w	r3, r3, #3
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d005      	beq.n	8000c26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d130      	bne.n	8000c88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	2203      	movs	r2, #3
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	68da      	ldr	r2, [r3, #12]
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	091b      	lsrs	r3, r3, #4
 8000c72:	f003 0201 	and.w	r2, r3, #1
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d017      	beq.n	8000cc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d123      	bne.n	8000d18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	08da      	lsrs	r2, r3, #3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3208      	adds	r2, #8
 8000cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	691a      	ldr	r2, [r3, #16]
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	08da      	lsrs	r2, r3, #3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3208      	adds	r2, #8
 8000d12:	69b9      	ldr	r1, [r7, #24]
 8000d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0203 	and.w	r2, r3, #3
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80ae 	beq.w	8000eb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b5d      	ldr	r3, [pc, #372]	; (8000ed4 <HAL_GPIO_Init+0x300>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a5c      	ldr	r2, [pc, #368]	; (8000ed4 <HAL_GPIO_Init+0x300>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b5a      	ldr	r3, [pc, #360]	; (8000ed4 <HAL_GPIO_Init+0x300>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d76:	4a58      	ldr	r2, [pc, #352]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	089b      	lsrs	r3, r3, #2
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4f      	ldr	r2, [pc, #316]	; (8000edc <HAL_GPIO_Init+0x308>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d025      	beq.n	8000dee <HAL_GPIO_Init+0x21a>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4e      	ldr	r2, [pc, #312]	; (8000ee0 <HAL_GPIO_Init+0x30c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d01f      	beq.n	8000dea <HAL_GPIO_Init+0x216>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4d      	ldr	r2, [pc, #308]	; (8000ee4 <HAL_GPIO_Init+0x310>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d019      	beq.n	8000de6 <HAL_GPIO_Init+0x212>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a4c      	ldr	r2, [pc, #304]	; (8000ee8 <HAL_GPIO_Init+0x314>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d013      	beq.n	8000de2 <HAL_GPIO_Init+0x20e>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4b      	ldr	r2, [pc, #300]	; (8000eec <HAL_GPIO_Init+0x318>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d00d      	beq.n	8000dde <HAL_GPIO_Init+0x20a>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4a      	ldr	r2, [pc, #296]	; (8000ef0 <HAL_GPIO_Init+0x31c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d007      	beq.n	8000dda <HAL_GPIO_Init+0x206>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a49      	ldr	r2, [pc, #292]	; (8000ef4 <HAL_GPIO_Init+0x320>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d101      	bne.n	8000dd6 <HAL_GPIO_Init+0x202>
 8000dd2:	2306      	movs	r3, #6
 8000dd4:	e00c      	b.n	8000df0 <HAL_GPIO_Init+0x21c>
 8000dd6:	2307      	movs	r3, #7
 8000dd8:	e00a      	b.n	8000df0 <HAL_GPIO_Init+0x21c>
 8000dda:	2305      	movs	r3, #5
 8000ddc:	e008      	b.n	8000df0 <HAL_GPIO_Init+0x21c>
 8000dde:	2304      	movs	r3, #4
 8000de0:	e006      	b.n	8000df0 <HAL_GPIO_Init+0x21c>
 8000de2:	2303      	movs	r3, #3
 8000de4:	e004      	b.n	8000df0 <HAL_GPIO_Init+0x21c>
 8000de6:	2302      	movs	r3, #2
 8000de8:	e002      	b.n	8000df0 <HAL_GPIO_Init+0x21c>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <HAL_GPIO_Init+0x21c>
 8000dee:	2300      	movs	r3, #0
 8000df0:	69fa      	ldr	r2, [r7, #28]
 8000df2:	f002 0203 	and.w	r2, r2, #3
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	4093      	lsls	r3, r2
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e00:	4935      	ldr	r1, [pc, #212]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e0e:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <HAL_GPIO_Init+0x324>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e32:	4a31      	ldr	r2, [pc, #196]	; (8000ef8 <HAL_GPIO_Init+0x324>)
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e38:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <HAL_GPIO_Init+0x324>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e5c:	4a26      	ldr	r2, [pc, #152]	; (8000ef8 <HAL_GPIO_Init+0x324>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e62:	4b25      	ldr	r3, [pc, #148]	; (8000ef8 <HAL_GPIO_Init+0x324>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e86:	4a1c      	ldr	r2, [pc, #112]	; (8000ef8 <HAL_GPIO_Init+0x324>)
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <HAL_GPIO_Init+0x324>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eb0:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <HAL_GPIO_Init+0x324>)
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	61fb      	str	r3, [r7, #28]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	2b0f      	cmp	r3, #15
 8000ec0:	f67f ae96 	bls.w	8000bf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40013800 	.word	0x40013800
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020400 	.word	0x40020400
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	40020c00 	.word	0x40020c00
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40021400 	.word	0x40021400
 8000ef4:	40021800 	.word	0x40021800
 8000ef8:	40013c00 	.word	0x40013c00

08000efc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	887b      	ldrh	r3, [r7, #2]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e001      	b.n	8000f1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	807b      	strh	r3, [r7, #2]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f3c:	787b      	ldrb	r3, [r7, #1]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f42:	887a      	ldrh	r2, [r7, #2]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f48:	e003      	b.n	8000f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f4a:	887b      	ldrh	r3, [r7, #2]
 8000f4c:	041a      	lsls	r2, r3, #16
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	619a      	str	r2, [r3, #24]
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b085      	sub	sp, #20
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f70:	887a      	ldrh	r2, [r7, #2]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4013      	ands	r3, r2
 8000f76:	041a      	lsls	r2, r3, #16
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	887b      	ldrh	r3, [r7, #2]
 8000f7e:	400b      	ands	r3, r1
 8000f80:	431a      	orrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	619a      	str	r2, [r3, #24]
}
 8000f86:	bf00      	nop
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e0cc      	b.n	8001142 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fa8:	4b68      	ldr	r3, [pc, #416]	; (800114c <HAL_RCC_ClockConfig+0x1b8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 030f 	and.w	r3, r3, #15
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d90c      	bls.n	8000fd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fb6:	4b65      	ldr	r3, [pc, #404]	; (800114c <HAL_RCC_ClockConfig+0x1b8>)
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fbe:	4b63      	ldr	r3, [pc, #396]	; (800114c <HAL_RCC_ClockConfig+0x1b8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d001      	beq.n	8000fd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e0b8      	b.n	8001142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d020      	beq.n	800101e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d005      	beq.n	8000ff4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fe8:	4b59      	ldr	r3, [pc, #356]	; (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	4a58      	ldr	r2, [pc, #352]	; (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8000fee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000ff2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0308 	and.w	r3, r3, #8
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d005      	beq.n	800100c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001000:	4b53      	ldr	r3, [pc, #332]	; (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	4a52      	ldr	r2, [pc, #328]	; (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001006:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800100a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800100c:	4b50      	ldr	r3, [pc, #320]	; (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	494d      	ldr	r1, [pc, #308]	; (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 800101a:	4313      	orrs	r3, r2
 800101c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d044      	beq.n	80010b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d107      	bne.n	8001042 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001032:	4b47      	ldr	r3, [pc, #284]	; (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d119      	bne.n	8001072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e07f      	b.n	8001142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d003      	beq.n	8001052 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800104e:	2b03      	cmp	r3, #3
 8001050:	d107      	bne.n	8001062 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001052:	4b3f      	ldr	r3, [pc, #252]	; (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d109      	bne.n	8001072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e06f      	b.n	8001142 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001062:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e067      	b.n	8001142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001072:	4b37      	ldr	r3, [pc, #220]	; (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f023 0203 	bic.w	r2, r3, #3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4934      	ldr	r1, [pc, #208]	; (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001080:	4313      	orrs	r3, r2
 8001082:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001084:	f7ff fcb4 	bl	80009f0 <HAL_GetTick>
 8001088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800108a:	e00a      	b.n	80010a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800108c:	f7ff fcb0 	bl	80009f0 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	f241 3288 	movw	r2, #5000	; 0x1388
 800109a:	4293      	cmp	r3, r2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e04f      	b.n	8001142 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010a2:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 020c 	and.w	r2, r3, #12
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d1eb      	bne.n	800108c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <HAL_RCC_ClockConfig+0x1b8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 030f 	and.w	r3, r3, #15
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d20c      	bcs.n	80010dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010c2:	4b22      	ldr	r3, [pc, #136]	; (800114c <HAL_RCC_ClockConfig+0x1b8>)
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <HAL_RCC_ClockConfig+0x1b8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d001      	beq.n	80010dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e032      	b.n	8001142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d008      	beq.n	80010fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	4916      	ldr	r1, [pc, #88]	; (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	2b00      	cmp	r3, #0
 8001104:	d009      	beq.n	800111a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	490e      	ldr	r1, [pc, #56]	; (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001116:	4313      	orrs	r3, r2
 8001118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800111a:	f000 f821 	bl	8001160 <HAL_RCC_GetSysClockFreq>
 800111e:	4602      	mov	r2, r0
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <HAL_RCC_ClockConfig+0x1bc>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	091b      	lsrs	r3, r3, #4
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	490a      	ldr	r1, [pc, #40]	; (8001154 <HAL_RCC_ClockConfig+0x1c0>)
 800112c:	5ccb      	ldrb	r3, [r1, r3]
 800112e:	fa22 f303 	lsr.w	r3, r2, r3
 8001132:	4a09      	ldr	r2, [pc, #36]	; (8001158 <HAL_RCC_ClockConfig+0x1c4>)
 8001134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_RCC_ClockConfig+0x1c8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fc14 	bl	8000968 <HAL_InitTick>

  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023c00 	.word	0x40023c00
 8001150:	40023800 	.word	0x40023800
 8001154:	08004740 	.word	0x08004740
 8001158:	20000000 	.word	0x20000000
 800115c:	20000004 	.word	0x20000004

08001160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001164:	b0ae      	sub	sp, #184	; 0xb8
 8001166:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001186:	4bcb      	ldr	r3, [pc, #812]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b0c      	cmp	r3, #12
 8001190:	f200 8206 	bhi.w	80015a0 <HAL_RCC_GetSysClockFreq+0x440>
 8001194:	a201      	add	r2, pc, #4	; (adr r2, 800119c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119a:	bf00      	nop
 800119c:	080011d1 	.word	0x080011d1
 80011a0:	080015a1 	.word	0x080015a1
 80011a4:	080015a1 	.word	0x080015a1
 80011a8:	080015a1 	.word	0x080015a1
 80011ac:	080011d9 	.word	0x080011d9
 80011b0:	080015a1 	.word	0x080015a1
 80011b4:	080015a1 	.word	0x080015a1
 80011b8:	080015a1 	.word	0x080015a1
 80011bc:	080011e1 	.word	0x080011e1
 80011c0:	080015a1 	.word	0x080015a1
 80011c4:	080015a1 	.word	0x080015a1
 80011c8:	080015a1 	.word	0x080015a1
 80011cc:	080013d1 	.word	0x080013d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011d0:	4bb9      	ldr	r3, [pc, #740]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80011d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80011d6:	e1e7      	b.n	80015a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011d8:	4bb8      	ldr	r3, [pc, #736]	; (80014bc <HAL_RCC_GetSysClockFreq+0x35c>)
 80011da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80011de:	e1e3      	b.n	80015a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011e0:	4bb4      	ldr	r3, [pc, #720]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011ec:	4bb1      	ldr	r3, [pc, #708]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d071      	beq.n	80012dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011f8:	4bae      	ldr	r3, [pc, #696]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	099b      	lsrs	r3, r3, #6
 80011fe:	2200      	movs	r2, #0
 8001200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001204:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800120c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001210:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800121a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800121e:	4622      	mov	r2, r4
 8001220:	462b      	mov	r3, r5
 8001222:	f04f 0000 	mov.w	r0, #0
 8001226:	f04f 0100 	mov.w	r1, #0
 800122a:	0159      	lsls	r1, r3, #5
 800122c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001230:	0150      	lsls	r0, r2, #5
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4621      	mov	r1, r4
 8001238:	1a51      	subs	r1, r2, r1
 800123a:	6439      	str	r1, [r7, #64]	; 0x40
 800123c:	4629      	mov	r1, r5
 800123e:	eb63 0301 	sbc.w	r3, r3, r1
 8001242:	647b      	str	r3, [r7, #68]	; 0x44
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001250:	4649      	mov	r1, r9
 8001252:	018b      	lsls	r3, r1, #6
 8001254:	4641      	mov	r1, r8
 8001256:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800125a:	4641      	mov	r1, r8
 800125c:	018a      	lsls	r2, r1, #6
 800125e:	4641      	mov	r1, r8
 8001260:	1a51      	subs	r1, r2, r1
 8001262:	63b9      	str	r1, [r7, #56]	; 0x38
 8001264:	4649      	mov	r1, r9
 8001266:	eb63 0301 	sbc.w	r3, r3, r1
 800126a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001278:	4649      	mov	r1, r9
 800127a:	00cb      	lsls	r3, r1, #3
 800127c:	4641      	mov	r1, r8
 800127e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001282:	4641      	mov	r1, r8
 8001284:	00ca      	lsls	r2, r1, #3
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	4603      	mov	r3, r0
 800128c:	4622      	mov	r2, r4
 800128e:	189b      	adds	r3, r3, r2
 8001290:	633b      	str	r3, [r7, #48]	; 0x30
 8001292:	462b      	mov	r3, r5
 8001294:	460a      	mov	r2, r1
 8001296:	eb42 0303 	adc.w	r3, r2, r3
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80012a8:	4629      	mov	r1, r5
 80012aa:	024b      	lsls	r3, r1, #9
 80012ac:	4621      	mov	r1, r4
 80012ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80012b2:	4621      	mov	r1, r4
 80012b4:	024a      	lsls	r2, r1, #9
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012be:	2200      	movs	r2, #0
 80012c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80012c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80012c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80012cc:	f7fe ffa0 	bl	8000210 <__aeabi_uldivmod>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4613      	mov	r3, r2
 80012d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80012da:	e067      	b.n	80013ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012dc:	4b75      	ldr	r3, [pc, #468]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	099b      	lsrs	r3, r3, #6
 80012e2:	2200      	movs	r2, #0
 80012e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80012e8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80012ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80012f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80012f6:	2300      	movs	r3, #0
 80012f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80012fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80012fe:	4622      	mov	r2, r4
 8001300:	462b      	mov	r3, r5
 8001302:	f04f 0000 	mov.w	r0, #0
 8001306:	f04f 0100 	mov.w	r1, #0
 800130a:	0159      	lsls	r1, r3, #5
 800130c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001310:	0150      	lsls	r0, r2, #5
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4621      	mov	r1, r4
 8001318:	1a51      	subs	r1, r2, r1
 800131a:	62b9      	str	r1, [r7, #40]	; 0x28
 800131c:	4629      	mov	r1, r5
 800131e:	eb63 0301 	sbc.w	r3, r3, r1
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001330:	4649      	mov	r1, r9
 8001332:	018b      	lsls	r3, r1, #6
 8001334:	4641      	mov	r1, r8
 8001336:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800133a:	4641      	mov	r1, r8
 800133c:	018a      	lsls	r2, r1, #6
 800133e:	4641      	mov	r1, r8
 8001340:	ebb2 0a01 	subs.w	sl, r2, r1
 8001344:	4649      	mov	r1, r9
 8001346:	eb63 0b01 	sbc.w	fp, r3, r1
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001356:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800135a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800135e:	4692      	mov	sl, r2
 8001360:	469b      	mov	fp, r3
 8001362:	4623      	mov	r3, r4
 8001364:	eb1a 0303 	adds.w	r3, sl, r3
 8001368:	623b      	str	r3, [r7, #32]
 800136a:	462b      	mov	r3, r5
 800136c:	eb4b 0303 	adc.w	r3, fp, r3
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	f04f 0300 	mov.w	r3, #0
 800137a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800137e:	4629      	mov	r1, r5
 8001380:	028b      	lsls	r3, r1, #10
 8001382:	4621      	mov	r1, r4
 8001384:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001388:	4621      	mov	r1, r4
 800138a:	028a      	lsls	r2, r1, #10
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001394:	2200      	movs	r2, #0
 8001396:	673b      	str	r3, [r7, #112]	; 0x70
 8001398:	677a      	str	r2, [r7, #116]	; 0x74
 800139a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800139e:	f7fe ff37 	bl	8000210 <__aeabi_uldivmod>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4613      	mov	r3, r2
 80013a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013ac:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	0c1b      	lsrs	r3, r3, #16
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	3301      	adds	r3, #1
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80013be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80013c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80013c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80013ce:	e0eb      	b.n	80015a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013d0:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013dc:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d06b      	beq.n	80014c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013e8:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	099b      	lsrs	r3, r3, #6
 80013ee:	2200      	movs	r2, #0
 80013f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80013f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80013f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013fa:	663b      	str	r3, [r7, #96]	; 0x60
 80013fc:	2300      	movs	r3, #0
 80013fe:	667b      	str	r3, [r7, #100]	; 0x64
 8001400:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001404:	4622      	mov	r2, r4
 8001406:	462b      	mov	r3, r5
 8001408:	f04f 0000 	mov.w	r0, #0
 800140c:	f04f 0100 	mov.w	r1, #0
 8001410:	0159      	lsls	r1, r3, #5
 8001412:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001416:	0150      	lsls	r0, r2, #5
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4621      	mov	r1, r4
 800141e:	1a51      	subs	r1, r2, r1
 8001420:	61b9      	str	r1, [r7, #24]
 8001422:	4629      	mov	r1, r5
 8001424:	eb63 0301 	sbc.w	r3, r3, r1
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001436:	4659      	mov	r1, fp
 8001438:	018b      	lsls	r3, r1, #6
 800143a:	4651      	mov	r1, sl
 800143c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001440:	4651      	mov	r1, sl
 8001442:	018a      	lsls	r2, r1, #6
 8001444:	4651      	mov	r1, sl
 8001446:	ebb2 0801 	subs.w	r8, r2, r1
 800144a:	4659      	mov	r1, fp
 800144c:	eb63 0901 	sbc.w	r9, r3, r1
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800145c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001460:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001464:	4690      	mov	r8, r2
 8001466:	4699      	mov	r9, r3
 8001468:	4623      	mov	r3, r4
 800146a:	eb18 0303 	adds.w	r3, r8, r3
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	462b      	mov	r3, r5
 8001472:	eb49 0303 	adc.w	r3, r9, r3
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001484:	4629      	mov	r1, r5
 8001486:	024b      	lsls	r3, r1, #9
 8001488:	4621      	mov	r1, r4
 800148a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800148e:	4621      	mov	r1, r4
 8001490:	024a      	lsls	r2, r1, #9
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800149a:	2200      	movs	r2, #0
 800149c:	65bb      	str	r3, [r7, #88]	; 0x58
 800149e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80014a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014a4:	f7fe feb4 	bl	8000210 <__aeabi_uldivmod>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4613      	mov	r3, r2
 80014ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014b2:	e065      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x420>
 80014b4:	40023800 	.word	0x40023800
 80014b8:	00f42400 	.word	0x00f42400
 80014bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014c0:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	099b      	lsrs	r3, r3, #6
 80014c6:	2200      	movs	r2, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	4611      	mov	r1, r2
 80014cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80014d0:	653b      	str	r3, [r7, #80]	; 0x50
 80014d2:	2300      	movs	r3, #0
 80014d4:	657b      	str	r3, [r7, #84]	; 0x54
 80014d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80014da:	4642      	mov	r2, r8
 80014dc:	464b      	mov	r3, r9
 80014de:	f04f 0000 	mov.w	r0, #0
 80014e2:	f04f 0100 	mov.w	r1, #0
 80014e6:	0159      	lsls	r1, r3, #5
 80014e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014ec:	0150      	lsls	r0, r2, #5
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4641      	mov	r1, r8
 80014f4:	1a51      	subs	r1, r2, r1
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	4649      	mov	r1, r9
 80014fa:	eb63 0301 	sbc.w	r3, r3, r1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800150c:	4659      	mov	r1, fp
 800150e:	018b      	lsls	r3, r1, #6
 8001510:	4651      	mov	r1, sl
 8001512:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001516:	4651      	mov	r1, sl
 8001518:	018a      	lsls	r2, r1, #6
 800151a:	4651      	mov	r1, sl
 800151c:	1a54      	subs	r4, r2, r1
 800151e:	4659      	mov	r1, fp
 8001520:	eb63 0501 	sbc.w	r5, r3, r1
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	00eb      	lsls	r3, r5, #3
 800152e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001532:	00e2      	lsls	r2, r4, #3
 8001534:	4614      	mov	r4, r2
 8001536:	461d      	mov	r5, r3
 8001538:	4643      	mov	r3, r8
 800153a:	18e3      	adds	r3, r4, r3
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	464b      	mov	r3, r9
 8001540:	eb45 0303 	adc.w	r3, r5, r3
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001552:	4629      	mov	r1, r5
 8001554:	028b      	lsls	r3, r1, #10
 8001556:	4621      	mov	r1, r4
 8001558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800155c:	4621      	mov	r1, r4
 800155e:	028a      	lsls	r2, r1, #10
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001568:	2200      	movs	r2, #0
 800156a:	64bb      	str	r3, [r7, #72]	; 0x48
 800156c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800156e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001572:	f7fe fe4d 	bl	8000210 <__aeabi_uldivmod>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4613      	mov	r3, r2
 800157c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	0f1b      	lsrs	r3, r3, #28
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800158e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001592:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001596:	fbb2 f3f3 	udiv	r3, r2, r3
 800159a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800159e:	e003      	b.n	80015a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80015a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	37b8      	adds	r7, #184	; 0xb8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	00f42400 	.word	0x00f42400

080015c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e28d      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8083 	beq.w	80016e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015e0:	4b94      	ldr	r3, [pc, #592]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d019      	beq.n	8001620 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015ec:	4b91      	ldr	r3, [pc, #580]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d106      	bne.n	8001606 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015f8:	4b8e      	ldr	r3, [pc, #568]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001600:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001604:	d00c      	beq.n	8001620 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001606:	4b8b      	ldr	r3, [pc, #556]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800160e:	2b0c      	cmp	r3, #12
 8001610:	d112      	bne.n	8001638 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001612:	4b88      	ldr	r3, [pc, #544]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800161a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800161e:	d10b      	bne.n	8001638 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	4b84      	ldr	r3, [pc, #528]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d05b      	beq.n	80016e4 <HAL_RCC_OscConfig+0x124>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d157      	bne.n	80016e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e25a      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001640:	d106      	bne.n	8001650 <HAL_RCC_OscConfig+0x90>
 8001642:	4b7c      	ldr	r3, [pc, #496]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a7b      	ldr	r2, [pc, #492]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e01d      	b.n	800168c <HAL_RCC_OscConfig+0xcc>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0xb4>
 800165a:	4b76      	ldr	r3, [pc, #472]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a75      	ldr	r2, [pc, #468]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b73      	ldr	r3, [pc, #460]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a72      	ldr	r2, [pc, #456]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 800166c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e00b      	b.n	800168c <HAL_RCC_OscConfig+0xcc>
 8001674:	4b6f      	ldr	r3, [pc, #444]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a6e      	ldr	r2, [pc, #440]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 800167a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b6c      	ldr	r3, [pc, #432]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a6b      	ldr	r2, [pc, #428]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d013      	beq.n	80016bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff f9ac 	bl	80009f0 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff f9a8 	bl	80009f0 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e21f      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	4b61      	ldr	r3, [pc, #388]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0xdc>
 80016ba:	e014      	b.n	80016e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff f998 	bl	80009f0 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff f994 	bl	80009f0 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	; 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e20b      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d6:	4b57      	ldr	r3, [pc, #348]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x104>
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d06f      	beq.n	80017d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016f2:	4b50      	ldr	r3, [pc, #320]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d017      	beq.n	800172e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016fe:	4b4d      	ldr	r3, [pc, #308]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001706:	2b08      	cmp	r3, #8
 8001708:	d105      	bne.n	8001716 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800170a:	4b4a      	ldr	r3, [pc, #296]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00b      	beq.n	800172e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800171e:	2b0c      	cmp	r3, #12
 8001720:	d11c      	bne.n	800175c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001722:	4b44      	ldr	r3, [pc, #272]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d116      	bne.n	800175c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172e:	4b41      	ldr	r3, [pc, #260]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <HAL_RCC_OscConfig+0x186>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e1d3      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001746:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	4937      	ldr	r1, [pc, #220]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	e03a      	b.n	80017d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d020      	beq.n	80017a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001764:	4b34      	ldr	r3, [pc, #208]	; (8001838 <HAL_RCC_OscConfig+0x278>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff f941 	bl	80009f0 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001772:	f7ff f93d 	bl	80009f0 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e1b4      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001784:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001790:	4b28      	ldr	r3, [pc, #160]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4925      	ldr	r1, [pc, #148]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
 80017a4:	e015      	b.n	80017d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a6:	4b24      	ldr	r3, [pc, #144]	; (8001838 <HAL_RCC_OscConfig+0x278>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff f920 	bl	80009f0 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b4:	f7ff f91c 	bl	80009f0 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e193      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d036      	beq.n	800184c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d016      	beq.n	8001814 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff f900 	bl	80009f0 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f4:	f7ff f8fc 	bl	80009f0 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e173      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x234>
 8001812:	e01b      	b.n	800184c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181a:	f7ff f8e9 	bl	80009f0 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001820:	e00e      	b.n	8001840 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001822:	f7ff f8e5 	bl	80009f0 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d907      	bls.n	8001840 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e15c      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
 8001834:	40023800 	.word	0x40023800
 8001838:	42470000 	.word	0x42470000
 800183c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001840:	4b8a      	ldr	r3, [pc, #552]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1ea      	bne.n	8001822 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 8097 	beq.w	8001988 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185e:	4b83      	ldr	r3, [pc, #524]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10f      	bne.n	800188a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	4b7f      	ldr	r3, [pc, #508]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a7e      	ldr	r2, [pc, #504]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b7c      	ldr	r3, [pc, #496]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001886:	2301      	movs	r3, #1
 8001888:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188a:	4b79      	ldr	r3, [pc, #484]	; (8001a70 <HAL_RCC_OscConfig+0x4b0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d118      	bne.n	80018c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001896:	4b76      	ldr	r3, [pc, #472]	; (8001a70 <HAL_RCC_OscConfig+0x4b0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a75      	ldr	r2, [pc, #468]	; (8001a70 <HAL_RCC_OscConfig+0x4b0>)
 800189c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a2:	f7ff f8a5 	bl	80009f0 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018aa:	f7ff f8a1 	bl	80009f0 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e118      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	4b6c      	ldr	r3, [pc, #432]	; (8001a70 <HAL_RCC_OscConfig+0x4b0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x31e>
 80018d0:	4b66      	ldr	r3, [pc, #408]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d4:	4a65      	ldr	r2, [pc, #404]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6713      	str	r3, [r2, #112]	; 0x70
 80018dc:	e01c      	b.n	8001918 <HAL_RCC_OscConfig+0x358>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x340>
 80018e6:	4b61      	ldr	r3, [pc, #388]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ea:	4a60      	ldr	r2, [pc, #384]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	6713      	str	r3, [r2, #112]	; 0x70
 80018f2:	4b5e      	ldr	r3, [pc, #376]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 80018f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f6:	4a5d      	ldr	r2, [pc, #372]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6713      	str	r3, [r2, #112]	; 0x70
 80018fe:	e00b      	b.n	8001918 <HAL_RCC_OscConfig+0x358>
 8001900:	4b5a      	ldr	r3, [pc, #360]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001904:	4a59      	ldr	r2, [pc, #356]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	6713      	str	r3, [r2, #112]	; 0x70
 800190c:	4b57      	ldr	r3, [pc, #348]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001910:	4a56      	ldr	r2, [pc, #344]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001912:	f023 0304 	bic.w	r3, r3, #4
 8001916:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d015      	beq.n	800194c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001920:	f7ff f866 	bl	80009f0 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001926:	e00a      	b.n	800193e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001928:	f7ff f862 	bl	80009f0 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	; 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e0d7      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193e:	4b4b      	ldr	r3, [pc, #300]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0ee      	beq.n	8001928 <HAL_RCC_OscConfig+0x368>
 800194a:	e014      	b.n	8001976 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff f850 	bl	80009f0 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001952:	e00a      	b.n	800196a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001954:	f7ff f84c 	bl	80009f0 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e0c1      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196a:	4b40      	ldr	r3, [pc, #256]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1ee      	bne.n	8001954 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197c:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	4a3a      	ldr	r2, [pc, #232]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001986:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80ad 	beq.w	8001aec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001992:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b08      	cmp	r3, #8
 800199c:	d060      	beq.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d145      	bne.n	8001a32 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a6:	4b33      	ldr	r3, [pc, #204]	; (8001a74 <HAL_RCC_OscConfig+0x4b4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff f820 	bl	80009f0 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff f81c 	bl	80009f0 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e093      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c6:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	019b      	lsls	r3, r3, #6
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	3b01      	subs	r3, #1
 80019ec:	041b      	lsls	r3, r3, #16
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	061b      	lsls	r3, r3, #24
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	071b      	lsls	r3, r3, #28
 80019fe:	491b      	ldr	r1, [pc, #108]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <HAL_RCC_OscConfig+0x4b4>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7fe fff1 	bl	80009f0 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a12:	f7fe ffed 	bl	80009f0 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e064      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x452>
 8001a30:	e05c      	b.n	8001aec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a32:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <HAL_RCC_OscConfig+0x4b4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7fe ffda 	bl	80009f0 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a40:	f7fe ffd6 	bl	80009f0 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e04d      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x480>
 8001a5e:	e045      	b.n	8001aec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d107      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e040      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40007000 	.word	0x40007000
 8001a74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a78:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <HAL_RCC_OscConfig+0x538>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d030      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d129      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d122      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d119      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abe:	085b      	lsrs	r3, r3, #1
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d10f      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d107      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800

08001afc <__NVIC_SetPriority>:
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	db0a      	blt.n	8001b26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	490c      	ldr	r1, [pc, #48]	; (8001b48 <__NVIC_SetPriority+0x4c>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	0112      	lsls	r2, r2, #4
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b24:	e00a      	b.n	8001b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4908      	ldr	r1, [pc, #32]	; (8001b4c <__NVIC_SetPriority+0x50>)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	3b04      	subs	r3, #4
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	440b      	add	r3, r1
 8001b3a:	761a      	strb	r2, [r3, #24]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001b54:	2100      	movs	r1, #0
 8001b56:	f06f 0004 	mvn.w	r0, #4
 8001b5a:	f7ff ffcf 	bl	8001afc <__NVIC_SetPriority>
#endif
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b6a:	f3ef 8305 	mrs	r3, IPSR
 8001b6e:	603b      	str	r3, [r7, #0]
  return(result);
 8001b70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001b76:	f06f 0305 	mvn.w	r3, #5
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	e00c      	b.n	8001b98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <osKernelInitialize+0x44>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d105      	bne.n	8001b92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <osKernelInitialize+0x44>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	e002      	b.n	8001b98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001b98:	687b      	ldr	r3, [r7, #4]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000040 	.word	0x20000040

08001bac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bb2:	f3ef 8305 	mrs	r3, IPSR
 8001bb6:	603b      	str	r3, [r7, #0]
  return(result);
 8001bb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001bbe:	f06f 0305 	mvn.w	r3, #5
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	e010      	b.n	8001be8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <osKernelStart+0x48>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d109      	bne.n	8001be2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001bce:	f7ff ffbf 	bl	8001b50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <osKernelStart+0x48>)
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001bd8:	f001 f866 	bl	8002ca8 <vTaskStartScheduler>
      stat = osOK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	e002      	b.n	8001be8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001be8:	687b      	ldr	r3, [r7, #4]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000040 	.word	0x20000040

08001bf8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08e      	sub	sp, #56	; 0x38
 8001bfc:	af04      	add	r7, sp, #16
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c08:	f3ef 8305 	mrs	r3, IPSR
 8001c0c:	617b      	str	r3, [r7, #20]
  return(result);
 8001c0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d17e      	bne.n	8001d12 <osThreadNew+0x11a>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d07b      	beq.n	8001d12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001c1e:	2318      	movs	r3, #24
 8001c20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d045      	beq.n	8001cbe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <osThreadNew+0x48>
        name = attr->name;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <osThreadNew+0x6e>
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	2b38      	cmp	r3, #56	; 0x38
 8001c58:	d805      	bhi.n	8001c66 <osThreadNew+0x6e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <osThreadNew+0x72>
        return (NULL);
 8001c66:	2300      	movs	r3, #0
 8001c68:	e054      	b.n	8001d14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00e      	beq.n	8001ca0 <osThreadNew+0xa8>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b5b      	cmp	r3, #91	; 0x5b
 8001c88:	d90a      	bls.n	8001ca0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d006      	beq.n	8001ca0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <osThreadNew+0xa8>
        mem = 1;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	e010      	b.n	8001cc2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10c      	bne.n	8001cc2 <osThreadNew+0xca>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d108      	bne.n	8001cc2 <osThreadNew+0xca>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d104      	bne.n	8001cc2 <osThreadNew+0xca>
          mem = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61bb      	str	r3, [r7, #24]
 8001cbc:	e001      	b.n	8001cc2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d110      	bne.n	8001cea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001cd0:	9202      	str	r2, [sp, #8]
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	6a3a      	ldr	r2, [r7, #32]
 8001cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 fe0c 	bl	80028fc <xTaskCreateStatic>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	e013      	b.n	8001d12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d110      	bne.n	8001d12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 fe57 	bl	80029b6 <xTaskCreate>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d001      	beq.n	8001d12 <osThreadNew+0x11a>
            hTask = NULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001d12:	693b      	ldr	r3, [r7, #16]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3728      	adds	r7, #40	; 0x28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d24:	f3ef 8305 	mrs	r3, IPSR
 8001d28:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d2a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <osDelay+0x1c>
    stat = osErrorISR;
 8001d30:	f06f 0305 	mvn.w	r3, #5
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	e007      	b.n	8001d48 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 ff7c 	bl	8002c40 <vTaskDelay>
    }
  }

  return (stat);
 8001d48:	68fb      	ldr	r3, [r7, #12]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <vApplicationGetIdleTaskMemory+0x2c>)
 8001d64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	4a06      	ldr	r2, [pc, #24]	; (8001d84 <vApplicationGetIdleTaskMemory+0x30>)
 8001d6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2280      	movs	r2, #128	; 0x80
 8001d70:	601a      	str	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000044 	.word	0x20000044
 8001d84:	200000a0 	.word	0x200000a0

08001d88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <vApplicationGetTimerTaskMemory+0x2c>)
 8001d98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	4a06      	ldr	r2, [pc, #24]	; (8001db8 <vApplicationGetTimerTaskMemory+0x30>)
 8001d9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001da6:	601a      	str	r2, [r3, #0]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	200002a0 	.word	0x200002a0
 8001db8:	200002fc 	.word	0x200002fc

08001dbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f103 0208 	add.w	r2, r3, #8
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f103 0208 	add.w	r2, r3, #8
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f103 0208 	add.w	r2, r3, #8
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e16:	b480      	push	{r7}
 8001e18:	b085      	sub	sp, #20
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	601a      	str	r2, [r3, #0]
}
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b085      	sub	sp, #20
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d103      	bne.n	8001e7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	e00c      	b.n	8001e98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3308      	adds	r3, #8
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	e002      	b.n	8001e8c <vListInsert+0x2e>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d2f6      	bcs.n	8001e86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	601a      	str	r2, [r3, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6892      	ldr	r2, [r2, #8]
 8001ee6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6852      	ldr	r2, [r2, #4]
 8001ef0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d103      	bne.n	8001f04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	1e5a      	subs	r2, r3, #1
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10a      	bne.n	8001f4e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3c:	f383 8811 	msr	BASEPRI, r3
 8001f40:	f3bf 8f6f 	isb	sy
 8001f44:	f3bf 8f4f 	dsb	sy
 8001f48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001f4a:	bf00      	nop
 8001f4c:	e7fe      	b.n	8001f4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001f4e:	f002 f851 	bl	8003ff4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	68f9      	ldr	r1, [r7, #12]
 8001f5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f5e:	fb01 f303 	mul.w	r3, r1, r3
 8001f62:	441a      	add	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	68f9      	ldr	r1, [r7, #12]
 8001f82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	441a      	add	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	22ff      	movs	r2, #255	; 0xff
 8001f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	22ff      	movs	r2, #255	; 0xff
 8001f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d114      	bne.n	8001fce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d01a      	beq.n	8001fe2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3310      	adds	r3, #16
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 f903 	bl	80031bc <xTaskRemoveFromEventList>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d012      	beq.n	8001fe2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <xQueueGenericReset+0xcc>)
 8001fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	f3bf 8f4f 	dsb	sy
 8001fc8:	f3bf 8f6f 	isb	sy
 8001fcc:	e009      	b.n	8001fe2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3310      	adds	r3, #16
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fef2 	bl	8001dbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	3324      	adds	r3, #36	; 0x24
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff feed 	bl	8001dbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001fe2:	f002 f837 	bl	8004054 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001fe6:	2301      	movs	r3, #1
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	e000ed04 	.word	0xe000ed04

08001ff4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08e      	sub	sp, #56	; 0x38
 8001ff8:	af02      	add	r7, sp, #8
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10a      	bne.n	800201e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200c:	f383 8811 	msr	BASEPRI, r3
 8002010:	f3bf 8f6f 	isb	sy
 8002014:	f3bf 8f4f 	dsb	sy
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800201a:	bf00      	nop
 800201c:	e7fe      	b.n	800201c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10a      	bne.n	800203a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002028:	f383 8811 	msr	BASEPRI, r3
 800202c:	f3bf 8f6f 	isb	sy
 8002030:	f3bf 8f4f 	dsb	sy
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002036:	bf00      	nop
 8002038:	e7fe      	b.n	8002038 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <xQueueGenericCreateStatic+0x52>
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <xQueueGenericCreateStatic+0x56>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <xQueueGenericCreateStatic+0x58>
 800204a:	2300      	movs	r3, #0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10a      	bne.n	8002066 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002054:	f383 8811 	msr	BASEPRI, r3
 8002058:	f3bf 8f6f 	isb	sy
 800205c:	f3bf 8f4f 	dsb	sy
 8002060:	623b      	str	r3, [r7, #32]
}
 8002062:	bf00      	nop
 8002064:	e7fe      	b.n	8002064 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d102      	bne.n	8002072 <xQueueGenericCreateStatic+0x7e>
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <xQueueGenericCreateStatic+0x82>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <xQueueGenericCreateStatic+0x84>
 8002076:	2300      	movs	r3, #0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10a      	bne.n	8002092 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800207c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002080:	f383 8811 	msr	BASEPRI, r3
 8002084:	f3bf 8f6f 	isb	sy
 8002088:	f3bf 8f4f 	dsb	sy
 800208c:	61fb      	str	r3, [r7, #28]
}
 800208e:	bf00      	nop
 8002090:	e7fe      	b.n	8002090 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002092:	2350      	movs	r3, #80	; 0x50
 8002094:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2b50      	cmp	r3, #80	; 0x50
 800209a:	d00a      	beq.n	80020b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800209c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a0:	f383 8811 	msr	BASEPRI, r3
 80020a4:	f3bf 8f6f 	isb	sy
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	61bb      	str	r3, [r7, #24]
}
 80020ae:	bf00      	nop
 80020b0:	e7fe      	b.n	80020b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80020b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80020b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00d      	beq.n	80020da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80020be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80020c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80020ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	4613      	mov	r3, r2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	68b9      	ldr	r1, [r7, #8]
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 f805 	bl	80020e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80020dc:	4618      	mov	r0, r3
 80020de:	3730      	adds	r7, #48	; 0x30
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d103      	bne.n	8002100 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	e002      	b.n	8002106 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002112:	2101      	movs	r1, #1
 8002114:	69b8      	ldr	r0, [r7, #24]
 8002116:	f7ff ff05 	bl	8001f24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08e      	sub	sp, #56	; 0x38
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800213a:	2300      	movs	r3, #0
 800213c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10a      	bne.n	800215e <xQueueGenericSend+0x32>
	__asm volatile
 8002148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214c:	f383 8811 	msr	BASEPRI, r3
 8002150:	f3bf 8f6f 	isb	sy
 8002154:	f3bf 8f4f 	dsb	sy
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800215a:	bf00      	nop
 800215c:	e7fe      	b.n	800215c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d103      	bne.n	800216c <xQueueGenericSend+0x40>
 8002164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <xQueueGenericSend+0x44>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <xQueueGenericSend+0x46>
 8002170:	2300      	movs	r3, #0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10a      	bne.n	800218c <xQueueGenericSend+0x60>
	__asm volatile
 8002176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217a:	f383 8811 	msr	BASEPRI, r3
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	f3bf 8f4f 	dsb	sy
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002188:	bf00      	nop
 800218a:	e7fe      	b.n	800218a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d103      	bne.n	800219a <xQueueGenericSend+0x6e>
 8002192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <xQueueGenericSend+0x72>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <xQueueGenericSend+0x74>
 800219e:	2300      	movs	r3, #0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10a      	bne.n	80021ba <xQueueGenericSend+0x8e>
	__asm volatile
 80021a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a8:	f383 8811 	msr	BASEPRI, r3
 80021ac:	f3bf 8f6f 	isb	sy
 80021b0:	f3bf 8f4f 	dsb	sy
 80021b4:	623b      	str	r3, [r7, #32]
}
 80021b6:	bf00      	nop
 80021b8:	e7fe      	b.n	80021b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021ba:	f001 f9bd 	bl	8003538 <xTaskGetSchedulerState>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d102      	bne.n	80021ca <xQueueGenericSend+0x9e>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <xQueueGenericSend+0xa2>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <xQueueGenericSend+0xa4>
 80021ce:	2300      	movs	r3, #0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10a      	bne.n	80021ea <xQueueGenericSend+0xbe>
	__asm volatile
 80021d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d8:	f383 8811 	msr	BASEPRI, r3
 80021dc:	f3bf 8f6f 	isb	sy
 80021e0:	f3bf 8f4f 	dsb	sy
 80021e4:	61fb      	str	r3, [r7, #28]
}
 80021e6:	bf00      	nop
 80021e8:	e7fe      	b.n	80021e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80021ea:	f001 ff03 	bl	8003ff4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d302      	bcc.n	8002200 <xQueueGenericSend+0xd4>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d129      	bne.n	8002254 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002206:	f000 fa0b 	bl	8002620 <prvCopyDataToQueue>
 800220a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	2b00      	cmp	r3, #0
 8002212:	d010      	beq.n	8002236 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002216:	3324      	adds	r3, #36	; 0x24
 8002218:	4618      	mov	r0, r3
 800221a:	f000 ffcf 	bl	80031bc <xTaskRemoveFromEventList>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d013      	beq.n	800224c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002224:	4b3f      	ldr	r3, [pc, #252]	; (8002324 <xQueueGenericSend+0x1f8>)
 8002226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	f3bf 8f4f 	dsb	sy
 8002230:	f3bf 8f6f 	isb	sy
 8002234:	e00a      	b.n	800224c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002238:	2b00      	cmp	r3, #0
 800223a:	d007      	beq.n	800224c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800223c:	4b39      	ldr	r3, [pc, #228]	; (8002324 <xQueueGenericSend+0x1f8>)
 800223e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	f3bf 8f4f 	dsb	sy
 8002248:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800224c:	f001 ff02 	bl	8004054 <vPortExitCritical>
				return pdPASS;
 8002250:	2301      	movs	r3, #1
 8002252:	e063      	b.n	800231c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d103      	bne.n	8002262 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800225a:	f001 fefb 	bl	8004054 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800225e:	2300      	movs	r3, #0
 8002260:	e05c      	b.n	800231c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002264:	2b00      	cmp	r3, #0
 8002266:	d106      	bne.n	8002276 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	4618      	mov	r0, r3
 800226e:	f001 f809 	bl	8003284 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002272:	2301      	movs	r3, #1
 8002274:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002276:	f001 feed 	bl	8004054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800227a:	f000 fd7b 	bl	8002d74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800227e:	f001 feb9 	bl	8003ff4 <vPortEnterCritical>
 8002282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002284:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002288:	b25b      	sxtb	r3, r3
 800228a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228e:	d103      	bne.n	8002298 <xQueueGenericSend+0x16c>
 8002290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800229e:	b25b      	sxtb	r3, r3
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a4:	d103      	bne.n	80022ae <xQueueGenericSend+0x182>
 80022a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022ae:	f001 fed1 	bl	8004054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022b2:	1d3a      	adds	r2, r7, #4
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fff8 	bl	80032b0 <xTaskCheckForTimeOut>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d124      	bne.n	8002310 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80022c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022c8:	f000 faa2 	bl	8002810 <prvIsQueueFull>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d018      	beq.n	8002304 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80022d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d4:	3310      	adds	r3, #16
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	4611      	mov	r1, r2
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 ff1e 	bl	800311c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80022e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022e2:	f000 fa2d 	bl	8002740 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80022e6:	f000 fd53 	bl	8002d90 <xTaskResumeAll>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f47f af7c 	bne.w	80021ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80022f2:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <xQueueGenericSend+0x1f8>)
 80022f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f3bf 8f4f 	dsb	sy
 80022fe:	f3bf 8f6f 	isb	sy
 8002302:	e772      	b.n	80021ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002306:	f000 fa1b 	bl	8002740 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800230a:	f000 fd41 	bl	8002d90 <xTaskResumeAll>
 800230e:	e76c      	b.n	80021ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002312:	f000 fa15 	bl	8002740 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002316:	f000 fd3b 	bl	8002d90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800231a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800231c:	4618      	mov	r0, r3
 800231e:	3738      	adds	r7, #56	; 0x38
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	e000ed04 	.word	0xe000ed04

08002328 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b090      	sub	sp, #64	; 0x40
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800233a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002344:	f383 8811 	msr	BASEPRI, r3
 8002348:	f3bf 8f6f 	isb	sy
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002352:	bf00      	nop
 8002354:	e7fe      	b.n	8002354 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d103      	bne.n	8002364 <xQueueGenericSendFromISR+0x3c>
 800235c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <xQueueGenericSendFromISR+0x40>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <xQueueGenericSendFromISR+0x42>
 8002368:	2300      	movs	r3, #0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10a      	bne.n	8002384 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800236e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002372:	f383 8811 	msr	BASEPRI, r3
 8002376:	f3bf 8f6f 	isb	sy
 800237a:	f3bf 8f4f 	dsb	sy
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002380:	bf00      	nop
 8002382:	e7fe      	b.n	8002382 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d103      	bne.n	8002392 <xQueueGenericSendFromISR+0x6a>
 800238a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <xQueueGenericSendFromISR+0x6e>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <xQueueGenericSendFromISR+0x70>
 8002396:	2300      	movs	r3, #0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10a      	bne.n	80023b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800239c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a0:	f383 8811 	msr	BASEPRI, r3
 80023a4:	f3bf 8f6f 	isb	sy
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	623b      	str	r3, [r7, #32]
}
 80023ae:	bf00      	nop
 80023b0:	e7fe      	b.n	80023b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80023b2:	f001 ff01 	bl	80041b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80023b6:	f3ef 8211 	mrs	r2, BASEPRI
 80023ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023be:	f383 8811 	msr	BASEPRI, r3
 80023c2:	f3bf 8f6f 	isb	sy
 80023c6:	f3bf 8f4f 	dsb	sy
 80023ca:	61fa      	str	r2, [r7, #28]
 80023cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80023ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80023d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80023d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023da:	429a      	cmp	r2, r3
 80023dc:	d302      	bcc.n	80023e4 <xQueueGenericSendFromISR+0xbc>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d12f      	bne.n	8002444 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80023e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	68b9      	ldr	r1, [r7, #8]
 80023f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80023fa:	f000 f911 	bl	8002620 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80023fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002406:	d112      	bne.n	800242e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	2b00      	cmp	r3, #0
 800240e:	d016      	beq.n	800243e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002412:	3324      	adds	r3, #36	; 0x24
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fed1 	bl	80031bc <xTaskRemoveFromEventList>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00e      	beq.n	800243e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00b      	beq.n	800243e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e007      	b.n	800243e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800242e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002432:	3301      	adds	r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	b25a      	sxtb	r2, r3
 8002438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800243e:	2301      	movs	r3, #1
 8002440:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002442:	e001      	b.n	8002448 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002444:	2300      	movs	r3, #0
 8002446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002452:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002456:	4618      	mov	r0, r3
 8002458:	3740      	adds	r7, #64	; 0x40
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08c      	sub	sp, #48	; 0x30
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800246c:	2300      	movs	r3, #0
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10a      	bne.n	8002490 <xQueueReceive+0x30>
	__asm volatile
 800247a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247e:	f383 8811 	msr	BASEPRI, r3
 8002482:	f3bf 8f6f 	isb	sy
 8002486:	f3bf 8f4f 	dsb	sy
 800248a:	623b      	str	r3, [r7, #32]
}
 800248c:	bf00      	nop
 800248e:	e7fe      	b.n	800248e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d103      	bne.n	800249e <xQueueReceive+0x3e>
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <xQueueReceive+0x42>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <xQueueReceive+0x44>
 80024a2:	2300      	movs	r3, #0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10a      	bne.n	80024be <xQueueReceive+0x5e>
	__asm volatile
 80024a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ac:	f383 8811 	msr	BASEPRI, r3
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	61fb      	str	r3, [r7, #28]
}
 80024ba:	bf00      	nop
 80024bc:	e7fe      	b.n	80024bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024be:	f001 f83b 	bl	8003538 <xTaskGetSchedulerState>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <xQueueReceive+0x6e>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <xQueueReceive+0x72>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <xQueueReceive+0x74>
 80024d2:	2300      	movs	r3, #0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10a      	bne.n	80024ee <xQueueReceive+0x8e>
	__asm volatile
 80024d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	61bb      	str	r3, [r7, #24]
}
 80024ea:	bf00      	nop
 80024ec:	e7fe      	b.n	80024ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024ee:	f001 fd81 	bl	8003ff4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d01f      	beq.n	800253e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024fe:	68b9      	ldr	r1, [r7, #8]
 8002500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002502:	f000 f8f7 	bl	80026f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	1e5a      	subs	r2, r3, #1
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00f      	beq.n	8002536 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002518:	3310      	adds	r3, #16
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fe4e 	bl	80031bc <xTaskRemoveFromEventList>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002526:	4b3d      	ldr	r3, [pc, #244]	; (800261c <xQueueReceive+0x1bc>)
 8002528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002536:	f001 fd8d 	bl	8004054 <vPortExitCritical>
				return pdPASS;
 800253a:	2301      	movs	r3, #1
 800253c:	e069      	b.n	8002612 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d103      	bne.n	800254c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002544:	f001 fd86 	bl	8004054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002548:	2300      	movs	r3, #0
 800254a:	e062      	b.n	8002612 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800254c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002552:	f107 0310 	add.w	r3, r7, #16
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fe94 	bl	8003284 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800255c:	2301      	movs	r3, #1
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002560:	f001 fd78 	bl	8004054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002564:	f000 fc06 	bl	8002d74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002568:	f001 fd44 	bl	8003ff4 <vPortEnterCritical>
 800256c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002572:	b25b      	sxtb	r3, r3
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d103      	bne.n	8002582 <xQueueReceive+0x122>
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002588:	b25b      	sxtb	r3, r3
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258e:	d103      	bne.n	8002598 <xQueueReceive+0x138>
 8002590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002598:	f001 fd5c 	bl	8004054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800259c:	1d3a      	adds	r2, r7, #4
 800259e:	f107 0310 	add.w	r3, r7, #16
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 fe83 	bl	80032b0 <xTaskCheckForTimeOut>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d123      	bne.n	80025f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025b2:	f000 f917 	bl	80027e4 <prvIsQueueEmpty>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d017      	beq.n	80025ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025be:	3324      	adds	r3, #36	; 0x24
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	4611      	mov	r1, r2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 fda9 	bl	800311c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80025ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025cc:	f000 f8b8 	bl	8002740 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80025d0:	f000 fbde 	bl	8002d90 <xTaskResumeAll>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d189      	bne.n	80024ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <xQueueReceive+0x1bc>)
 80025dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	f3bf 8f4f 	dsb	sy
 80025e6:	f3bf 8f6f 	isb	sy
 80025ea:	e780      	b.n	80024ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80025ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025ee:	f000 f8a7 	bl	8002740 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025f2:	f000 fbcd 	bl	8002d90 <xTaskResumeAll>
 80025f6:	e77a      	b.n	80024ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80025f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025fa:	f000 f8a1 	bl	8002740 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025fe:	f000 fbc7 	bl	8002d90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002604:	f000 f8ee 	bl	80027e4 <prvIsQueueEmpty>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	f43f af6f 	beq.w	80024ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002610:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002612:	4618      	mov	r0, r3
 8002614:	3730      	adds	r7, #48	; 0x30
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	e000ed04 	.word	0xe000ed04

08002620 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002634:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10d      	bne.n	800265a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d14d      	bne.n	80026e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	4618      	mov	r0, r3
 800264c:	f000 ff92 	bl	8003574 <xTaskPriorityDisinherit>
 8002650:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	e043      	b.n	80026e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d119      	bne.n	8002694 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6858      	ldr	r0, [r3, #4]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	461a      	mov	r2, r3
 800266a:	68b9      	ldr	r1, [r7, #8]
 800266c:	f001 fffa 	bl	8004664 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	441a      	add	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	429a      	cmp	r2, r3
 8002688:	d32b      	bcc.n	80026e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	e026      	b.n	80026e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	68d8      	ldr	r0, [r3, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	461a      	mov	r2, r3
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	f001 ffe0 	bl	8004664 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	425b      	negs	r3, r3
 80026ae:	441a      	add	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d207      	bcs.n	80026d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	425b      	negs	r3, r3
 80026ca:	441a      	add	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d105      	bne.n	80026e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	3b01      	subs	r3, #1
 80026e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80026ea:	697b      	ldr	r3, [r7, #20]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	d018      	beq.n	8002738 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	441a      	add	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	429a      	cmp	r2, r3
 800271e:	d303      	bcc.n	8002728 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68d9      	ldr	r1, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	461a      	mov	r2, r3
 8002732:	6838      	ldr	r0, [r7, #0]
 8002734:	f001 ff96 	bl	8004664 <memcpy>
	}
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002748:	f001 fc54 	bl	8003ff4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002752:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002754:	e011      	b.n	800277a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	2b00      	cmp	r3, #0
 800275c:	d012      	beq.n	8002784 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3324      	adds	r3, #36	; 0x24
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fd2a 	bl	80031bc <xTaskRemoveFromEventList>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800276e:	f000 fe01 	bl	8003374 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	3b01      	subs	r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800277a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277e:	2b00      	cmp	r3, #0
 8002780:	dce9      	bgt.n	8002756 <prvUnlockQueue+0x16>
 8002782:	e000      	b.n	8002786 <prvUnlockQueue+0x46>
					break;
 8002784:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	22ff      	movs	r2, #255	; 0xff
 800278a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800278e:	f001 fc61 	bl	8004054 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002792:	f001 fc2f 	bl	8003ff4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800279c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800279e:	e011      	b.n	80027c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d012      	beq.n	80027ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3310      	adds	r3, #16
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fd05 	bl	80031bc <xTaskRemoveFromEventList>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80027b8:	f000 fddc 	bl	8003374 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80027bc:	7bbb      	ldrb	r3, [r7, #14]
 80027be:	3b01      	subs	r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	dce9      	bgt.n	80027a0 <prvUnlockQueue+0x60>
 80027cc:	e000      	b.n	80027d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80027ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	22ff      	movs	r2, #255	; 0xff
 80027d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80027d8:	f001 fc3c 	bl	8004054 <vPortExitCritical>
}
 80027dc:	bf00      	nop
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80027ec:	f001 fc02 	bl	8003ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d102      	bne.n	80027fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80027f8:	2301      	movs	r3, #1
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	e001      	b.n	8002802 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002802:	f001 fc27 	bl	8004054 <vPortExitCritical>

	return xReturn;
 8002806:	68fb      	ldr	r3, [r7, #12]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002818:	f001 fbec 	bl	8003ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002824:	429a      	cmp	r2, r3
 8002826:	d102      	bne.n	800282e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002828:	2301      	movs	r3, #1
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	e001      	b.n	8002832 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002832:	f001 fc0f 	bl	8004054 <vPortExitCritical>

	return xReturn;
 8002836:	68fb      	ldr	r3, [r7, #12]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	e014      	b.n	800287a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002850:	4a0f      	ldr	r2, [pc, #60]	; (8002890 <vQueueAddToRegistry+0x50>)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10b      	bne.n	8002874 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800285c:	490c      	ldr	r1, [pc, #48]	; (8002890 <vQueueAddToRegistry+0x50>)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002866:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <vQueueAddToRegistry+0x50>)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002872:	e006      	b.n	8002882 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3301      	adds	r3, #1
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b07      	cmp	r3, #7
 800287e:	d9e7      	bls.n	8002850 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	200006fc 	.word	0x200006fc

08002894 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80028a4:	f001 fba6 	bl	8003ff4 <vPortEnterCritical>
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028ae:	b25b      	sxtb	r3, r3
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d103      	bne.n	80028be <vQueueWaitForMessageRestricted+0x2a>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028c4:	b25b      	sxtb	r3, r3
 80028c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ca:	d103      	bne.n	80028d4 <vQueueWaitForMessageRestricted+0x40>
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028d4:	f001 fbbe 	bl	8004054 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d106      	bne.n	80028ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	3324      	adds	r3, #36	; 0x24
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	68b9      	ldr	r1, [r7, #8]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fc3b 	bl	8003164 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80028ee:	6978      	ldr	r0, [r7, #20]
 80028f0:	f7ff ff26 	bl	8002740 <prvUnlockQueue>
	}
 80028f4:	bf00      	nop
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08e      	sub	sp, #56	; 0x38
 8002900:	af04      	add	r7, sp, #16
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800290a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10a      	bne.n	8002926 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	623b      	str	r3, [r7, #32]
}
 8002922:	bf00      	nop
 8002924:	e7fe      	b.n	8002924 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10a      	bne.n	8002942 <xTaskCreateStatic+0x46>
	__asm volatile
 800292c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002930:	f383 8811 	msr	BASEPRI, r3
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	61fb      	str	r3, [r7, #28]
}
 800293e:	bf00      	nop
 8002940:	e7fe      	b.n	8002940 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002942:	235c      	movs	r3, #92	; 0x5c
 8002944:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b5c      	cmp	r3, #92	; 0x5c
 800294a:	d00a      	beq.n	8002962 <xTaskCreateStatic+0x66>
	__asm volatile
 800294c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	61bb      	str	r3, [r7, #24]
}
 800295e:	bf00      	nop
 8002960:	e7fe      	b.n	8002960 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002962:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002966:	2b00      	cmp	r3, #0
 8002968:	d01e      	beq.n	80029a8 <xTaskCreateStatic+0xac>
 800296a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296c:	2b00      	cmp	r3, #0
 800296e:	d01b      	beq.n	80029a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002978:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	2202      	movs	r2, #2
 800297e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002982:	2300      	movs	r3, #0
 8002984:	9303      	str	r3, [sp, #12]
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	9302      	str	r3, [sp, #8]
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f850 	bl	8002a40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029a2:	f000 f8dd 	bl	8002b60 <prvAddNewTaskToReadyList>
 80029a6:	e001      	b.n	80029ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80029ac:	697b      	ldr	r3, [r7, #20]
	}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3728      	adds	r7, #40	; 0x28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b08c      	sub	sp, #48	; 0x30
 80029ba:	af04      	add	r7, sp, #16
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	603b      	str	r3, [r7, #0]
 80029c2:	4613      	mov	r3, r2
 80029c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f001 fc34 	bl	8004238 <pvPortMalloc>
 80029d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00e      	beq.n	80029f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029d8:	205c      	movs	r0, #92	; 0x5c
 80029da:	f001 fc2d 	bl	8004238 <pvPortMalloc>
 80029de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
 80029ec:	e005      	b.n	80029fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80029ee:	6978      	ldr	r0, [r7, #20]
 80029f0:	f001 fcee 	bl	80043d0 <vPortFree>
 80029f4:	e001      	b.n	80029fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d017      	beq.n	8002a30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a08:	88fa      	ldrh	r2, [r7, #6]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	9303      	str	r3, [sp, #12]
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	9302      	str	r3, [sp, #8]
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f80e 	bl	8002a40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a24:	69f8      	ldr	r0, [r7, #28]
 8002a26:	f000 f89b 	bl	8002b60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	e002      	b.n	8002a36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a30:	f04f 33ff 	mov.w	r3, #4294967295
 8002a34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a36:	69bb      	ldr	r3, [r7, #24]
	}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3720      	adds	r7, #32
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	461a      	mov	r2, r3
 8002a58:	21a5      	movs	r1, #165	; 0xa5
 8002a5a:	f001 fdd7 	bl	800460c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	f023 0307 	bic.w	r3, r3, #7
 8002a76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	617b      	str	r3, [r7, #20]
}
 8002a94:	bf00      	nop
 8002a96:	e7fe      	b.n	8002a96 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01f      	beq.n	8002ade <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	e012      	b.n	8002aca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	7819      	ldrb	r1, [r3, #0]
 8002aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3334      	adds	r3, #52	; 0x34
 8002ab4:	460a      	mov	r2, r1
 8002ab6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	4413      	add	r3, r2
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d006      	beq.n	8002ad2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	2b0f      	cmp	r3, #15
 8002ace:	d9e9      	bls.n	8002aa4 <prvInitialiseNewTask+0x64>
 8002ad0:	e000      	b.n	8002ad4 <prvInitialiseNewTask+0x94>
			{
				break;
 8002ad2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002adc:	e003      	b.n	8002ae6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae8:	2b37      	cmp	r3, #55	; 0x37
 8002aea:	d901      	bls.n	8002af0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002aec:	2337      	movs	r3, #55	; 0x37
 8002aee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002af4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002afa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	2200      	movs	r2, #0
 8002b00:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b04:	3304      	adds	r3, #4
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff f978 	bl	8001dfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0e:	3318      	adds	r3, #24
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff f973 	bl	8001dfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2e:	2200      	movs	r2, #0
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	68f9      	ldr	r1, [r7, #12]
 8002b3e:	69b8      	ldr	r0, [r7, #24]
 8002b40:	f001 f928 	bl	8003d94 <pxPortInitialiseStack>
 8002b44:	4602      	mov	r2, r0
 8002b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b56:	bf00      	nop
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b68:	f001 fa44 	bl	8003ff4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b6c:	4b2d      	ldr	r3, [pc, #180]	; (8002c24 <prvAddNewTaskToReadyList+0xc4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3301      	adds	r3, #1
 8002b72:	4a2c      	ldr	r2, [pc, #176]	; (8002c24 <prvAddNewTaskToReadyList+0xc4>)
 8002b74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b76:	4b2c      	ldr	r3, [pc, #176]	; (8002c28 <prvAddNewTaskToReadyList+0xc8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b7e:	4a2a      	ldr	r2, [pc, #168]	; (8002c28 <prvAddNewTaskToReadyList+0xc8>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b84:	4b27      	ldr	r3, [pc, #156]	; (8002c24 <prvAddNewTaskToReadyList+0xc4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d110      	bne.n	8002bae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b8c:	f000 fc16 	bl	80033bc <prvInitialiseTaskLists>
 8002b90:	e00d      	b.n	8002bae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b92:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <prvAddNewTaskToReadyList+0xcc>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b9a:	4b23      	ldr	r3, [pc, #140]	; (8002c28 <prvAddNewTaskToReadyList+0xc8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d802      	bhi.n	8002bae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ba8:	4a1f      	ldr	r2, [pc, #124]	; (8002c28 <prvAddNewTaskToReadyList+0xc8>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002bae:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <prvAddNewTaskToReadyList+0xd0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	4a1e      	ldr	r2, [pc, #120]	; (8002c30 <prvAddNewTaskToReadyList+0xd0>)
 8002bb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bb8:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <prvAddNewTaskToReadyList+0xd0>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <prvAddNewTaskToReadyList+0xd4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d903      	bls.n	8002bd4 <prvAddNewTaskToReadyList+0x74>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	4a18      	ldr	r2, [pc, #96]	; (8002c34 <prvAddNewTaskToReadyList+0xd4>)
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4a15      	ldr	r2, [pc, #84]	; (8002c38 <prvAddNewTaskToReadyList+0xd8>)
 8002be2:	441a      	add	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3304      	adds	r3, #4
 8002be8:	4619      	mov	r1, r3
 8002bea:	4610      	mov	r0, r2
 8002bec:	f7ff f913 	bl	8001e16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002bf0:	f001 fa30 	bl	8004054 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002bf4:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <prvAddNewTaskToReadyList+0xcc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00e      	beq.n	8002c1a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <prvAddNewTaskToReadyList+0xc8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d207      	bcs.n	8002c1a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <prvAddNewTaskToReadyList+0xdc>)
 8002c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000c10 	.word	0x20000c10
 8002c28:	2000073c 	.word	0x2000073c
 8002c2c:	20000c1c 	.word	0x20000c1c
 8002c30:	20000c2c 	.word	0x20000c2c
 8002c34:	20000c18 	.word	0x20000c18
 8002c38:	20000740 	.word	0x20000740
 8002c3c:	e000ed04 	.word	0xe000ed04

08002c40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d017      	beq.n	8002c82 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <vTaskDelay+0x60>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <vTaskDelay+0x30>
	__asm volatile
 8002c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5e:	f383 8811 	msr	BASEPRI, r3
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	f3bf 8f4f 	dsb	sy
 8002c6a:	60bb      	str	r3, [r7, #8]
}
 8002c6c:	bf00      	nop
 8002c6e:	e7fe      	b.n	8002c6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c70:	f000 f880 	bl	8002d74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c74:	2100      	movs	r1, #0
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fcea 	bl	8003650 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c7c:	f000 f888 	bl	8002d90 <xTaskResumeAll>
 8002c80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d107      	bne.n	8002c98 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <vTaskDelay+0x64>)
 8002c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000c38 	.word	0x20000c38
 8002ca4:	e000ed04 	.word	0xe000ed04

08002ca8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	; 0x28
 8002cac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002cb6:	463a      	mov	r2, r7
 8002cb8:	1d39      	adds	r1, r7, #4
 8002cba:	f107 0308 	add.w	r3, r7, #8
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff f848 	bl	8001d54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002cc4:	6839      	ldr	r1, [r7, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	9202      	str	r2, [sp, #8]
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	460a      	mov	r2, r1
 8002cd6:	4921      	ldr	r1, [pc, #132]	; (8002d5c <vTaskStartScheduler+0xb4>)
 8002cd8:	4821      	ldr	r0, [pc, #132]	; (8002d60 <vTaskStartScheduler+0xb8>)
 8002cda:	f7ff fe0f 	bl	80028fc <xTaskCreateStatic>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4a20      	ldr	r2, [pc, #128]	; (8002d64 <vTaskStartScheduler+0xbc>)
 8002ce2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ce4:	4b1f      	ldr	r3, [pc, #124]	; (8002d64 <vTaskStartScheduler+0xbc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002cec:	2301      	movs	r3, #1
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	e001      	b.n	8002cf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d102      	bne.n	8002d02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002cfc:	f000 fcfc 	bl	80036f8 <xTimerCreateTimerTask>
 8002d00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d116      	bne.n	8002d36 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	613b      	str	r3, [r7, #16]
}
 8002d1a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d1c:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <vTaskStartScheduler+0xc0>)
 8002d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d22:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <vTaskStartScheduler+0xc4>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d2a:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <vTaskStartScheduler+0xc8>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d30:	f001 f8be 	bl	8003eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d34:	e00e      	b.n	8002d54 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3c:	d10a      	bne.n	8002d54 <vTaskStartScheduler+0xac>
	__asm volatile
 8002d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	60fb      	str	r3, [r7, #12]
}
 8002d50:	bf00      	nop
 8002d52:	e7fe      	b.n	8002d52 <vTaskStartScheduler+0xaa>
}
 8002d54:	bf00      	nop
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	080046bc 	.word	0x080046bc
 8002d60:	0800338d 	.word	0x0800338d
 8002d64:	20000c34 	.word	0x20000c34
 8002d68:	20000c30 	.word	0x20000c30
 8002d6c:	20000c1c 	.word	0x20000c1c
 8002d70:	20000c14 	.word	0x20000c14

08002d74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002d78:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <vTaskSuspendAll+0x18>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	4a03      	ldr	r2, [pc, #12]	; (8002d8c <vTaskSuspendAll+0x18>)
 8002d80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002d82:	bf00      	nop
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	20000c38 	.word	0x20000c38

08002d90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d9e:	4b42      	ldr	r3, [pc, #264]	; (8002ea8 <xTaskResumeAll+0x118>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10a      	bne.n	8002dbc <xTaskResumeAll+0x2c>
	__asm volatile
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	603b      	str	r3, [r7, #0]
}
 8002db8:	bf00      	nop
 8002dba:	e7fe      	b.n	8002dba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002dbc:	f001 f91a 	bl	8003ff4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002dc0:	4b39      	ldr	r3, [pc, #228]	; (8002ea8 <xTaskResumeAll+0x118>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	4a38      	ldr	r2, [pc, #224]	; (8002ea8 <xTaskResumeAll+0x118>)
 8002dc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dca:	4b37      	ldr	r3, [pc, #220]	; (8002ea8 <xTaskResumeAll+0x118>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d162      	bne.n	8002e98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002dd2:	4b36      	ldr	r3, [pc, #216]	; (8002eac <xTaskResumeAll+0x11c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d05e      	beq.n	8002e98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dda:	e02f      	b.n	8002e3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ddc:	4b34      	ldr	r3, [pc, #208]	; (8002eb0 <xTaskResumeAll+0x120>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	3318      	adds	r3, #24
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff f871 	bl	8001ed0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	3304      	adds	r3, #4
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff f86c 	bl	8001ed0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfc:	4b2d      	ldr	r3, [pc, #180]	; (8002eb4 <xTaskResumeAll+0x124>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d903      	bls.n	8002e0c <xTaskResumeAll+0x7c>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <xTaskResumeAll+0x124>)
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4a27      	ldr	r2, [pc, #156]	; (8002eb8 <xTaskResumeAll+0x128>)
 8002e1a:	441a      	add	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	4619      	mov	r1, r3
 8002e22:	4610      	mov	r0, r2
 8002e24:	f7fe fff7 	bl	8001e16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2c:	4b23      	ldr	r3, [pc, #140]	; (8002ebc <xTaskResumeAll+0x12c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d302      	bcc.n	8002e3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002e36:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <xTaskResumeAll+0x130>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e3c:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <xTaskResumeAll+0x120>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1cb      	bne.n	8002ddc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e4a:	f000 fb55 	bl	80034f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <xTaskResumeAll+0x134>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d010      	beq.n	8002e7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e5a:	f000 f847 	bl	8002eec <xTaskIncrementTick>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002e64:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <xTaskResumeAll+0x130>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f1      	bne.n	8002e5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002e76:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <xTaskResumeAll+0x134>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e7c:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <xTaskResumeAll+0x130>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d009      	beq.n	8002e98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e84:	2301      	movs	r3, #1
 8002e86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <xTaskResumeAll+0x138>)
 8002e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e98:	f001 f8dc 	bl	8004054 <vPortExitCritical>

	return xAlreadyYielded;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000c38 	.word	0x20000c38
 8002eac:	20000c10 	.word	0x20000c10
 8002eb0:	20000bd0 	.word	0x20000bd0
 8002eb4:	20000c18 	.word	0x20000c18
 8002eb8:	20000740 	.word	0x20000740
 8002ebc:	2000073c 	.word	0x2000073c
 8002ec0:	20000c24 	.word	0x20000c24
 8002ec4:	20000c20 	.word	0x20000c20
 8002ec8:	e000ed04 	.word	0xe000ed04

08002ecc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002ed2:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <xTaskGetTickCount+0x1c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002ed8:	687b      	ldr	r3, [r7, #4]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20000c14 	.word	0x20000c14

08002eec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ef6:	4b4f      	ldr	r3, [pc, #316]	; (8003034 <xTaskIncrementTick+0x148>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 808f 	bne.w	800301e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f00:	4b4d      	ldr	r3, [pc, #308]	; (8003038 <xTaskIncrementTick+0x14c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3301      	adds	r3, #1
 8002f06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f08:	4a4b      	ldr	r2, [pc, #300]	; (8003038 <xTaskIncrementTick+0x14c>)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d120      	bne.n	8002f56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f14:	4b49      	ldr	r3, [pc, #292]	; (800303c <xTaskIncrementTick+0x150>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <xTaskIncrementTick+0x48>
	__asm volatile
 8002f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	603b      	str	r3, [r7, #0]
}
 8002f30:	bf00      	nop
 8002f32:	e7fe      	b.n	8002f32 <xTaskIncrementTick+0x46>
 8002f34:	4b41      	ldr	r3, [pc, #260]	; (800303c <xTaskIncrementTick+0x150>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	4b41      	ldr	r3, [pc, #260]	; (8003040 <xTaskIncrementTick+0x154>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a3f      	ldr	r2, [pc, #252]	; (800303c <xTaskIncrementTick+0x150>)
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4a3f      	ldr	r2, [pc, #252]	; (8003040 <xTaskIncrementTick+0x154>)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	4b3e      	ldr	r3, [pc, #248]	; (8003044 <xTaskIncrementTick+0x158>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	4a3d      	ldr	r2, [pc, #244]	; (8003044 <xTaskIncrementTick+0x158>)
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	f000 fad1 	bl	80034f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f56:	4b3c      	ldr	r3, [pc, #240]	; (8003048 <xTaskIncrementTick+0x15c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d349      	bcc.n	8002ff4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f60:	4b36      	ldr	r3, [pc, #216]	; (800303c <xTaskIncrementTick+0x150>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d104      	bne.n	8002f74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f6a:	4b37      	ldr	r3, [pc, #220]	; (8003048 <xTaskIncrementTick+0x15c>)
 8002f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f70:	601a      	str	r2, [r3, #0]
					break;
 8002f72:	e03f      	b.n	8002ff4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f74:	4b31      	ldr	r3, [pc, #196]	; (800303c <xTaskIncrementTick+0x150>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d203      	bcs.n	8002f94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f8c:	4a2e      	ldr	r2, [pc, #184]	; (8003048 <xTaskIncrementTick+0x15c>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f92:	e02f      	b.n	8002ff4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	3304      	adds	r3, #4
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fe ff99 	bl	8001ed0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d004      	beq.n	8002fb0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3318      	adds	r3, #24
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe ff90 	bl	8001ed0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb4:	4b25      	ldr	r3, [pc, #148]	; (800304c <xTaskIncrementTick+0x160>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d903      	bls.n	8002fc4 <xTaskIncrementTick+0xd8>
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	4a22      	ldr	r2, [pc, #136]	; (800304c <xTaskIncrementTick+0x160>)
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4a1f      	ldr	r2, [pc, #124]	; (8003050 <xTaskIncrementTick+0x164>)
 8002fd2:	441a      	add	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f7fe ff1b 	bl	8001e16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <xTaskIncrementTick+0x168>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d3b8      	bcc.n	8002f60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ff2:	e7b5      	b.n	8002f60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ff4:	4b17      	ldr	r3, [pc, #92]	; (8003054 <xTaskIncrementTick+0x168>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffa:	4915      	ldr	r1, [pc, #84]	; (8003050 <xTaskIncrementTick+0x164>)
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d901      	bls.n	8003010 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800300c:	2301      	movs	r3, #1
 800300e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <xTaskIncrementTick+0x16c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d007      	beq.n	8003028 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003018:	2301      	movs	r3, #1
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	e004      	b.n	8003028 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800301e:	4b0f      	ldr	r3, [pc, #60]	; (800305c <xTaskIncrementTick+0x170>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3301      	adds	r3, #1
 8003024:	4a0d      	ldr	r2, [pc, #52]	; (800305c <xTaskIncrementTick+0x170>)
 8003026:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003028:	697b      	ldr	r3, [r7, #20]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000c38 	.word	0x20000c38
 8003038:	20000c14 	.word	0x20000c14
 800303c:	20000bc8 	.word	0x20000bc8
 8003040:	20000bcc 	.word	0x20000bcc
 8003044:	20000c28 	.word	0x20000c28
 8003048:	20000c30 	.word	0x20000c30
 800304c:	20000c18 	.word	0x20000c18
 8003050:	20000740 	.word	0x20000740
 8003054:	2000073c 	.word	0x2000073c
 8003058:	20000c24 	.word	0x20000c24
 800305c:	20000c20 	.word	0x20000c20

08003060 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003066:	4b28      	ldr	r3, [pc, #160]	; (8003108 <vTaskSwitchContext+0xa8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800306e:	4b27      	ldr	r3, [pc, #156]	; (800310c <vTaskSwitchContext+0xac>)
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003074:	e041      	b.n	80030fa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003076:	4b25      	ldr	r3, [pc, #148]	; (800310c <vTaskSwitchContext+0xac>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800307c:	4b24      	ldr	r3, [pc, #144]	; (8003110 <vTaskSwitchContext+0xb0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	e010      	b.n	80030a6 <vTaskSwitchContext+0x46>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10a      	bne.n	80030a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	607b      	str	r3, [r7, #4]
}
 800309c:	bf00      	nop
 800309e:	e7fe      	b.n	800309e <vTaskSwitchContext+0x3e>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	491b      	ldr	r1, [pc, #108]	; (8003114 <vTaskSwitchContext+0xb4>)
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0e4      	beq.n	8003084 <vTaskSwitchContext+0x24>
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4a13      	ldr	r2, [pc, #76]	; (8003114 <vTaskSwitchContext+0xb4>)
 80030c6:	4413      	add	r3, r2
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	605a      	str	r2, [r3, #4]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	3308      	adds	r3, #8
 80030dc:	429a      	cmp	r2, r3
 80030de:	d104      	bne.n	80030ea <vTaskSwitchContext+0x8a>
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a09      	ldr	r2, [pc, #36]	; (8003118 <vTaskSwitchContext+0xb8>)
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4a06      	ldr	r2, [pc, #24]	; (8003110 <vTaskSwitchContext+0xb0>)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6013      	str	r3, [r2, #0]
}
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000c38 	.word	0x20000c38
 800310c:	20000c24 	.word	0x20000c24
 8003110:	20000c18 	.word	0x20000c18
 8003114:	20000740 	.word	0x20000740
 8003118:	2000073c 	.word	0x2000073c

0800311c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10a      	bne.n	8003142 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800312c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003130:	f383 8811 	msr	BASEPRI, r3
 8003134:	f3bf 8f6f 	isb	sy
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	60fb      	str	r3, [r7, #12]
}
 800313e:	bf00      	nop
 8003140:	e7fe      	b.n	8003140 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003142:	4b07      	ldr	r3, [pc, #28]	; (8003160 <vTaskPlaceOnEventList+0x44>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3318      	adds	r3, #24
 8003148:	4619      	mov	r1, r3
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fe fe87 	bl	8001e5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003150:	2101      	movs	r1, #1
 8003152:	6838      	ldr	r0, [r7, #0]
 8003154:	f000 fa7c 	bl	8003650 <prvAddCurrentTaskToDelayedList>
}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	2000073c 	.word	0x2000073c

08003164 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10a      	bne.n	800318c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	617b      	str	r3, [r7, #20]
}
 8003188:	bf00      	nop
 800318a:	e7fe      	b.n	800318a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800318c:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3318      	adds	r3, #24
 8003192:	4619      	mov	r1, r3
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7fe fe3e 	bl	8001e16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80031a0:	f04f 33ff 	mov.w	r3, #4294967295
 80031a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	68b8      	ldr	r0, [r7, #8]
 80031aa:	f000 fa51 	bl	8003650 <prvAddCurrentTaskToDelayedList>
	}
 80031ae:	bf00      	nop
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	2000073c 	.word	0x2000073c

080031bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10a      	bne.n	80031e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	60fb      	str	r3, [r7, #12]
}
 80031e4:	bf00      	nop
 80031e6:	e7fe      	b.n	80031e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	3318      	adds	r3, #24
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fe fe6f 	bl	8001ed0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031f2:	4b1e      	ldr	r3, [pc, #120]	; (800326c <xTaskRemoveFromEventList+0xb0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11d      	bne.n	8003236 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	3304      	adds	r3, #4
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe fe66 	bl	8001ed0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <xTaskRemoveFromEventList+0xb4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d903      	bls.n	8003218 <xTaskRemoveFromEventList+0x5c>
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	4a16      	ldr	r2, [pc, #88]	; (8003270 <xTaskRemoveFromEventList+0xb4>)
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4a13      	ldr	r2, [pc, #76]	; (8003274 <xTaskRemoveFromEventList+0xb8>)
 8003226:	441a      	add	r2, r3
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	3304      	adds	r3, #4
 800322c:	4619      	mov	r1, r3
 800322e:	4610      	mov	r0, r2
 8003230:	f7fe fdf1 	bl	8001e16 <vListInsertEnd>
 8003234:	e005      	b.n	8003242 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	3318      	adds	r3, #24
 800323a:	4619      	mov	r1, r3
 800323c:	480e      	ldr	r0, [pc, #56]	; (8003278 <xTaskRemoveFromEventList+0xbc>)
 800323e:	f7fe fdea 	bl	8001e16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003246:	4b0d      	ldr	r3, [pc, #52]	; (800327c <xTaskRemoveFromEventList+0xc0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	429a      	cmp	r2, r3
 800324e:	d905      	bls.n	800325c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003250:	2301      	movs	r3, #1
 8003252:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003254:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <xTaskRemoveFromEventList+0xc4>)
 8003256:	2201      	movs	r2, #1
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e001      	b.n	8003260 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003260:	697b      	ldr	r3, [r7, #20]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20000c38 	.word	0x20000c38
 8003270:	20000c18 	.word	0x20000c18
 8003274:	20000740 	.word	0x20000740
 8003278:	20000bd0 	.word	0x20000bd0
 800327c:	2000073c 	.word	0x2000073c
 8003280:	20000c24 	.word	0x20000c24

08003284 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <vTaskInternalSetTimeOutState+0x24>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <vTaskInternalSetTimeOutState+0x28>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	605a      	str	r2, [r3, #4]
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	20000c28 	.word	0x20000c28
 80032ac:	20000c14 	.word	0x20000c14

080032b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10a      	bne.n	80032d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	613b      	str	r3, [r7, #16]
}
 80032d2:	bf00      	nop
 80032d4:	e7fe      	b.n	80032d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80032dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e0:	f383 8811 	msr	BASEPRI, r3
 80032e4:	f3bf 8f6f 	isb	sy
 80032e8:	f3bf 8f4f 	dsb	sy
 80032ec:	60fb      	str	r3, [r7, #12]
}
 80032ee:	bf00      	nop
 80032f0:	e7fe      	b.n	80032f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80032f2:	f000 fe7f 	bl	8003ff4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80032f6:	4b1d      	ldr	r3, [pc, #116]	; (800336c <xTaskCheckForTimeOut+0xbc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330e:	d102      	bne.n	8003316 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
 8003314:	e023      	b.n	800335e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	4b15      	ldr	r3, [pc, #84]	; (8003370 <xTaskCheckForTimeOut+0xc0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d007      	beq.n	8003332 <xTaskCheckForTimeOut+0x82>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	429a      	cmp	r2, r3
 800332a:	d302      	bcc.n	8003332 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800332c:	2301      	movs	r3, #1
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	e015      	b.n	800335e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	429a      	cmp	r2, r3
 800333a:	d20b      	bcs.n	8003354 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	1ad2      	subs	r2, r2, r3
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ff9b 	bl	8003284 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	e004      	b.n	800335e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800335a:	2301      	movs	r3, #1
 800335c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800335e:	f000 fe79 	bl	8004054 <vPortExitCritical>

	return xReturn;
 8003362:	69fb      	ldr	r3, [r7, #28]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3720      	adds	r7, #32
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	20000c14 	.word	0x20000c14
 8003370:	20000c28 	.word	0x20000c28

08003374 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003378:	4b03      	ldr	r3, [pc, #12]	; (8003388 <vTaskMissedYield+0x14>)
 800337a:	2201      	movs	r2, #1
 800337c:	601a      	str	r2, [r3, #0]
}
 800337e:	bf00      	nop
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	20000c24 	.word	0x20000c24

0800338c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003394:	f000 f852 	bl	800343c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <prvIdleTask+0x28>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d9f9      	bls.n	8003394 <prvIdleTask+0x8>
			{
				taskYIELD();
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <prvIdleTask+0x2c>)
 80033a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80033b0:	e7f0      	b.n	8003394 <prvIdleTask+0x8>
 80033b2:	bf00      	nop
 80033b4:	20000740 	.word	0x20000740
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]
 80033c6:	e00c      	b.n	80033e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4a12      	ldr	r2, [pc, #72]	; (800341c <prvInitialiseTaskLists+0x60>)
 80033d4:	4413      	add	r3, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fcf0 	bl	8001dbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3301      	adds	r3, #1
 80033e0:	607b      	str	r3, [r7, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b37      	cmp	r3, #55	; 0x37
 80033e6:	d9ef      	bls.n	80033c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80033e8:	480d      	ldr	r0, [pc, #52]	; (8003420 <prvInitialiseTaskLists+0x64>)
 80033ea:	f7fe fce7 	bl	8001dbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80033ee:	480d      	ldr	r0, [pc, #52]	; (8003424 <prvInitialiseTaskLists+0x68>)
 80033f0:	f7fe fce4 	bl	8001dbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80033f4:	480c      	ldr	r0, [pc, #48]	; (8003428 <prvInitialiseTaskLists+0x6c>)
 80033f6:	f7fe fce1 	bl	8001dbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80033fa:	480c      	ldr	r0, [pc, #48]	; (800342c <prvInitialiseTaskLists+0x70>)
 80033fc:	f7fe fcde 	bl	8001dbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003400:	480b      	ldr	r0, [pc, #44]	; (8003430 <prvInitialiseTaskLists+0x74>)
 8003402:	f7fe fcdb 	bl	8001dbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003406:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <prvInitialiseTaskLists+0x78>)
 8003408:	4a05      	ldr	r2, [pc, #20]	; (8003420 <prvInitialiseTaskLists+0x64>)
 800340a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <prvInitialiseTaskLists+0x7c>)
 800340e:	4a05      	ldr	r2, [pc, #20]	; (8003424 <prvInitialiseTaskLists+0x68>)
 8003410:	601a      	str	r2, [r3, #0]
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000740 	.word	0x20000740
 8003420:	20000ba0 	.word	0x20000ba0
 8003424:	20000bb4 	.word	0x20000bb4
 8003428:	20000bd0 	.word	0x20000bd0
 800342c:	20000be4 	.word	0x20000be4
 8003430:	20000bfc 	.word	0x20000bfc
 8003434:	20000bc8 	.word	0x20000bc8
 8003438:	20000bcc 	.word	0x20000bcc

0800343c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003442:	e019      	b.n	8003478 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003444:	f000 fdd6 	bl	8003ff4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003448:	4b10      	ldr	r3, [pc, #64]	; (800348c <prvCheckTasksWaitingTermination+0x50>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe fd3b 	bl	8001ed0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <prvCheckTasksWaitingTermination+0x54>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3b01      	subs	r3, #1
 8003460:	4a0b      	ldr	r2, [pc, #44]	; (8003490 <prvCheckTasksWaitingTermination+0x54>)
 8003462:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <prvCheckTasksWaitingTermination+0x58>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3b01      	subs	r3, #1
 800346a:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <prvCheckTasksWaitingTermination+0x58>)
 800346c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800346e:	f000 fdf1 	bl	8004054 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f810 	bl	8003498 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <prvCheckTasksWaitingTermination+0x58>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e1      	bne.n	8003444 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003480:	bf00      	nop
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000be4 	.word	0x20000be4
 8003490:	20000c10 	.word	0x20000c10
 8003494:	20000bf8 	.word	0x20000bf8

08003498 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d108      	bne.n	80034bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 ff8e 	bl	80043d0 <vPortFree>
				vPortFree( pxTCB );
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 ff8b 	bl	80043d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80034ba:	e018      	b.n	80034ee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d103      	bne.n	80034ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 ff82 	bl	80043d0 <vPortFree>
	}
 80034cc:	e00f      	b.n	80034ee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d00a      	beq.n	80034ee <prvDeleteTCB+0x56>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	60fb      	str	r3, [r7, #12]
}
 80034ea:	bf00      	nop
 80034ec:	e7fe      	b.n	80034ec <prvDeleteTCB+0x54>
	}
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034fe:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <prvResetNextTaskUnblockTime+0x38>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d104      	bne.n	8003512 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003508:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <prvResetNextTaskUnblockTime+0x3c>)
 800350a:	f04f 32ff 	mov.w	r2, #4294967295
 800350e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003510:	e008      	b.n	8003524 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <prvResetNextTaskUnblockTime+0x38>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4a04      	ldr	r2, [pc, #16]	; (8003534 <prvResetNextTaskUnblockTime+0x3c>)
 8003522:	6013      	str	r3, [r2, #0]
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	20000bc8 	.word	0x20000bc8
 8003534:	20000c30 	.word	0x20000c30

08003538 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800353e:	4b0b      	ldr	r3, [pc, #44]	; (800356c <xTaskGetSchedulerState+0x34>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003546:	2301      	movs	r3, #1
 8003548:	607b      	str	r3, [r7, #4]
 800354a:	e008      	b.n	800355e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800354c:	4b08      	ldr	r3, [pc, #32]	; (8003570 <xTaskGetSchedulerState+0x38>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d102      	bne.n	800355a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003554:	2302      	movs	r3, #2
 8003556:	607b      	str	r3, [r7, #4]
 8003558:	e001      	b.n	800355e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800355a:	2300      	movs	r3, #0
 800355c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800355e:	687b      	ldr	r3, [r7, #4]
	}
 8003560:	4618      	mov	r0, r3
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	20000c1c 	.word	0x20000c1c
 8003570:	20000c38 	.word	0x20000c38

08003574 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d056      	beq.n	8003638 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800358a:	4b2e      	ldr	r3, [pc, #184]	; (8003644 <xTaskPriorityDisinherit+0xd0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	429a      	cmp	r2, r3
 8003592:	d00a      	beq.n	80035aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003598:	f383 8811 	msr	BASEPRI, r3
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	60fb      	str	r3, [r7, #12]
}
 80035a6:	bf00      	nop
 80035a8:	e7fe      	b.n	80035a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	60bb      	str	r3, [r7, #8]
}
 80035c4:	bf00      	nop
 80035c6:	e7fe      	b.n	80035c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035cc:	1e5a      	subs	r2, r3, #1
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035da:	429a      	cmp	r2, r3
 80035dc:	d02c      	beq.n	8003638 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d128      	bne.n	8003638 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	3304      	adds	r3, #4
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe fc70 	bl	8001ed0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003608:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <xTaskPriorityDisinherit+0xd4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d903      	bls.n	8003618 <xTaskPriorityDisinherit+0xa4>
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	4a0c      	ldr	r2, [pc, #48]	; (8003648 <xTaskPriorityDisinherit+0xd4>)
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4a09      	ldr	r2, [pc, #36]	; (800364c <xTaskPriorityDisinherit+0xd8>)
 8003626:	441a      	add	r2, r3
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	3304      	adds	r3, #4
 800362c:	4619      	mov	r1, r3
 800362e:	4610      	mov	r0, r2
 8003630:	f7fe fbf1 	bl	8001e16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003634:	2301      	movs	r3, #1
 8003636:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003638:	697b      	ldr	r3, [r7, #20]
	}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	2000073c 	.word	0x2000073c
 8003648:	20000c18 	.word	0x20000c18
 800364c:	20000740 	.word	0x20000740

08003650 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800365a:	4b21      	ldr	r3, [pc, #132]	; (80036e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003660:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3304      	adds	r3, #4
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe fc32 	bl	8001ed0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003672:	d10a      	bne.n	800368a <prvAddCurrentTaskToDelayedList+0x3a>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800367a:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3304      	adds	r3, #4
 8003680:	4619      	mov	r1, r3
 8003682:	4819      	ldr	r0, [pc, #100]	; (80036e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003684:	f7fe fbc7 	bl	8001e16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003688:	e026      	b.n	80036d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4413      	add	r3, r2
 8003690:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003692:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d209      	bcs.n	80036b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036a2:	4b12      	ldr	r3, [pc, #72]	; (80036ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3304      	adds	r3, #4
 80036ac:	4619      	mov	r1, r3
 80036ae:	4610      	mov	r0, r2
 80036b0:	f7fe fbd5 	bl	8001e5e <vListInsert>
}
 80036b4:	e010      	b.n	80036d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036b6:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	3304      	adds	r3, #4
 80036c0:	4619      	mov	r1, r3
 80036c2:	4610      	mov	r0, r2
 80036c4:	f7fe fbcb 	bl	8001e5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80036c8:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d202      	bcs.n	80036d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80036d2:	4a08      	ldr	r2, [pc, #32]	; (80036f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	6013      	str	r3, [r2, #0]
}
 80036d8:	bf00      	nop
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	20000c14 	.word	0x20000c14
 80036e4:	2000073c 	.word	0x2000073c
 80036e8:	20000bfc 	.word	0x20000bfc
 80036ec:	20000bcc 	.word	0x20000bcc
 80036f0:	20000bc8 	.word	0x20000bc8
 80036f4:	20000c30 	.word	0x20000c30

080036f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	; 0x28
 80036fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003702:	f000 fb07 	bl	8003d14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003706:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <xTimerCreateTimerTask+0x80>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d021      	beq.n	8003752 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003712:	2300      	movs	r3, #0
 8003714:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003716:	1d3a      	adds	r2, r7, #4
 8003718:	f107 0108 	add.w	r1, r7, #8
 800371c:	f107 030c 	add.w	r3, r7, #12
 8003720:	4618      	mov	r0, r3
 8003722:	f7fe fb31 	bl	8001d88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	9202      	str	r2, [sp, #8]
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	2302      	movs	r3, #2
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	2300      	movs	r3, #0
 8003736:	460a      	mov	r2, r1
 8003738:	4910      	ldr	r1, [pc, #64]	; (800377c <xTimerCreateTimerTask+0x84>)
 800373a:	4811      	ldr	r0, [pc, #68]	; (8003780 <xTimerCreateTimerTask+0x88>)
 800373c:	f7ff f8de 	bl	80028fc <xTaskCreateStatic>
 8003740:	4603      	mov	r3, r0
 8003742:	4a10      	ldr	r2, [pc, #64]	; (8003784 <xTimerCreateTimerTask+0x8c>)
 8003744:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003746:	4b0f      	ldr	r3, [pc, #60]	; (8003784 <xTimerCreateTimerTask+0x8c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800374e:	2301      	movs	r3, #1
 8003750:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	613b      	str	r3, [r7, #16]
}
 800376a:	bf00      	nop
 800376c:	e7fe      	b.n	800376c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800376e:	697b      	ldr	r3, [r7, #20]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000c6c 	.word	0x20000c6c
 800377c:	080046c4 	.word	0x080046c4
 8003780:	080038bd 	.word	0x080038bd
 8003784:	20000c70 	.word	0x20000c70

08003788 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08a      	sub	sp, #40	; 0x28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003796:	2300      	movs	r3, #0
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	623b      	str	r3, [r7, #32]
}
 80037b2:	bf00      	nop
 80037b4:	e7fe      	b.n	80037b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80037b6:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <xTimerGenericCommand+0x98>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d02a      	beq.n	8003814 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b05      	cmp	r3, #5
 80037ce:	dc18      	bgt.n	8003802 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80037d0:	f7ff feb2 	bl	8003538 <xTaskGetSchedulerState>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d109      	bne.n	80037ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80037da:	4b11      	ldr	r3, [pc, #68]	; (8003820 <xTimerGenericCommand+0x98>)
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	f107 0110 	add.w	r1, r7, #16
 80037e2:	2300      	movs	r3, #0
 80037e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e6:	f7fe fca1 	bl	800212c <xQueueGenericSend>
 80037ea:	6278      	str	r0, [r7, #36]	; 0x24
 80037ec:	e012      	b.n	8003814 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80037ee:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <xTimerGenericCommand+0x98>)
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	f107 0110 	add.w	r1, r7, #16
 80037f6:	2300      	movs	r3, #0
 80037f8:	2200      	movs	r2, #0
 80037fa:	f7fe fc97 	bl	800212c <xQueueGenericSend>
 80037fe:	6278      	str	r0, [r7, #36]	; 0x24
 8003800:	e008      	b.n	8003814 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003802:	4b07      	ldr	r3, [pc, #28]	; (8003820 <xTimerGenericCommand+0x98>)
 8003804:	6818      	ldr	r0, [r3, #0]
 8003806:	f107 0110 	add.w	r1, r7, #16
 800380a:	2300      	movs	r3, #0
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	f7fe fd8b 	bl	8002328 <xQueueGenericSendFromISR>
 8003812:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003816:	4618      	mov	r0, r3
 8003818:	3728      	adds	r7, #40	; 0x28
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000c6c 	.word	0x20000c6c

08003824 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af02      	add	r7, sp, #8
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800382e:	4b22      	ldr	r3, [pc, #136]	; (80038b8 <prvProcessExpiredTimer+0x94>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	3304      	adds	r3, #4
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe fb47 	bl	8001ed0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d022      	beq.n	8003896 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	699a      	ldr	r2, [r3, #24]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	18d1      	adds	r1, r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	6978      	ldr	r0, [r7, #20]
 800385e:	f000 f8d1 	bl	8003a04 <prvInsertTimerInActiveList>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01f      	beq.n	80038a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003868:	2300      	movs	r3, #0
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	2300      	movs	r3, #0
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	2100      	movs	r1, #0
 8003872:	6978      	ldr	r0, [r7, #20]
 8003874:	f7ff ff88 	bl	8003788 <xTimerGenericCommand>
 8003878:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d113      	bne.n	80038a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	60fb      	str	r3, [r7, #12]
}
 8003892:	bf00      	nop
 8003894:	e7fe      	b.n	8003894 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	6978      	ldr	r0, [r7, #20]
 80038ae:	4798      	blx	r3
}
 80038b0:	bf00      	nop
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20000c64 	.word	0x20000c64

080038bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038c4:	f107 0308 	add.w	r3, r7, #8
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 f857 	bl	800397c <prvGetNextExpireTime>
 80038ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4619      	mov	r1, r3
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f803 	bl	80038e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80038da:	f000 f8d5 	bl	8003a88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038de:	e7f1      	b.n	80038c4 <prvTimerTask+0x8>

080038e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80038ea:	f7ff fa43 	bl	8002d74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038ee:	f107 0308 	add.w	r3, r7, #8
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f866 	bl	80039c4 <prvSampleTimeNow>
 80038f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d130      	bne.n	8003962 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10a      	bne.n	800391c <prvProcessTimerOrBlockTask+0x3c>
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	429a      	cmp	r2, r3
 800390c:	d806      	bhi.n	800391c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800390e:	f7ff fa3f 	bl	8002d90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003912:	68f9      	ldr	r1, [r7, #12]
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff ff85 	bl	8003824 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800391a:	e024      	b.n	8003966 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003922:	4b13      	ldr	r3, [pc, #76]	; (8003970 <prvProcessTimerOrBlockTask+0x90>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <prvProcessTimerOrBlockTask+0x50>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <prvProcessTimerOrBlockTask+0x52>
 8003930:	2300      	movs	r3, #0
 8003932:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003934:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <prvProcessTimerOrBlockTask+0x94>)
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	4619      	mov	r1, r3
 8003942:	f7fe ffa7 	bl	8002894 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003946:	f7ff fa23 	bl	8002d90 <xTaskResumeAll>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003950:	4b09      	ldr	r3, [pc, #36]	; (8003978 <prvProcessTimerOrBlockTask+0x98>)
 8003952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	f3bf 8f6f 	isb	sy
}
 8003960:	e001      	b.n	8003966 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003962:	f7ff fa15 	bl	8002d90 <xTaskResumeAll>
}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000c68 	.word	0x20000c68
 8003974:	20000c6c 	.word	0x20000c6c
 8003978:	e000ed04 	.word	0xe000ed04

0800397c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <prvGetNextExpireTime+0x44>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <prvGetNextExpireTime+0x16>
 800398e:	2201      	movs	r2, #1
 8003990:	e000      	b.n	8003994 <prvGetNextExpireTime+0x18>
 8003992:	2200      	movs	r2, #0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d105      	bne.n	80039ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039a0:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <prvGetNextExpireTime+0x44>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	e001      	b.n	80039b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80039b0:	68fb      	ldr	r3, [r7, #12]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000c64 	.word	0x20000c64

080039c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80039cc:	f7ff fa7e 	bl	8002ecc <xTaskGetTickCount>
 80039d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80039d2:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <prvSampleTimeNow+0x3c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d205      	bcs.n	80039e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80039dc:	f000 f936 	bl	8003c4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	e002      	b.n	80039ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80039ee:	4a04      	ldr	r2, [pc, #16]	; (8003a00 <prvSampleTimeNow+0x3c>)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80039f4:	68fb      	ldr	r3, [r7, #12]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000c74 	.word	0x20000c74

08003a04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d812      	bhi.n	8003a50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	1ad2      	subs	r2, r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d302      	bcc.n	8003a3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	e01b      	b.n	8003a76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a3e:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <prvInsertTimerInActiveList+0x7c>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	3304      	adds	r3, #4
 8003a46:	4619      	mov	r1, r3
 8003a48:	4610      	mov	r0, r2
 8003a4a:	f7fe fa08 	bl	8001e5e <vListInsert>
 8003a4e:	e012      	b.n	8003a76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d206      	bcs.n	8003a66 <prvInsertTimerInActiveList+0x62>
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d302      	bcc.n	8003a66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003a60:	2301      	movs	r3, #1
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	e007      	b.n	8003a76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a66:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <prvInsertTimerInActiveList+0x80>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4610      	mov	r0, r2
 8003a72:	f7fe f9f4 	bl	8001e5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003a76:	697b      	ldr	r3, [r7, #20]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000c68 	.word	0x20000c68
 8003a84:	20000c64 	.word	0x20000c64

08003a88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08e      	sub	sp, #56	; 0x38
 8003a8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a8e:	e0ca      	b.n	8003c26 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	da18      	bge.n	8003ac8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003a96:	1d3b      	adds	r3, r7, #4
 8003a98:	3304      	adds	r3, #4
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10a      	bne.n	8003ab8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	61fb      	str	r3, [r7, #28]
}
 8003ab4:	bf00      	nop
 8003ab6:	e7fe      	b.n	8003ab6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003abe:	6850      	ldr	r0, [r2, #4]
 8003ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ac2:	6892      	ldr	r2, [r2, #8]
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f2c0 80ab 	blt.w	8003c26 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d004      	beq.n	8003ae6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fe f9f5 	bl	8001ed0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ae6:	463b      	mov	r3, r7
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ff6b 	bl	80039c4 <prvSampleTimeNow>
 8003aee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b09      	cmp	r3, #9
 8003af4:	f200 8096 	bhi.w	8003c24 <prvProcessReceivedCommands+0x19c>
 8003af8:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <prvProcessReceivedCommands+0x78>)
 8003afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afe:	bf00      	nop
 8003b00:	08003b29 	.word	0x08003b29
 8003b04:	08003b29 	.word	0x08003b29
 8003b08:	08003b29 	.word	0x08003b29
 8003b0c:	08003b9d 	.word	0x08003b9d
 8003b10:	08003bb1 	.word	0x08003bb1
 8003b14:	08003bfb 	.word	0x08003bfb
 8003b18:	08003b29 	.word	0x08003b29
 8003b1c:	08003b29 	.word	0x08003b29
 8003b20:	08003b9d 	.word	0x08003b9d
 8003b24:	08003bb1 	.word	0x08003bb1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	18d1      	adds	r1, r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b48:	f7ff ff5c 	bl	8003a04 <prvInsertTimerInActiveList>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d069      	beq.n	8003c26 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d05e      	beq.n	8003c26 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	441a      	add	r2, r3
 8003b70:	2300      	movs	r3, #0
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	2300      	movs	r3, #0
 8003b76:	2100      	movs	r1, #0
 8003b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b7a:	f7ff fe05 	bl	8003788 <xTimerGenericCommand>
 8003b7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d14f      	bne.n	8003c26 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	61bb      	str	r3, [r7, #24]
}
 8003b98:	bf00      	nop
 8003b9a:	e7fe      	b.n	8003b9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ba2:	f023 0301 	bic.w	r3, r3, #1
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003baa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003bae:	e03a      	b.n	8003c26 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10a      	bne.n	8003be6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	617b      	str	r3, [r7, #20]
}
 8003be2:	bf00      	nop
 8003be4:	e7fe      	b.n	8003be4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	699a      	ldr	r2, [r3, #24]
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	18d1      	adds	r1, r2, r3
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bf4:	f7ff ff06 	bl	8003a04 <prvInsertTimerInActiveList>
					break;
 8003bf8:	e015      	b.n	8003c26 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d103      	bne.n	8003c10 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c0a:	f000 fbe1 	bl	80043d0 <vPortFree>
 8003c0e:	e00a      	b.n	8003c26 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c16:	f023 0301 	bic.w	r3, r3, #1
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003c22:	e000      	b.n	8003c26 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8003c24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c26:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <prvProcessReceivedCommands+0x1c0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	1d39      	adds	r1, r7, #4
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe fc16 	bl	8002460 <xQueueReceive>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f47f af2a 	bne.w	8003a90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	3730      	adds	r7, #48	; 0x30
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000c6c 	.word	0x20000c6c

08003c4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b088      	sub	sp, #32
 8003c50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c52:	e048      	b.n	8003ce6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c54:	4b2d      	ldr	r3, [pc, #180]	; (8003d0c <prvSwitchTimerLists+0xc0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c5e:	4b2b      	ldr	r3, [pc, #172]	; (8003d0c <prvSwitchTimerLists+0xc0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fe f92f 	bl	8001ed0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d02e      	beq.n	8003ce6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d90e      	bls.n	8003cb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ca6:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <prvSwitchTimerLists+0xc0>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3304      	adds	r3, #4
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	f7fe f8d4 	bl	8001e5e <vListInsert>
 8003cb6:	e016      	b.n	8003ce6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003cb8:	2300      	movs	r3, #0
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f7ff fd60 	bl	8003788 <xTimerGenericCommand>
 8003cc8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10a      	bne.n	8003ce6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	603b      	str	r3, [r7, #0]
}
 8003ce2:	bf00      	nop
 8003ce4:	e7fe      	b.n	8003ce4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ce6:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <prvSwitchTimerLists+0xc0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1b1      	bne.n	8003c54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <prvSwitchTimerLists+0xc0>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003cf6:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <prvSwitchTimerLists+0xc4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <prvSwitchTimerLists+0xc0>)
 8003cfc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003cfe:	4a04      	ldr	r2, [pc, #16]	; (8003d10 <prvSwitchTimerLists+0xc4>)
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	6013      	str	r3, [r2, #0]
}
 8003d04:	bf00      	nop
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000c64 	.word	0x20000c64
 8003d10:	20000c68 	.word	0x20000c68

08003d14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003d1a:	f000 f96b 	bl	8003ff4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003d1e:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <prvCheckForValidListAndQueue+0x60>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d120      	bne.n	8003d68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003d26:	4814      	ldr	r0, [pc, #80]	; (8003d78 <prvCheckForValidListAndQueue+0x64>)
 8003d28:	f7fe f848 	bl	8001dbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003d2c:	4813      	ldr	r0, [pc, #76]	; (8003d7c <prvCheckForValidListAndQueue+0x68>)
 8003d2e:	f7fe f845 	bl	8001dbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003d32:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <prvCheckForValidListAndQueue+0x6c>)
 8003d34:	4a10      	ldr	r2, [pc, #64]	; (8003d78 <prvCheckForValidListAndQueue+0x64>)
 8003d36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003d38:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <prvCheckForValidListAndQueue+0x70>)
 8003d3a:	4a10      	ldr	r2, [pc, #64]	; (8003d7c <prvCheckForValidListAndQueue+0x68>)
 8003d3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003d3e:	2300      	movs	r3, #0
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <prvCheckForValidListAndQueue+0x74>)
 8003d44:	4a11      	ldr	r2, [pc, #68]	; (8003d8c <prvCheckForValidListAndQueue+0x78>)
 8003d46:	2110      	movs	r1, #16
 8003d48:	200a      	movs	r0, #10
 8003d4a:	f7fe f953 	bl	8001ff4 <xQueueGenericCreateStatic>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4a08      	ldr	r2, [pc, #32]	; (8003d74 <prvCheckForValidListAndQueue+0x60>)
 8003d52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003d54:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <prvCheckForValidListAndQueue+0x60>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <prvCheckForValidListAndQueue+0x60>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	490b      	ldr	r1, [pc, #44]	; (8003d90 <prvCheckForValidListAndQueue+0x7c>)
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fe fd6c 	bl	8002840 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d68:	f000 f974 	bl	8004054 <vPortExitCritical>
}
 8003d6c:	bf00      	nop
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000c6c 	.word	0x20000c6c
 8003d78:	20000c3c 	.word	0x20000c3c
 8003d7c:	20000c50 	.word	0x20000c50
 8003d80:	20000c64 	.word	0x20000c64
 8003d84:	20000c68 	.word	0x20000c68
 8003d88:	20000d18 	.word	0x20000d18
 8003d8c:	20000c78 	.word	0x20000c78
 8003d90:	080046cc 	.word	0x080046cc

08003d94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3b04      	subs	r3, #4
 8003da4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3b04      	subs	r3, #4
 8003db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f023 0201 	bic.w	r2, r3, #1
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	3b04      	subs	r3, #4
 8003dc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003dc4:	4a0c      	ldr	r2, [pc, #48]	; (8003df8 <pxPortInitialiseStack+0x64>)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3b14      	subs	r3, #20
 8003dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	3b04      	subs	r3, #4
 8003dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f06f 0202 	mvn.w	r2, #2
 8003de2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3b20      	subs	r3, #32
 8003de8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003dea:	68fb      	ldr	r3, [r7, #12]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	08003dfd 	.word	0x08003dfd

08003dfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003e02:	2300      	movs	r3, #0
 8003e04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e06:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <prvTaskExitError+0x54>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0e:	d00a      	beq.n	8003e26 <prvTaskExitError+0x2a>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	60fb      	str	r3, [r7, #12]
}
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <prvTaskExitError+0x28>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	60bb      	str	r3, [r7, #8]
}
 8003e38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e3a:	bf00      	nop
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0fc      	beq.n	8003e3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e42:	bf00      	nop
 8003e44:	bf00      	nop
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	2000000c 	.word	0x2000000c
	...

08003e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e60:	4b07      	ldr	r3, [pc, #28]	; (8003e80 <pxCurrentTCBConst2>)
 8003e62:	6819      	ldr	r1, [r3, #0]
 8003e64:	6808      	ldr	r0, [r1, #0]
 8003e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e6a:	f380 8809 	msr	PSP, r0
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f04f 0000 	mov.w	r0, #0
 8003e76:	f380 8811 	msr	BASEPRI, r0
 8003e7a:	4770      	bx	lr
 8003e7c:	f3af 8000 	nop.w

08003e80 <pxCurrentTCBConst2>:
 8003e80:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop

08003e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e88:	4808      	ldr	r0, [pc, #32]	; (8003eac <prvPortStartFirstTask+0x24>)
 8003e8a:	6800      	ldr	r0, [r0, #0]
 8003e8c:	6800      	ldr	r0, [r0, #0]
 8003e8e:	f380 8808 	msr	MSP, r0
 8003e92:	f04f 0000 	mov.w	r0, #0
 8003e96:	f380 8814 	msr	CONTROL, r0
 8003e9a:	b662      	cpsie	i
 8003e9c:	b661      	cpsie	f
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	df00      	svc	0
 8003ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003eaa:	bf00      	nop
 8003eac:	e000ed08 	.word	0xe000ed08

08003eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003eb6:	4b46      	ldr	r3, [pc, #280]	; (8003fd0 <xPortStartScheduler+0x120>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a46      	ldr	r2, [pc, #280]	; (8003fd4 <xPortStartScheduler+0x124>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d10a      	bne.n	8003ed6 <xPortStartScheduler+0x26>
	__asm volatile
 8003ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	613b      	str	r3, [r7, #16]
}
 8003ed2:	bf00      	nop
 8003ed4:	e7fe      	b.n	8003ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ed6:	4b3e      	ldr	r3, [pc, #248]	; (8003fd0 <xPortStartScheduler+0x120>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a3f      	ldr	r2, [pc, #252]	; (8003fd8 <xPortStartScheduler+0x128>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d10a      	bne.n	8003ef6 <xPortStartScheduler+0x46>
	__asm volatile
 8003ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	60fb      	str	r3, [r7, #12]
}
 8003ef2:	bf00      	nop
 8003ef4:	e7fe      	b.n	8003ef4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ef6:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <xPortStartScheduler+0x12c>)
 8003ef8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	22ff      	movs	r2, #255	; 0xff
 8003f06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <xPortStartScheduler+0x130>)
 8003f1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f1e:	4b31      	ldr	r3, [pc, #196]	; (8003fe4 <xPortStartScheduler+0x134>)
 8003f20:	2207      	movs	r2, #7
 8003f22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f24:	e009      	b.n	8003f3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003f26:	4b2f      	ldr	r3, [pc, #188]	; (8003fe4 <xPortStartScheduler+0x134>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	4a2d      	ldr	r2, [pc, #180]	; (8003fe4 <xPortStartScheduler+0x134>)
 8003f2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	2b80      	cmp	r3, #128	; 0x80
 8003f44:	d0ef      	beq.n	8003f26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f46:	4b27      	ldr	r3, [pc, #156]	; (8003fe4 <xPortStartScheduler+0x134>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f1c3 0307 	rsb	r3, r3, #7
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d00a      	beq.n	8003f68 <xPortStartScheduler+0xb8>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	60bb      	str	r3, [r7, #8]
}
 8003f64:	bf00      	nop
 8003f66:	e7fe      	b.n	8003f66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f68:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <xPortStartScheduler+0x134>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	4a1d      	ldr	r2, [pc, #116]	; (8003fe4 <xPortStartScheduler+0x134>)
 8003f70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f72:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <xPortStartScheduler+0x134>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f7a:	4a1a      	ldr	r2, [pc, #104]	; (8003fe4 <xPortStartScheduler+0x134>)
 8003f7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f86:	4b18      	ldr	r3, [pc, #96]	; (8003fe8 <xPortStartScheduler+0x138>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a17      	ldr	r2, [pc, #92]	; (8003fe8 <xPortStartScheduler+0x138>)
 8003f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f92:	4b15      	ldr	r3, [pc, #84]	; (8003fe8 <xPortStartScheduler+0x138>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a14      	ldr	r2, [pc, #80]	; (8003fe8 <xPortStartScheduler+0x138>)
 8003f98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f9e:	f000 f8dd 	bl	800415c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003fa2:	4b12      	ldr	r3, [pc, #72]	; (8003fec <xPortStartScheduler+0x13c>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003fa8:	f000 f8fc 	bl	80041a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003fac:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <xPortStartScheduler+0x140>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a0f      	ldr	r2, [pc, #60]	; (8003ff0 <xPortStartScheduler+0x140>)
 8003fb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003fb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003fb8:	f7ff ff66 	bl	8003e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003fbc:	f7ff f850 	bl	8003060 <vTaskSwitchContext>
	prvTaskExitError();
 8003fc0:	f7ff ff1c 	bl	8003dfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	e000ed00 	.word	0xe000ed00
 8003fd4:	410fc271 	.word	0x410fc271
 8003fd8:	410fc270 	.word	0x410fc270
 8003fdc:	e000e400 	.word	0xe000e400
 8003fe0:	20000d68 	.word	0x20000d68
 8003fe4:	20000d6c 	.word	0x20000d6c
 8003fe8:	e000ed20 	.word	0xe000ed20
 8003fec:	2000000c 	.word	0x2000000c
 8003ff0:	e000ef34 	.word	0xe000ef34

08003ff4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
	__asm volatile
 8003ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	607b      	str	r3, [r7, #4]
}
 800400c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800400e:	4b0f      	ldr	r3, [pc, #60]	; (800404c <vPortEnterCritical+0x58>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3301      	adds	r3, #1
 8004014:	4a0d      	ldr	r2, [pc, #52]	; (800404c <vPortEnterCritical+0x58>)
 8004016:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004018:	4b0c      	ldr	r3, [pc, #48]	; (800404c <vPortEnterCritical+0x58>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d10f      	bne.n	8004040 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <vPortEnterCritical+0x5c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <vPortEnterCritical+0x4c>
	__asm volatile
 800402a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	603b      	str	r3, [r7, #0]
}
 800403c:	bf00      	nop
 800403e:	e7fe      	b.n	800403e <vPortEnterCritical+0x4a>
	}
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	2000000c 	.word	0x2000000c
 8004050:	e000ed04 	.word	0xe000ed04

08004054 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800405a:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <vPortExitCritical+0x50>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <vPortExitCritical+0x24>
	__asm volatile
 8004062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	607b      	str	r3, [r7, #4]
}
 8004074:	bf00      	nop
 8004076:	e7fe      	b.n	8004076 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004078:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <vPortExitCritical+0x50>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3b01      	subs	r3, #1
 800407e:	4a09      	ldr	r2, [pc, #36]	; (80040a4 <vPortExitCritical+0x50>)
 8004080:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004082:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <vPortExitCritical+0x50>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d105      	bne.n	8004096 <vPortExitCritical+0x42>
 800408a:	2300      	movs	r3, #0
 800408c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	f383 8811 	msr	BASEPRI, r3
}
 8004094:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	2000000c 	.word	0x2000000c
	...

080040b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80040b0:	f3ef 8009 	mrs	r0, PSP
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	4b15      	ldr	r3, [pc, #84]	; (8004110 <pxCurrentTCBConst>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	f01e 0f10 	tst.w	lr, #16
 80040c0:	bf08      	it	eq
 80040c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80040c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ca:	6010      	str	r0, [r2, #0]
 80040cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80040d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80040d4:	f380 8811 	msr	BASEPRI, r0
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f7fe ffbe 	bl	8003060 <vTaskSwitchContext>
 80040e4:	f04f 0000 	mov.w	r0, #0
 80040e8:	f380 8811 	msr	BASEPRI, r0
 80040ec:	bc09      	pop	{r0, r3}
 80040ee:	6819      	ldr	r1, [r3, #0]
 80040f0:	6808      	ldr	r0, [r1, #0]
 80040f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f6:	f01e 0f10 	tst.w	lr, #16
 80040fa:	bf08      	it	eq
 80040fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004100:	f380 8809 	msr	PSP, r0
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	f3af 8000 	nop.w

08004110 <pxCurrentTCBConst>:
 8004110:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop

08004118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
	__asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	607b      	str	r3, [r7, #4]
}
 8004130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004132:	f7fe fedb 	bl	8002eec <xTaskIncrementTick>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <xPortSysTickHandler+0x40>)
 800413e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	2300      	movs	r3, #0
 8004146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	f383 8811 	msr	BASEPRI, r3
}
 800414e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004150:	bf00      	nop
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	e000ed04 	.word	0xe000ed04

0800415c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <vPortSetupTimerInterrupt+0x34>)
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004166:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <vPortSetupTimerInterrupt+0x38>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <vPortSetupTimerInterrupt+0x3c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a0a      	ldr	r2, [pc, #40]	; (800419c <vPortSetupTimerInterrupt+0x40>)
 8004172:	fba2 2303 	umull	r2, r3, r2, r3
 8004176:	099b      	lsrs	r3, r3, #6
 8004178:	4a09      	ldr	r2, [pc, #36]	; (80041a0 <vPortSetupTimerInterrupt+0x44>)
 800417a:	3b01      	subs	r3, #1
 800417c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800417e:	4b04      	ldr	r3, [pc, #16]	; (8004190 <vPortSetupTimerInterrupt+0x34>)
 8004180:	2207      	movs	r2, #7
 8004182:	601a      	str	r2, [r3, #0]
}
 8004184:	bf00      	nop
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	e000e010 	.word	0xe000e010
 8004194:	e000e018 	.word	0xe000e018
 8004198:	20000000 	.word	0x20000000
 800419c:	10624dd3 	.word	0x10624dd3
 80041a0:	e000e014 	.word	0xe000e014

080041a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80041a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80041b4 <vPortEnableVFP+0x10>
 80041a8:	6801      	ldr	r1, [r0, #0]
 80041aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041ae:	6001      	str	r1, [r0, #0]
 80041b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80041b2:	bf00      	nop
 80041b4:	e000ed88 	.word	0xe000ed88

080041b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80041be:	f3ef 8305 	mrs	r3, IPSR
 80041c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b0f      	cmp	r3, #15
 80041c8:	d914      	bls.n	80041f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80041ca:	4a17      	ldr	r2, [pc, #92]	; (8004228 <vPortValidateInterruptPriority+0x70>)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80041d4:	4b15      	ldr	r3, [pc, #84]	; (800422c <vPortValidateInterruptPriority+0x74>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	7afa      	ldrb	r2, [r7, #11]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d20a      	bcs.n	80041f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80041de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	607b      	str	r3, [r7, #4]
}
 80041f0:	bf00      	nop
 80041f2:	e7fe      	b.n	80041f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80041f4:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <vPortValidateInterruptPriority+0x78>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041fc:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <vPortValidateInterruptPriority+0x7c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d90a      	bls.n	800421a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	603b      	str	r3, [r7, #0]
}
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <vPortValidateInterruptPriority+0x60>
	}
 800421a:	bf00      	nop
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	e000e3f0 	.word	0xe000e3f0
 800422c:	20000d68 	.word	0x20000d68
 8004230:	e000ed0c 	.word	0xe000ed0c
 8004234:	20000d6c 	.word	0x20000d6c

08004238 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08a      	sub	sp, #40	; 0x28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004240:	2300      	movs	r3, #0
 8004242:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004244:	f7fe fd96 	bl	8002d74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004248:	4b5b      	ldr	r3, [pc, #364]	; (80043b8 <pvPortMalloc+0x180>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004250:	f000 f920 	bl	8004494 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004254:	4b59      	ldr	r3, [pc, #356]	; (80043bc <pvPortMalloc+0x184>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4013      	ands	r3, r2
 800425c:	2b00      	cmp	r3, #0
 800425e:	f040 8093 	bne.w	8004388 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01d      	beq.n	80042a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004268:	2208      	movs	r2, #8
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	2b00      	cmp	r3, #0
 8004278:	d014      	beq.n	80042a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f023 0307 	bic.w	r3, r3, #7
 8004280:	3308      	adds	r3, #8
 8004282:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <pvPortMalloc+0x6c>
	__asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	617b      	str	r3, [r7, #20]
}
 80042a0:	bf00      	nop
 80042a2:	e7fe      	b.n	80042a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d06e      	beq.n	8004388 <pvPortMalloc+0x150>
 80042aa:	4b45      	ldr	r3, [pc, #276]	; (80043c0 <pvPortMalloc+0x188>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d869      	bhi.n	8004388 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80042b4:	4b43      	ldr	r3, [pc, #268]	; (80043c4 <pvPortMalloc+0x18c>)
 80042b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80042b8:	4b42      	ldr	r3, [pc, #264]	; (80043c4 <pvPortMalloc+0x18c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042be:	e004      	b.n	80042ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d903      	bls.n	80042dc <pvPortMalloc+0xa4>
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1f1      	bne.n	80042c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80042dc:	4b36      	ldr	r3, [pc, #216]	; (80043b8 <pvPortMalloc+0x180>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d050      	beq.n	8004388 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2208      	movs	r2, #8
 80042ec:	4413      	add	r3, r2
 80042ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	1ad2      	subs	r2, r2, r3
 8004300:	2308      	movs	r3, #8
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	429a      	cmp	r2, r3
 8004306:	d91f      	bls.n	8004348 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4413      	add	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <pvPortMalloc+0xf8>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	613b      	str	r3, [r7, #16]
}
 800432c:	bf00      	nop
 800432e:	e7fe      	b.n	800432e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	1ad2      	subs	r2, r2, r3
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004342:	69b8      	ldr	r0, [r7, #24]
 8004344:	f000 f908 	bl	8004558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004348:	4b1d      	ldr	r3, [pc, #116]	; (80043c0 <pvPortMalloc+0x188>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	4a1b      	ldr	r2, [pc, #108]	; (80043c0 <pvPortMalloc+0x188>)
 8004354:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004356:	4b1a      	ldr	r3, [pc, #104]	; (80043c0 <pvPortMalloc+0x188>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <pvPortMalloc+0x190>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d203      	bcs.n	800436a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004362:	4b17      	ldr	r3, [pc, #92]	; (80043c0 <pvPortMalloc+0x188>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a18      	ldr	r2, [pc, #96]	; (80043c8 <pvPortMalloc+0x190>)
 8004368:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	4b13      	ldr	r3, [pc, #76]	; (80043bc <pvPortMalloc+0x184>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	431a      	orrs	r2, r3
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800437e:	4b13      	ldr	r3, [pc, #76]	; (80043cc <pvPortMalloc+0x194>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3301      	adds	r3, #1
 8004384:	4a11      	ldr	r2, [pc, #68]	; (80043cc <pvPortMalloc+0x194>)
 8004386:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004388:	f7fe fd02 	bl	8002d90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <pvPortMalloc+0x174>
	__asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	60fb      	str	r3, [r7, #12]
}
 80043a8:	bf00      	nop
 80043aa:	e7fe      	b.n	80043aa <pvPortMalloc+0x172>
	return pvReturn;
 80043ac:	69fb      	ldr	r3, [r7, #28]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3728      	adds	r7, #40	; 0x28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20004978 	.word	0x20004978
 80043bc:	2000498c 	.word	0x2000498c
 80043c0:	2000497c 	.word	0x2000497c
 80043c4:	20004970 	.word	0x20004970
 80043c8:	20004980 	.word	0x20004980
 80043cc:	20004984 	.word	0x20004984

080043d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d04d      	beq.n	800447e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80043e2:	2308      	movs	r3, #8
 80043e4:	425b      	negs	r3, r3
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4413      	add	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	4b24      	ldr	r3, [pc, #144]	; (8004488 <vPortFree+0xb8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10a      	bne.n	8004414 <vPortFree+0x44>
	__asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	60fb      	str	r3, [r7, #12]
}
 8004410:	bf00      	nop
 8004412:	e7fe      	b.n	8004412 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00a      	beq.n	8004432 <vPortFree+0x62>
	__asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	60bb      	str	r3, [r7, #8]
}
 800442e:	bf00      	nop
 8004430:	e7fe      	b.n	8004430 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	4b14      	ldr	r3, [pc, #80]	; (8004488 <vPortFree+0xb8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d01e      	beq.n	800447e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d11a      	bne.n	800447e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <vPortFree+0xb8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	43db      	mvns	r3, r3
 8004452:	401a      	ands	r2, r3
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004458:	f7fe fc8c 	bl	8002d74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <vPortFree+0xbc>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4413      	add	r3, r2
 8004466:	4a09      	ldr	r2, [pc, #36]	; (800448c <vPortFree+0xbc>)
 8004468:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800446a:	6938      	ldr	r0, [r7, #16]
 800446c:	f000 f874 	bl	8004558 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004470:	4b07      	ldr	r3, [pc, #28]	; (8004490 <vPortFree+0xc0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3301      	adds	r3, #1
 8004476:	4a06      	ldr	r2, [pc, #24]	; (8004490 <vPortFree+0xc0>)
 8004478:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800447a:	f7fe fc89 	bl	8002d90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800447e:	bf00      	nop
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	2000498c 	.word	0x2000498c
 800448c:	2000497c 	.word	0x2000497c
 8004490:	20004988 	.word	0x20004988

08004494 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800449a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800449e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80044a0:	4b27      	ldr	r3, [pc, #156]	; (8004540 <prvHeapInit+0xac>)
 80044a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00c      	beq.n	80044c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3307      	adds	r3, #7
 80044b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0307 	bic.w	r3, r3, #7
 80044ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	4a1f      	ldr	r2, [pc, #124]	; (8004540 <prvHeapInit+0xac>)
 80044c4:	4413      	add	r3, r2
 80044c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044cc:	4a1d      	ldr	r2, [pc, #116]	; (8004544 <prvHeapInit+0xb0>)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80044d2:	4b1c      	ldr	r3, [pc, #112]	; (8004544 <prvHeapInit+0xb0>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	4413      	add	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80044e0:	2208      	movs	r2, #8
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0307 	bic.w	r3, r3, #7
 80044ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4a15      	ldr	r2, [pc, #84]	; (8004548 <prvHeapInit+0xb4>)
 80044f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80044f6:	4b14      	ldr	r3, [pc, #80]	; (8004548 <prvHeapInit+0xb4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2200      	movs	r2, #0
 80044fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80044fe:	4b12      	ldr	r3, [pc, #72]	; (8004548 <prvHeapInit+0xb4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	1ad2      	subs	r2, r2, r3
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004514:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <prvHeapInit+0xb4>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	4a0a      	ldr	r2, [pc, #40]	; (800454c <prvHeapInit+0xb8>)
 8004522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	4a09      	ldr	r2, [pc, #36]	; (8004550 <prvHeapInit+0xbc>)
 800452a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800452c:	4b09      	ldr	r3, [pc, #36]	; (8004554 <prvHeapInit+0xc0>)
 800452e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004532:	601a      	str	r2, [r3, #0]
}
 8004534:	bf00      	nop
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	20000d70 	.word	0x20000d70
 8004544:	20004970 	.word	0x20004970
 8004548:	20004978 	.word	0x20004978
 800454c:	20004980 	.word	0x20004980
 8004550:	2000497c 	.word	0x2000497c
 8004554:	2000498c 	.word	0x2000498c

08004558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004560:	4b28      	ldr	r3, [pc, #160]	; (8004604 <prvInsertBlockIntoFreeList+0xac>)
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	e002      	b.n	800456c <prvInsertBlockIntoFreeList+0x14>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	429a      	cmp	r2, r3
 8004574:	d8f7      	bhi.n	8004566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	4413      	add	r3, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	429a      	cmp	r2, r3
 8004586:	d108      	bne.n	800459a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	441a      	add	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	441a      	add	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d118      	bne.n	80045e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4b15      	ldr	r3, [pc, #84]	; (8004608 <prvInsertBlockIntoFreeList+0xb0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d00d      	beq.n	80045d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	441a      	add	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	e008      	b.n	80045e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045d6:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <prvInsertBlockIntoFreeList+0xb0>)
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	e003      	b.n	80045e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d002      	beq.n	80045f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20004970 	.word	0x20004970
 8004608:	20004978 	.word	0x20004978

0800460c <memset>:
 800460c:	4402      	add	r2, r0
 800460e:	4603      	mov	r3, r0
 8004610:	4293      	cmp	r3, r2
 8004612:	d100      	bne.n	8004616 <memset+0xa>
 8004614:	4770      	bx	lr
 8004616:	f803 1b01 	strb.w	r1, [r3], #1
 800461a:	e7f9      	b.n	8004610 <memset+0x4>

0800461c <__libc_init_array>:
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	4d0d      	ldr	r5, [pc, #52]	; (8004654 <__libc_init_array+0x38>)
 8004620:	4c0d      	ldr	r4, [pc, #52]	; (8004658 <__libc_init_array+0x3c>)
 8004622:	1b64      	subs	r4, r4, r5
 8004624:	10a4      	asrs	r4, r4, #2
 8004626:	2600      	movs	r6, #0
 8004628:	42a6      	cmp	r6, r4
 800462a:	d109      	bne.n	8004640 <__libc_init_array+0x24>
 800462c:	4d0b      	ldr	r5, [pc, #44]	; (800465c <__libc_init_array+0x40>)
 800462e:	4c0c      	ldr	r4, [pc, #48]	; (8004660 <__libc_init_array+0x44>)
 8004630:	f000 f826 	bl	8004680 <_init>
 8004634:	1b64      	subs	r4, r4, r5
 8004636:	10a4      	asrs	r4, r4, #2
 8004638:	2600      	movs	r6, #0
 800463a:	42a6      	cmp	r6, r4
 800463c:	d105      	bne.n	800464a <__libc_init_array+0x2e>
 800463e:	bd70      	pop	{r4, r5, r6, pc}
 8004640:	f855 3b04 	ldr.w	r3, [r5], #4
 8004644:	4798      	blx	r3
 8004646:	3601      	adds	r6, #1
 8004648:	e7ee      	b.n	8004628 <__libc_init_array+0xc>
 800464a:	f855 3b04 	ldr.w	r3, [r5], #4
 800464e:	4798      	blx	r3
 8004650:	3601      	adds	r6, #1
 8004652:	e7f2      	b.n	800463a <__libc_init_array+0x1e>
 8004654:	08004758 	.word	0x08004758
 8004658:	08004758 	.word	0x08004758
 800465c:	08004758 	.word	0x08004758
 8004660:	0800475c 	.word	0x0800475c

08004664 <memcpy>:
 8004664:	440a      	add	r2, r1
 8004666:	4291      	cmp	r1, r2
 8004668:	f100 33ff 	add.w	r3, r0, #4294967295
 800466c:	d100      	bne.n	8004670 <memcpy+0xc>
 800466e:	4770      	bx	lr
 8004670:	b510      	push	{r4, lr}
 8004672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800467a:	4291      	cmp	r1, r2
 800467c:	d1f9      	bne.n	8004672 <memcpy+0xe>
 800467e:	bd10      	pop	{r4, pc}

08004680 <_init>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr

0800468c <_fini>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	bf00      	nop
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr
