
16_Counting_Semaphore_Int_And_Tasks_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e24  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08005ff4  08005ff4  00015ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006168  08006168  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006168  08006168  00016168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006170  08006170  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006170  08006170  00016170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006174  08006174  00016174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b74  2000006c  080061e4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004be0  080061e4  00024be0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001256d  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d11  00000000  00000000  0003264c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00035360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bcf  00000000  00000000  000362d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000440f  00000000  00000000  00036e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000120fd  00000000  00000000  0003b2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4348  00000000  00000000  0004d3ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000484c  00000000  00000000  001216f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  00125f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005fdc 	.word	0x08005fdc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08005fdc 	.word	0x08005fdc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <EXTI15_10_IRQHandler>:
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

void EXTI15_10_IRQHandler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
	...

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	sprintf(mymesage,"Demo of Counting semaphore usage interrupt and task. \r\n");
 80005c0:	491e      	ldr	r1, [pc, #120]	; (800063c <main+0x80>)
 80005c2:	481f      	ldr	r0, [pc, #124]	; (8000640 <main+0x84>)
 80005c4:	f004 fcce 	bl	8004f64 <siprintf>
	printf(mymesage);
 80005c8:	481d      	ldr	r0, [pc, #116]	; (8000640 <main+0x84>)
 80005ca:	f004 fcb9 	bl	8004f40 <iprintf>

	 xSemaphoreCounting = xSemaphoreCreateCounting(10,0); //10 tane anahtar 0 başla
 80005ce:	2100      	movs	r1, #0
 80005d0:	200a      	movs	r0, #10
 80005d2:	f002 f950 	bl	8002876 <xQueueCreateCountingSemaphore>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a1a      	ldr	r2, [pc, #104]	; (8000644 <main+0x88>)
 80005da:	6013      	str	r3, [r2, #0]

	if(xSemaphoreCounting != NULL)
 80005dc:	4b19      	ldr	r3, [pc, #100]	; (8000644 <main+0x88>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d007      	beq.n	80005f4 <main+0x38>
	{
		sprintf(mymesage,"Semphore and Interrupt task are created");
 80005e4:	4918      	ldr	r1, [pc, #96]	; (8000648 <main+0x8c>)
 80005e6:	4816      	ldr	r0, [pc, #88]	; (8000640 <main+0x84>)
 80005e8:	f004 fcbc 	bl	8004f64 <siprintf>
		printf(mymesage);
 80005ec:	4814      	ldr	r0, [pc, #80]	; (8000640 <main+0x84>)
 80005ee:	f004 fca7 	bl	8004f40 <iprintf>
 80005f2:	e006      	b.n	8000602 <main+0x46>
	}
	else
	{
		sprintf(mymesage,"Semphore and queue task are not created");
 80005f4:	4915      	ldr	r1, [pc, #84]	; (800064c <main+0x90>)
 80005f6:	4812      	ldr	r0, [pc, #72]	; (8000640 <main+0x84>)
 80005f8:	f004 fcb4 	bl	8004f64 <siprintf>
		printf(mymesage);
 80005fc:	4810      	ldr	r0, [pc, #64]	; (8000640 <main+0x84>)
 80005fe:	f004 fc9f 	bl	8004f40 <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 fabd 	bl	8000b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f82f 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 f8b7 	bl	800077c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800060e:	f000 f88b 	bl	8000728 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000612:	f001 fe13 	bl	800223c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(Handler_Task, NULL, &defaultTask_attributes);
 8000616:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <main+0x94>)
 8000618:	2100      	movs	r1, #0
 800061a:	480e      	ldr	r0, [pc, #56]	; (8000654 <main+0x98>)
 800061c:	f001 fe58 	bl	80022d0 <osThreadNew>
 8000620:	4603      	mov	r3, r0
 8000622:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <main+0x9c>)
 8000624:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(Periodic_Task, NULL, &myTask02_attributes);
 8000626:	4a0d      	ldr	r2, [pc, #52]	; (800065c <main+0xa0>)
 8000628:	2100      	movs	r1, #0
 800062a:	480d      	ldr	r0, [pc, #52]	; (8000660 <main+0xa4>)
 800062c:	f001 fe50 	bl	80022d0 <osThreadNew>
 8000630:	4603      	mov	r3, r0
 8000632:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <main+0xa8>)
 8000634:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000636:	f001 fe25 	bl	8002284 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063a:	e7fe      	b.n	800063a <main+0x7e>
 800063c:	08006034 	.word	0x08006034
 8000640:	200000d8 	.word	0x200000d8
 8000644:	200000d4 	.word	0x200000d4
 8000648:	0800606c 	.word	0x0800606c
 800064c:	08006094 	.word	0x08006094
 8000650:	080060d4 	.word	0x080060d4
 8000654:	08000869 	.word	0x08000869
 8000658:	200000cc 	.word	0x200000cc
 800065c:	080060f8 	.word	0x080060f8
 8000660:	08000879 	.word	0x08000879
 8000664:	200000d0 	.word	0x200000d0

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	2234      	movs	r2, #52	; 0x34
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f004 fcd7 	bl	800502a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b23      	ldr	r3, [pc, #140]	; (8000720 <SystemClock_Config+0xb8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a22      	ldr	r2, [pc, #136]	; (8000720 <SystemClock_Config+0xb8>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b20      	ldr	r3, [pc, #128]	; (8000720 <SystemClock_Config+0xb8>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a8:	2300      	movs	r3, #0
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <SystemClock_Config+0xbc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b4:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <SystemClock_Config+0xbc>)
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <SystemClock_Config+0xbc>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d0:	2310      	movs	r3, #16
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 f819 	bl	8001714 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006e8:	f000 f8ce 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f000 fd40 	bl	800118c <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000712:	f000 f8b9 	bl	8000888 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	; 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <MX_USART2_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000734:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000760:	f001 fa76 	bl	8001c50 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f000 f88d 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000088 	.word	0x20000088
 8000778:	40004400 	.word	0x40004400

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b30      	ldr	r3, [pc, #192]	; (8000858 <MX_GPIO_Init+0xdc>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a2f      	ldr	r2, [pc, #188]	; (8000858 <MX_GPIO_Init+0xdc>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b2d      	ldr	r3, [pc, #180]	; (8000858 <MX_GPIO_Init+0xdc>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b29      	ldr	r3, [pc, #164]	; (8000858 <MX_GPIO_Init+0xdc>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a28      	ldr	r2, [pc, #160]	; (8000858 <MX_GPIO_Init+0xdc>)
 80007b8:	f043 0320 	orr.w	r3, r3, #32
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b26      	ldr	r3, [pc, #152]	; (8000858 <MX_GPIO_Init+0xdc>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0320 	and.w	r3, r3, #32
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4b22      	ldr	r3, [pc, #136]	; (8000858 <MX_GPIO_Init+0xdc>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a21      	ldr	r2, [pc, #132]	; (8000858 <MX_GPIO_Init+0xdc>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <MX_GPIO_Init+0xdc>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80007ec:	481b      	ldr	r0, [pc, #108]	; (800085c <MX_GPIO_Init+0xe0>)
 80007ee:	f000 fcb3 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2107      	movs	r1, #7
 80007f6:	481a      	ldr	r0, [pc, #104]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007f8:	f000 fcae 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80007fc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	4619      	mov	r1, r3
 8000814:	4811      	ldr	r0, [pc, #68]	; (800085c <MX_GPIO_Init+0xe0>)
 8000816:	f000 fb0b 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800081a:	2307      	movs	r3, #7
 800081c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	4619      	mov	r1, r3
 8000830:	480b      	ldr	r0, [pc, #44]	; (8000860 <MX_GPIO_Init+0xe4>)
 8000832:	f000 fafd 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000836:	2302      	movs	r3, #2
 8000838:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800083e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <MX_GPIO_Init+0xe8>)
 800084c:	f000 faf0 	bl	8000e30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	40020800 	.word	0x40020800
 8000860:	40021400 	.word	0x40021400
 8000864:	40020000 	.word	0x40020000

08000868 <Handler_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void Handler_Task(void *argument)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000870:	2001      	movs	r0, #1
 8000872:	f001 fdbf 	bl	80023f4 <osDelay>
 8000876:	e7fb      	b.n	8000870 <Handler_Task+0x8>

08000878 <Periodic_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void Periodic_Task(void *argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000880:	2001      	movs	r0, #1
 8000882:	f001 fdb7 	bl	80023f4 <osDelay>
 8000886:	e7fb      	b.n	8000880 <Periodic_Task+0x8>

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	e7fe      	b.n	8000890 <Error_Handler+0x8>
	...

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_MspInit+0x54>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	4a11      	ldr	r2, [pc, #68]	; (80008e8 <HAL_MspInit+0x54>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a8:	6453      	str	r3, [r2, #68]	; 0x44
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_MspInit+0x54>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <HAL_MspInit+0x54>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_MspInit+0x54>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_MspInit+0x54>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	210f      	movs	r1, #15
 80008d6:	f06f 0001 	mvn.w	r0, #1
 80008da:	f000 fa80 	bl	8000dde <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a19      	ldr	r2, [pc, #100]	; (8000970 <HAL_UART_MspInit+0x84>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d12b      	bne.n	8000966 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b18      	ldr	r3, [pc, #96]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	4a17      	ldr	r2, [pc, #92]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	6413      	str	r3, [r2, #64]	; 0x40
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a10      	ldr	r2, [pc, #64]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <HAL_UART_MspInit+0x88>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000946:	230c      	movs	r3, #12
 8000948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000956:	2307      	movs	r3, #7
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <HAL_UART_MspInit+0x8c>)
 8000962:	f000 fa65 	bl	8000e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	; 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40004400 	.word	0x40004400
 8000974:	40023800 	.word	0x40023800
 8000978:	40020000 	.word	0x40020000

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ac:	f000 f93a 	bl	8000c24 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009b0:	f003 f99a 	bl	8003ce8 <xTaskGetSchedulerState>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d001      	beq.n	80009be <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009ba:	f003 ff85 	bl	80048c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	e00a      	b.n	80009ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009d4:	f3af 8000 	nop.w
 80009d8:	4601      	mov	r1, r0
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	60ba      	str	r2, [r7, #8]
 80009e0:	b2ca      	uxtb	r2, r1
 80009e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	3301      	adds	r3, #1
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697a      	ldr	r2, [r7, #20]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	dbf0      	blt.n	80009d4 <_read+0x12>
  }

  return len;
 80009f2:	687b      	ldr	r3, [r7, #4]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e009      	b.n	8000a22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	1c5a      	adds	r2, r3, #1
 8000a12:	60ba      	str	r2, [r7, #8]
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	dbf1      	blt.n	8000a0e <_write+0x12>
  }
  return len;
 8000a2a:	687b      	ldr	r3, [r7, #4]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <_close>:

int _close(int file)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5c:	605a      	str	r2, [r3, #4]
  return 0;
 8000a5e:	2300      	movs	r3, #0
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_isatty>:

int _isatty(int file)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a74:	2301      	movs	r3, #1
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b085      	sub	sp, #20
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa4:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <_sbrk+0x5c>)
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <_sbrk+0x60>)
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <_sbrk+0x64>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <_sbrk+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d207      	bcs.n	8000adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000acc:	f004 fafc 	bl	80050c8 <__errno>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	e009      	b.n	8000af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <_sbrk+0x64>)
 8000aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20020000 	.word	0x20020000
 8000afc:	00000400 	.word	0x00000400
 8000b00:	2000013c 	.word	0x2000013c
 8000b04:	20004be0 	.word	0x20004be0

08000b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <SystemInit+0x20>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <SystemInit+0x20>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b32:	490e      	ldr	r1, [pc, #56]	; (8000b6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b34:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b48:	4c0b      	ldr	r4, [pc, #44]	; (8000b78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b56:	f7ff ffd7 	bl	8000b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f004 fabb 	bl	80050d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5e:	f7ff fd2d 	bl	80005bc <main>
  bx  lr    
 8000b62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b70:	08006178 	.word	0x08006178
  ldr r2, =_sbss
 8000b74:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b78:	20004be0 	.word	0x20004be0

08000b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <HAL_Init+0x40>)
 8000b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <HAL_Init+0x40>)
 8000b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <HAL_Init+0x40>)
 8000ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 f90d 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bae:	200f      	movs	r0, #15
 8000bb0:	f000 f808 	bl	8000bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb4:	f7ff fe6e 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023c00 	.word	0x40023c00

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0x54>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_InitTick+0x58>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f917 	bl	8000e16 <HAL_SYSTICK_Config>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00e      	b.n	8000c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	d80a      	bhi.n	8000c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f000 f8ed 	bl	8000dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c04:	4a06      	ldr	r2, [pc, #24]	; (8000c20 <HAL_InitTick+0x5c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e000      	b.n	8000c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	20000004 	.word	0x20000004

08000c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x20>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_IncTick+0x24>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_IncTick+0x24>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000140 	.word	0x20000140

08000c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <HAL_GetTick+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000140 	.word	0x20000140

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f7ff ff8e 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff47 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff5c 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff8e 	bl	8000d1c <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ffb0 	bl	8000d84 <SysTick_Config>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	e165      	b.n	8001118 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f040 8154 	bne.w	8001112 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d005      	beq.n	8000e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d130      	bne.n	8000ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	091b      	lsrs	r3, r3, #4
 8000ece:	f003 0201 	and.w	r2, r3, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d017      	beq.n	8000f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d123      	bne.n	8000f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	08da      	lsrs	r2, r3, #3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3208      	adds	r2, #8
 8000f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	220f      	movs	r2, #15
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	691a      	ldr	r2, [r3, #16]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	69b9      	ldr	r1, [r7, #24]
 8000f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0203 	and.w	r2, r3, #3
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 80ae 	beq.w	8001112 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b5d      	ldr	r3, [pc, #372]	; (8001130 <HAL_GPIO_Init+0x300>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a5c      	ldr	r2, [pc, #368]	; (8001130 <HAL_GPIO_Init+0x300>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b5a      	ldr	r3, [pc, #360]	; (8001130 <HAL_GPIO_Init+0x300>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd2:	4a58      	ldr	r2, [pc, #352]	; (8001134 <HAL_GPIO_Init+0x304>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4f      	ldr	r2, [pc, #316]	; (8001138 <HAL_GPIO_Init+0x308>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d025      	beq.n	800104a <HAL_GPIO_Init+0x21a>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4e      	ldr	r2, [pc, #312]	; (800113c <HAL_GPIO_Init+0x30c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d01f      	beq.n	8001046 <HAL_GPIO_Init+0x216>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4d      	ldr	r2, [pc, #308]	; (8001140 <HAL_GPIO_Init+0x310>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d019      	beq.n	8001042 <HAL_GPIO_Init+0x212>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4c      	ldr	r2, [pc, #304]	; (8001144 <HAL_GPIO_Init+0x314>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d013      	beq.n	800103e <HAL_GPIO_Init+0x20e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4b      	ldr	r2, [pc, #300]	; (8001148 <HAL_GPIO_Init+0x318>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d00d      	beq.n	800103a <HAL_GPIO_Init+0x20a>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4a      	ldr	r2, [pc, #296]	; (800114c <HAL_GPIO_Init+0x31c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x206>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a49      	ldr	r2, [pc, #292]	; (8001150 <HAL_GPIO_Init+0x320>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_GPIO_Init+0x202>
 800102e:	2306      	movs	r3, #6
 8001030:	e00c      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001032:	2307      	movs	r3, #7
 8001034:	e00a      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001036:	2305      	movs	r3, #5
 8001038:	e008      	b.n	800104c <HAL_GPIO_Init+0x21c>
 800103a:	2304      	movs	r3, #4
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x21c>
 800103e:	2303      	movs	r3, #3
 8001040:	e004      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001042:	2302      	movs	r3, #2
 8001044:	e002      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x21c>
 800104a:	2300      	movs	r3, #0
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	f002 0203 	and.w	r2, r2, #3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	4093      	lsls	r3, r2
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105c:	4935      	ldr	r1, [pc, #212]	; (8001134 <HAL_GPIO_Init+0x304>)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106a:	4b3a      	ldr	r3, [pc, #232]	; (8001154 <HAL_GPIO_Init+0x324>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108e:	4a31      	ldr	r2, [pc, #196]	; (8001154 <HAL_GPIO_Init+0x324>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <HAL_GPIO_Init+0x324>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b8:	4a26      	ldr	r2, [pc, #152]	; (8001154 <HAL_GPIO_Init+0x324>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010be:	4b25      	ldr	r3, [pc, #148]	; (8001154 <HAL_GPIO_Init+0x324>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <HAL_GPIO_Init+0x324>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_GPIO_Init+0x324>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800110c:	4a11      	ldr	r2, [pc, #68]	; (8001154 <HAL_GPIO_Init+0x324>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3301      	adds	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b0f      	cmp	r3, #15
 800111c:	f67f ae96 	bls.w	8000e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40013800 	.word	0x40013800
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40021000 	.word	0x40021000
 800114c:	40021400 	.word	0x40021400
 8001150:	40021800 	.word	0x40021800
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4613      	mov	r3, r2
 8001166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001174:	e003      	b.n	800117e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	041a      	lsls	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	619a      	str	r2, [r3, #24]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e0cc      	b.n	800133a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011a0:	4b68      	ldr	r3, [pc, #416]	; (8001344 <HAL_RCC_ClockConfig+0x1b8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 030f 	and.w	r3, r3, #15
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d90c      	bls.n	80011c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ae:	4b65      	ldr	r3, [pc, #404]	; (8001344 <HAL_RCC_ClockConfig+0x1b8>)
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011b6:	4b63      	ldr	r3, [pc, #396]	; (8001344 <HAL_RCC_ClockConfig+0x1b8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d001      	beq.n	80011c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e0b8      	b.n	800133a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d020      	beq.n	8001216 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011e0:	4b59      	ldr	r3, [pc, #356]	; (8001348 <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	4a58      	ldr	r2, [pc, #352]	; (8001348 <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0308 	and.w	r3, r3, #8
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d005      	beq.n	8001204 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011f8:	4b53      	ldr	r3, [pc, #332]	; (8001348 <HAL_RCC_ClockConfig+0x1bc>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	4a52      	ldr	r2, [pc, #328]	; (8001348 <HAL_RCC_ClockConfig+0x1bc>)
 80011fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001202:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001204:	4b50      	ldr	r3, [pc, #320]	; (8001348 <HAL_RCC_ClockConfig+0x1bc>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	494d      	ldr	r1, [pc, #308]	; (8001348 <HAL_RCC_ClockConfig+0x1bc>)
 8001212:	4313      	orrs	r3, r2
 8001214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	d044      	beq.n	80012ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d107      	bne.n	800123a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	4b47      	ldr	r3, [pc, #284]	; (8001348 <HAL_RCC_ClockConfig+0x1bc>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d119      	bne.n	800126a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e07f      	b.n	800133a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d003      	beq.n	800124a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001246:	2b03      	cmp	r3, #3
 8001248:	d107      	bne.n	800125a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800124a:	4b3f      	ldr	r3, [pc, #252]	; (8001348 <HAL_RCC_ClockConfig+0x1bc>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d109      	bne.n	800126a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e06f      	b.n	800133a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125a:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <HAL_RCC_ClockConfig+0x1bc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e067      	b.n	800133a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800126a:	4b37      	ldr	r3, [pc, #220]	; (8001348 <HAL_RCC_ClockConfig+0x1bc>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f023 0203 	bic.w	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4934      	ldr	r1, [pc, #208]	; (8001348 <HAL_RCC_ClockConfig+0x1bc>)
 8001278:	4313      	orrs	r3, r2
 800127a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800127c:	f7ff fce6 	bl	8000c4c <HAL_GetTick>
 8001280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001282:	e00a      	b.n	800129a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001284:	f7ff fce2 	bl	8000c4c <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001292:	4293      	cmp	r3, r2
 8001294:	d901      	bls.n	800129a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e04f      	b.n	800133a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800129a:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <HAL_RCC_ClockConfig+0x1bc>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 020c 	and.w	r2, r3, #12
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d1eb      	bne.n	8001284 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <HAL_RCC_ClockConfig+0x1b8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 030f 	and.w	r3, r3, #15
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d20c      	bcs.n	80012d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ba:	4b22      	ldr	r3, [pc, #136]	; (8001344 <HAL_RCC_ClockConfig+0x1b8>)
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <HAL_RCC_ClockConfig+0x1b8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d001      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e032      	b.n	800133a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d008      	beq.n	80012f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	4916      	ldr	r1, [pc, #88]	; (8001348 <HAL_RCC_ClockConfig+0x1bc>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d009      	beq.n	8001312 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_RCC_ClockConfig+0x1bc>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	490e      	ldr	r1, [pc, #56]	; (8001348 <HAL_RCC_ClockConfig+0x1bc>)
 800130e:	4313      	orrs	r3, r2
 8001310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001312:	f000 f855 	bl	80013c0 <HAL_RCC_GetSysClockFreq>
 8001316:	4602      	mov	r2, r0
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_RCC_ClockConfig+0x1bc>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	490a      	ldr	r1, [pc, #40]	; (800134c <HAL_RCC_ClockConfig+0x1c0>)
 8001324:	5ccb      	ldrb	r3, [r1, r3]
 8001326:	fa22 f303 	lsr.w	r3, r2, r3
 800132a:	4a09      	ldr	r2, [pc, #36]	; (8001350 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_RCC_ClockConfig+0x1c8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fc46 	bl	8000bc4 <HAL_InitTick>

  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023c00 	.word	0x40023c00
 8001348:	40023800 	.word	0x40023800
 800134c:	0800611c 	.word	0x0800611c
 8001350:	20000000 	.word	0x20000000
 8001354:	20000004 	.word	0x20000004

08001358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <HAL_RCC_GetHCLKFreq+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000000 	.word	0x20000000

08001370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001374:	f7ff fff0 	bl	8001358 <HAL_RCC_GetHCLKFreq>
 8001378:	4602      	mov	r2, r0
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	0a9b      	lsrs	r3, r3, #10
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	4903      	ldr	r1, [pc, #12]	; (8001394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001386:	5ccb      	ldrb	r3, [r1, r3]
 8001388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800138c:	4618      	mov	r0, r3
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	0800612c 	.word	0x0800612c

08001398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800139c:	f7ff ffdc 	bl	8001358 <HAL_RCC_GetHCLKFreq>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	0b5b      	lsrs	r3, r3, #13
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	4903      	ldr	r1, [pc, #12]	; (80013bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ae:	5ccb      	ldrb	r3, [r1, r3]
 80013b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	0800612c 	.word	0x0800612c

080013c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013c4:	b0a6      	sub	sp, #152	; 0x98
 80013c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013e6:	4bc8      	ldr	r3, [pc, #800]	; (8001708 <HAL_RCC_GetSysClockFreq+0x348>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b0c      	cmp	r3, #12
 80013f0:	f200 817e 	bhi.w	80016f0 <HAL_RCC_GetSysClockFreq+0x330>
 80013f4:	a201      	add	r2, pc, #4	; (adr r2, 80013fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80013f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fa:	bf00      	nop
 80013fc:	08001431 	.word	0x08001431
 8001400:	080016f1 	.word	0x080016f1
 8001404:	080016f1 	.word	0x080016f1
 8001408:	080016f1 	.word	0x080016f1
 800140c:	08001439 	.word	0x08001439
 8001410:	080016f1 	.word	0x080016f1
 8001414:	080016f1 	.word	0x080016f1
 8001418:	080016f1 	.word	0x080016f1
 800141c:	08001441 	.word	0x08001441
 8001420:	080016f1 	.word	0x080016f1
 8001424:	080016f1 	.word	0x080016f1
 8001428:	080016f1 	.word	0x080016f1
 800142c:	080015ab 	.word	0x080015ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001430:	4bb6      	ldr	r3, [pc, #728]	; (800170c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001436:	e15f      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001438:	4bb5      	ldr	r3, [pc, #724]	; (8001710 <HAL_RCC_GetSysClockFreq+0x350>)
 800143a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800143e:	e15b      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001440:	4bb1      	ldr	r3, [pc, #708]	; (8001708 <HAL_RCC_GetSysClockFreq+0x348>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001448:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800144c:	4bae      	ldr	r3, [pc, #696]	; (8001708 <HAL_RCC_GetSysClockFreq+0x348>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d031      	beq.n	80014bc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001458:	4bab      	ldr	r3, [pc, #684]	; (8001708 <HAL_RCC_GetSysClockFreq+0x348>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	099b      	lsrs	r3, r3, #6
 800145e:	2200      	movs	r2, #0
 8001460:	66bb      	str	r3, [r7, #104]	; 0x68
 8001462:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001464:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800146a:	663b      	str	r3, [r7, #96]	; 0x60
 800146c:	2300      	movs	r3, #0
 800146e:	667b      	str	r3, [r7, #100]	; 0x64
 8001470:	4ba7      	ldr	r3, [pc, #668]	; (8001710 <HAL_RCC_GetSysClockFreq+0x350>)
 8001472:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001476:	462a      	mov	r2, r5
 8001478:	fb03 f202 	mul.w	r2, r3, r2
 800147c:	2300      	movs	r3, #0
 800147e:	4621      	mov	r1, r4
 8001480:	fb01 f303 	mul.w	r3, r1, r3
 8001484:	4413      	add	r3, r2
 8001486:	4aa2      	ldr	r2, [pc, #648]	; (8001710 <HAL_RCC_GetSysClockFreq+0x350>)
 8001488:	4621      	mov	r1, r4
 800148a:	fba1 1202 	umull	r1, r2, r1, r2
 800148e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001490:	460a      	mov	r2, r1
 8001492:	67ba      	str	r2, [r7, #120]	; 0x78
 8001494:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001496:	4413      	add	r3, r2
 8001498:	67fb      	str	r3, [r7, #124]	; 0x7c
 800149a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800149e:	2200      	movs	r2, #0
 80014a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80014a2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80014a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014a8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80014ac:	f7fe ff00 	bl	80002b0 <__aeabi_uldivmod>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4613      	mov	r3, r2
 80014b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014ba:	e064      	b.n	8001586 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014bc:	4b92      	ldr	r3, [pc, #584]	; (8001708 <HAL_RCC_GetSysClockFreq+0x348>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	099b      	lsrs	r3, r3, #6
 80014c2:	2200      	movs	r2, #0
 80014c4:	653b      	str	r3, [r7, #80]	; 0x50
 80014c6:	657a      	str	r2, [r7, #84]	; 0x54
 80014c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80014d0:	2300      	movs	r3, #0
 80014d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014d4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80014d8:	4622      	mov	r2, r4
 80014da:	462b      	mov	r3, r5
 80014dc:	f04f 0000 	mov.w	r0, #0
 80014e0:	f04f 0100 	mov.w	r1, #0
 80014e4:	0159      	lsls	r1, r3, #5
 80014e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014ea:	0150      	lsls	r0, r2, #5
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4621      	mov	r1, r4
 80014f2:	1a51      	subs	r1, r2, r1
 80014f4:	6139      	str	r1, [r7, #16]
 80014f6:	4629      	mov	r1, r5
 80014f8:	eb63 0301 	sbc.w	r3, r3, r1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800150a:	4659      	mov	r1, fp
 800150c:	018b      	lsls	r3, r1, #6
 800150e:	4651      	mov	r1, sl
 8001510:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001514:	4651      	mov	r1, sl
 8001516:	018a      	lsls	r2, r1, #6
 8001518:	4651      	mov	r1, sl
 800151a:	ebb2 0801 	subs.w	r8, r2, r1
 800151e:	4659      	mov	r1, fp
 8001520:	eb63 0901 	sbc.w	r9, r3, r1
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001530:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001534:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001538:	4690      	mov	r8, r2
 800153a:	4699      	mov	r9, r3
 800153c:	4623      	mov	r3, r4
 800153e:	eb18 0303 	adds.w	r3, r8, r3
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	462b      	mov	r3, r5
 8001546:	eb49 0303 	adc.w	r3, r9, r3
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001558:	4629      	mov	r1, r5
 800155a:	028b      	lsls	r3, r1, #10
 800155c:	4621      	mov	r1, r4
 800155e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001562:	4621      	mov	r1, r4
 8001564:	028a      	lsls	r2, r1, #10
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800156e:	2200      	movs	r2, #0
 8001570:	643b      	str	r3, [r7, #64]	; 0x40
 8001572:	647a      	str	r2, [r7, #68]	; 0x44
 8001574:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001578:	f7fe fe9a 	bl	80002b0 <__aeabi_uldivmod>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4613      	mov	r3, r2
 8001582:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001586:	4b60      	ldr	r3, [pc, #384]	; (8001708 <HAL_RCC_GetSysClockFreq+0x348>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	0c1b      	lsrs	r3, r3, #16
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	3301      	adds	r3, #1
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001598:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800159c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80015a8:	e0a6      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015aa:	4b57      	ldr	r3, [pc, #348]	; (8001708 <HAL_RCC_GetSysClockFreq+0x348>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015b6:	4b54      	ldr	r3, [pc, #336]	; (8001708 <HAL_RCC_GetSysClockFreq+0x348>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d02a      	beq.n	8001618 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c2:	4b51      	ldr	r3, [pc, #324]	; (8001708 <HAL_RCC_GetSysClockFreq+0x348>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	099b      	lsrs	r3, r3, #6
 80015c8:	2200      	movs	r2, #0
 80015ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80015cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80015ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80015d4:	2100      	movs	r1, #0
 80015d6:	4b4e      	ldr	r3, [pc, #312]	; (8001710 <HAL_RCC_GetSysClockFreq+0x350>)
 80015d8:	fb03 f201 	mul.w	r2, r3, r1
 80015dc:	2300      	movs	r3, #0
 80015de:	fb00 f303 	mul.w	r3, r0, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	4a4a      	ldr	r2, [pc, #296]	; (8001710 <HAL_RCC_GetSysClockFreq+0x350>)
 80015e6:	fba0 1202 	umull	r1, r2, r0, r2
 80015ea:	677a      	str	r2, [r7, #116]	; 0x74
 80015ec:	460a      	mov	r2, r1
 80015ee:	673a      	str	r2, [r7, #112]	; 0x70
 80015f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80015f2:	4413      	add	r3, r2
 80015f4:	677b      	str	r3, [r7, #116]	; 0x74
 80015f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015fa:	2200      	movs	r2, #0
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
 80015fe:	637a      	str	r2, [r7, #52]	; 0x34
 8001600:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001604:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001608:	f7fe fe52 	bl	80002b0 <__aeabi_uldivmod>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4613      	mov	r3, r2
 8001612:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001616:	e05b      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001618:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <HAL_RCC_GetSysClockFreq+0x348>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	099b      	lsrs	r3, r3, #6
 800161e:	2200      	movs	r2, #0
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28
 8001622:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800162a:	623b      	str	r3, [r7, #32]
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
 8001630:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001634:	4642      	mov	r2, r8
 8001636:	464b      	mov	r3, r9
 8001638:	f04f 0000 	mov.w	r0, #0
 800163c:	f04f 0100 	mov.w	r1, #0
 8001640:	0159      	lsls	r1, r3, #5
 8001642:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001646:	0150      	lsls	r0, r2, #5
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4641      	mov	r1, r8
 800164e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001652:	4649      	mov	r1, r9
 8001654:	eb63 0b01 	sbc.w	fp, r3, r1
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001664:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001668:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800166c:	ebb2 040a 	subs.w	r4, r2, sl
 8001670:	eb63 050b 	sbc.w	r5, r3, fp
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	00eb      	lsls	r3, r5, #3
 800167e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001682:	00e2      	lsls	r2, r4, #3
 8001684:	4614      	mov	r4, r2
 8001686:	461d      	mov	r5, r3
 8001688:	4643      	mov	r3, r8
 800168a:	18e3      	adds	r3, r4, r3
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	464b      	mov	r3, r9
 8001690:	eb45 0303 	adc.w	r3, r5, r3
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016a2:	4629      	mov	r1, r5
 80016a4:	028b      	lsls	r3, r1, #10
 80016a6:	4621      	mov	r1, r4
 80016a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016ac:	4621      	mov	r1, r4
 80016ae:	028a      	lsls	r2, r1, #10
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016b8:	2200      	movs	r2, #0
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	61fa      	str	r2, [r7, #28]
 80016be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016c2:	f7fe fdf5 	bl	80002b0 <__aeabi_uldivmod>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4613      	mov	r3, r2
 80016cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HAL_RCC_GetSysClockFreq+0x348>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	0f1b      	lsrs	r3, r3, #28
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80016de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80016e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80016ee:	e003      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_RCC_GetSysClockFreq+0x34c>)
 80016f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80016f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3798      	adds	r7, #152	; 0x98
 8001700:	46bd      	mov	sp, r7
 8001702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800
 800170c:	00f42400 	.word	0x00f42400
 8001710:	017d7840 	.word	0x017d7840

08001714 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e28d      	b.n	8001c42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8083 	beq.w	800183a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001734:	4b94      	ldr	r3, [pc, #592]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b04      	cmp	r3, #4
 800173e:	d019      	beq.n	8001774 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001740:	4b91      	ldr	r3, [pc, #580]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001748:	2b08      	cmp	r3, #8
 800174a:	d106      	bne.n	800175a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800174c:	4b8e      	ldr	r3, [pc, #568]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001758:	d00c      	beq.n	8001774 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800175a:	4b8b      	ldr	r3, [pc, #556]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001762:	2b0c      	cmp	r3, #12
 8001764:	d112      	bne.n	800178c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001766:	4b88      	ldr	r3, [pc, #544]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001772:	d10b      	bne.n	800178c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001774:	4b84      	ldr	r3, [pc, #528]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d05b      	beq.n	8001838 <HAL_RCC_OscConfig+0x124>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d157      	bne.n	8001838 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e25a      	b.n	8001c42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001794:	d106      	bne.n	80017a4 <HAL_RCC_OscConfig+0x90>
 8001796:	4b7c      	ldr	r3, [pc, #496]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a7b      	ldr	r2, [pc, #492]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 800179c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e01d      	b.n	80017e0 <HAL_RCC_OscConfig+0xcc>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ac:	d10c      	bne.n	80017c8 <HAL_RCC_OscConfig+0xb4>
 80017ae:	4b76      	ldr	r3, [pc, #472]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a75      	ldr	r2, [pc, #468]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 80017b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b73      	ldr	r3, [pc, #460]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a72      	ldr	r2, [pc, #456]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 80017c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e00b      	b.n	80017e0 <HAL_RCC_OscConfig+0xcc>
 80017c8:	4b6f      	ldr	r3, [pc, #444]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a6e      	ldr	r2, [pc, #440]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 80017ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b6c      	ldr	r3, [pc, #432]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a6b      	ldr	r2, [pc, #428]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 80017da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d013      	beq.n	8001810 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff fa30 	bl	8000c4c <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff fa2c 	bl	8000c4c <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e21f      	b.n	8001c42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	4b61      	ldr	r3, [pc, #388]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0xdc>
 800180e:	e014      	b.n	800183a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001810:	f7ff fa1c 	bl	8000c4c <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001818:	f7ff fa18 	bl	8000c4c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	; 0x64
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e20b      	b.n	8001c42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182a:	4b57      	ldr	r3, [pc, #348]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x104>
 8001836:	e000      	b.n	800183a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d06f      	beq.n	8001926 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001846:	4b50      	ldr	r3, [pc, #320]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	2b00      	cmp	r3, #0
 8001850:	d017      	beq.n	8001882 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001852:	4b4d      	ldr	r3, [pc, #308]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800185a:	2b08      	cmp	r3, #8
 800185c:	d105      	bne.n	800186a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800185e:	4b4a      	ldr	r3, [pc, #296]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00b      	beq.n	8001882 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800186a:	4b47      	ldr	r3, [pc, #284]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001872:	2b0c      	cmp	r3, #12
 8001874:	d11c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001876:	4b44      	ldr	r3, [pc, #272]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d116      	bne.n	80018b0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001882:	4b41      	ldr	r3, [pc, #260]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <HAL_RCC_OscConfig+0x186>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d001      	beq.n	800189a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e1d3      	b.n	8001c42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189a:	4b3b      	ldr	r3, [pc, #236]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4937      	ldr	r1, [pc, #220]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ae:	e03a      	b.n	8001926 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d020      	beq.n	80018fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b8:	4b34      	ldr	r3, [pc, #208]	; (800198c <HAL_RCC_OscConfig+0x278>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018be:	f7ff f9c5 	bl	8000c4c <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c6:	f7ff f9c1 	bl	8000c4c <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e1b4      	b.n	8001c42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d8:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e4:	4b28      	ldr	r3, [pc, #160]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	4925      	ldr	r1, [pc, #148]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]
 80018f8:	e015      	b.n	8001926 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fa:	4b24      	ldr	r3, [pc, #144]	; (800198c <HAL_RCC_OscConfig+0x278>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff f9a4 	bl	8000c4c <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001908:	f7ff f9a0 	bl	8000c4c <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e193      	b.n	8001c42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191a:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d036      	beq.n	80019a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d016      	beq.n	8001968 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001940:	f7ff f984 	bl	8000c4c <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001948:	f7ff f980 	bl	8000c4c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e173      	b.n	8001c42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 800195c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0x234>
 8001966:	e01b      	b.n	80019a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196e:	f7ff f96d 	bl	8000c4c <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001974:	e00e      	b.n	8001994 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001976:	f7ff f969 	bl	8000c4c <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d907      	bls.n	8001994 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e15c      	b.n	8001c42 <HAL_RCC_OscConfig+0x52e>
 8001988:	40023800 	.word	0x40023800
 800198c:	42470000 	.word	0x42470000
 8001990:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001994:	4b8a      	ldr	r3, [pc, #552]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1ea      	bne.n	8001976 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 8097 	beq.w	8001adc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b2:	4b83      	ldr	r3, [pc, #524]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10f      	bne.n	80019de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	4b7f      	ldr	r3, [pc, #508]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a7e      	ldr	r2, [pc, #504]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	4b7c      	ldr	r3, [pc, #496]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019da:	2301      	movs	r3, #1
 80019dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019de:	4b79      	ldr	r3, [pc, #484]	; (8001bc4 <HAL_RCC_OscConfig+0x4b0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d118      	bne.n	8001a1c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ea:	4b76      	ldr	r3, [pc, #472]	; (8001bc4 <HAL_RCC_OscConfig+0x4b0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a75      	ldr	r2, [pc, #468]	; (8001bc4 <HAL_RCC_OscConfig+0x4b0>)
 80019f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f6:	f7ff f929 	bl	8000c4c <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fe:	f7ff f925 	bl	8000c4c <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e118      	b.n	8001c42 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	4b6c      	ldr	r3, [pc, #432]	; (8001bc4 <HAL_RCC_OscConfig+0x4b0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x31e>
 8001a24:	4b66      	ldr	r3, [pc, #408]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a28:	4a65      	ldr	r2, [pc, #404]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a30:	e01c      	b.n	8001a6c <HAL_RCC_OscConfig+0x358>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b05      	cmp	r3, #5
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x340>
 8001a3a:	4b61      	ldr	r3, [pc, #388]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	4a60      	ldr	r2, [pc, #384]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	6713      	str	r3, [r2, #112]	; 0x70
 8001a46:	4b5e      	ldr	r3, [pc, #376]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4a:	4a5d      	ldr	r2, [pc, #372]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6713      	str	r3, [r2, #112]	; 0x70
 8001a52:	e00b      	b.n	8001a6c <HAL_RCC_OscConfig+0x358>
 8001a54:	4b5a      	ldr	r3, [pc, #360]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a58:	4a59      	ldr	r2, [pc, #356]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001a5a:	f023 0301 	bic.w	r3, r3, #1
 8001a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a60:	4b57      	ldr	r3, [pc, #348]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a64:	4a56      	ldr	r2, [pc, #344]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001a66:	f023 0304 	bic.w	r3, r3, #4
 8001a6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d015      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a74:	f7ff f8ea 	bl	8000c4c <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7a:	e00a      	b.n	8001a92 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a7c:	f7ff f8e6 	bl	8000c4c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e0d7      	b.n	8001c42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a92:	4b4b      	ldr	r3, [pc, #300]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0ee      	beq.n	8001a7c <HAL_RCC_OscConfig+0x368>
 8001a9e:	e014      	b.n	8001aca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa0:	f7ff f8d4 	bl	8000c4c <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa8:	f7ff f8d0 	bl	8000c4c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e0c1      	b.n	8001c42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001abe:	4b40      	ldr	r3, [pc, #256]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1ee      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aca:	7dfb      	ldrb	r3, [r7, #23]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d105      	bne.n	8001adc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad0:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	4a3a      	ldr	r2, [pc, #232]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ada:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80ad 	beq.w	8001c40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ae6:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d060      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d145      	bne.n	8001b86 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <HAL_RCC_OscConfig+0x4b4>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7ff f8a4 	bl	8000c4c <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff f8a0 	bl	8000c4c <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e093      	b.n	8001c42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1a:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69da      	ldr	r2, [r3, #28]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	019b      	lsls	r3, r3, #6
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	085b      	lsrs	r3, r3, #1
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	041b      	lsls	r3, r3, #16
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	061b      	lsls	r3, r3, #24
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	071b      	lsls	r3, r3, #28
 8001b52:	491b      	ldr	r1, [pc, #108]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_RCC_OscConfig+0x4b4>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7ff f875 	bl	8000c4c <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b66:	f7ff f871 	bl	8000c4c <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e064      	b.n	8001c42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x452>
 8001b84:	e05c      	b.n	8001c40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <HAL_RCC_OscConfig+0x4b4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f85e 	bl	8000c4c <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b94:	f7ff f85a 	bl	8000c4c <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e04d      	b.n	8001c42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_RCC_OscConfig+0x4ac>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x480>
 8001bb2:	e045      	b.n	8001c40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d107      	bne.n	8001bcc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e040      	b.n	8001c42 <HAL_RCC_OscConfig+0x52e>
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40007000 	.word	0x40007000
 8001bc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bcc:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <HAL_RCC_OscConfig+0x538>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d030      	beq.n	8001c3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d129      	bne.n	8001c3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d122      	bne.n	8001c3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d119      	bne.n	8001c3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	085b      	lsrs	r3, r3, #1
 8001c14:	3b01      	subs	r3, #1
 8001c16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d10f      	bne.n	8001c3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d107      	bne.n	8001c3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d001      	beq.n	8001c40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800

08001c50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e03f      	b.n	8001ce2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d106      	bne.n	8001c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7fe fe38 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2224      	movs	r2, #36	; 0x24
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f829 	bl	8001cec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ca8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695a      	ldr	r2, [r3, #20]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cf0:	b0c0      	sub	sp, #256	; 0x100
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d08:	68d9      	ldr	r1, [r3, #12]
 8001d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	ea40 0301 	orr.w	r3, r0, r1
 8001d14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	431a      	orrs	r2, r3
 8001d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001d44:	f021 010c 	bic.w	r1, r1, #12
 8001d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001d52:	430b      	orrs	r3, r1
 8001d54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d66:	6999      	ldr	r1, [r3, #24]
 8001d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	ea40 0301 	orr.w	r3, r0, r1
 8001d72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4b8f      	ldr	r3, [pc, #572]	; (8001fb8 <UART_SetConfig+0x2cc>)
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d005      	beq.n	8001d8c <UART_SetConfig+0xa0>
 8001d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	4b8d      	ldr	r3, [pc, #564]	; (8001fbc <UART_SetConfig+0x2d0>)
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d104      	bne.n	8001d96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d8c:	f7ff fb04 	bl	8001398 <HAL_RCC_GetPCLK2Freq>
 8001d90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001d94:	e003      	b.n	8001d9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d96:	f7ff faeb 	bl	8001370 <HAL_RCC_GetPCLK1Freq>
 8001d9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001da8:	f040 810c 	bne.w	8001fc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001db0:	2200      	movs	r2, #0
 8001db2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001db6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001dba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001dbe:	4622      	mov	r2, r4
 8001dc0:	462b      	mov	r3, r5
 8001dc2:	1891      	adds	r1, r2, r2
 8001dc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8001dc6:	415b      	adcs	r3, r3
 8001dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001dce:	4621      	mov	r1, r4
 8001dd0:	eb12 0801 	adds.w	r8, r2, r1
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	eb43 0901 	adc.w	r9, r3, r1
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001de6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dee:	4690      	mov	r8, r2
 8001df0:	4699      	mov	r9, r3
 8001df2:	4623      	mov	r3, r4
 8001df4:	eb18 0303 	adds.w	r3, r8, r3
 8001df8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001dfc:	462b      	mov	r3, r5
 8001dfe:	eb49 0303 	adc.w	r3, r9, r3
 8001e02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001e16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	18db      	adds	r3, r3, r3
 8001e1e:	653b      	str	r3, [r7, #80]	; 0x50
 8001e20:	4613      	mov	r3, r2
 8001e22:	eb42 0303 	adc.w	r3, r2, r3
 8001e26:	657b      	str	r3, [r7, #84]	; 0x54
 8001e28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001e30:	f7fe fa3e 	bl	80002b0 <__aeabi_uldivmod>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4b61      	ldr	r3, [pc, #388]	; (8001fc0 <UART_SetConfig+0x2d4>)
 8001e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8001e3e:	095b      	lsrs	r3, r3, #5
 8001e40:	011c      	lsls	r4, r3, #4
 8001e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e46:	2200      	movs	r2, #0
 8001e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001e50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001e54:	4642      	mov	r2, r8
 8001e56:	464b      	mov	r3, r9
 8001e58:	1891      	adds	r1, r2, r2
 8001e5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8001e5c:	415b      	adcs	r3, r3
 8001e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e64:	4641      	mov	r1, r8
 8001e66:	eb12 0a01 	adds.w	sl, r2, r1
 8001e6a:	4649      	mov	r1, r9
 8001e6c:	eb43 0b01 	adc.w	fp, r3, r1
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e84:	4692      	mov	sl, r2
 8001e86:	469b      	mov	fp, r3
 8001e88:	4643      	mov	r3, r8
 8001e8a:	eb1a 0303 	adds.w	r3, sl, r3
 8001e8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001e92:	464b      	mov	r3, r9
 8001e94:	eb4b 0303 	adc.w	r3, fp, r3
 8001e98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001ea8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001eac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	18db      	adds	r3, r3, r3
 8001eb4:	643b      	str	r3, [r7, #64]	; 0x40
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	eb42 0303 	adc.w	r3, r2, r3
 8001ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8001ebe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ec2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001ec6:	f7fe f9f3 	bl	80002b0 <__aeabi_uldivmod>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <UART_SetConfig+0x2d4>)
 8001ed2:	fba3 2301 	umull	r2, r3, r3, r1
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2264      	movs	r2, #100	; 0x64
 8001eda:	fb02 f303 	mul.w	r3, r2, r3
 8001ede:	1acb      	subs	r3, r1, r3
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001ee6:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <UART_SetConfig+0x2d4>)
 8001ee8:	fba3 2302 	umull	r2, r3, r3, r2
 8001eec:	095b      	lsrs	r3, r3, #5
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001ef4:	441c      	add	r4, r3
 8001ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001efa:	2200      	movs	r2, #0
 8001efc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001f04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001f08:	4642      	mov	r2, r8
 8001f0a:	464b      	mov	r3, r9
 8001f0c:	1891      	adds	r1, r2, r2
 8001f0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f10:	415b      	adcs	r3, r3
 8001f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f18:	4641      	mov	r1, r8
 8001f1a:	1851      	adds	r1, r2, r1
 8001f1c:	6339      	str	r1, [r7, #48]	; 0x30
 8001f1e:	4649      	mov	r1, r9
 8001f20:	414b      	adcs	r3, r1
 8001f22:	637b      	str	r3, [r7, #52]	; 0x34
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001f30:	4659      	mov	r1, fp
 8001f32:	00cb      	lsls	r3, r1, #3
 8001f34:	4651      	mov	r1, sl
 8001f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f3a:	4651      	mov	r1, sl
 8001f3c:	00ca      	lsls	r2, r1, #3
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	4603      	mov	r3, r0
 8001f44:	4642      	mov	r2, r8
 8001f46:	189b      	adds	r3, r3, r2
 8001f48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f4c:	464b      	mov	r3, r9
 8001f4e:	460a      	mov	r2, r1
 8001f50:	eb42 0303 	adc.w	r3, r2, r3
 8001f54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001f68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	18db      	adds	r3, r3, r3
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f72:	4613      	mov	r3, r2
 8001f74:	eb42 0303 	adc.w	r3, r2, r3
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001f82:	f7fe f995 	bl	80002b0 <__aeabi_uldivmod>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <UART_SetConfig+0x2d4>)
 8001f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f90:	095b      	lsrs	r3, r3, #5
 8001f92:	2164      	movs	r1, #100	; 0x64
 8001f94:	fb01 f303 	mul.w	r3, r1, r3
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	3332      	adds	r3, #50	; 0x32
 8001f9e:	4a08      	ldr	r2, [pc, #32]	; (8001fc0 <UART_SetConfig+0x2d4>)
 8001fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa4:	095b      	lsrs	r3, r3, #5
 8001fa6:	f003 0207 	and.w	r2, r3, #7
 8001faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4422      	add	r2, r4
 8001fb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001fb4:	e106      	b.n	80021c4 <UART_SetConfig+0x4d8>
 8001fb6:	bf00      	nop
 8001fb8:	40011000 	.word	0x40011000
 8001fbc:	40011400 	.word	0x40011400
 8001fc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001fce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001fd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001fd6:	4642      	mov	r2, r8
 8001fd8:	464b      	mov	r3, r9
 8001fda:	1891      	adds	r1, r2, r2
 8001fdc:	6239      	str	r1, [r7, #32]
 8001fde:	415b      	adcs	r3, r3
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fe6:	4641      	mov	r1, r8
 8001fe8:	1854      	adds	r4, r2, r1
 8001fea:	4649      	mov	r1, r9
 8001fec:	eb43 0501 	adc.w	r5, r3, r1
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	00eb      	lsls	r3, r5, #3
 8001ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ffe:	00e2      	lsls	r2, r4, #3
 8002000:	4614      	mov	r4, r2
 8002002:	461d      	mov	r5, r3
 8002004:	4643      	mov	r3, r8
 8002006:	18e3      	adds	r3, r4, r3
 8002008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800200c:	464b      	mov	r3, r9
 800200e:	eb45 0303 	adc.w	r3, r5, r3
 8002012:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002022:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002032:	4629      	mov	r1, r5
 8002034:	008b      	lsls	r3, r1, #2
 8002036:	4621      	mov	r1, r4
 8002038:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800203c:	4621      	mov	r1, r4
 800203e:	008a      	lsls	r2, r1, #2
 8002040:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002044:	f7fe f934 	bl	80002b0 <__aeabi_uldivmod>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4b60      	ldr	r3, [pc, #384]	; (80021d0 <UART_SetConfig+0x4e4>)
 800204e:	fba3 2302 	umull	r2, r3, r3, r2
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	011c      	lsls	r4, r3, #4
 8002056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800205a:	2200      	movs	r2, #0
 800205c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002060:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002064:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002068:	4642      	mov	r2, r8
 800206a:	464b      	mov	r3, r9
 800206c:	1891      	adds	r1, r2, r2
 800206e:	61b9      	str	r1, [r7, #24]
 8002070:	415b      	adcs	r3, r3
 8002072:	61fb      	str	r3, [r7, #28]
 8002074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002078:	4641      	mov	r1, r8
 800207a:	1851      	adds	r1, r2, r1
 800207c:	6139      	str	r1, [r7, #16]
 800207e:	4649      	mov	r1, r9
 8002080:	414b      	adcs	r3, r1
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002090:	4659      	mov	r1, fp
 8002092:	00cb      	lsls	r3, r1, #3
 8002094:	4651      	mov	r1, sl
 8002096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800209a:	4651      	mov	r1, sl
 800209c:	00ca      	lsls	r2, r1, #3
 800209e:	4610      	mov	r0, r2
 80020a0:	4619      	mov	r1, r3
 80020a2:	4603      	mov	r3, r0
 80020a4:	4642      	mov	r2, r8
 80020a6:	189b      	adds	r3, r3, r2
 80020a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020ac:	464b      	mov	r3, r9
 80020ae:	460a      	mov	r2, r1
 80020b0:	eb42 0303 	adc.w	r3, r2, r3
 80020b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80020b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80020c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80020d0:	4649      	mov	r1, r9
 80020d2:	008b      	lsls	r3, r1, #2
 80020d4:	4641      	mov	r1, r8
 80020d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020da:	4641      	mov	r1, r8
 80020dc:	008a      	lsls	r2, r1, #2
 80020de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80020e2:	f7fe f8e5 	bl	80002b0 <__aeabi_uldivmod>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4611      	mov	r1, r2
 80020ec:	4b38      	ldr	r3, [pc, #224]	; (80021d0 <UART_SetConfig+0x4e4>)
 80020ee:	fba3 2301 	umull	r2, r3, r3, r1
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	2264      	movs	r2, #100	; 0x64
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	1acb      	subs	r3, r1, r3
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	3332      	adds	r3, #50	; 0x32
 8002100:	4a33      	ldr	r2, [pc, #204]	; (80021d0 <UART_SetConfig+0x4e4>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800210c:	441c      	add	r4, r3
 800210e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002112:	2200      	movs	r2, #0
 8002114:	673b      	str	r3, [r7, #112]	; 0x70
 8002116:	677a      	str	r2, [r7, #116]	; 0x74
 8002118:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800211c:	4642      	mov	r2, r8
 800211e:	464b      	mov	r3, r9
 8002120:	1891      	adds	r1, r2, r2
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	415b      	adcs	r3, r3
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800212c:	4641      	mov	r1, r8
 800212e:	1851      	adds	r1, r2, r1
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	4649      	mov	r1, r9
 8002134:	414b      	adcs	r3, r1
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002144:	4659      	mov	r1, fp
 8002146:	00cb      	lsls	r3, r1, #3
 8002148:	4651      	mov	r1, sl
 800214a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800214e:	4651      	mov	r1, sl
 8002150:	00ca      	lsls	r2, r1, #3
 8002152:	4610      	mov	r0, r2
 8002154:	4619      	mov	r1, r3
 8002156:	4603      	mov	r3, r0
 8002158:	4642      	mov	r2, r8
 800215a:	189b      	adds	r3, r3, r2
 800215c:	66bb      	str	r3, [r7, #104]	; 0x68
 800215e:	464b      	mov	r3, r9
 8002160:	460a      	mov	r2, r1
 8002162:	eb42 0303 	adc.w	r3, r2, r3
 8002166:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	663b      	str	r3, [r7, #96]	; 0x60
 8002172:	667a      	str	r2, [r7, #100]	; 0x64
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002180:	4649      	mov	r1, r9
 8002182:	008b      	lsls	r3, r1, #2
 8002184:	4641      	mov	r1, r8
 8002186:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800218a:	4641      	mov	r1, r8
 800218c:	008a      	lsls	r2, r1, #2
 800218e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002192:	f7fe f88d 	bl	80002b0 <__aeabi_uldivmod>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <UART_SetConfig+0x4e4>)
 800219c:	fba3 1302 	umull	r1, r3, r3, r2
 80021a0:	095b      	lsrs	r3, r3, #5
 80021a2:	2164      	movs	r1, #100	; 0x64
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	3332      	adds	r3, #50	; 0x32
 80021ae:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <UART_SetConfig+0x4e4>)
 80021b0:	fba2 2303 	umull	r2, r3, r2, r3
 80021b4:	095b      	lsrs	r3, r3, #5
 80021b6:	f003 020f 	and.w	r2, r3, #15
 80021ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4422      	add	r2, r4
 80021c2:	609a      	str	r2, [r3, #8]
}
 80021c4:	bf00      	nop
 80021c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80021ca:	46bd      	mov	sp, r7
 80021cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021d0:	51eb851f 	.word	0x51eb851f

080021d4 <__NVIC_SetPriority>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	db0a      	blt.n	80021fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	490c      	ldr	r1, [pc, #48]	; (8002220 <__NVIC_SetPriority+0x4c>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	0112      	lsls	r2, r2, #4
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	440b      	add	r3, r1
 80021f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021fc:	e00a      	b.n	8002214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4908      	ldr	r1, [pc, #32]	; (8002224 <__NVIC_SetPriority+0x50>)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	3b04      	subs	r3, #4
 800220c:	0112      	lsls	r2, r2, #4
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	440b      	add	r3, r1
 8002212:	761a      	strb	r2, [r3, #24]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000e100 	.word	0xe000e100
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800222c:	2100      	movs	r1, #0
 800222e:	f06f 0004 	mvn.w	r0, #4
 8002232:	f7ff ffcf 	bl	80021d4 <__NVIC_SetPriority>
#endif
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002242:	f3ef 8305 	mrs	r3, IPSR
 8002246:	603b      	str	r3, [r7, #0]
  return(result);
 8002248:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800224e:	f06f 0305 	mvn.w	r3, #5
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	e00c      	b.n	8002270 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <osKernelInitialize+0x44>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d105      	bne.n	800226a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <osKernelInitialize+0x44>)
 8002260:	2201      	movs	r2, #1
 8002262:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002264:	2300      	movs	r3, #0
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	e002      	b.n	8002270 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
 800226e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002270:	687b      	ldr	r3, [r7, #4]
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000144 	.word	0x20000144

08002284 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800228a:	f3ef 8305 	mrs	r3, IPSR
 800228e:	603b      	str	r3, [r7, #0]
  return(result);
 8002290:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002296:	f06f 0305 	mvn.w	r3, #5
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	e010      	b.n	80022c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <osKernelStart+0x48>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d109      	bne.n	80022ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80022a6:	f7ff ffbf 	bl	8002228 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <osKernelStart+0x48>)
 80022ac:	2202      	movs	r2, #2
 80022ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80022b0:	f001 f8d2 	bl	8003458 <vTaskStartScheduler>
      stat = osOK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	e002      	b.n	80022c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
 80022be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80022c0:	687b      	ldr	r3, [r7, #4]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000144 	.word	0x20000144

080022d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08e      	sub	sp, #56	; 0x38
 80022d4:	af04      	add	r7, sp, #16
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022e0:	f3ef 8305 	mrs	r3, IPSR
 80022e4:	617b      	str	r3, [r7, #20]
  return(result);
 80022e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d17e      	bne.n	80023ea <osThreadNew+0x11a>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d07b      	beq.n	80023ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80022f6:	2318      	movs	r3, #24
 80022f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d045      	beq.n	8002396 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <osThreadNew+0x48>
        name = attr->name;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <osThreadNew+0x6e>
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	2b38      	cmp	r3, #56	; 0x38
 8002330:	d805      	bhi.n	800233e <osThreadNew+0x6e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <osThreadNew+0x72>
        return (NULL);
 800233e:	2300      	movs	r3, #0
 8002340:	e054      	b.n	80023ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00e      	beq.n	8002378 <osThreadNew+0xa8>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	2b5b      	cmp	r3, #91	; 0x5b
 8002360:	d90a      	bls.n	8002378 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002366:	2b00      	cmp	r3, #0
 8002368:	d006      	beq.n	8002378 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <osThreadNew+0xa8>
        mem = 1;
 8002372:	2301      	movs	r3, #1
 8002374:	61bb      	str	r3, [r7, #24]
 8002376:	e010      	b.n	800239a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10c      	bne.n	800239a <osThreadNew+0xca>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d108      	bne.n	800239a <osThreadNew+0xca>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d104      	bne.n	800239a <osThreadNew+0xca>
          mem = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	e001      	b.n	800239a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d110      	bne.n	80023c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023a8:	9202      	str	r2, [sp, #8]
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	6a3a      	ldr	r2, [r7, #32]
 80023b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 fe78 	bl	80030ac <xTaskCreateStatic>
 80023bc:	4603      	mov	r3, r0
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	e013      	b.n	80023ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d110      	bne.n	80023ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 fec3 	bl	8003166 <xTaskCreate>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d001      	beq.n	80023ea <osThreadNew+0x11a>
            hTask = NULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80023ea:	693b      	ldr	r3, [r7, #16]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3728      	adds	r7, #40	; 0x28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023fc:	f3ef 8305 	mrs	r3, IPSR
 8002400:	60bb      	str	r3, [r7, #8]
  return(result);
 8002402:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <osDelay+0x1c>
    stat = osErrorISR;
 8002408:	f06f 0305 	mvn.w	r3, #5
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	e007      	b.n	8002420 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <osDelay+0x2c>
      vTaskDelay(ticks);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 ffe8 	bl	80033f0 <vTaskDelay>
    }
  }

  return (stat);
 8002420:	68fb      	ldr	r3, [r7, #12]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4a07      	ldr	r2, [pc, #28]	; (8002458 <vApplicationGetIdleTaskMemory+0x2c>)
 800243c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	4a06      	ldr	r2, [pc, #24]	; (800245c <vApplicationGetIdleTaskMemory+0x30>)
 8002442:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	601a      	str	r2, [r3, #0]
}
 800244a:	bf00      	nop
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000148 	.word	0x20000148
 800245c:	200001a4 	.word	0x200001a4

08002460 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4a07      	ldr	r2, [pc, #28]	; (800248c <vApplicationGetTimerTaskMemory+0x2c>)
 8002470:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	4a06      	ldr	r2, [pc, #24]	; (8002490 <vApplicationGetTimerTaskMemory+0x30>)
 8002476:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800247e:	601a      	str	r2, [r3, #0]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	200003a4 	.word	0x200003a4
 8002490:	20000400 	.word	0x20000400

08002494 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f103 0208 	add.w	r2, r3, #8
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f103 0208 	add.w	r2, r3, #8
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f103 0208 	add.w	r2, r3, #8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024ee:	b480      	push	{r7}
 80024f0:	b085      	sub	sp, #20
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	601a      	str	r2, [r3, #0]
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002536:	b480      	push	{r7}
 8002538:	b085      	sub	sp, #20
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d103      	bne.n	8002556 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	e00c      	b.n	8002570 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3308      	adds	r3, #8
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e002      	b.n	8002564 <vListInsert+0x2e>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	429a      	cmp	r2, r3
 800256e:	d2f6      	bcs.n	800255e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	601a      	str	r2, [r3, #0]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6892      	ldr	r2, [r2, #8]
 80025be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6852      	ldr	r2, [r2, #4]
 80025c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d103      	bne.n	80025dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	1e5a      	subs	r2, r3, #1
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10a      	bne.n	8002626 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002622:	bf00      	nop
 8002624:	e7fe      	b.n	8002624 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002626:	f002 f8bd 	bl	80047a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	68f9      	ldr	r1, [r7, #12]
 8002634:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	441a      	add	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	3b01      	subs	r3, #1
 8002658:	68f9      	ldr	r1, [r7, #12]
 800265a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	441a      	add	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	22ff      	movs	r2, #255	; 0xff
 800266a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	22ff      	movs	r2, #255	; 0xff
 8002672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d114      	bne.n	80026a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d01a      	beq.n	80026ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3310      	adds	r3, #16
 8002688:	4618      	mov	r0, r3
 800268a:	f001 f96f 	bl	800396c <xTaskRemoveFromEventList>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d012      	beq.n	80026ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <xQueueGenericReset+0xcc>)
 8002696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	f3bf 8f6f 	isb	sy
 80026a4:	e009      	b.n	80026ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3310      	adds	r3, #16
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fef2 	bl	8002494 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3324      	adds	r3, #36	; 0x24
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff feed 	bl	8002494 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80026ba:	f002 f8a3 	bl	8004804 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80026be:	2301      	movs	r3, #1
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	e000ed04 	.word	0xe000ed04

080026cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08e      	sub	sp, #56	; 0x38
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026f2:	bf00      	nop
 80026f4:	e7fe      	b.n	80026f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800270e:	bf00      	nop
 8002710:	e7fe      	b.n	8002710 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <xQueueGenericCreateStatic+0x52>
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <xQueueGenericCreateStatic+0x56>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <xQueueGenericCreateStatic+0x58>
 8002722:	2300      	movs	r3, #0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10a      	bne.n	800273e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272c:	f383 8811 	msr	BASEPRI, r3
 8002730:	f3bf 8f6f 	isb	sy
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	623b      	str	r3, [r7, #32]
}
 800273a:	bf00      	nop
 800273c:	e7fe      	b.n	800273c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d102      	bne.n	800274a <xQueueGenericCreateStatic+0x7e>
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <xQueueGenericCreateStatic+0x82>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <xQueueGenericCreateStatic+0x84>
 800274e:	2300      	movs	r3, #0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
 8002764:	61fb      	str	r3, [r7, #28]
}
 8002766:	bf00      	nop
 8002768:	e7fe      	b.n	8002768 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800276a:	2350      	movs	r3, #80	; 0x50
 800276c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b50      	cmp	r3, #80	; 0x50
 8002772:	d00a      	beq.n	800278a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002778:	f383 8811 	msr	BASEPRI, r3
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	61bb      	str	r3, [r7, #24]
}
 8002786:	bf00      	nop
 8002788:	e7fe      	b.n	8002788 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800278a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00d      	beq.n	80027b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800279e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	4613      	mov	r3, r2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f83f 	bl	8002830 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3730      	adds	r7, #48	; 0x30
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08a      	sub	sp, #40	; 0x28
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	4613      	mov	r3, r2
 80027c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	613b      	str	r3, [r7, #16]
}
 80027e2:	bf00      	nop
 80027e4:	e7fe      	b.n	80027e4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	fb02 f303 	mul.w	r3, r2, r3
 80027ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	3350      	adds	r3, #80	; 0x50
 80027f4:	4618      	mov	r0, r3
 80027f6:	f002 f8f7 	bl	80049e8 <pvPortMalloc>
 80027fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d011      	beq.n	8002826 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	3350      	adds	r3, #80	; 0x50
 800280a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002814:	79fa      	ldrb	r2, [r7, #7]
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	4613      	mov	r3, r2
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f805 	bl	8002830 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002826:	69bb      	ldr	r3, [r7, #24]
	}
 8002828:	4618      	mov	r0, r3
 800282a:	3720      	adds	r7, #32
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d103      	bne.n	800284c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	e002      	b.n	8002852 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800285e:	2101      	movs	r1, #1
 8002860:	69b8      	ldr	r0, [r7, #24]
 8002862:	f7ff fecb 	bl	80025fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002876:	b580      	push	{r7, lr}
 8002878:	b086      	sub	sp, #24
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10a      	bne.n	800289c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288a:	f383 8811 	msr	BASEPRI, r3
 800288e:	f3bf 8f6f 	isb	sy
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	613b      	str	r3, [r7, #16]
}
 8002898:	bf00      	nop
 800289a:	e7fe      	b.n	800289a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d90a      	bls.n	80028ba <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80028a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a8:	f383 8811 	msr	BASEPRI, r3
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	60fb      	str	r3, [r7, #12]
}
 80028b6:	bf00      	nop
 80028b8:	e7fe      	b.n	80028b8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80028ba:	2202      	movs	r2, #2
 80028bc:	2100      	movs	r1, #0
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ff7c 	bl	80027bc <xQueueGenericCreate>
 80028c4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80028d2:	697b      	ldr	r3, [r7, #20]
	}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08e      	sub	sp, #56	; 0x38
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80028ea:	2300      	movs	r3, #0
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80028f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10a      	bne.n	800290e <xQueueGenericSend+0x32>
	__asm volatile
 80028f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fc:	f383 8811 	msr	BASEPRI, r3
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800290a:	bf00      	nop
 800290c:	e7fe      	b.n	800290c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d103      	bne.n	800291c <xQueueGenericSend+0x40>
 8002914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <xQueueGenericSend+0x44>
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <xQueueGenericSend+0x46>
 8002920:	2300      	movs	r3, #0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10a      	bne.n	800293c <xQueueGenericSend+0x60>
	__asm volatile
 8002926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292a:	f383 8811 	msr	BASEPRI, r3
 800292e:	f3bf 8f6f 	isb	sy
 8002932:	f3bf 8f4f 	dsb	sy
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002938:	bf00      	nop
 800293a:	e7fe      	b.n	800293a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d103      	bne.n	800294a <xQueueGenericSend+0x6e>
 8002942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <xQueueGenericSend+0x72>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <xQueueGenericSend+0x74>
 800294e:	2300      	movs	r3, #0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <xQueueGenericSend+0x8e>
	__asm volatile
 8002954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002958:	f383 8811 	msr	BASEPRI, r3
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	623b      	str	r3, [r7, #32]
}
 8002966:	bf00      	nop
 8002968:	e7fe      	b.n	8002968 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800296a:	f001 f9bd 	bl	8003ce8 <xTaskGetSchedulerState>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d102      	bne.n	800297a <xQueueGenericSend+0x9e>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <xQueueGenericSend+0xa2>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <xQueueGenericSend+0xa4>
 800297e:	2300      	movs	r3, #0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10a      	bne.n	800299a <xQueueGenericSend+0xbe>
	__asm volatile
 8002984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002988:	f383 8811 	msr	BASEPRI, r3
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	61fb      	str	r3, [r7, #28]
}
 8002996:	bf00      	nop
 8002998:	e7fe      	b.n	8002998 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800299a:	f001 ff03 	bl	80047a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800299e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d302      	bcc.n	80029b0 <xQueueGenericSend+0xd4>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d129      	bne.n	8002a04 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029b6:	f000 fa0b 	bl	8002dd0 <prvCopyDataToQueue>
 80029ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d010      	beq.n	80029e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c6:	3324      	adds	r3, #36	; 0x24
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 ffcf 	bl	800396c <xTaskRemoveFromEventList>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d013      	beq.n	80029fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80029d4:	4b3f      	ldr	r3, [pc, #252]	; (8002ad4 <xQueueGenericSend+0x1f8>)
 80029d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	e00a      	b.n	80029fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d007      	beq.n	80029fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80029ec:	4b39      	ldr	r3, [pc, #228]	; (8002ad4 <xQueueGenericSend+0x1f8>)
 80029ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80029fc:	f001 ff02 	bl	8004804 <vPortExitCritical>
				return pdPASS;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e063      	b.n	8002acc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d103      	bne.n	8002a12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a0a:	f001 fefb 	bl	8004804 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e05c      	b.n	8002acc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d106      	bne.n	8002a26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f001 f809 	bl	8003a34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a22:	2301      	movs	r3, #1
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a26:	f001 feed 	bl	8004804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a2a:	f000 fd7b 	bl	8003524 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a2e:	f001 feb9 	bl	80047a4 <vPortEnterCritical>
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a38:	b25b      	sxtb	r3, r3
 8002a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3e:	d103      	bne.n	8002a48 <xQueueGenericSend+0x16c>
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a4e:	b25b      	sxtb	r3, r3
 8002a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a54:	d103      	bne.n	8002a5e <xQueueGenericSend+0x182>
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a5e:	f001 fed1 	bl	8004804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a62:	1d3a      	adds	r2, r7, #4
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fff8 	bl	8003a60 <xTaskCheckForTimeOut>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d124      	bne.n	8002ac0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a78:	f000 faa2 	bl	8002fc0 <prvIsQueueFull>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d018      	beq.n	8002ab4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	3310      	adds	r3, #16
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4611      	mov	r1, r2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 ff1e 	bl	80038cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a92:	f000 fa2d 	bl	8002ef0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a96:	f000 fd53 	bl	8003540 <xTaskResumeAll>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f47f af7c 	bne.w	800299a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <xQueueGenericSend+0x1f8>)
 8002aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	e772      	b.n	800299a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ab6:	f000 fa1b 	bl	8002ef0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002aba:	f000 fd41 	bl	8003540 <xTaskResumeAll>
 8002abe:	e76c      	b.n	800299a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ac2:	f000 fa15 	bl	8002ef0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ac6:	f000 fd3b 	bl	8003540 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002aca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3738      	adds	r7, #56	; 0x38
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	e000ed04 	.word	0xe000ed04

08002ad8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b090      	sub	sp, #64	; 0x40
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b02:	bf00      	nop
 8002b04:	e7fe      	b.n	8002b04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <xQueueGenericSendFromISR+0x3c>
 8002b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <xQueueGenericSendFromISR+0x40>
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <xQueueGenericSendFromISR+0x42>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10a      	bne.n	8002b34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b30:	bf00      	nop
 8002b32:	e7fe      	b.n	8002b32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d103      	bne.n	8002b42 <xQueueGenericSendFromISR+0x6a>
 8002b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <xQueueGenericSendFromISR+0x6e>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <xQueueGenericSendFromISR+0x70>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10a      	bne.n	8002b62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	623b      	str	r3, [r7, #32]
}
 8002b5e:	bf00      	nop
 8002b60:	e7fe      	b.n	8002b60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b62:	f001 ff01 	bl	8004968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b66:	f3ef 8211 	mrs	r2, BASEPRI
 8002b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6e:	f383 8811 	msr	BASEPRI, r3
 8002b72:	f3bf 8f6f 	isb	sy
 8002b76:	f3bf 8f4f 	dsb	sy
 8002b7a:	61fa      	str	r2, [r7, #28]
 8002b7c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b80:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d302      	bcc.n	8002b94 <xQueueGenericSendFromISR+0xbc>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d12f      	bne.n	8002bf4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	68b9      	ldr	r1, [r7, #8]
 8002ba8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002baa:	f000 f911 	bl	8002dd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002bae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb6:	d112      	bne.n	8002bde <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d016      	beq.n	8002bee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc2:	3324      	adds	r3, #36	; 0x24
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 fed1 	bl	800396c <xTaskRemoveFromEventList>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00e      	beq.n	8002bee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00b      	beq.n	8002bee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	e007      	b.n	8002bee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002bde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002be2:	3301      	adds	r3, #1
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	b25a      	sxtb	r2, r3
 8002be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002bf2:	e001      	b.n	8002bf8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3740      	adds	r7, #64	; 0x40
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08c      	sub	sp, #48	; 0x30
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10a      	bne.n	8002c40 <xQueueReceive+0x30>
	__asm volatile
 8002c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2e:	f383 8811 	msr	BASEPRI, r3
 8002c32:	f3bf 8f6f 	isb	sy
 8002c36:	f3bf 8f4f 	dsb	sy
 8002c3a:	623b      	str	r3, [r7, #32]
}
 8002c3c:	bf00      	nop
 8002c3e:	e7fe      	b.n	8002c3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d103      	bne.n	8002c4e <xQueueReceive+0x3e>
 8002c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <xQueueReceive+0x42>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <xQueueReceive+0x44>
 8002c52:	2300      	movs	r3, #0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <xQueueReceive+0x5e>
	__asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	61fb      	str	r3, [r7, #28]
}
 8002c6a:	bf00      	nop
 8002c6c:	e7fe      	b.n	8002c6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c6e:	f001 f83b 	bl	8003ce8 <xTaskGetSchedulerState>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <xQueueReceive+0x6e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <xQueueReceive+0x72>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <xQueueReceive+0x74>
 8002c82:	2300      	movs	r3, #0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10a      	bne.n	8002c9e <xQueueReceive+0x8e>
	__asm volatile
 8002c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	61bb      	str	r3, [r7, #24]
}
 8002c9a:	bf00      	nop
 8002c9c:	e7fe      	b.n	8002c9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c9e:	f001 fd81 	bl	80047a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01f      	beq.n	8002cee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cb2:	f000 f8f7 	bl	8002ea4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	1e5a      	subs	r2, r3, #1
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00f      	beq.n	8002ce6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	3310      	adds	r3, #16
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fe4e 	bl	800396c <xTaskRemoveFromEventList>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002cd6:	4b3d      	ldr	r3, [pc, #244]	; (8002dcc <xQueueReceive+0x1bc>)
 8002cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	f3bf 8f4f 	dsb	sy
 8002ce2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ce6:	f001 fd8d 	bl	8004804 <vPortExitCritical>
				return pdPASS;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e069      	b.n	8002dc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d103      	bne.n	8002cfc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cf4:	f001 fd86 	bl	8004804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e062      	b.n	8002dc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d02:	f107 0310 	add.w	r3, r7, #16
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fe94 	bl	8003a34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d10:	f001 fd78 	bl	8004804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d14:	f000 fc06 	bl	8003524 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d18:	f001 fd44 	bl	80047a4 <vPortEnterCritical>
 8002d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d22:	b25b      	sxtb	r3, r3
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d28:	d103      	bne.n	8002d32 <xQueueReceive+0x122>
 8002d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d38:	b25b      	sxtb	r3, r3
 8002d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3e:	d103      	bne.n	8002d48 <xQueueReceive+0x138>
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d48:	f001 fd5c 	bl	8004804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d4c:	1d3a      	adds	r2, r7, #4
 8002d4e:	f107 0310 	add.w	r3, r7, #16
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 fe83 	bl	8003a60 <xTaskCheckForTimeOut>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d123      	bne.n	8002da8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d62:	f000 f917 	bl	8002f94 <prvIsQueueEmpty>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d017      	beq.n	8002d9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6e:	3324      	adds	r3, #36	; 0x24
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fda9 	bl	80038cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d7c:	f000 f8b8 	bl	8002ef0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d80:	f000 fbde 	bl	8003540 <xTaskResumeAll>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d189      	bne.n	8002c9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <xQueueReceive+0x1bc>)
 8002d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	e780      	b.n	8002c9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d9e:	f000 f8a7 	bl	8002ef0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002da2:	f000 fbcd 	bl	8003540 <xTaskResumeAll>
 8002da6:	e77a      	b.n	8002c9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002daa:	f000 f8a1 	bl	8002ef0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dae:	f000 fbc7 	bl	8003540 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002db4:	f000 f8ee 	bl	8002f94 <prvIsQueueEmpty>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f43f af6f 	beq.w	8002c9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002dc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3730      	adds	r7, #48	; 0x30
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	e000ed04 	.word	0xe000ed04

08002dd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10d      	bne.n	8002e0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d14d      	bne.n	8002e92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 ff92 	bl	8003d24 <xTaskPriorityDisinherit>
 8002e00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	e043      	b.n	8002e92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d119      	bne.n	8002e44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6858      	ldr	r0, [r3, #4]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	461a      	mov	r2, r3
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	f002 f981 	bl	8005122 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	441a      	add	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d32b      	bcc.n	8002e92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	e026      	b.n	8002e92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	68d8      	ldr	r0, [r3, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68b9      	ldr	r1, [r7, #8]
 8002e50:	f002 f967 	bl	8005122 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	425b      	negs	r3, r3
 8002e5e:	441a      	add	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d207      	bcs.n	8002e80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	425b      	negs	r3, r3
 8002e7a:	441a      	add	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d105      	bne.n	8002e92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e9a:	697b      	ldr	r3, [r7, #20]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d018      	beq.n	8002ee8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	441a      	add	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d303      	bcc.n	8002ed8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68d9      	ldr	r1, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	6838      	ldr	r0, [r7, #0]
 8002ee4:	f002 f91d 	bl	8005122 <memcpy>
	}
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ef8:	f001 fc54 	bl	80047a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f04:	e011      	b.n	8002f2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d012      	beq.n	8002f34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3324      	adds	r3, #36	; 0x24
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fd2a 	bl	800396c <xTaskRemoveFromEventList>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f1e:	f000 fe01 	bl	8003b24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	dce9      	bgt.n	8002f06 <prvUnlockQueue+0x16>
 8002f32:	e000      	b.n	8002f36 <prvUnlockQueue+0x46>
					break;
 8002f34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	22ff      	movs	r2, #255	; 0xff
 8002f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f3e:	f001 fc61 	bl	8004804 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f42:	f001 fc2f 	bl	80047a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f4e:	e011      	b.n	8002f74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d012      	beq.n	8002f7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3310      	adds	r3, #16
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fd05 	bl	800396c <xTaskRemoveFromEventList>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f68:	f000 fddc 	bl	8003b24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f6c:	7bbb      	ldrb	r3, [r7, #14]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	dce9      	bgt.n	8002f50 <prvUnlockQueue+0x60>
 8002f7c:	e000      	b.n	8002f80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	22ff      	movs	r2, #255	; 0xff
 8002f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f88:	f001 fc3c 	bl	8004804 <vPortExitCritical>
}
 8002f8c:	bf00      	nop
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f9c:	f001 fc02 	bl	80047a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d102      	bne.n	8002fae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	e001      	b.n	8002fb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fb2:	f001 fc27 	bl	8004804 <vPortExitCritical>

	return xReturn;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fc8:	f001 fbec 	bl	80047a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d102      	bne.n	8002fde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	e001      	b.n	8002fe2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fe2:	f001 fc0f 	bl	8004804 <vPortExitCritical>

	return xReturn;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	e014      	b.n	800302a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003000:	4a0f      	ldr	r2, [pc, #60]	; (8003040 <vQueueAddToRegistry+0x50>)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10b      	bne.n	8003024 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800300c:	490c      	ldr	r1, [pc, #48]	; (8003040 <vQueueAddToRegistry+0x50>)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <vQueueAddToRegistry+0x50>)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4413      	add	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003022:	e006      	b.n	8003032 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3301      	adds	r3, #1
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b07      	cmp	r3, #7
 800302e:	d9e7      	bls.n	8003000 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003030:	bf00      	nop
 8003032:	bf00      	nop
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000800 	.word	0x20000800

08003044 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003054:	f001 fba6 	bl	80047a4 <vPortEnterCritical>
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800305e:	b25b      	sxtb	r3, r3
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d103      	bne.n	800306e <vQueueWaitForMessageRestricted+0x2a>
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003074:	b25b      	sxtb	r3, r3
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307a:	d103      	bne.n	8003084 <vQueueWaitForMessageRestricted+0x40>
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003084:	f001 fbbe 	bl	8004804 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	2b00      	cmp	r3, #0
 800308e:	d106      	bne.n	800309e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	3324      	adds	r3, #36	; 0x24
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fc3b 	bl	8003914 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800309e:	6978      	ldr	r0, [r7, #20]
 80030a0:	f7ff ff26 	bl	8002ef0 <prvUnlockQueue>
	}
 80030a4:	bf00      	nop
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08e      	sub	sp, #56	; 0x38
 80030b0:	af04      	add	r7, sp, #16
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80030ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80030c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	623b      	str	r3, [r7, #32]
}
 80030d2:	bf00      	nop
 80030d4:	e7fe      	b.n	80030d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80030d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10a      	bne.n	80030f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80030dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	61fb      	str	r3, [r7, #28]
}
 80030ee:	bf00      	nop
 80030f0:	e7fe      	b.n	80030f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80030f2:	235c      	movs	r3, #92	; 0x5c
 80030f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b5c      	cmp	r3, #92	; 0x5c
 80030fa:	d00a      	beq.n	8003112 <xTaskCreateStatic+0x66>
	__asm volatile
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	61bb      	str	r3, [r7, #24]
}
 800310e:	bf00      	nop
 8003110:	e7fe      	b.n	8003110 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003112:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003116:	2b00      	cmp	r3, #0
 8003118:	d01e      	beq.n	8003158 <xTaskCreateStatic+0xac>
 800311a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01b      	beq.n	8003158 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003128:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	2202      	movs	r2, #2
 800312e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003132:	2300      	movs	r3, #0
 8003134:	9303      	str	r3, [sp, #12]
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	9302      	str	r3, [sp, #8]
 800313a:	f107 0314 	add.w	r3, r7, #20
 800313e:	9301      	str	r3, [sp, #4]
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f850 	bl	80031f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003150:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003152:	f000 f8dd 	bl	8003310 <prvAddNewTaskToReadyList>
 8003156:	e001      	b.n	800315c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800315c:	697b      	ldr	r3, [r7, #20]
	}
 800315e:	4618      	mov	r0, r3
 8003160:	3728      	adds	r7, #40	; 0x28
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003166:	b580      	push	{r7, lr}
 8003168:	b08c      	sub	sp, #48	; 0x30
 800316a:	af04      	add	r7, sp, #16
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	603b      	str	r3, [r7, #0]
 8003172:	4613      	mov	r3, r2
 8003174:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4618      	mov	r0, r3
 800317c:	f001 fc34 	bl	80049e8 <pvPortMalloc>
 8003180:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00e      	beq.n	80031a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003188:	205c      	movs	r0, #92	; 0x5c
 800318a:	f001 fc2d 	bl	80049e8 <pvPortMalloc>
 800318e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	631a      	str	r2, [r3, #48]	; 0x30
 800319c:	e005      	b.n	80031aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800319e:	6978      	ldr	r0, [r7, #20]
 80031a0:	f001 fcee 	bl	8004b80 <vPortFree>
 80031a4:	e001      	b.n	80031aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d017      	beq.n	80031e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031b8:	88fa      	ldrh	r2, [r7, #6]
 80031ba:	2300      	movs	r3, #0
 80031bc:	9303      	str	r3, [sp, #12]
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	9302      	str	r3, [sp, #8]
 80031c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f80e 	bl	80031f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031d4:	69f8      	ldr	r0, [r7, #28]
 80031d6:	f000 f89b 	bl	8003310 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031da:	2301      	movs	r3, #1
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	e002      	b.n	80031e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031e0:	f04f 33ff 	mov.w	r3, #4294967295
 80031e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031e6:	69bb      	ldr	r3, [r7, #24]
	}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3720      	adds	r7, #32
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003200:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	461a      	mov	r2, r3
 8003208:	21a5      	movs	r1, #165	; 0xa5
 800320a:	f001 ff0e 	bl	800502a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003218:	3b01      	subs	r3, #1
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	f023 0307 	bic.w	r3, r3, #7
 8003226:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003236:	f383 8811 	msr	BASEPRI, r3
 800323a:	f3bf 8f6f 	isb	sy
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	617b      	str	r3, [r7, #20]
}
 8003244:	bf00      	nop
 8003246:	e7fe      	b.n	8003246 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d01f      	beq.n	800328e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	e012      	b.n	800327a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	4413      	add	r3, r2
 800325a:	7819      	ldrb	r1, [r3, #0]
 800325c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	4413      	add	r3, r2
 8003262:	3334      	adds	r3, #52	; 0x34
 8003264:	460a      	mov	r2, r1
 8003266:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	4413      	add	r3, r2
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d006      	beq.n	8003282 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	3301      	adds	r3, #1
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	2b0f      	cmp	r3, #15
 800327e:	d9e9      	bls.n	8003254 <prvInitialiseNewTask+0x64>
 8003280:	e000      	b.n	8003284 <prvInitialiseNewTask+0x94>
			{
				break;
 8003282:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800328c:	e003      	b.n	8003296 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003298:	2b37      	cmp	r3, #55	; 0x37
 800329a:	d901      	bls.n	80032a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800329c:	2337      	movs	r3, #55	; 0x37
 800329e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80032ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ae:	2200      	movs	r2, #0
 80032b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	3304      	adds	r3, #4
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff f90c 	bl	80024d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	3318      	adds	r3, #24
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff f907 	bl	80024d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80032d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	2200      	movs	r2, #0
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	68f9      	ldr	r1, [r7, #12]
 80032ee:	69b8      	ldr	r0, [r7, #24]
 80032f0:	f001 f928 	bl	8004544 <pxPortInitialiseStack>
 80032f4:	4602      	mov	r2, r0
 80032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003306:	bf00      	nop
 8003308:	3720      	adds	r7, #32
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003318:	f001 fa44 	bl	80047a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800331c:	4b2d      	ldr	r3, [pc, #180]	; (80033d4 <prvAddNewTaskToReadyList+0xc4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3301      	adds	r3, #1
 8003322:	4a2c      	ldr	r2, [pc, #176]	; (80033d4 <prvAddNewTaskToReadyList+0xc4>)
 8003324:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003326:	4b2c      	ldr	r3, [pc, #176]	; (80033d8 <prvAddNewTaskToReadyList+0xc8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800332e:	4a2a      	ldr	r2, [pc, #168]	; (80033d8 <prvAddNewTaskToReadyList+0xc8>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003334:	4b27      	ldr	r3, [pc, #156]	; (80033d4 <prvAddNewTaskToReadyList+0xc4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d110      	bne.n	800335e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800333c:	f000 fc16 	bl	8003b6c <prvInitialiseTaskLists>
 8003340:	e00d      	b.n	800335e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003342:	4b26      	ldr	r3, [pc, #152]	; (80033dc <prvAddNewTaskToReadyList+0xcc>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800334a:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <prvAddNewTaskToReadyList+0xc8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	429a      	cmp	r2, r3
 8003356:	d802      	bhi.n	800335e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003358:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <prvAddNewTaskToReadyList+0xc8>)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800335e:	4b20      	ldr	r3, [pc, #128]	; (80033e0 <prvAddNewTaskToReadyList+0xd0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3301      	adds	r3, #1
 8003364:	4a1e      	ldr	r2, [pc, #120]	; (80033e0 <prvAddNewTaskToReadyList+0xd0>)
 8003366:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003368:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <prvAddNewTaskToReadyList+0xd0>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003374:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <prvAddNewTaskToReadyList+0xd4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d903      	bls.n	8003384 <prvAddNewTaskToReadyList+0x74>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	4a18      	ldr	r2, [pc, #96]	; (80033e4 <prvAddNewTaskToReadyList+0xd4>)
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4a15      	ldr	r2, [pc, #84]	; (80033e8 <prvAddNewTaskToReadyList+0xd8>)
 8003392:	441a      	add	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3304      	adds	r3, #4
 8003398:	4619      	mov	r1, r3
 800339a:	4610      	mov	r0, r2
 800339c:	f7ff f8a7 	bl	80024ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80033a0:	f001 fa30 	bl	8004804 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80033a4:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <prvAddNewTaskToReadyList+0xcc>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00e      	beq.n	80033ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <prvAddNewTaskToReadyList+0xc8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d207      	bcs.n	80033ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80033ba:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <prvAddNewTaskToReadyList+0xdc>)
 80033bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000d14 	.word	0x20000d14
 80033d8:	20000840 	.word	0x20000840
 80033dc:	20000d20 	.word	0x20000d20
 80033e0:	20000d30 	.word	0x20000d30
 80033e4:	20000d1c 	.word	0x20000d1c
 80033e8:	20000844 	.word	0x20000844
 80033ec:	e000ed04 	.word	0xe000ed04

080033f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d017      	beq.n	8003432 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003402:	4b13      	ldr	r3, [pc, #76]	; (8003450 <vTaskDelay+0x60>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <vTaskDelay+0x30>
	__asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	60bb      	str	r3, [r7, #8]
}
 800341c:	bf00      	nop
 800341e:	e7fe      	b.n	800341e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003420:	f000 f880 	bl	8003524 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003424:	2100      	movs	r1, #0
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fcea 	bl	8003e00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800342c:	f000 f888 	bl	8003540 <xTaskResumeAll>
 8003430:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d107      	bne.n	8003448 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <vTaskDelay+0x64>)
 800343a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003448:	bf00      	nop
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20000d3c 	.word	0x20000d3c
 8003454:	e000ed04 	.word	0xe000ed04

08003458 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800345e:	2300      	movs	r3, #0
 8003460:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003462:	2300      	movs	r3, #0
 8003464:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003466:	463a      	mov	r2, r7
 8003468:	1d39      	adds	r1, r7, #4
 800346a:	f107 0308 	add.w	r3, r7, #8
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe ffdc 	bl	800242c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003474:	6839      	ldr	r1, [r7, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	9202      	str	r2, [sp, #8]
 800347c:	9301      	str	r3, [sp, #4]
 800347e:	2300      	movs	r3, #0
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	2300      	movs	r3, #0
 8003484:	460a      	mov	r2, r1
 8003486:	4921      	ldr	r1, [pc, #132]	; (800350c <vTaskStartScheduler+0xb4>)
 8003488:	4821      	ldr	r0, [pc, #132]	; (8003510 <vTaskStartScheduler+0xb8>)
 800348a:	f7ff fe0f 	bl	80030ac <xTaskCreateStatic>
 800348e:	4603      	mov	r3, r0
 8003490:	4a20      	ldr	r2, [pc, #128]	; (8003514 <vTaskStartScheduler+0xbc>)
 8003492:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003494:	4b1f      	ldr	r3, [pc, #124]	; (8003514 <vTaskStartScheduler+0xbc>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800349c:	2301      	movs	r3, #1
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	e001      	b.n	80034a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d102      	bne.n	80034b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80034ac:	f000 fcfc 	bl	8003ea8 <xTimerCreateTimerTask>
 80034b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d116      	bne.n	80034e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80034b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	613b      	str	r3, [r7, #16]
}
 80034ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034cc:	4b12      	ldr	r3, [pc, #72]	; (8003518 <vTaskStartScheduler+0xc0>)
 80034ce:	f04f 32ff 	mov.w	r2, #4294967295
 80034d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034d4:	4b11      	ldr	r3, [pc, #68]	; (800351c <vTaskStartScheduler+0xc4>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034da:	4b11      	ldr	r3, [pc, #68]	; (8003520 <vTaskStartScheduler+0xc8>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034e0:	f001 f8be 	bl	8004660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034e4:	e00e      	b.n	8003504 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ec:	d10a      	bne.n	8003504 <vTaskStartScheduler+0xac>
	__asm volatile
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	60fb      	str	r3, [r7, #12]
}
 8003500:	bf00      	nop
 8003502:	e7fe      	b.n	8003502 <vTaskStartScheduler+0xaa>
}
 8003504:	bf00      	nop
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	080060bc 	.word	0x080060bc
 8003510:	08003b3d 	.word	0x08003b3d
 8003514:	20000d38 	.word	0x20000d38
 8003518:	20000d34 	.word	0x20000d34
 800351c:	20000d20 	.word	0x20000d20
 8003520:	20000d18 	.word	0x20000d18

08003524 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003528:	4b04      	ldr	r3, [pc, #16]	; (800353c <vTaskSuspendAll+0x18>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3301      	adds	r3, #1
 800352e:	4a03      	ldr	r2, [pc, #12]	; (800353c <vTaskSuspendAll+0x18>)
 8003530:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003532:	bf00      	nop
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	20000d3c 	.word	0x20000d3c

08003540 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800354a:	2300      	movs	r3, #0
 800354c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800354e:	4b42      	ldr	r3, [pc, #264]	; (8003658 <xTaskResumeAll+0x118>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10a      	bne.n	800356c <xTaskResumeAll+0x2c>
	__asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	603b      	str	r3, [r7, #0]
}
 8003568:	bf00      	nop
 800356a:	e7fe      	b.n	800356a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800356c:	f001 f91a 	bl	80047a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003570:	4b39      	ldr	r3, [pc, #228]	; (8003658 <xTaskResumeAll+0x118>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3b01      	subs	r3, #1
 8003576:	4a38      	ldr	r2, [pc, #224]	; (8003658 <xTaskResumeAll+0x118>)
 8003578:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800357a:	4b37      	ldr	r3, [pc, #220]	; (8003658 <xTaskResumeAll+0x118>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d162      	bne.n	8003648 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003582:	4b36      	ldr	r3, [pc, #216]	; (800365c <xTaskResumeAll+0x11c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d05e      	beq.n	8003648 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800358a:	e02f      	b.n	80035ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800358c:	4b34      	ldr	r3, [pc, #208]	; (8003660 <xTaskResumeAll+0x120>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3318      	adds	r3, #24
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff f805 	bl	80025a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	3304      	adds	r3, #4
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff f800 	bl	80025a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ac:	4b2d      	ldr	r3, [pc, #180]	; (8003664 <xTaskResumeAll+0x124>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d903      	bls.n	80035bc <xTaskResumeAll+0x7c>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	4a2a      	ldr	r2, [pc, #168]	; (8003664 <xTaskResumeAll+0x124>)
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4a27      	ldr	r2, [pc, #156]	; (8003668 <xTaskResumeAll+0x128>)
 80035ca:	441a      	add	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	3304      	adds	r3, #4
 80035d0:	4619      	mov	r1, r3
 80035d2:	4610      	mov	r0, r2
 80035d4:	f7fe ff8b 	bl	80024ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035dc:	4b23      	ldr	r3, [pc, #140]	; (800366c <xTaskResumeAll+0x12c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d302      	bcc.n	80035ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80035e6:	4b22      	ldr	r3, [pc, #136]	; (8003670 <xTaskResumeAll+0x130>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035ec:	4b1c      	ldr	r3, [pc, #112]	; (8003660 <xTaskResumeAll+0x120>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1cb      	bne.n	800358c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035fa:	f000 fb55 	bl	8003ca8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80035fe:	4b1d      	ldr	r3, [pc, #116]	; (8003674 <xTaskResumeAll+0x134>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d010      	beq.n	800362c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800360a:	f000 f847 	bl	800369c <xTaskIncrementTick>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003614:	4b16      	ldr	r3, [pc, #88]	; (8003670 <xTaskResumeAll+0x130>)
 8003616:	2201      	movs	r2, #1
 8003618:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3b01      	subs	r3, #1
 800361e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f1      	bne.n	800360a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003626:	4b13      	ldr	r3, [pc, #76]	; (8003674 <xTaskResumeAll+0x134>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800362c:	4b10      	ldr	r3, [pc, #64]	; (8003670 <xTaskResumeAll+0x130>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d009      	beq.n	8003648 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003634:	2301      	movs	r3, #1
 8003636:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <xTaskResumeAll+0x138>)
 800363a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003648:	f001 f8dc 	bl	8004804 <vPortExitCritical>

	return xAlreadyYielded;
 800364c:	68bb      	ldr	r3, [r7, #8]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000d3c 	.word	0x20000d3c
 800365c:	20000d14 	.word	0x20000d14
 8003660:	20000cd4 	.word	0x20000cd4
 8003664:	20000d1c 	.word	0x20000d1c
 8003668:	20000844 	.word	0x20000844
 800366c:	20000840 	.word	0x20000840
 8003670:	20000d28 	.word	0x20000d28
 8003674:	20000d24 	.word	0x20000d24
 8003678:	e000ed04 	.word	0xe000ed04

0800367c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003682:	4b05      	ldr	r3, [pc, #20]	; (8003698 <xTaskGetTickCount+0x1c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003688:	687b      	ldr	r3, [r7, #4]
}
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000d18 	.word	0x20000d18

0800369c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036a6:	4b4f      	ldr	r3, [pc, #316]	; (80037e4 <xTaskIncrementTick+0x148>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f040 808f 	bne.w	80037ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036b0:	4b4d      	ldr	r3, [pc, #308]	; (80037e8 <xTaskIncrementTick+0x14c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3301      	adds	r3, #1
 80036b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036b8:	4a4b      	ldr	r2, [pc, #300]	; (80037e8 <xTaskIncrementTick+0x14c>)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d120      	bne.n	8003706 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80036c4:	4b49      	ldr	r3, [pc, #292]	; (80037ec <xTaskIncrementTick+0x150>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80036ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d2:	f383 8811 	msr	BASEPRI, r3
 80036d6:	f3bf 8f6f 	isb	sy
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	603b      	str	r3, [r7, #0]
}
 80036e0:	bf00      	nop
 80036e2:	e7fe      	b.n	80036e2 <xTaskIncrementTick+0x46>
 80036e4:	4b41      	ldr	r3, [pc, #260]	; (80037ec <xTaskIncrementTick+0x150>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	4b41      	ldr	r3, [pc, #260]	; (80037f0 <xTaskIncrementTick+0x154>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a3f      	ldr	r2, [pc, #252]	; (80037ec <xTaskIncrementTick+0x150>)
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	4a3f      	ldr	r2, [pc, #252]	; (80037f0 <xTaskIncrementTick+0x154>)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	4b3e      	ldr	r3, [pc, #248]	; (80037f4 <xTaskIncrementTick+0x158>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3301      	adds	r3, #1
 80036fe:	4a3d      	ldr	r2, [pc, #244]	; (80037f4 <xTaskIncrementTick+0x158>)
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	f000 fad1 	bl	8003ca8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003706:	4b3c      	ldr	r3, [pc, #240]	; (80037f8 <xTaskIncrementTick+0x15c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	429a      	cmp	r2, r3
 800370e:	d349      	bcc.n	80037a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003710:	4b36      	ldr	r3, [pc, #216]	; (80037ec <xTaskIncrementTick+0x150>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d104      	bne.n	8003724 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800371a:	4b37      	ldr	r3, [pc, #220]	; (80037f8 <xTaskIncrementTick+0x15c>)
 800371c:	f04f 32ff 	mov.w	r2, #4294967295
 8003720:	601a      	str	r2, [r3, #0]
					break;
 8003722:	e03f      	b.n	80037a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003724:	4b31      	ldr	r3, [pc, #196]	; (80037ec <xTaskIncrementTick+0x150>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	d203      	bcs.n	8003744 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800373c:	4a2e      	ldr	r2, [pc, #184]	; (80037f8 <xTaskIncrementTick+0x15c>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003742:	e02f      	b.n	80037a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	3304      	adds	r3, #4
 8003748:	4618      	mov	r0, r3
 800374a:	f7fe ff2d 	bl	80025a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003752:	2b00      	cmp	r3, #0
 8003754:	d004      	beq.n	8003760 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	3318      	adds	r3, #24
 800375a:	4618      	mov	r0, r3
 800375c:	f7fe ff24 	bl	80025a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	4b25      	ldr	r3, [pc, #148]	; (80037fc <xTaskIncrementTick+0x160>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d903      	bls.n	8003774 <xTaskIncrementTick+0xd8>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	4a22      	ldr	r2, [pc, #136]	; (80037fc <xTaskIncrementTick+0x160>)
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4a1f      	ldr	r2, [pc, #124]	; (8003800 <xTaskIncrementTick+0x164>)
 8003782:	441a      	add	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	3304      	adds	r3, #4
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f7fe feaf 	bl	80024ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003794:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <xTaskIncrementTick+0x168>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	429a      	cmp	r2, r3
 800379c:	d3b8      	bcc.n	8003710 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800379e:	2301      	movs	r3, #1
 80037a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037a2:	e7b5      	b.n	8003710 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037a4:	4b17      	ldr	r3, [pc, #92]	; (8003804 <xTaskIncrementTick+0x168>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037aa:	4915      	ldr	r1, [pc, #84]	; (8003800 <xTaskIncrementTick+0x164>)
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d901      	bls.n	80037c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80037bc:	2301      	movs	r3, #1
 80037be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80037c0:	4b11      	ldr	r3, [pc, #68]	; (8003808 <xTaskIncrementTick+0x16c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d007      	beq.n	80037d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80037c8:	2301      	movs	r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	e004      	b.n	80037d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80037ce:	4b0f      	ldr	r3, [pc, #60]	; (800380c <xTaskIncrementTick+0x170>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3301      	adds	r3, #1
 80037d4:	4a0d      	ldr	r2, [pc, #52]	; (800380c <xTaskIncrementTick+0x170>)
 80037d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80037d8:	697b      	ldr	r3, [r7, #20]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000d3c 	.word	0x20000d3c
 80037e8:	20000d18 	.word	0x20000d18
 80037ec:	20000ccc 	.word	0x20000ccc
 80037f0:	20000cd0 	.word	0x20000cd0
 80037f4:	20000d2c 	.word	0x20000d2c
 80037f8:	20000d34 	.word	0x20000d34
 80037fc:	20000d1c 	.word	0x20000d1c
 8003800:	20000844 	.word	0x20000844
 8003804:	20000840 	.word	0x20000840
 8003808:	20000d28 	.word	0x20000d28
 800380c:	20000d24 	.word	0x20000d24

08003810 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003816:	4b28      	ldr	r3, [pc, #160]	; (80038b8 <vTaskSwitchContext+0xa8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800381e:	4b27      	ldr	r3, [pc, #156]	; (80038bc <vTaskSwitchContext+0xac>)
 8003820:	2201      	movs	r2, #1
 8003822:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003824:	e041      	b.n	80038aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003826:	4b25      	ldr	r3, [pc, #148]	; (80038bc <vTaskSwitchContext+0xac>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800382c:	4b24      	ldr	r3, [pc, #144]	; (80038c0 <vTaskSwitchContext+0xb0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	e010      	b.n	8003856 <vTaskSwitchContext+0x46>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <vTaskSwitchContext+0x40>
	__asm volatile
 800383a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	607b      	str	r3, [r7, #4]
}
 800384c:	bf00      	nop
 800384e:	e7fe      	b.n	800384e <vTaskSwitchContext+0x3e>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	3b01      	subs	r3, #1
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	491b      	ldr	r1, [pc, #108]	; (80038c4 <vTaskSwitchContext+0xb4>)
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0e4      	beq.n	8003834 <vTaskSwitchContext+0x24>
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4a13      	ldr	r2, [pc, #76]	; (80038c4 <vTaskSwitchContext+0xb4>)
 8003876:	4413      	add	r3, r2
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	605a      	str	r2, [r3, #4]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	3308      	adds	r3, #8
 800388c:	429a      	cmp	r2, r3
 800388e:	d104      	bne.n	800389a <vTaskSwitchContext+0x8a>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <vTaskSwitchContext+0xb8>)
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	4a06      	ldr	r2, [pc, #24]	; (80038c0 <vTaskSwitchContext+0xb0>)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6013      	str	r3, [r2, #0]
}
 80038aa:	bf00      	nop
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	20000d3c 	.word	0x20000d3c
 80038bc:	20000d28 	.word	0x20000d28
 80038c0:	20000d1c 	.word	0x20000d1c
 80038c4:	20000844 	.word	0x20000844
 80038c8:	20000840 	.word	0x20000840

080038cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	60fb      	str	r3, [r7, #12]
}
 80038ee:	bf00      	nop
 80038f0:	e7fe      	b.n	80038f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038f2:	4b07      	ldr	r3, [pc, #28]	; (8003910 <vTaskPlaceOnEventList+0x44>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3318      	adds	r3, #24
 80038f8:	4619      	mov	r1, r3
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fe fe1b 	bl	8002536 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003900:	2101      	movs	r1, #1
 8003902:	6838      	ldr	r0, [r7, #0]
 8003904:	f000 fa7c 	bl	8003e00 <prvAddCurrentTaskToDelayedList>
}
 8003908:	bf00      	nop
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000840 	.word	0x20000840

08003914 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	617b      	str	r3, [r7, #20]
}
 8003938:	bf00      	nop
 800393a:	e7fe      	b.n	800393a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <vTaskPlaceOnEventListRestricted+0x54>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3318      	adds	r3, #24
 8003942:	4619      	mov	r1, r3
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f7fe fdd2 	bl	80024ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003950:	f04f 33ff 	mov.w	r3, #4294967295
 8003954:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	68b8      	ldr	r0, [r7, #8]
 800395a:	f000 fa51 	bl	8003e00 <prvAddCurrentTaskToDelayedList>
	}
 800395e:	bf00      	nop
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20000840 	.word	0x20000840

0800396c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10a      	bne.n	8003998 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	60fb      	str	r3, [r7, #12]
}
 8003994:	bf00      	nop
 8003996:	e7fe      	b.n	8003996 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	3318      	adds	r3, #24
 800399c:	4618      	mov	r0, r3
 800399e:	f7fe fe03 	bl	80025a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039a2:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <xTaskRemoveFromEventList+0xb0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d11d      	bne.n	80039e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	3304      	adds	r3, #4
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe fdfa 	bl	80025a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b8:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <xTaskRemoveFromEventList+0xb4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d903      	bls.n	80039c8 <xTaskRemoveFromEventList+0x5c>
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	4a16      	ldr	r2, [pc, #88]	; (8003a20 <xTaskRemoveFromEventList+0xb4>)
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4a13      	ldr	r2, [pc, #76]	; (8003a24 <xTaskRemoveFromEventList+0xb8>)
 80039d6:	441a      	add	r2, r3
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	3304      	adds	r3, #4
 80039dc:	4619      	mov	r1, r3
 80039de:	4610      	mov	r0, r2
 80039e0:	f7fe fd85 	bl	80024ee <vListInsertEnd>
 80039e4:	e005      	b.n	80039f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	3318      	adds	r3, #24
 80039ea:	4619      	mov	r1, r3
 80039ec:	480e      	ldr	r0, [pc, #56]	; (8003a28 <xTaskRemoveFromEventList+0xbc>)
 80039ee:	f7fe fd7e 	bl	80024ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f6:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <xTaskRemoveFromEventList+0xc0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d905      	bls.n	8003a0c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a00:	2301      	movs	r3, #1
 8003a02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <xTaskRemoveFromEventList+0xc4>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	e001      	b.n	8003a10 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a10:	697b      	ldr	r3, [r7, #20]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20000d3c 	.word	0x20000d3c
 8003a20:	20000d1c 	.word	0x20000d1c
 8003a24:	20000844 	.word	0x20000844
 8003a28:	20000cd4 	.word	0x20000cd4
 8003a2c:	20000840 	.word	0x20000840
 8003a30:	20000d28 	.word	0x20000d28

08003a34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a3c:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <vTaskInternalSetTimeOutState+0x24>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <vTaskInternalSetTimeOutState+0x28>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	605a      	str	r2, [r3, #4]
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	20000d2c 	.word	0x20000d2c
 8003a5c:	20000d18 	.word	0x20000d18

08003a60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10a      	bne.n	8003a86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	613b      	str	r3, [r7, #16]
}
 8003a82:	bf00      	nop
 8003a84:	e7fe      	b.n	8003a84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	60fb      	str	r3, [r7, #12]
}
 8003a9e:	bf00      	nop
 8003aa0:	e7fe      	b.n	8003aa0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003aa2:	f000 fe7f 	bl	80047a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003aa6:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <xTaskCheckForTimeOut+0xbc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abe:	d102      	bne.n	8003ac6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	e023      	b.n	8003b0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <xTaskCheckForTimeOut+0xc0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d007      	beq.n	8003ae2 <xTaskCheckForTimeOut+0x82>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d302      	bcc.n	8003ae2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003adc:	2301      	movs	r3, #1
 8003ade:	61fb      	str	r3, [r7, #28]
 8003ae0:	e015      	b.n	8003b0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d20b      	bcs.n	8003b04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	1ad2      	subs	r2, r2, r3
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff ff9b 	bl	8003a34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	e004      	b.n	8003b0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b0e:	f000 fe79 	bl	8004804 <vPortExitCritical>

	return xReturn;
 8003b12:	69fb      	ldr	r3, [r7, #28]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3720      	adds	r7, #32
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20000d18 	.word	0x20000d18
 8003b20:	20000d2c 	.word	0x20000d2c

08003b24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b28:	4b03      	ldr	r3, [pc, #12]	; (8003b38 <vTaskMissedYield+0x14>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]
}
 8003b2e:	bf00      	nop
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	20000d28 	.word	0x20000d28

08003b3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b44:	f000 f852 	bl	8003bec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <prvIdleTask+0x28>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d9f9      	bls.n	8003b44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <prvIdleTask+0x2c>)
 8003b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b60:	e7f0      	b.n	8003b44 <prvIdleTask+0x8>
 8003b62:	bf00      	nop
 8003b64:	20000844 	.word	0x20000844
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b72:	2300      	movs	r3, #0
 8003b74:	607b      	str	r3, [r7, #4]
 8003b76:	e00c      	b.n	8003b92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <prvInitialiseTaskLists+0x60>)
 8003b84:	4413      	add	r3, r2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe fc84 	bl	8002494 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	607b      	str	r3, [r7, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b37      	cmp	r3, #55	; 0x37
 8003b96:	d9ef      	bls.n	8003b78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b98:	480d      	ldr	r0, [pc, #52]	; (8003bd0 <prvInitialiseTaskLists+0x64>)
 8003b9a:	f7fe fc7b 	bl	8002494 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b9e:	480d      	ldr	r0, [pc, #52]	; (8003bd4 <prvInitialiseTaskLists+0x68>)
 8003ba0:	f7fe fc78 	bl	8002494 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ba4:	480c      	ldr	r0, [pc, #48]	; (8003bd8 <prvInitialiseTaskLists+0x6c>)
 8003ba6:	f7fe fc75 	bl	8002494 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003baa:	480c      	ldr	r0, [pc, #48]	; (8003bdc <prvInitialiseTaskLists+0x70>)
 8003bac:	f7fe fc72 	bl	8002494 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bb0:	480b      	ldr	r0, [pc, #44]	; (8003be0 <prvInitialiseTaskLists+0x74>)
 8003bb2:	f7fe fc6f 	bl	8002494 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <prvInitialiseTaskLists+0x78>)
 8003bb8:	4a05      	ldr	r2, [pc, #20]	; (8003bd0 <prvInitialiseTaskLists+0x64>)
 8003bba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <prvInitialiseTaskLists+0x7c>)
 8003bbe:	4a05      	ldr	r2, [pc, #20]	; (8003bd4 <prvInitialiseTaskLists+0x68>)
 8003bc0:	601a      	str	r2, [r3, #0]
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000844 	.word	0x20000844
 8003bd0:	20000ca4 	.word	0x20000ca4
 8003bd4:	20000cb8 	.word	0x20000cb8
 8003bd8:	20000cd4 	.word	0x20000cd4
 8003bdc:	20000ce8 	.word	0x20000ce8
 8003be0:	20000d00 	.word	0x20000d00
 8003be4:	20000ccc 	.word	0x20000ccc
 8003be8:	20000cd0 	.word	0x20000cd0

08003bec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bf2:	e019      	b.n	8003c28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003bf4:	f000 fdd6 	bl	80047a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bf8:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <prvCheckTasksWaitingTermination+0x50>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fe fccf 	bl	80025a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <prvCheckTasksWaitingTermination+0x54>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	4a0b      	ldr	r2, [pc, #44]	; (8003c40 <prvCheckTasksWaitingTermination+0x54>)
 8003c12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c14:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <prvCheckTasksWaitingTermination+0x58>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <prvCheckTasksWaitingTermination+0x58>)
 8003c1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c1e:	f000 fdf1 	bl	8004804 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f810 	bl	8003c48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <prvCheckTasksWaitingTermination+0x58>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1e1      	bne.n	8003bf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000ce8 	.word	0x20000ce8
 8003c40:	20000d14 	.word	0x20000d14
 8003c44:	20000cfc 	.word	0x20000cfc

08003c48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d108      	bne.n	8003c6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 ff8e 	bl	8004b80 <vPortFree>
				vPortFree( pxTCB );
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 ff8b 	bl	8004b80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c6a:	e018      	b.n	8003c9e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d103      	bne.n	8003c7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 ff82 	bl	8004b80 <vPortFree>
	}
 8003c7c:	e00f      	b.n	8003c9e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d00a      	beq.n	8003c9e <prvDeleteTCB+0x56>
	__asm volatile
 8003c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	60fb      	str	r3, [r7, #12]
}
 8003c9a:	bf00      	nop
 8003c9c:	e7fe      	b.n	8003c9c <prvDeleteTCB+0x54>
	}
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cae:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <prvResetNextTaskUnblockTime+0x38>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d104      	bne.n	8003cc2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <prvResetNextTaskUnblockTime+0x3c>)
 8003cba:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cc0:	e008      	b.n	8003cd4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cc2:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <prvResetNextTaskUnblockTime+0x38>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4a04      	ldr	r2, [pc, #16]	; (8003ce4 <prvResetNextTaskUnblockTime+0x3c>)
 8003cd2:	6013      	str	r3, [r2, #0]
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	20000ccc 	.word	0x20000ccc
 8003ce4:	20000d34 	.word	0x20000d34

08003ce8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003cee:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <xTaskGetSchedulerState+0x34>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d102      	bne.n	8003cfc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	607b      	str	r3, [r7, #4]
 8003cfa:	e008      	b.n	8003d0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cfc:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <xTaskGetSchedulerState+0x38>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d102      	bne.n	8003d0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d04:	2302      	movs	r3, #2
 8003d06:	607b      	str	r3, [r7, #4]
 8003d08:	e001      	b.n	8003d0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d0e:	687b      	ldr	r3, [r7, #4]
	}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	20000d20 	.word	0x20000d20
 8003d20:	20000d3c 	.word	0x20000d3c

08003d24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d056      	beq.n	8003de8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d3a:	4b2e      	ldr	r3, [pc, #184]	; (8003df4 <xTaskPriorityDisinherit+0xd0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d00a      	beq.n	8003d5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	60fb      	str	r3, [r7, #12]
}
 8003d56:	bf00      	nop
 8003d58:	e7fe      	b.n	8003d58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	60bb      	str	r3, [r7, #8]
}
 8003d74:	bf00      	nop
 8003d76:	e7fe      	b.n	8003d76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7c:	1e5a      	subs	r2, r3, #1
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d02c      	beq.n	8003de8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d128      	bne.n	8003de8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe fc04 	bl	80025a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db8:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <xTaskPriorityDisinherit+0xd4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d903      	bls.n	8003dc8 <xTaskPriorityDisinherit+0xa4>
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	4a0c      	ldr	r2, [pc, #48]	; (8003df8 <xTaskPriorityDisinherit+0xd4>)
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4a09      	ldr	r2, [pc, #36]	; (8003dfc <xTaskPriorityDisinherit+0xd8>)
 8003dd6:	441a      	add	r2, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4610      	mov	r0, r2
 8003de0:	f7fe fb85 	bl	80024ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003de4:	2301      	movs	r3, #1
 8003de6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003de8:	697b      	ldr	r3, [r7, #20]
	}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20000840 	.word	0x20000840
 8003df8:	20000d1c 	.word	0x20000d1c
 8003dfc:	20000844 	.word	0x20000844

08003e00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e0a:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <prvAddCurrentTaskToDelayedList+0x90>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e10:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3304      	adds	r3, #4
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe fbc6 	bl	80025a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d10a      	bne.n	8003e3a <prvAddCurrentTaskToDelayedList+0x3a>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e2a:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	4619      	mov	r1, r3
 8003e32:	4819      	ldr	r0, [pc, #100]	; (8003e98 <prvAddCurrentTaskToDelayedList+0x98>)
 8003e34:	f7fe fb5b 	bl	80024ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e38:	e026      	b.n	8003e88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4413      	add	r3, r2
 8003e40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e42:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d209      	bcs.n	8003e66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e52:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f7fe fb69 	bl	8002536 <vListInsert>
}
 8003e64:	e010      	b.n	8003e88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e66:	4b0e      	ldr	r3, [pc, #56]	; (8003ea0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	4619      	mov	r1, r3
 8003e72:	4610      	mov	r0, r2
 8003e74:	f7fe fb5f 	bl	8002536 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e78:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d202      	bcs.n	8003e88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003e82:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	6013      	str	r3, [r2, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20000d18 	.word	0x20000d18
 8003e94:	20000840 	.word	0x20000840
 8003e98:	20000d00 	.word	0x20000d00
 8003e9c:	20000cd0 	.word	0x20000cd0
 8003ea0:	20000ccc 	.word	0x20000ccc
 8003ea4:	20000d34 	.word	0x20000d34

08003ea8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	; 0x28
 8003eac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003eb2:	f000 fb07 	bl	80044c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003eb6:	4b1c      	ldr	r3, [pc, #112]	; (8003f28 <xTimerCreateTimerTask+0x80>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d021      	beq.n	8003f02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003ec6:	1d3a      	adds	r2, r7, #4
 8003ec8:	f107 0108 	add.w	r1, r7, #8
 8003ecc:	f107 030c 	add.w	r3, r7, #12
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe fac5 	bl	8002460 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	9202      	str	r2, [sp, #8]
 8003ede:	9301      	str	r3, [sp, #4]
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	460a      	mov	r2, r1
 8003ee8:	4910      	ldr	r1, [pc, #64]	; (8003f2c <xTimerCreateTimerTask+0x84>)
 8003eea:	4811      	ldr	r0, [pc, #68]	; (8003f30 <xTimerCreateTimerTask+0x88>)
 8003eec:	f7ff f8de 	bl	80030ac <xTaskCreateStatic>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	4a10      	ldr	r2, [pc, #64]	; (8003f34 <xTimerCreateTimerTask+0x8c>)
 8003ef4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003ef6:	4b0f      	ldr	r3, [pc, #60]	; (8003f34 <xTimerCreateTimerTask+0x8c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003efe:	2301      	movs	r3, #1
 8003f00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10a      	bne.n	8003f1e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	613b      	str	r3, [r7, #16]
}
 8003f1a:	bf00      	nop
 8003f1c:	e7fe      	b.n	8003f1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f1e:	697b      	ldr	r3, [r7, #20]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	20000d70 	.word	0x20000d70
 8003f2c:	080060c4 	.word	0x080060c4
 8003f30:	0800406d 	.word	0x0800406d
 8003f34:	20000d74 	.word	0x20000d74

08003f38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08a      	sub	sp, #40	; 0x28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10a      	bne.n	8003f66 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	623b      	str	r3, [r7, #32]
}
 8003f62:	bf00      	nop
 8003f64:	e7fe      	b.n	8003f64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f66:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <xTimerGenericCommand+0x98>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d02a      	beq.n	8003fc4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b05      	cmp	r3, #5
 8003f7e:	dc18      	bgt.n	8003fb2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f80:	f7ff feb2 	bl	8003ce8 <xTaskGetSchedulerState>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d109      	bne.n	8003f9e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f8a:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <xTimerGenericCommand+0x98>)
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	f107 0110 	add.w	r1, r7, #16
 8003f92:	2300      	movs	r3, #0
 8003f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f96:	f7fe fca1 	bl	80028dc <xQueueGenericSend>
 8003f9a:	6278      	str	r0, [r7, #36]	; 0x24
 8003f9c:	e012      	b.n	8003fc4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <xTimerGenericCommand+0x98>)
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	f107 0110 	add.w	r1, r7, #16
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f7fe fc97 	bl	80028dc <xQueueGenericSend>
 8003fae:	6278      	str	r0, [r7, #36]	; 0x24
 8003fb0:	e008      	b.n	8003fc4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003fb2:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <xTimerGenericCommand+0x98>)
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	f107 0110 	add.w	r1, r7, #16
 8003fba:	2300      	movs	r3, #0
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	f7fe fd8b 	bl	8002ad8 <xQueueGenericSendFromISR>
 8003fc2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3728      	adds	r7, #40	; 0x28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000d70 	.word	0x20000d70

08003fd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af02      	add	r7, sp, #8
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fde:	4b22      	ldr	r3, [pc, #136]	; (8004068 <prvProcessExpiredTimer+0x94>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	3304      	adds	r3, #4
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fe fadb 	bl	80025a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d022      	beq.n	8004046 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	699a      	ldr	r2, [r3, #24]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	18d1      	adds	r1, r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	6978      	ldr	r0, [r7, #20]
 800400e:	f000 f8d1 	bl	80041b4 <prvInsertTimerInActiveList>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01f      	beq.n	8004058 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004018:	2300      	movs	r3, #0
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	2300      	movs	r3, #0
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	2100      	movs	r1, #0
 8004022:	6978      	ldr	r0, [r7, #20]
 8004024:	f7ff ff88 	bl	8003f38 <xTimerGenericCommand>
 8004028:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d113      	bne.n	8004058 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	60fb      	str	r3, [r7, #12]
}
 8004042:	bf00      	nop
 8004044:	e7fe      	b.n	8004044 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800404c:	f023 0301 	bic.w	r3, r3, #1
 8004050:	b2da      	uxtb	r2, r3
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	6978      	ldr	r0, [r7, #20]
 800405e:	4798      	blx	r3
}
 8004060:	bf00      	nop
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	20000d68 	.word	0x20000d68

0800406c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004074:	f107 0308 	add.w	r3, r7, #8
 8004078:	4618      	mov	r0, r3
 800407a:	f000 f857 	bl	800412c <prvGetNextExpireTime>
 800407e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4619      	mov	r1, r3
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f803 	bl	8004090 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800408a:	f000 f8d5 	bl	8004238 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800408e:	e7f1      	b.n	8004074 <prvTimerTask+0x8>

08004090 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800409a:	f7ff fa43 	bl	8003524 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800409e:	f107 0308 	add.w	r3, r7, #8
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f866 	bl	8004174 <prvSampleTimeNow>
 80040a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d130      	bne.n	8004112 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10a      	bne.n	80040cc <prvProcessTimerOrBlockTask+0x3c>
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d806      	bhi.n	80040cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80040be:	f7ff fa3f 	bl	8003540 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040c2:	68f9      	ldr	r1, [r7, #12]
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff ff85 	bl	8003fd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80040ca:	e024      	b.n	8004116 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040d2:	4b13      	ldr	r3, [pc, #76]	; (8004120 <prvProcessTimerOrBlockTask+0x90>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <prvProcessTimerOrBlockTask+0x50>
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <prvProcessTimerOrBlockTask+0x52>
 80040e0:	2300      	movs	r3, #0
 80040e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040e4:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <prvProcessTimerOrBlockTask+0x94>)
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	4619      	mov	r1, r3
 80040f2:	f7fe ffa7 	bl	8003044 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80040f6:	f7ff fa23 	bl	8003540 <xTaskResumeAll>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10a      	bne.n	8004116 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004100:	4b09      	ldr	r3, [pc, #36]	; (8004128 <prvProcessTimerOrBlockTask+0x98>)
 8004102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	f3bf 8f6f 	isb	sy
}
 8004110:	e001      	b.n	8004116 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004112:	f7ff fa15 	bl	8003540 <xTaskResumeAll>
}
 8004116:	bf00      	nop
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000d6c 	.word	0x20000d6c
 8004124:	20000d70 	.word	0x20000d70
 8004128:	e000ed04 	.word	0xe000ed04

0800412c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004134:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <prvGetNextExpireTime+0x44>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <prvGetNextExpireTime+0x16>
 800413e:	2201      	movs	r2, #1
 8004140:	e000      	b.n	8004144 <prvGetNextExpireTime+0x18>
 8004142:	2200      	movs	r2, #0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d105      	bne.n	800415c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <prvGetNextExpireTime+0x44>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e001      	b.n	8004160 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004160:	68fb      	ldr	r3, [r7, #12]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000d68 	.word	0x20000d68

08004174 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800417c:	f7ff fa7e 	bl	800367c <xTaskGetTickCount>
 8004180:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004182:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <prvSampleTimeNow+0x3c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	429a      	cmp	r2, r3
 800418a:	d205      	bcs.n	8004198 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800418c:	f000 f936 	bl	80043fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e002      	b.n	800419e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800419e:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <prvSampleTimeNow+0x3c>)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80041a4:	68fb      	ldr	r3, [r7, #12]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000d78 	.word	0x20000d78

080041b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d812      	bhi.n	8004200 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	1ad2      	subs	r2, r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d302      	bcc.n	80041ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80041e8:	2301      	movs	r3, #1
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	e01b      	b.n	8004226 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <prvInsertTimerInActiveList+0x7c>)
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3304      	adds	r3, #4
 80041f6:	4619      	mov	r1, r3
 80041f8:	4610      	mov	r0, r2
 80041fa:	f7fe f99c 	bl	8002536 <vListInsert>
 80041fe:	e012      	b.n	8004226 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d206      	bcs.n	8004216 <prvInsertTimerInActiveList+0x62>
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d302      	bcc.n	8004216 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004210:	2301      	movs	r3, #1
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	e007      	b.n	8004226 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004216:	4b07      	ldr	r3, [pc, #28]	; (8004234 <prvInsertTimerInActiveList+0x80>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3304      	adds	r3, #4
 800421e:	4619      	mov	r1, r3
 8004220:	4610      	mov	r0, r2
 8004222:	f7fe f988 	bl	8002536 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004226:	697b      	ldr	r3, [r7, #20]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20000d6c 	.word	0x20000d6c
 8004234:	20000d68 	.word	0x20000d68

08004238 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08e      	sub	sp, #56	; 0x38
 800423c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800423e:	e0ca      	b.n	80043d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	da18      	bge.n	8004278 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004246:	1d3b      	adds	r3, r7, #4
 8004248:	3304      	adds	r3, #4
 800424a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800424c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10a      	bne.n	8004268 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	61fb      	str	r3, [r7, #28]
}
 8004264:	bf00      	nop
 8004266:	e7fe      	b.n	8004266 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800426e:	6850      	ldr	r0, [r2, #4]
 8004270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004272:	6892      	ldr	r2, [r2, #8]
 8004274:	4611      	mov	r1, r2
 8004276:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	f2c0 80ab 	blt.w	80043d6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d004      	beq.n	8004296 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428e:	3304      	adds	r3, #4
 8004290:	4618      	mov	r0, r3
 8004292:	f7fe f989 	bl	80025a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004296:	463b      	mov	r3, r7
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff ff6b 	bl	8004174 <prvSampleTimeNow>
 800429e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b09      	cmp	r3, #9
 80042a4:	f200 8096 	bhi.w	80043d4 <prvProcessReceivedCommands+0x19c>
 80042a8:	a201      	add	r2, pc, #4	; (adr r2, 80042b0 <prvProcessReceivedCommands+0x78>)
 80042aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ae:	bf00      	nop
 80042b0:	080042d9 	.word	0x080042d9
 80042b4:	080042d9 	.word	0x080042d9
 80042b8:	080042d9 	.word	0x080042d9
 80042bc:	0800434d 	.word	0x0800434d
 80042c0:	08004361 	.word	0x08004361
 80042c4:	080043ab 	.word	0x080043ab
 80042c8:	080042d9 	.word	0x080042d9
 80042cc:	080042d9 	.word	0x080042d9
 80042d0:	0800434d 	.word	0x0800434d
 80042d4:	08004361 	.word	0x08004361
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	18d1      	adds	r1, r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042f8:	f7ff ff5c 	bl	80041b4 <prvInsertTimerInActiveList>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d069      	beq.n	80043d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004308:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d05e      	beq.n	80043d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	441a      	add	r2, r3
 8004320:	2300      	movs	r3, #0
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	2300      	movs	r3, #0
 8004326:	2100      	movs	r1, #0
 8004328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800432a:	f7ff fe05 	bl	8003f38 <xTimerGenericCommand>
 800432e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d14f      	bne.n	80043d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	61bb      	str	r3, [r7, #24]
}
 8004348:	bf00      	nop
 800434a:	e7fe      	b.n	800434a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004352:	f023 0301 	bic.w	r3, r3, #1
 8004356:	b2da      	uxtb	r2, r3
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800435e:	e03a      	b.n	80043d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004362:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	b2da      	uxtb	r2, r3
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004376:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	617b      	str	r3, [r7, #20]
}
 8004392:	bf00      	nop
 8004394:	e7fe      	b.n	8004394 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	18d1      	adds	r1, r2, r3
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043a4:	f7ff ff06 	bl	80041b4 <prvInsertTimerInActiveList>
					break;
 80043a8:	e015      	b.n	80043d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d103      	bne.n	80043c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80043b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ba:	f000 fbe1 	bl	8004b80 <vPortFree>
 80043be:	e00a      	b.n	80043d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043c6:	f023 0301 	bic.w	r3, r3, #1
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80043d2:	e000      	b.n	80043d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80043d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043d6:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <prvProcessReceivedCommands+0x1c0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	1d39      	adds	r1, r7, #4
 80043dc:	2200      	movs	r2, #0
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fe fc16 	bl	8002c10 <xQueueReceive>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f47f af2a 	bne.w	8004240 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80043ec:	bf00      	nop
 80043ee:	bf00      	nop
 80043f0:	3730      	adds	r7, #48	; 0x30
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000d70 	.word	0x20000d70

080043fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004402:	e048      	b.n	8004496 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004404:	4b2d      	ldr	r3, [pc, #180]	; (80044bc <prvSwitchTimerLists+0xc0>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800440e:	4b2b      	ldr	r3, [pc, #172]	; (80044bc <prvSwitchTimerLists+0xc0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3304      	adds	r3, #4
 800441c:	4618      	mov	r0, r3
 800441e:	f7fe f8c3 	bl	80025a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d02e      	beq.n	8004496 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4413      	add	r3, r2
 8004440:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	429a      	cmp	r2, r3
 8004448:	d90e      	bls.n	8004468 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004456:	4b19      	ldr	r3, [pc, #100]	; (80044bc <prvSwitchTimerLists+0xc0>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	3304      	adds	r3, #4
 800445e:	4619      	mov	r1, r3
 8004460:	4610      	mov	r0, r2
 8004462:	f7fe f868 	bl	8002536 <vListInsert>
 8004466:	e016      	b.n	8004496 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004468:	2300      	movs	r3, #0
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	2300      	movs	r3, #0
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	2100      	movs	r1, #0
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f7ff fd60 	bl	8003f38 <xTimerGenericCommand>
 8004478:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10a      	bne.n	8004496 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	603b      	str	r3, [r7, #0]
}
 8004492:	bf00      	nop
 8004494:	e7fe      	b.n	8004494 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004496:	4b09      	ldr	r3, [pc, #36]	; (80044bc <prvSwitchTimerLists+0xc0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1b1      	bne.n	8004404 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80044a0:	4b06      	ldr	r3, [pc, #24]	; (80044bc <prvSwitchTimerLists+0xc0>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80044a6:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <prvSwitchTimerLists+0xc4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a04      	ldr	r2, [pc, #16]	; (80044bc <prvSwitchTimerLists+0xc0>)
 80044ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80044ae:	4a04      	ldr	r2, [pc, #16]	; (80044c0 <prvSwitchTimerLists+0xc4>)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	6013      	str	r3, [r2, #0]
}
 80044b4:	bf00      	nop
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20000d68 	.word	0x20000d68
 80044c0:	20000d6c 	.word	0x20000d6c

080044c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80044ca:	f000 f96b 	bl	80047a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80044ce:	4b15      	ldr	r3, [pc, #84]	; (8004524 <prvCheckForValidListAndQueue+0x60>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d120      	bne.n	8004518 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80044d6:	4814      	ldr	r0, [pc, #80]	; (8004528 <prvCheckForValidListAndQueue+0x64>)
 80044d8:	f7fd ffdc 	bl	8002494 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80044dc:	4813      	ldr	r0, [pc, #76]	; (800452c <prvCheckForValidListAndQueue+0x68>)
 80044de:	f7fd ffd9 	bl	8002494 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80044e2:	4b13      	ldr	r3, [pc, #76]	; (8004530 <prvCheckForValidListAndQueue+0x6c>)
 80044e4:	4a10      	ldr	r2, [pc, #64]	; (8004528 <prvCheckForValidListAndQueue+0x64>)
 80044e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80044e8:	4b12      	ldr	r3, [pc, #72]	; (8004534 <prvCheckForValidListAndQueue+0x70>)
 80044ea:	4a10      	ldr	r2, [pc, #64]	; (800452c <prvCheckForValidListAndQueue+0x68>)
 80044ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80044ee:	2300      	movs	r3, #0
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	4b11      	ldr	r3, [pc, #68]	; (8004538 <prvCheckForValidListAndQueue+0x74>)
 80044f4:	4a11      	ldr	r2, [pc, #68]	; (800453c <prvCheckForValidListAndQueue+0x78>)
 80044f6:	2110      	movs	r1, #16
 80044f8:	200a      	movs	r0, #10
 80044fa:	f7fe f8e7 	bl	80026cc <xQueueGenericCreateStatic>
 80044fe:	4603      	mov	r3, r0
 8004500:	4a08      	ldr	r2, [pc, #32]	; (8004524 <prvCheckForValidListAndQueue+0x60>)
 8004502:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004504:	4b07      	ldr	r3, [pc, #28]	; (8004524 <prvCheckForValidListAndQueue+0x60>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <prvCheckForValidListAndQueue+0x60>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	490b      	ldr	r1, [pc, #44]	; (8004540 <prvCheckForValidListAndQueue+0x7c>)
 8004512:	4618      	mov	r0, r3
 8004514:	f7fe fd6c 	bl	8002ff0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004518:	f000 f974 	bl	8004804 <vPortExitCritical>
}
 800451c:	bf00      	nop
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	20000d70 	.word	0x20000d70
 8004528:	20000d40 	.word	0x20000d40
 800452c:	20000d54 	.word	0x20000d54
 8004530:	20000d68 	.word	0x20000d68
 8004534:	20000d6c 	.word	0x20000d6c
 8004538:	20000e1c 	.word	0x20000e1c
 800453c:	20000d7c 	.word	0x20000d7c
 8004540:	080060cc 	.word	0x080060cc

08004544 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3b04      	subs	r3, #4
 8004554:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800455c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3b04      	subs	r3, #4
 8004562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f023 0201 	bic.w	r2, r3, #1
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3b04      	subs	r3, #4
 8004572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004574:	4a0c      	ldr	r2, [pc, #48]	; (80045a8 <pxPortInitialiseStack+0x64>)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3b14      	subs	r3, #20
 800457e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3b04      	subs	r3, #4
 800458a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f06f 0202 	mvn.w	r2, #2
 8004592:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3b20      	subs	r3, #32
 8004598:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800459a:	68fb      	ldr	r3, [r7, #12]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	080045ad 	.word	0x080045ad

080045ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045b6:	4b12      	ldr	r3, [pc, #72]	; (8004600 <prvTaskExitError+0x54>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045be:	d00a      	beq.n	80045d6 <prvTaskExitError+0x2a>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	60fb      	str	r3, [r7, #12]
}
 80045d2:	bf00      	nop
 80045d4:	e7fe      	b.n	80045d4 <prvTaskExitError+0x28>
	__asm volatile
 80045d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	60bb      	str	r3, [r7, #8]
}
 80045e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80045ea:	bf00      	nop
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0fc      	beq.n	80045ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80045f2:	bf00      	nop
 80045f4:	bf00      	nop
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	2000000c 	.word	0x2000000c
	...

08004610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004610:	4b07      	ldr	r3, [pc, #28]	; (8004630 <pxCurrentTCBConst2>)
 8004612:	6819      	ldr	r1, [r3, #0]
 8004614:	6808      	ldr	r0, [r1, #0]
 8004616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800461a:	f380 8809 	msr	PSP, r0
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f04f 0000 	mov.w	r0, #0
 8004626:	f380 8811 	msr	BASEPRI, r0
 800462a:	4770      	bx	lr
 800462c:	f3af 8000 	nop.w

08004630 <pxCurrentTCBConst2>:
 8004630:	20000840 	.word	0x20000840
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop

08004638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004638:	4808      	ldr	r0, [pc, #32]	; (800465c <prvPortStartFirstTask+0x24>)
 800463a:	6800      	ldr	r0, [r0, #0]
 800463c:	6800      	ldr	r0, [r0, #0]
 800463e:	f380 8808 	msr	MSP, r0
 8004642:	f04f 0000 	mov.w	r0, #0
 8004646:	f380 8814 	msr	CONTROL, r0
 800464a:	b662      	cpsie	i
 800464c:	b661      	cpsie	f
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	df00      	svc	0
 8004658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800465a:	bf00      	nop
 800465c:	e000ed08 	.word	0xe000ed08

08004660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004666:	4b46      	ldr	r3, [pc, #280]	; (8004780 <xPortStartScheduler+0x120>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a46      	ldr	r2, [pc, #280]	; (8004784 <xPortStartScheduler+0x124>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d10a      	bne.n	8004686 <xPortStartScheduler+0x26>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	613b      	str	r3, [r7, #16]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004686:	4b3e      	ldr	r3, [pc, #248]	; (8004780 <xPortStartScheduler+0x120>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a3f      	ldr	r2, [pc, #252]	; (8004788 <xPortStartScheduler+0x128>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d10a      	bne.n	80046a6 <xPortStartScheduler+0x46>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	60fb      	str	r3, [r7, #12]
}
 80046a2:	bf00      	nop
 80046a4:	e7fe      	b.n	80046a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046a6:	4b39      	ldr	r3, [pc, #228]	; (800478c <xPortStartScheduler+0x12c>)
 80046a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	22ff      	movs	r2, #255	; 0xff
 80046b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	4b31      	ldr	r3, [pc, #196]	; (8004790 <xPortStartScheduler+0x130>)
 80046cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046ce:	4b31      	ldr	r3, [pc, #196]	; (8004794 <xPortStartScheduler+0x134>)
 80046d0:	2207      	movs	r2, #7
 80046d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046d4:	e009      	b.n	80046ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80046d6:	4b2f      	ldr	r3, [pc, #188]	; (8004794 <xPortStartScheduler+0x134>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3b01      	subs	r3, #1
 80046dc:	4a2d      	ldr	r2, [pc, #180]	; (8004794 <xPortStartScheduler+0x134>)
 80046de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046ea:	78fb      	ldrb	r3, [r7, #3]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f2:	2b80      	cmp	r3, #128	; 0x80
 80046f4:	d0ef      	beq.n	80046d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046f6:	4b27      	ldr	r3, [pc, #156]	; (8004794 <xPortStartScheduler+0x134>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f1c3 0307 	rsb	r3, r3, #7
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d00a      	beq.n	8004718 <xPortStartScheduler+0xb8>
	__asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	60bb      	str	r3, [r7, #8]
}
 8004714:	bf00      	nop
 8004716:	e7fe      	b.n	8004716 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004718:	4b1e      	ldr	r3, [pc, #120]	; (8004794 <xPortStartScheduler+0x134>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	021b      	lsls	r3, r3, #8
 800471e:	4a1d      	ldr	r2, [pc, #116]	; (8004794 <xPortStartScheduler+0x134>)
 8004720:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004722:	4b1c      	ldr	r3, [pc, #112]	; (8004794 <xPortStartScheduler+0x134>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800472a:	4a1a      	ldr	r2, [pc, #104]	; (8004794 <xPortStartScheduler+0x134>)
 800472c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004736:	4b18      	ldr	r3, [pc, #96]	; (8004798 <xPortStartScheduler+0x138>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a17      	ldr	r2, [pc, #92]	; (8004798 <xPortStartScheduler+0x138>)
 800473c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004740:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004742:	4b15      	ldr	r3, [pc, #84]	; (8004798 <xPortStartScheduler+0x138>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a14      	ldr	r2, [pc, #80]	; (8004798 <xPortStartScheduler+0x138>)
 8004748:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800474c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800474e:	f000 f8dd 	bl	800490c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <xPortStartScheduler+0x13c>)
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004758:	f000 f8fc 	bl	8004954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800475c:	4b10      	ldr	r3, [pc, #64]	; (80047a0 <xPortStartScheduler+0x140>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a0f      	ldr	r2, [pc, #60]	; (80047a0 <xPortStartScheduler+0x140>)
 8004762:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004766:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004768:	f7ff ff66 	bl	8004638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800476c:	f7ff f850 	bl	8003810 <vTaskSwitchContext>
	prvTaskExitError();
 8004770:	f7ff ff1c 	bl	80045ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	e000ed00 	.word	0xe000ed00
 8004784:	410fc271 	.word	0x410fc271
 8004788:	410fc270 	.word	0x410fc270
 800478c:	e000e400 	.word	0xe000e400
 8004790:	20000e6c 	.word	0x20000e6c
 8004794:	20000e70 	.word	0x20000e70
 8004798:	e000ed20 	.word	0xe000ed20
 800479c:	2000000c 	.word	0x2000000c
 80047a0:	e000ef34 	.word	0xe000ef34

080047a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	607b      	str	r3, [r7, #4]
}
 80047bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047be:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <vPortEnterCritical+0x58>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3301      	adds	r3, #1
 80047c4:	4a0d      	ldr	r2, [pc, #52]	; (80047fc <vPortEnterCritical+0x58>)
 80047c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047c8:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <vPortEnterCritical+0x58>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d10f      	bne.n	80047f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <vPortEnterCritical+0x5c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	603b      	str	r3, [r7, #0]
}
 80047ec:	bf00      	nop
 80047ee:	e7fe      	b.n	80047ee <vPortEnterCritical+0x4a>
	}
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	2000000c 	.word	0x2000000c
 8004800:	e000ed04 	.word	0xe000ed04

08004804 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800480a:	4b12      	ldr	r3, [pc, #72]	; (8004854 <vPortExitCritical+0x50>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10a      	bne.n	8004828 <vPortExitCritical+0x24>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	607b      	str	r3, [r7, #4]
}
 8004824:	bf00      	nop
 8004826:	e7fe      	b.n	8004826 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004828:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <vPortExitCritical+0x50>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3b01      	subs	r3, #1
 800482e:	4a09      	ldr	r2, [pc, #36]	; (8004854 <vPortExitCritical+0x50>)
 8004830:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004832:	4b08      	ldr	r3, [pc, #32]	; (8004854 <vPortExitCritical+0x50>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d105      	bne.n	8004846 <vPortExitCritical+0x42>
 800483a:	2300      	movs	r3, #0
 800483c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	f383 8811 	msr	BASEPRI, r3
}
 8004844:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	2000000c 	.word	0x2000000c
	...

08004860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004860:	f3ef 8009 	mrs	r0, PSP
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <pxCurrentTCBConst>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	f01e 0f10 	tst.w	lr, #16
 8004870:	bf08      	it	eq
 8004872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487a:	6010      	str	r0, [r2, #0]
 800487c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004880:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004884:	f380 8811 	msr	BASEPRI, r0
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f7fe ffbe 	bl	8003810 <vTaskSwitchContext>
 8004894:	f04f 0000 	mov.w	r0, #0
 8004898:	f380 8811 	msr	BASEPRI, r0
 800489c:	bc09      	pop	{r0, r3}
 800489e:	6819      	ldr	r1, [r3, #0]
 80048a0:	6808      	ldr	r0, [r1, #0]
 80048a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a6:	f01e 0f10 	tst.w	lr, #16
 80048aa:	bf08      	it	eq
 80048ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048b0:	f380 8809 	msr	PSP, r0
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	f3af 8000 	nop.w

080048c0 <pxCurrentTCBConst>:
 80048c0:	20000840 	.word	0x20000840
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048c4:	bf00      	nop
 80048c6:	bf00      	nop

080048c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
	__asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	607b      	str	r3, [r7, #4]
}
 80048e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80048e2:	f7fe fedb 	bl	800369c <xTaskIncrementTick>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048ec:	4b06      	ldr	r3, [pc, #24]	; (8004908 <xPortSysTickHandler+0x40>)
 80048ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	2300      	movs	r3, #0
 80048f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	f383 8811 	msr	BASEPRI, r3
}
 80048fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004900:	bf00      	nop
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	e000ed04 	.word	0xe000ed04

0800490c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <vPortSetupTimerInterrupt+0x34>)
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004916:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <vPortSetupTimerInterrupt+0x38>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800491c:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <vPortSetupTimerInterrupt+0x3c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a0a      	ldr	r2, [pc, #40]	; (800494c <vPortSetupTimerInterrupt+0x40>)
 8004922:	fba2 2303 	umull	r2, r3, r2, r3
 8004926:	099b      	lsrs	r3, r3, #6
 8004928:	4a09      	ldr	r2, [pc, #36]	; (8004950 <vPortSetupTimerInterrupt+0x44>)
 800492a:	3b01      	subs	r3, #1
 800492c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800492e:	4b04      	ldr	r3, [pc, #16]	; (8004940 <vPortSetupTimerInterrupt+0x34>)
 8004930:	2207      	movs	r2, #7
 8004932:	601a      	str	r2, [r3, #0]
}
 8004934:	bf00      	nop
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	e000e010 	.word	0xe000e010
 8004944:	e000e018 	.word	0xe000e018
 8004948:	20000000 	.word	0x20000000
 800494c:	10624dd3 	.word	0x10624dd3
 8004950:	e000e014 	.word	0xe000e014

08004954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004954:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004964 <vPortEnableVFP+0x10>
 8004958:	6801      	ldr	r1, [r0, #0]
 800495a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800495e:	6001      	str	r1, [r0, #0]
 8004960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004962:	bf00      	nop
 8004964:	e000ed88 	.word	0xe000ed88

08004968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800496e:	f3ef 8305 	mrs	r3, IPSR
 8004972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b0f      	cmp	r3, #15
 8004978:	d914      	bls.n	80049a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800497a:	4a17      	ldr	r2, [pc, #92]	; (80049d8 <vPortValidateInterruptPriority+0x70>)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004984:	4b15      	ldr	r3, [pc, #84]	; (80049dc <vPortValidateInterruptPriority+0x74>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	7afa      	ldrb	r2, [r7, #11]
 800498a:	429a      	cmp	r2, r3
 800498c:	d20a      	bcs.n	80049a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	607b      	str	r3, [r7, #4]
}
 80049a0:	bf00      	nop
 80049a2:	e7fe      	b.n	80049a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049a4:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <vPortValidateInterruptPriority+0x78>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049ac:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <vPortValidateInterruptPriority+0x7c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d90a      	bls.n	80049ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80049b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	603b      	str	r3, [r7, #0]
}
 80049c6:	bf00      	nop
 80049c8:	e7fe      	b.n	80049c8 <vPortValidateInterruptPriority+0x60>
	}
 80049ca:	bf00      	nop
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	e000e3f0 	.word	0xe000e3f0
 80049dc:	20000e6c 	.word	0x20000e6c
 80049e0:	e000ed0c 	.word	0xe000ed0c
 80049e4:	20000e70 	.word	0x20000e70

080049e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	; 0x28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80049f4:	f7fe fd96 	bl	8003524 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80049f8:	4b5b      	ldr	r3, [pc, #364]	; (8004b68 <pvPortMalloc+0x180>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a00:	f000 f920 	bl	8004c44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a04:	4b59      	ldr	r3, [pc, #356]	; (8004b6c <pvPortMalloc+0x184>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f040 8093 	bne.w	8004b38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01d      	beq.n	8004a54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a18:	2208      	movs	r2, #8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d014      	beq.n	8004a54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f023 0307 	bic.w	r3, r3, #7
 8004a30:	3308      	adds	r3, #8
 8004a32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <pvPortMalloc+0x6c>
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	617b      	str	r3, [r7, #20]
}
 8004a50:	bf00      	nop
 8004a52:	e7fe      	b.n	8004a52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d06e      	beq.n	8004b38 <pvPortMalloc+0x150>
 8004a5a:	4b45      	ldr	r3, [pc, #276]	; (8004b70 <pvPortMalloc+0x188>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d869      	bhi.n	8004b38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a64:	4b43      	ldr	r3, [pc, #268]	; (8004b74 <pvPortMalloc+0x18c>)
 8004a66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a68:	4b42      	ldr	r3, [pc, #264]	; (8004b74 <pvPortMalloc+0x18c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a6e:	e004      	b.n	8004a7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d903      	bls.n	8004a8c <pvPortMalloc+0xa4>
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1f1      	bne.n	8004a70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a8c:	4b36      	ldr	r3, [pc, #216]	; (8004b68 <pvPortMalloc+0x180>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d050      	beq.n	8004b38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2208      	movs	r2, #8
 8004a9c:	4413      	add	r3, r2
 8004a9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	1ad2      	subs	r2, r2, r3
 8004ab0:	2308      	movs	r3, #8
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d91f      	bls.n	8004af8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4413      	add	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <pvPortMalloc+0xf8>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	613b      	str	r3, [r7, #16]
}
 8004adc:	bf00      	nop
 8004ade:	e7fe      	b.n	8004ade <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	1ad2      	subs	r2, r2, r3
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004af2:	69b8      	ldr	r0, [r7, #24]
 8004af4:	f000 f908 	bl	8004d08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004af8:	4b1d      	ldr	r3, [pc, #116]	; (8004b70 <pvPortMalloc+0x188>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	4a1b      	ldr	r2, [pc, #108]	; (8004b70 <pvPortMalloc+0x188>)
 8004b04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b06:	4b1a      	ldr	r3, [pc, #104]	; (8004b70 <pvPortMalloc+0x188>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	4b1b      	ldr	r3, [pc, #108]	; (8004b78 <pvPortMalloc+0x190>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d203      	bcs.n	8004b1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b12:	4b17      	ldr	r3, [pc, #92]	; (8004b70 <pvPortMalloc+0x188>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a18      	ldr	r2, [pc, #96]	; (8004b78 <pvPortMalloc+0x190>)
 8004b18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <pvPortMalloc+0x184>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b2e:	4b13      	ldr	r3, [pc, #76]	; (8004b7c <pvPortMalloc+0x194>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3301      	adds	r3, #1
 8004b34:	4a11      	ldr	r2, [pc, #68]	; (8004b7c <pvPortMalloc+0x194>)
 8004b36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b38:	f7fe fd02 	bl	8003540 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <pvPortMalloc+0x174>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	60fb      	str	r3, [r7, #12]
}
 8004b58:	bf00      	nop
 8004b5a:	e7fe      	b.n	8004b5a <pvPortMalloc+0x172>
	return pvReturn;
 8004b5c:	69fb      	ldr	r3, [r7, #28]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3728      	adds	r7, #40	; 0x28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20004a7c 	.word	0x20004a7c
 8004b6c:	20004a90 	.word	0x20004a90
 8004b70:	20004a80 	.word	0x20004a80
 8004b74:	20004a74 	.word	0x20004a74
 8004b78:	20004a84 	.word	0x20004a84
 8004b7c:	20004a88 	.word	0x20004a88

08004b80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d04d      	beq.n	8004c2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b92:	2308      	movs	r3, #8
 8004b94:	425b      	negs	r3, r3
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4413      	add	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	4b24      	ldr	r3, [pc, #144]	; (8004c38 <vPortFree+0xb8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <vPortFree+0x44>
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	60fb      	str	r3, [r7, #12]
}
 8004bc0:	bf00      	nop
 8004bc2:	e7fe      	b.n	8004bc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00a      	beq.n	8004be2 <vPortFree+0x62>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	60bb      	str	r3, [r7, #8]
}
 8004bde:	bf00      	nop
 8004be0:	e7fe      	b.n	8004be0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	4b14      	ldr	r3, [pc, #80]	; (8004c38 <vPortFree+0xb8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01e      	beq.n	8004c2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d11a      	bne.n	8004c2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	4b0e      	ldr	r3, [pc, #56]	; (8004c38 <vPortFree+0xb8>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	43db      	mvns	r3, r3
 8004c02:	401a      	ands	r2, r3
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c08:	f7fe fc8c 	bl	8003524 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <vPortFree+0xbc>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4413      	add	r3, r2
 8004c16:	4a09      	ldr	r2, [pc, #36]	; (8004c3c <vPortFree+0xbc>)
 8004c18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c1a:	6938      	ldr	r0, [r7, #16]
 8004c1c:	f000 f874 	bl	8004d08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c20:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <vPortFree+0xc0>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3301      	adds	r3, #1
 8004c26:	4a06      	ldr	r2, [pc, #24]	; (8004c40 <vPortFree+0xc0>)
 8004c28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c2a:	f7fe fc89 	bl	8003540 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c2e:	bf00      	nop
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20004a90 	.word	0x20004a90
 8004c3c:	20004a80 	.word	0x20004a80
 8004c40:	20004a8c 	.word	0x20004a8c

08004c44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c50:	4b27      	ldr	r3, [pc, #156]	; (8004cf0 <prvHeapInit+0xac>)
 8004c52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00c      	beq.n	8004c78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3307      	adds	r3, #7
 8004c62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f023 0307 	bic.w	r3, r3, #7
 8004c6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	4a1f      	ldr	r2, [pc, #124]	; (8004cf0 <prvHeapInit+0xac>)
 8004c74:	4413      	add	r3, r2
 8004c76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c7c:	4a1d      	ldr	r2, [pc, #116]	; (8004cf4 <prvHeapInit+0xb0>)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c82:	4b1c      	ldr	r3, [pc, #112]	; (8004cf4 <prvHeapInit+0xb0>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c90:	2208      	movs	r2, #8
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	1a9b      	subs	r3, r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0307 	bic.w	r3, r3, #7
 8004c9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4a15      	ldr	r2, [pc, #84]	; (8004cf8 <prvHeapInit+0xb4>)
 8004ca4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ca6:	4b14      	ldr	r3, [pc, #80]	; (8004cf8 <prvHeapInit+0xb4>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2200      	movs	r2, #0
 8004cac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cae:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <prvHeapInit+0xb4>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	1ad2      	subs	r2, r2, r3
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cc4:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <prvHeapInit+0xb4>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	4a0a      	ldr	r2, [pc, #40]	; (8004cfc <prvHeapInit+0xb8>)
 8004cd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <prvHeapInit+0xbc>)
 8004cda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cdc:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <prvHeapInit+0xc0>)
 8004cde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ce2:	601a      	str	r2, [r3, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	20000e74 	.word	0x20000e74
 8004cf4:	20004a74 	.word	0x20004a74
 8004cf8:	20004a7c 	.word	0x20004a7c
 8004cfc:	20004a84 	.word	0x20004a84
 8004d00:	20004a80 	.word	0x20004a80
 8004d04:	20004a90 	.word	0x20004a90

08004d08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d10:	4b28      	ldr	r3, [pc, #160]	; (8004db4 <prvInsertBlockIntoFreeList+0xac>)
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	e002      	b.n	8004d1c <prvInsertBlockIntoFreeList+0x14>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d8f7      	bhi.n	8004d16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	4413      	add	r3, r2
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d108      	bne.n	8004d4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	441a      	add	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	441a      	add	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d118      	bne.n	8004d90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <prvInsertBlockIntoFreeList+0xb0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d00d      	beq.n	8004d86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	441a      	add	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	e008      	b.n	8004d98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d86:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <prvInsertBlockIntoFreeList+0xb0>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e003      	b.n	8004d98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d002      	beq.n	8004da6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004da6:	bf00      	nop
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	20004a74 	.word	0x20004a74
 8004db8:	20004a7c 	.word	0x20004a7c

08004dbc <std>:
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	b510      	push	{r4, lr}
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	e9c0 3300 	strd	r3, r3, [r0]
 8004dc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dca:	6083      	str	r3, [r0, #8]
 8004dcc:	8181      	strh	r1, [r0, #12]
 8004dce:	6643      	str	r3, [r0, #100]	; 0x64
 8004dd0:	81c2      	strh	r2, [r0, #14]
 8004dd2:	6183      	str	r3, [r0, #24]
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	2208      	movs	r2, #8
 8004dd8:	305c      	adds	r0, #92	; 0x5c
 8004dda:	f000 f926 	bl	800502a <memset>
 8004dde:	4b0d      	ldr	r3, [pc, #52]	; (8004e14 <std+0x58>)
 8004de0:	6263      	str	r3, [r4, #36]	; 0x24
 8004de2:	4b0d      	ldr	r3, [pc, #52]	; (8004e18 <std+0x5c>)
 8004de4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004de6:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <std+0x60>)
 8004de8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004dea:	4b0d      	ldr	r3, [pc, #52]	; (8004e20 <std+0x64>)
 8004dec:	6323      	str	r3, [r4, #48]	; 0x30
 8004dee:	4b0d      	ldr	r3, [pc, #52]	; (8004e24 <std+0x68>)
 8004df0:	6224      	str	r4, [r4, #32]
 8004df2:	429c      	cmp	r4, r3
 8004df4:	d006      	beq.n	8004e04 <std+0x48>
 8004df6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004dfa:	4294      	cmp	r4, r2
 8004dfc:	d002      	beq.n	8004e04 <std+0x48>
 8004dfe:	33d0      	adds	r3, #208	; 0xd0
 8004e00:	429c      	cmp	r4, r3
 8004e02:	d105      	bne.n	8004e10 <std+0x54>
 8004e04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e0c:	f000 b986 	b.w	800511c <__retarget_lock_init_recursive>
 8004e10:	bd10      	pop	{r4, pc}
 8004e12:	bf00      	nop
 8004e14:	08004fa5 	.word	0x08004fa5
 8004e18:	08004fc7 	.word	0x08004fc7
 8004e1c:	08004fff 	.word	0x08004fff
 8004e20:	08005023 	.word	0x08005023
 8004e24:	20004a94 	.word	0x20004a94

08004e28 <stdio_exit_handler>:
 8004e28:	4a02      	ldr	r2, [pc, #8]	; (8004e34 <stdio_exit_handler+0xc>)
 8004e2a:	4903      	ldr	r1, [pc, #12]	; (8004e38 <stdio_exit_handler+0x10>)
 8004e2c:	4803      	ldr	r0, [pc, #12]	; (8004e3c <stdio_exit_handler+0x14>)
 8004e2e:	f000 b869 	b.w	8004f04 <_fwalk_sglue>
 8004e32:	bf00      	nop
 8004e34:	20000010 	.word	0x20000010
 8004e38:	08005c95 	.word	0x08005c95
 8004e3c:	2000001c 	.word	0x2000001c

08004e40 <cleanup_stdio>:
 8004e40:	6841      	ldr	r1, [r0, #4]
 8004e42:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <cleanup_stdio+0x34>)
 8004e44:	4299      	cmp	r1, r3
 8004e46:	b510      	push	{r4, lr}
 8004e48:	4604      	mov	r4, r0
 8004e4a:	d001      	beq.n	8004e50 <cleanup_stdio+0x10>
 8004e4c:	f000 ff22 	bl	8005c94 <_fflush_r>
 8004e50:	68a1      	ldr	r1, [r4, #8]
 8004e52:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <cleanup_stdio+0x38>)
 8004e54:	4299      	cmp	r1, r3
 8004e56:	d002      	beq.n	8004e5e <cleanup_stdio+0x1e>
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f000 ff1b 	bl	8005c94 <_fflush_r>
 8004e5e:	68e1      	ldr	r1, [r4, #12]
 8004e60:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <cleanup_stdio+0x3c>)
 8004e62:	4299      	cmp	r1, r3
 8004e64:	d004      	beq.n	8004e70 <cleanup_stdio+0x30>
 8004e66:	4620      	mov	r0, r4
 8004e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e6c:	f000 bf12 	b.w	8005c94 <_fflush_r>
 8004e70:	bd10      	pop	{r4, pc}
 8004e72:	bf00      	nop
 8004e74:	20004a94 	.word	0x20004a94
 8004e78:	20004afc 	.word	0x20004afc
 8004e7c:	20004b64 	.word	0x20004b64

08004e80 <global_stdio_init.part.0>:
 8004e80:	b510      	push	{r4, lr}
 8004e82:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <global_stdio_init.part.0+0x30>)
 8004e84:	4c0b      	ldr	r4, [pc, #44]	; (8004eb4 <global_stdio_init.part.0+0x34>)
 8004e86:	4a0c      	ldr	r2, [pc, #48]	; (8004eb8 <global_stdio_init.part.0+0x38>)
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2104      	movs	r1, #4
 8004e90:	f7ff ff94 	bl	8004dbc <std>
 8004e94:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004e98:	2201      	movs	r2, #1
 8004e9a:	2109      	movs	r1, #9
 8004e9c:	f7ff ff8e 	bl	8004dbc <std>
 8004ea0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eaa:	2112      	movs	r1, #18
 8004eac:	f7ff bf86 	b.w	8004dbc <std>
 8004eb0:	20004bcc 	.word	0x20004bcc
 8004eb4:	20004a94 	.word	0x20004a94
 8004eb8:	08004e29 	.word	0x08004e29

08004ebc <__sfp_lock_acquire>:
 8004ebc:	4801      	ldr	r0, [pc, #4]	; (8004ec4 <__sfp_lock_acquire+0x8>)
 8004ebe:	f000 b92e 	b.w	800511e <__retarget_lock_acquire_recursive>
 8004ec2:	bf00      	nop
 8004ec4:	20004bd5 	.word	0x20004bd5

08004ec8 <__sfp_lock_release>:
 8004ec8:	4801      	ldr	r0, [pc, #4]	; (8004ed0 <__sfp_lock_release+0x8>)
 8004eca:	f000 b929 	b.w	8005120 <__retarget_lock_release_recursive>
 8004ece:	bf00      	nop
 8004ed0:	20004bd5 	.word	0x20004bd5

08004ed4 <__sinit>:
 8004ed4:	b510      	push	{r4, lr}
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	f7ff fff0 	bl	8004ebc <__sfp_lock_acquire>
 8004edc:	6a23      	ldr	r3, [r4, #32]
 8004ede:	b11b      	cbz	r3, 8004ee8 <__sinit+0x14>
 8004ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee4:	f7ff bff0 	b.w	8004ec8 <__sfp_lock_release>
 8004ee8:	4b04      	ldr	r3, [pc, #16]	; (8004efc <__sinit+0x28>)
 8004eea:	6223      	str	r3, [r4, #32]
 8004eec:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <__sinit+0x2c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1f5      	bne.n	8004ee0 <__sinit+0xc>
 8004ef4:	f7ff ffc4 	bl	8004e80 <global_stdio_init.part.0>
 8004ef8:	e7f2      	b.n	8004ee0 <__sinit+0xc>
 8004efa:	bf00      	nop
 8004efc:	08004e41 	.word	0x08004e41
 8004f00:	20004bcc 	.word	0x20004bcc

08004f04 <_fwalk_sglue>:
 8004f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f08:	4607      	mov	r7, r0
 8004f0a:	4688      	mov	r8, r1
 8004f0c:	4614      	mov	r4, r2
 8004f0e:	2600      	movs	r6, #0
 8004f10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f14:	f1b9 0901 	subs.w	r9, r9, #1
 8004f18:	d505      	bpl.n	8004f26 <_fwalk_sglue+0x22>
 8004f1a:	6824      	ldr	r4, [r4, #0]
 8004f1c:	2c00      	cmp	r4, #0
 8004f1e:	d1f7      	bne.n	8004f10 <_fwalk_sglue+0xc>
 8004f20:	4630      	mov	r0, r6
 8004f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f26:	89ab      	ldrh	r3, [r5, #12]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d907      	bls.n	8004f3c <_fwalk_sglue+0x38>
 8004f2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f30:	3301      	adds	r3, #1
 8004f32:	d003      	beq.n	8004f3c <_fwalk_sglue+0x38>
 8004f34:	4629      	mov	r1, r5
 8004f36:	4638      	mov	r0, r7
 8004f38:	47c0      	blx	r8
 8004f3a:	4306      	orrs	r6, r0
 8004f3c:	3568      	adds	r5, #104	; 0x68
 8004f3e:	e7e9      	b.n	8004f14 <_fwalk_sglue+0x10>

08004f40 <iprintf>:
 8004f40:	b40f      	push	{r0, r1, r2, r3}
 8004f42:	b507      	push	{r0, r1, r2, lr}
 8004f44:	4906      	ldr	r1, [pc, #24]	; (8004f60 <iprintf+0x20>)
 8004f46:	ab04      	add	r3, sp, #16
 8004f48:	6808      	ldr	r0, [r1, #0]
 8004f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f4e:	6881      	ldr	r1, [r0, #8]
 8004f50:	9301      	str	r3, [sp, #4]
 8004f52:	f000 fb6f 	bl	8005634 <_vfiprintf_r>
 8004f56:	b003      	add	sp, #12
 8004f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f5c:	b004      	add	sp, #16
 8004f5e:	4770      	bx	lr
 8004f60:	20000068 	.word	0x20000068

08004f64 <siprintf>:
 8004f64:	b40e      	push	{r1, r2, r3}
 8004f66:	b500      	push	{lr}
 8004f68:	b09c      	sub	sp, #112	; 0x70
 8004f6a:	ab1d      	add	r3, sp, #116	; 0x74
 8004f6c:	9002      	str	r0, [sp, #8]
 8004f6e:	9006      	str	r0, [sp, #24]
 8004f70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f74:	4809      	ldr	r0, [pc, #36]	; (8004f9c <siprintf+0x38>)
 8004f76:	9107      	str	r1, [sp, #28]
 8004f78:	9104      	str	r1, [sp, #16]
 8004f7a:	4909      	ldr	r1, [pc, #36]	; (8004fa0 <siprintf+0x3c>)
 8004f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f80:	9105      	str	r1, [sp, #20]
 8004f82:	6800      	ldr	r0, [r0, #0]
 8004f84:	9301      	str	r3, [sp, #4]
 8004f86:	a902      	add	r1, sp, #8
 8004f88:	f000 fa2c 	bl	80053e4 <_svfiprintf_r>
 8004f8c:	9b02      	ldr	r3, [sp, #8]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	701a      	strb	r2, [r3, #0]
 8004f92:	b01c      	add	sp, #112	; 0x70
 8004f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f98:	b003      	add	sp, #12
 8004f9a:	4770      	bx	lr
 8004f9c:	20000068 	.word	0x20000068
 8004fa0:	ffff0208 	.word	0xffff0208

08004fa4 <__sread>:
 8004fa4:	b510      	push	{r4, lr}
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fac:	f000 f868 	bl	8005080 <_read_r>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	bfab      	itete	ge
 8004fb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fb6:	89a3      	ldrhlt	r3, [r4, #12]
 8004fb8:	181b      	addge	r3, r3, r0
 8004fba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fbe:	bfac      	ite	ge
 8004fc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fc2:	81a3      	strhlt	r3, [r4, #12]
 8004fc4:	bd10      	pop	{r4, pc}

08004fc6 <__swrite>:
 8004fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fca:	461f      	mov	r7, r3
 8004fcc:	898b      	ldrh	r3, [r1, #12]
 8004fce:	05db      	lsls	r3, r3, #23
 8004fd0:	4605      	mov	r5, r0
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	4616      	mov	r6, r2
 8004fd6:	d505      	bpl.n	8004fe4 <__swrite+0x1e>
 8004fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fdc:	2302      	movs	r3, #2
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f000 f83c 	bl	800505c <_lseek_r>
 8004fe4:	89a3      	ldrh	r3, [r4, #12]
 8004fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fee:	81a3      	strh	r3, [r4, #12]
 8004ff0:	4632      	mov	r2, r6
 8004ff2:	463b      	mov	r3, r7
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffa:	f000 b853 	b.w	80050a4 <_write_r>

08004ffe <__sseek>:
 8004ffe:	b510      	push	{r4, lr}
 8005000:	460c      	mov	r4, r1
 8005002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005006:	f000 f829 	bl	800505c <_lseek_r>
 800500a:	1c43      	adds	r3, r0, #1
 800500c:	89a3      	ldrh	r3, [r4, #12]
 800500e:	bf15      	itete	ne
 8005010:	6560      	strne	r0, [r4, #84]	; 0x54
 8005012:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005016:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800501a:	81a3      	strheq	r3, [r4, #12]
 800501c:	bf18      	it	ne
 800501e:	81a3      	strhne	r3, [r4, #12]
 8005020:	bd10      	pop	{r4, pc}

08005022 <__sclose>:
 8005022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005026:	f000 b809 	b.w	800503c <_close_r>

0800502a <memset>:
 800502a:	4402      	add	r2, r0
 800502c:	4603      	mov	r3, r0
 800502e:	4293      	cmp	r3, r2
 8005030:	d100      	bne.n	8005034 <memset+0xa>
 8005032:	4770      	bx	lr
 8005034:	f803 1b01 	strb.w	r1, [r3], #1
 8005038:	e7f9      	b.n	800502e <memset+0x4>
	...

0800503c <_close_r>:
 800503c:	b538      	push	{r3, r4, r5, lr}
 800503e:	4d06      	ldr	r5, [pc, #24]	; (8005058 <_close_r+0x1c>)
 8005040:	2300      	movs	r3, #0
 8005042:	4604      	mov	r4, r0
 8005044:	4608      	mov	r0, r1
 8005046:	602b      	str	r3, [r5, #0]
 8005048:	f7fb fcf4 	bl	8000a34 <_close>
 800504c:	1c43      	adds	r3, r0, #1
 800504e:	d102      	bne.n	8005056 <_close_r+0x1a>
 8005050:	682b      	ldr	r3, [r5, #0]
 8005052:	b103      	cbz	r3, 8005056 <_close_r+0x1a>
 8005054:	6023      	str	r3, [r4, #0]
 8005056:	bd38      	pop	{r3, r4, r5, pc}
 8005058:	20004bd0 	.word	0x20004bd0

0800505c <_lseek_r>:
 800505c:	b538      	push	{r3, r4, r5, lr}
 800505e:	4d07      	ldr	r5, [pc, #28]	; (800507c <_lseek_r+0x20>)
 8005060:	4604      	mov	r4, r0
 8005062:	4608      	mov	r0, r1
 8005064:	4611      	mov	r1, r2
 8005066:	2200      	movs	r2, #0
 8005068:	602a      	str	r2, [r5, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	f7fb fd09 	bl	8000a82 <_lseek>
 8005070:	1c43      	adds	r3, r0, #1
 8005072:	d102      	bne.n	800507a <_lseek_r+0x1e>
 8005074:	682b      	ldr	r3, [r5, #0]
 8005076:	b103      	cbz	r3, 800507a <_lseek_r+0x1e>
 8005078:	6023      	str	r3, [r4, #0]
 800507a:	bd38      	pop	{r3, r4, r5, pc}
 800507c:	20004bd0 	.word	0x20004bd0

08005080 <_read_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	4d07      	ldr	r5, [pc, #28]	; (80050a0 <_read_r+0x20>)
 8005084:	4604      	mov	r4, r0
 8005086:	4608      	mov	r0, r1
 8005088:	4611      	mov	r1, r2
 800508a:	2200      	movs	r2, #0
 800508c:	602a      	str	r2, [r5, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	f7fb fc97 	bl	80009c2 <_read>
 8005094:	1c43      	adds	r3, r0, #1
 8005096:	d102      	bne.n	800509e <_read_r+0x1e>
 8005098:	682b      	ldr	r3, [r5, #0]
 800509a:	b103      	cbz	r3, 800509e <_read_r+0x1e>
 800509c:	6023      	str	r3, [r4, #0]
 800509e:	bd38      	pop	{r3, r4, r5, pc}
 80050a0:	20004bd0 	.word	0x20004bd0

080050a4 <_write_r>:
 80050a4:	b538      	push	{r3, r4, r5, lr}
 80050a6:	4d07      	ldr	r5, [pc, #28]	; (80050c4 <_write_r+0x20>)
 80050a8:	4604      	mov	r4, r0
 80050aa:	4608      	mov	r0, r1
 80050ac:	4611      	mov	r1, r2
 80050ae:	2200      	movs	r2, #0
 80050b0:	602a      	str	r2, [r5, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	f7fb fca2 	bl	80009fc <_write>
 80050b8:	1c43      	adds	r3, r0, #1
 80050ba:	d102      	bne.n	80050c2 <_write_r+0x1e>
 80050bc:	682b      	ldr	r3, [r5, #0]
 80050be:	b103      	cbz	r3, 80050c2 <_write_r+0x1e>
 80050c0:	6023      	str	r3, [r4, #0]
 80050c2:	bd38      	pop	{r3, r4, r5, pc}
 80050c4:	20004bd0 	.word	0x20004bd0

080050c8 <__errno>:
 80050c8:	4b01      	ldr	r3, [pc, #4]	; (80050d0 <__errno+0x8>)
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20000068 	.word	0x20000068

080050d4 <__libc_init_array>:
 80050d4:	b570      	push	{r4, r5, r6, lr}
 80050d6:	4d0d      	ldr	r5, [pc, #52]	; (800510c <__libc_init_array+0x38>)
 80050d8:	4c0d      	ldr	r4, [pc, #52]	; (8005110 <__libc_init_array+0x3c>)
 80050da:	1b64      	subs	r4, r4, r5
 80050dc:	10a4      	asrs	r4, r4, #2
 80050de:	2600      	movs	r6, #0
 80050e0:	42a6      	cmp	r6, r4
 80050e2:	d109      	bne.n	80050f8 <__libc_init_array+0x24>
 80050e4:	4d0b      	ldr	r5, [pc, #44]	; (8005114 <__libc_init_array+0x40>)
 80050e6:	4c0c      	ldr	r4, [pc, #48]	; (8005118 <__libc_init_array+0x44>)
 80050e8:	f000 ff78 	bl	8005fdc <_init>
 80050ec:	1b64      	subs	r4, r4, r5
 80050ee:	10a4      	asrs	r4, r4, #2
 80050f0:	2600      	movs	r6, #0
 80050f2:	42a6      	cmp	r6, r4
 80050f4:	d105      	bne.n	8005102 <__libc_init_array+0x2e>
 80050f6:	bd70      	pop	{r4, r5, r6, pc}
 80050f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050fc:	4798      	blx	r3
 80050fe:	3601      	adds	r6, #1
 8005100:	e7ee      	b.n	80050e0 <__libc_init_array+0xc>
 8005102:	f855 3b04 	ldr.w	r3, [r5], #4
 8005106:	4798      	blx	r3
 8005108:	3601      	adds	r6, #1
 800510a:	e7f2      	b.n	80050f2 <__libc_init_array+0x1e>
 800510c:	08006170 	.word	0x08006170
 8005110:	08006170 	.word	0x08006170
 8005114:	08006170 	.word	0x08006170
 8005118:	08006174 	.word	0x08006174

0800511c <__retarget_lock_init_recursive>:
 800511c:	4770      	bx	lr

0800511e <__retarget_lock_acquire_recursive>:
 800511e:	4770      	bx	lr

08005120 <__retarget_lock_release_recursive>:
 8005120:	4770      	bx	lr

08005122 <memcpy>:
 8005122:	440a      	add	r2, r1
 8005124:	4291      	cmp	r1, r2
 8005126:	f100 33ff 	add.w	r3, r0, #4294967295
 800512a:	d100      	bne.n	800512e <memcpy+0xc>
 800512c:	4770      	bx	lr
 800512e:	b510      	push	{r4, lr}
 8005130:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005134:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005138:	4291      	cmp	r1, r2
 800513a:	d1f9      	bne.n	8005130 <memcpy+0xe>
 800513c:	bd10      	pop	{r4, pc}
	...

08005140 <_free_r>:
 8005140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005142:	2900      	cmp	r1, #0
 8005144:	d044      	beq.n	80051d0 <_free_r+0x90>
 8005146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800514a:	9001      	str	r0, [sp, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	f1a1 0404 	sub.w	r4, r1, #4
 8005152:	bfb8      	it	lt
 8005154:	18e4      	addlt	r4, r4, r3
 8005156:	f000 f8df 	bl	8005318 <__malloc_lock>
 800515a:	4a1e      	ldr	r2, [pc, #120]	; (80051d4 <_free_r+0x94>)
 800515c:	9801      	ldr	r0, [sp, #4]
 800515e:	6813      	ldr	r3, [r2, #0]
 8005160:	b933      	cbnz	r3, 8005170 <_free_r+0x30>
 8005162:	6063      	str	r3, [r4, #4]
 8005164:	6014      	str	r4, [r2, #0]
 8005166:	b003      	add	sp, #12
 8005168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800516c:	f000 b8da 	b.w	8005324 <__malloc_unlock>
 8005170:	42a3      	cmp	r3, r4
 8005172:	d908      	bls.n	8005186 <_free_r+0x46>
 8005174:	6825      	ldr	r5, [r4, #0]
 8005176:	1961      	adds	r1, r4, r5
 8005178:	428b      	cmp	r3, r1
 800517a:	bf01      	itttt	eq
 800517c:	6819      	ldreq	r1, [r3, #0]
 800517e:	685b      	ldreq	r3, [r3, #4]
 8005180:	1949      	addeq	r1, r1, r5
 8005182:	6021      	streq	r1, [r4, #0]
 8005184:	e7ed      	b.n	8005162 <_free_r+0x22>
 8005186:	461a      	mov	r2, r3
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	b10b      	cbz	r3, 8005190 <_free_r+0x50>
 800518c:	42a3      	cmp	r3, r4
 800518e:	d9fa      	bls.n	8005186 <_free_r+0x46>
 8005190:	6811      	ldr	r1, [r2, #0]
 8005192:	1855      	adds	r5, r2, r1
 8005194:	42a5      	cmp	r5, r4
 8005196:	d10b      	bne.n	80051b0 <_free_r+0x70>
 8005198:	6824      	ldr	r4, [r4, #0]
 800519a:	4421      	add	r1, r4
 800519c:	1854      	adds	r4, r2, r1
 800519e:	42a3      	cmp	r3, r4
 80051a0:	6011      	str	r1, [r2, #0]
 80051a2:	d1e0      	bne.n	8005166 <_free_r+0x26>
 80051a4:	681c      	ldr	r4, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	6053      	str	r3, [r2, #4]
 80051aa:	440c      	add	r4, r1
 80051ac:	6014      	str	r4, [r2, #0]
 80051ae:	e7da      	b.n	8005166 <_free_r+0x26>
 80051b0:	d902      	bls.n	80051b8 <_free_r+0x78>
 80051b2:	230c      	movs	r3, #12
 80051b4:	6003      	str	r3, [r0, #0]
 80051b6:	e7d6      	b.n	8005166 <_free_r+0x26>
 80051b8:	6825      	ldr	r5, [r4, #0]
 80051ba:	1961      	adds	r1, r4, r5
 80051bc:	428b      	cmp	r3, r1
 80051be:	bf04      	itt	eq
 80051c0:	6819      	ldreq	r1, [r3, #0]
 80051c2:	685b      	ldreq	r3, [r3, #4]
 80051c4:	6063      	str	r3, [r4, #4]
 80051c6:	bf04      	itt	eq
 80051c8:	1949      	addeq	r1, r1, r5
 80051ca:	6021      	streq	r1, [r4, #0]
 80051cc:	6054      	str	r4, [r2, #4]
 80051ce:	e7ca      	b.n	8005166 <_free_r+0x26>
 80051d0:	b003      	add	sp, #12
 80051d2:	bd30      	pop	{r4, r5, pc}
 80051d4:	20004bd8 	.word	0x20004bd8

080051d8 <sbrk_aligned>:
 80051d8:	b570      	push	{r4, r5, r6, lr}
 80051da:	4e0e      	ldr	r6, [pc, #56]	; (8005214 <sbrk_aligned+0x3c>)
 80051dc:	460c      	mov	r4, r1
 80051de:	6831      	ldr	r1, [r6, #0]
 80051e0:	4605      	mov	r5, r0
 80051e2:	b911      	cbnz	r1, 80051ea <sbrk_aligned+0x12>
 80051e4:	f000 fe2e 	bl	8005e44 <_sbrk_r>
 80051e8:	6030      	str	r0, [r6, #0]
 80051ea:	4621      	mov	r1, r4
 80051ec:	4628      	mov	r0, r5
 80051ee:	f000 fe29 	bl	8005e44 <_sbrk_r>
 80051f2:	1c43      	adds	r3, r0, #1
 80051f4:	d00a      	beq.n	800520c <sbrk_aligned+0x34>
 80051f6:	1cc4      	adds	r4, r0, #3
 80051f8:	f024 0403 	bic.w	r4, r4, #3
 80051fc:	42a0      	cmp	r0, r4
 80051fe:	d007      	beq.n	8005210 <sbrk_aligned+0x38>
 8005200:	1a21      	subs	r1, r4, r0
 8005202:	4628      	mov	r0, r5
 8005204:	f000 fe1e 	bl	8005e44 <_sbrk_r>
 8005208:	3001      	adds	r0, #1
 800520a:	d101      	bne.n	8005210 <sbrk_aligned+0x38>
 800520c:	f04f 34ff 	mov.w	r4, #4294967295
 8005210:	4620      	mov	r0, r4
 8005212:	bd70      	pop	{r4, r5, r6, pc}
 8005214:	20004bdc 	.word	0x20004bdc

08005218 <_malloc_r>:
 8005218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800521c:	1ccd      	adds	r5, r1, #3
 800521e:	f025 0503 	bic.w	r5, r5, #3
 8005222:	3508      	adds	r5, #8
 8005224:	2d0c      	cmp	r5, #12
 8005226:	bf38      	it	cc
 8005228:	250c      	movcc	r5, #12
 800522a:	2d00      	cmp	r5, #0
 800522c:	4607      	mov	r7, r0
 800522e:	db01      	blt.n	8005234 <_malloc_r+0x1c>
 8005230:	42a9      	cmp	r1, r5
 8005232:	d905      	bls.n	8005240 <_malloc_r+0x28>
 8005234:	230c      	movs	r3, #12
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	2600      	movs	r6, #0
 800523a:	4630      	mov	r0, r6
 800523c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005240:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005314 <_malloc_r+0xfc>
 8005244:	f000 f868 	bl	8005318 <__malloc_lock>
 8005248:	f8d8 3000 	ldr.w	r3, [r8]
 800524c:	461c      	mov	r4, r3
 800524e:	bb5c      	cbnz	r4, 80052a8 <_malloc_r+0x90>
 8005250:	4629      	mov	r1, r5
 8005252:	4638      	mov	r0, r7
 8005254:	f7ff ffc0 	bl	80051d8 <sbrk_aligned>
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	4604      	mov	r4, r0
 800525c:	d155      	bne.n	800530a <_malloc_r+0xf2>
 800525e:	f8d8 4000 	ldr.w	r4, [r8]
 8005262:	4626      	mov	r6, r4
 8005264:	2e00      	cmp	r6, #0
 8005266:	d145      	bne.n	80052f4 <_malloc_r+0xdc>
 8005268:	2c00      	cmp	r4, #0
 800526a:	d048      	beq.n	80052fe <_malloc_r+0xe6>
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	4631      	mov	r1, r6
 8005270:	4638      	mov	r0, r7
 8005272:	eb04 0903 	add.w	r9, r4, r3
 8005276:	f000 fde5 	bl	8005e44 <_sbrk_r>
 800527a:	4581      	cmp	r9, r0
 800527c:	d13f      	bne.n	80052fe <_malloc_r+0xe6>
 800527e:	6821      	ldr	r1, [r4, #0]
 8005280:	1a6d      	subs	r5, r5, r1
 8005282:	4629      	mov	r1, r5
 8005284:	4638      	mov	r0, r7
 8005286:	f7ff ffa7 	bl	80051d8 <sbrk_aligned>
 800528a:	3001      	adds	r0, #1
 800528c:	d037      	beq.n	80052fe <_malloc_r+0xe6>
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	442b      	add	r3, r5
 8005292:	6023      	str	r3, [r4, #0]
 8005294:	f8d8 3000 	ldr.w	r3, [r8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d038      	beq.n	800530e <_malloc_r+0xf6>
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	42a2      	cmp	r2, r4
 80052a0:	d12b      	bne.n	80052fa <_malloc_r+0xe2>
 80052a2:	2200      	movs	r2, #0
 80052a4:	605a      	str	r2, [r3, #4]
 80052a6:	e00f      	b.n	80052c8 <_malloc_r+0xb0>
 80052a8:	6822      	ldr	r2, [r4, #0]
 80052aa:	1b52      	subs	r2, r2, r5
 80052ac:	d41f      	bmi.n	80052ee <_malloc_r+0xd6>
 80052ae:	2a0b      	cmp	r2, #11
 80052b0:	d917      	bls.n	80052e2 <_malloc_r+0xca>
 80052b2:	1961      	adds	r1, r4, r5
 80052b4:	42a3      	cmp	r3, r4
 80052b6:	6025      	str	r5, [r4, #0]
 80052b8:	bf18      	it	ne
 80052ba:	6059      	strne	r1, [r3, #4]
 80052bc:	6863      	ldr	r3, [r4, #4]
 80052be:	bf08      	it	eq
 80052c0:	f8c8 1000 	streq.w	r1, [r8]
 80052c4:	5162      	str	r2, [r4, r5]
 80052c6:	604b      	str	r3, [r1, #4]
 80052c8:	4638      	mov	r0, r7
 80052ca:	f104 060b 	add.w	r6, r4, #11
 80052ce:	f000 f829 	bl	8005324 <__malloc_unlock>
 80052d2:	f026 0607 	bic.w	r6, r6, #7
 80052d6:	1d23      	adds	r3, r4, #4
 80052d8:	1af2      	subs	r2, r6, r3
 80052da:	d0ae      	beq.n	800523a <_malloc_r+0x22>
 80052dc:	1b9b      	subs	r3, r3, r6
 80052de:	50a3      	str	r3, [r4, r2]
 80052e0:	e7ab      	b.n	800523a <_malloc_r+0x22>
 80052e2:	42a3      	cmp	r3, r4
 80052e4:	6862      	ldr	r2, [r4, #4]
 80052e6:	d1dd      	bne.n	80052a4 <_malloc_r+0x8c>
 80052e8:	f8c8 2000 	str.w	r2, [r8]
 80052ec:	e7ec      	b.n	80052c8 <_malloc_r+0xb0>
 80052ee:	4623      	mov	r3, r4
 80052f0:	6864      	ldr	r4, [r4, #4]
 80052f2:	e7ac      	b.n	800524e <_malloc_r+0x36>
 80052f4:	4634      	mov	r4, r6
 80052f6:	6876      	ldr	r6, [r6, #4]
 80052f8:	e7b4      	b.n	8005264 <_malloc_r+0x4c>
 80052fa:	4613      	mov	r3, r2
 80052fc:	e7cc      	b.n	8005298 <_malloc_r+0x80>
 80052fe:	230c      	movs	r3, #12
 8005300:	603b      	str	r3, [r7, #0]
 8005302:	4638      	mov	r0, r7
 8005304:	f000 f80e 	bl	8005324 <__malloc_unlock>
 8005308:	e797      	b.n	800523a <_malloc_r+0x22>
 800530a:	6025      	str	r5, [r4, #0]
 800530c:	e7dc      	b.n	80052c8 <_malloc_r+0xb0>
 800530e:	605b      	str	r3, [r3, #4]
 8005310:	deff      	udf	#255	; 0xff
 8005312:	bf00      	nop
 8005314:	20004bd8 	.word	0x20004bd8

08005318 <__malloc_lock>:
 8005318:	4801      	ldr	r0, [pc, #4]	; (8005320 <__malloc_lock+0x8>)
 800531a:	f7ff bf00 	b.w	800511e <__retarget_lock_acquire_recursive>
 800531e:	bf00      	nop
 8005320:	20004bd4 	.word	0x20004bd4

08005324 <__malloc_unlock>:
 8005324:	4801      	ldr	r0, [pc, #4]	; (800532c <__malloc_unlock+0x8>)
 8005326:	f7ff befb 	b.w	8005120 <__retarget_lock_release_recursive>
 800532a:	bf00      	nop
 800532c:	20004bd4 	.word	0x20004bd4

08005330 <__ssputs_r>:
 8005330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005334:	688e      	ldr	r6, [r1, #8]
 8005336:	461f      	mov	r7, r3
 8005338:	42be      	cmp	r6, r7
 800533a:	680b      	ldr	r3, [r1, #0]
 800533c:	4682      	mov	sl, r0
 800533e:	460c      	mov	r4, r1
 8005340:	4690      	mov	r8, r2
 8005342:	d82c      	bhi.n	800539e <__ssputs_r+0x6e>
 8005344:	898a      	ldrh	r2, [r1, #12]
 8005346:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800534a:	d026      	beq.n	800539a <__ssputs_r+0x6a>
 800534c:	6965      	ldr	r5, [r4, #20]
 800534e:	6909      	ldr	r1, [r1, #16]
 8005350:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005354:	eba3 0901 	sub.w	r9, r3, r1
 8005358:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800535c:	1c7b      	adds	r3, r7, #1
 800535e:	444b      	add	r3, r9
 8005360:	106d      	asrs	r5, r5, #1
 8005362:	429d      	cmp	r5, r3
 8005364:	bf38      	it	cc
 8005366:	461d      	movcc	r5, r3
 8005368:	0553      	lsls	r3, r2, #21
 800536a:	d527      	bpl.n	80053bc <__ssputs_r+0x8c>
 800536c:	4629      	mov	r1, r5
 800536e:	f7ff ff53 	bl	8005218 <_malloc_r>
 8005372:	4606      	mov	r6, r0
 8005374:	b360      	cbz	r0, 80053d0 <__ssputs_r+0xa0>
 8005376:	6921      	ldr	r1, [r4, #16]
 8005378:	464a      	mov	r2, r9
 800537a:	f7ff fed2 	bl	8005122 <memcpy>
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005388:	81a3      	strh	r3, [r4, #12]
 800538a:	6126      	str	r6, [r4, #16]
 800538c:	6165      	str	r5, [r4, #20]
 800538e:	444e      	add	r6, r9
 8005390:	eba5 0509 	sub.w	r5, r5, r9
 8005394:	6026      	str	r6, [r4, #0]
 8005396:	60a5      	str	r5, [r4, #8]
 8005398:	463e      	mov	r6, r7
 800539a:	42be      	cmp	r6, r7
 800539c:	d900      	bls.n	80053a0 <__ssputs_r+0x70>
 800539e:	463e      	mov	r6, r7
 80053a0:	6820      	ldr	r0, [r4, #0]
 80053a2:	4632      	mov	r2, r6
 80053a4:	4641      	mov	r1, r8
 80053a6:	f000 fd33 	bl	8005e10 <memmove>
 80053aa:	68a3      	ldr	r3, [r4, #8]
 80053ac:	1b9b      	subs	r3, r3, r6
 80053ae:	60a3      	str	r3, [r4, #8]
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	4433      	add	r3, r6
 80053b4:	6023      	str	r3, [r4, #0]
 80053b6:	2000      	movs	r0, #0
 80053b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053bc:	462a      	mov	r2, r5
 80053be:	f000 fd51 	bl	8005e64 <_realloc_r>
 80053c2:	4606      	mov	r6, r0
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d1e0      	bne.n	800538a <__ssputs_r+0x5a>
 80053c8:	6921      	ldr	r1, [r4, #16]
 80053ca:	4650      	mov	r0, sl
 80053cc:	f7ff feb8 	bl	8005140 <_free_r>
 80053d0:	230c      	movs	r3, #12
 80053d2:	f8ca 3000 	str.w	r3, [sl]
 80053d6:	89a3      	ldrh	r3, [r4, #12]
 80053d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053dc:	81a3      	strh	r3, [r4, #12]
 80053de:	f04f 30ff 	mov.w	r0, #4294967295
 80053e2:	e7e9      	b.n	80053b8 <__ssputs_r+0x88>

080053e4 <_svfiprintf_r>:
 80053e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e8:	4698      	mov	r8, r3
 80053ea:	898b      	ldrh	r3, [r1, #12]
 80053ec:	061b      	lsls	r3, r3, #24
 80053ee:	b09d      	sub	sp, #116	; 0x74
 80053f0:	4607      	mov	r7, r0
 80053f2:	460d      	mov	r5, r1
 80053f4:	4614      	mov	r4, r2
 80053f6:	d50e      	bpl.n	8005416 <_svfiprintf_r+0x32>
 80053f8:	690b      	ldr	r3, [r1, #16]
 80053fa:	b963      	cbnz	r3, 8005416 <_svfiprintf_r+0x32>
 80053fc:	2140      	movs	r1, #64	; 0x40
 80053fe:	f7ff ff0b 	bl	8005218 <_malloc_r>
 8005402:	6028      	str	r0, [r5, #0]
 8005404:	6128      	str	r0, [r5, #16]
 8005406:	b920      	cbnz	r0, 8005412 <_svfiprintf_r+0x2e>
 8005408:	230c      	movs	r3, #12
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	f04f 30ff 	mov.w	r0, #4294967295
 8005410:	e0d0      	b.n	80055b4 <_svfiprintf_r+0x1d0>
 8005412:	2340      	movs	r3, #64	; 0x40
 8005414:	616b      	str	r3, [r5, #20]
 8005416:	2300      	movs	r3, #0
 8005418:	9309      	str	r3, [sp, #36]	; 0x24
 800541a:	2320      	movs	r3, #32
 800541c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005420:	f8cd 800c 	str.w	r8, [sp, #12]
 8005424:	2330      	movs	r3, #48	; 0x30
 8005426:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80055cc <_svfiprintf_r+0x1e8>
 800542a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800542e:	f04f 0901 	mov.w	r9, #1
 8005432:	4623      	mov	r3, r4
 8005434:	469a      	mov	sl, r3
 8005436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800543a:	b10a      	cbz	r2, 8005440 <_svfiprintf_r+0x5c>
 800543c:	2a25      	cmp	r2, #37	; 0x25
 800543e:	d1f9      	bne.n	8005434 <_svfiprintf_r+0x50>
 8005440:	ebba 0b04 	subs.w	fp, sl, r4
 8005444:	d00b      	beq.n	800545e <_svfiprintf_r+0x7a>
 8005446:	465b      	mov	r3, fp
 8005448:	4622      	mov	r2, r4
 800544a:	4629      	mov	r1, r5
 800544c:	4638      	mov	r0, r7
 800544e:	f7ff ff6f 	bl	8005330 <__ssputs_r>
 8005452:	3001      	adds	r0, #1
 8005454:	f000 80a9 	beq.w	80055aa <_svfiprintf_r+0x1c6>
 8005458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800545a:	445a      	add	r2, fp
 800545c:	9209      	str	r2, [sp, #36]	; 0x24
 800545e:	f89a 3000 	ldrb.w	r3, [sl]
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 80a1 	beq.w	80055aa <_svfiprintf_r+0x1c6>
 8005468:	2300      	movs	r3, #0
 800546a:	f04f 32ff 	mov.w	r2, #4294967295
 800546e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005472:	f10a 0a01 	add.w	sl, sl, #1
 8005476:	9304      	str	r3, [sp, #16]
 8005478:	9307      	str	r3, [sp, #28]
 800547a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800547e:	931a      	str	r3, [sp, #104]	; 0x68
 8005480:	4654      	mov	r4, sl
 8005482:	2205      	movs	r2, #5
 8005484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005488:	4850      	ldr	r0, [pc, #320]	; (80055cc <_svfiprintf_r+0x1e8>)
 800548a:	f7fa fec1 	bl	8000210 <memchr>
 800548e:	9a04      	ldr	r2, [sp, #16]
 8005490:	b9d8      	cbnz	r0, 80054ca <_svfiprintf_r+0xe6>
 8005492:	06d0      	lsls	r0, r2, #27
 8005494:	bf44      	itt	mi
 8005496:	2320      	movmi	r3, #32
 8005498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800549c:	0711      	lsls	r1, r2, #28
 800549e:	bf44      	itt	mi
 80054a0:	232b      	movmi	r3, #43	; 0x2b
 80054a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054a6:	f89a 3000 	ldrb.w	r3, [sl]
 80054aa:	2b2a      	cmp	r3, #42	; 0x2a
 80054ac:	d015      	beq.n	80054da <_svfiprintf_r+0xf6>
 80054ae:	9a07      	ldr	r2, [sp, #28]
 80054b0:	4654      	mov	r4, sl
 80054b2:	2000      	movs	r0, #0
 80054b4:	f04f 0c0a 	mov.w	ip, #10
 80054b8:	4621      	mov	r1, r4
 80054ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054be:	3b30      	subs	r3, #48	; 0x30
 80054c0:	2b09      	cmp	r3, #9
 80054c2:	d94d      	bls.n	8005560 <_svfiprintf_r+0x17c>
 80054c4:	b1b0      	cbz	r0, 80054f4 <_svfiprintf_r+0x110>
 80054c6:	9207      	str	r2, [sp, #28]
 80054c8:	e014      	b.n	80054f4 <_svfiprintf_r+0x110>
 80054ca:	eba0 0308 	sub.w	r3, r0, r8
 80054ce:	fa09 f303 	lsl.w	r3, r9, r3
 80054d2:	4313      	orrs	r3, r2
 80054d4:	9304      	str	r3, [sp, #16]
 80054d6:	46a2      	mov	sl, r4
 80054d8:	e7d2      	b.n	8005480 <_svfiprintf_r+0x9c>
 80054da:	9b03      	ldr	r3, [sp, #12]
 80054dc:	1d19      	adds	r1, r3, #4
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	9103      	str	r1, [sp, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bfbb      	ittet	lt
 80054e6:	425b      	neglt	r3, r3
 80054e8:	f042 0202 	orrlt.w	r2, r2, #2
 80054ec:	9307      	strge	r3, [sp, #28]
 80054ee:	9307      	strlt	r3, [sp, #28]
 80054f0:	bfb8      	it	lt
 80054f2:	9204      	strlt	r2, [sp, #16]
 80054f4:	7823      	ldrb	r3, [r4, #0]
 80054f6:	2b2e      	cmp	r3, #46	; 0x2e
 80054f8:	d10c      	bne.n	8005514 <_svfiprintf_r+0x130>
 80054fa:	7863      	ldrb	r3, [r4, #1]
 80054fc:	2b2a      	cmp	r3, #42	; 0x2a
 80054fe:	d134      	bne.n	800556a <_svfiprintf_r+0x186>
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	1d1a      	adds	r2, r3, #4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	9203      	str	r2, [sp, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	bfb8      	it	lt
 800550c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005510:	3402      	adds	r4, #2
 8005512:	9305      	str	r3, [sp, #20]
 8005514:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80055dc <_svfiprintf_r+0x1f8>
 8005518:	7821      	ldrb	r1, [r4, #0]
 800551a:	2203      	movs	r2, #3
 800551c:	4650      	mov	r0, sl
 800551e:	f7fa fe77 	bl	8000210 <memchr>
 8005522:	b138      	cbz	r0, 8005534 <_svfiprintf_r+0x150>
 8005524:	9b04      	ldr	r3, [sp, #16]
 8005526:	eba0 000a 	sub.w	r0, r0, sl
 800552a:	2240      	movs	r2, #64	; 0x40
 800552c:	4082      	lsls	r2, r0
 800552e:	4313      	orrs	r3, r2
 8005530:	3401      	adds	r4, #1
 8005532:	9304      	str	r3, [sp, #16]
 8005534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005538:	4825      	ldr	r0, [pc, #148]	; (80055d0 <_svfiprintf_r+0x1ec>)
 800553a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800553e:	2206      	movs	r2, #6
 8005540:	f7fa fe66 	bl	8000210 <memchr>
 8005544:	2800      	cmp	r0, #0
 8005546:	d038      	beq.n	80055ba <_svfiprintf_r+0x1d6>
 8005548:	4b22      	ldr	r3, [pc, #136]	; (80055d4 <_svfiprintf_r+0x1f0>)
 800554a:	bb1b      	cbnz	r3, 8005594 <_svfiprintf_r+0x1b0>
 800554c:	9b03      	ldr	r3, [sp, #12]
 800554e:	3307      	adds	r3, #7
 8005550:	f023 0307 	bic.w	r3, r3, #7
 8005554:	3308      	adds	r3, #8
 8005556:	9303      	str	r3, [sp, #12]
 8005558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800555a:	4433      	add	r3, r6
 800555c:	9309      	str	r3, [sp, #36]	; 0x24
 800555e:	e768      	b.n	8005432 <_svfiprintf_r+0x4e>
 8005560:	fb0c 3202 	mla	r2, ip, r2, r3
 8005564:	460c      	mov	r4, r1
 8005566:	2001      	movs	r0, #1
 8005568:	e7a6      	b.n	80054b8 <_svfiprintf_r+0xd4>
 800556a:	2300      	movs	r3, #0
 800556c:	3401      	adds	r4, #1
 800556e:	9305      	str	r3, [sp, #20]
 8005570:	4619      	mov	r1, r3
 8005572:	f04f 0c0a 	mov.w	ip, #10
 8005576:	4620      	mov	r0, r4
 8005578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800557c:	3a30      	subs	r2, #48	; 0x30
 800557e:	2a09      	cmp	r2, #9
 8005580:	d903      	bls.n	800558a <_svfiprintf_r+0x1a6>
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0c6      	beq.n	8005514 <_svfiprintf_r+0x130>
 8005586:	9105      	str	r1, [sp, #20]
 8005588:	e7c4      	b.n	8005514 <_svfiprintf_r+0x130>
 800558a:	fb0c 2101 	mla	r1, ip, r1, r2
 800558e:	4604      	mov	r4, r0
 8005590:	2301      	movs	r3, #1
 8005592:	e7f0      	b.n	8005576 <_svfiprintf_r+0x192>
 8005594:	ab03      	add	r3, sp, #12
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	462a      	mov	r2, r5
 800559a:	4b0f      	ldr	r3, [pc, #60]	; (80055d8 <_svfiprintf_r+0x1f4>)
 800559c:	a904      	add	r1, sp, #16
 800559e:	4638      	mov	r0, r7
 80055a0:	f3af 8000 	nop.w
 80055a4:	1c42      	adds	r2, r0, #1
 80055a6:	4606      	mov	r6, r0
 80055a8:	d1d6      	bne.n	8005558 <_svfiprintf_r+0x174>
 80055aa:	89ab      	ldrh	r3, [r5, #12]
 80055ac:	065b      	lsls	r3, r3, #25
 80055ae:	f53f af2d 	bmi.w	800540c <_svfiprintf_r+0x28>
 80055b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055b4:	b01d      	add	sp, #116	; 0x74
 80055b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ba:	ab03      	add	r3, sp, #12
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	462a      	mov	r2, r5
 80055c0:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <_svfiprintf_r+0x1f4>)
 80055c2:	a904      	add	r1, sp, #16
 80055c4:	4638      	mov	r0, r7
 80055c6:	f000 f9bd 	bl	8005944 <_printf_i>
 80055ca:	e7eb      	b.n	80055a4 <_svfiprintf_r+0x1c0>
 80055cc:	08006134 	.word	0x08006134
 80055d0:	0800613e 	.word	0x0800613e
 80055d4:	00000000 	.word	0x00000000
 80055d8:	08005331 	.word	0x08005331
 80055dc:	0800613a 	.word	0x0800613a

080055e0 <__sfputc_r>:
 80055e0:	6893      	ldr	r3, [r2, #8]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	b410      	push	{r4}
 80055e8:	6093      	str	r3, [r2, #8]
 80055ea:	da08      	bge.n	80055fe <__sfputc_r+0x1e>
 80055ec:	6994      	ldr	r4, [r2, #24]
 80055ee:	42a3      	cmp	r3, r4
 80055f0:	db01      	blt.n	80055f6 <__sfputc_r+0x16>
 80055f2:	290a      	cmp	r1, #10
 80055f4:	d103      	bne.n	80055fe <__sfputc_r+0x1e>
 80055f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055fa:	f000 bb73 	b.w	8005ce4 <__swbuf_r>
 80055fe:	6813      	ldr	r3, [r2, #0]
 8005600:	1c58      	adds	r0, r3, #1
 8005602:	6010      	str	r0, [r2, #0]
 8005604:	7019      	strb	r1, [r3, #0]
 8005606:	4608      	mov	r0, r1
 8005608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800560c:	4770      	bx	lr

0800560e <__sfputs_r>:
 800560e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005610:	4606      	mov	r6, r0
 8005612:	460f      	mov	r7, r1
 8005614:	4614      	mov	r4, r2
 8005616:	18d5      	adds	r5, r2, r3
 8005618:	42ac      	cmp	r4, r5
 800561a:	d101      	bne.n	8005620 <__sfputs_r+0x12>
 800561c:	2000      	movs	r0, #0
 800561e:	e007      	b.n	8005630 <__sfputs_r+0x22>
 8005620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005624:	463a      	mov	r2, r7
 8005626:	4630      	mov	r0, r6
 8005628:	f7ff ffda 	bl	80055e0 <__sfputc_r>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d1f3      	bne.n	8005618 <__sfputs_r+0xa>
 8005630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005634 <_vfiprintf_r>:
 8005634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005638:	460d      	mov	r5, r1
 800563a:	b09d      	sub	sp, #116	; 0x74
 800563c:	4614      	mov	r4, r2
 800563e:	4698      	mov	r8, r3
 8005640:	4606      	mov	r6, r0
 8005642:	b118      	cbz	r0, 800564c <_vfiprintf_r+0x18>
 8005644:	6a03      	ldr	r3, [r0, #32]
 8005646:	b90b      	cbnz	r3, 800564c <_vfiprintf_r+0x18>
 8005648:	f7ff fc44 	bl	8004ed4 <__sinit>
 800564c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800564e:	07d9      	lsls	r1, r3, #31
 8005650:	d405      	bmi.n	800565e <_vfiprintf_r+0x2a>
 8005652:	89ab      	ldrh	r3, [r5, #12]
 8005654:	059a      	lsls	r2, r3, #22
 8005656:	d402      	bmi.n	800565e <_vfiprintf_r+0x2a>
 8005658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800565a:	f7ff fd60 	bl	800511e <__retarget_lock_acquire_recursive>
 800565e:	89ab      	ldrh	r3, [r5, #12]
 8005660:	071b      	lsls	r3, r3, #28
 8005662:	d501      	bpl.n	8005668 <_vfiprintf_r+0x34>
 8005664:	692b      	ldr	r3, [r5, #16]
 8005666:	b99b      	cbnz	r3, 8005690 <_vfiprintf_r+0x5c>
 8005668:	4629      	mov	r1, r5
 800566a:	4630      	mov	r0, r6
 800566c:	f000 fb78 	bl	8005d60 <__swsetup_r>
 8005670:	b170      	cbz	r0, 8005690 <_vfiprintf_r+0x5c>
 8005672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005674:	07dc      	lsls	r4, r3, #31
 8005676:	d504      	bpl.n	8005682 <_vfiprintf_r+0x4e>
 8005678:	f04f 30ff 	mov.w	r0, #4294967295
 800567c:	b01d      	add	sp, #116	; 0x74
 800567e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005682:	89ab      	ldrh	r3, [r5, #12]
 8005684:	0598      	lsls	r0, r3, #22
 8005686:	d4f7      	bmi.n	8005678 <_vfiprintf_r+0x44>
 8005688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800568a:	f7ff fd49 	bl	8005120 <__retarget_lock_release_recursive>
 800568e:	e7f3      	b.n	8005678 <_vfiprintf_r+0x44>
 8005690:	2300      	movs	r3, #0
 8005692:	9309      	str	r3, [sp, #36]	; 0x24
 8005694:	2320      	movs	r3, #32
 8005696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800569a:	f8cd 800c 	str.w	r8, [sp, #12]
 800569e:	2330      	movs	r3, #48	; 0x30
 80056a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005854 <_vfiprintf_r+0x220>
 80056a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056a8:	f04f 0901 	mov.w	r9, #1
 80056ac:	4623      	mov	r3, r4
 80056ae:	469a      	mov	sl, r3
 80056b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056b4:	b10a      	cbz	r2, 80056ba <_vfiprintf_r+0x86>
 80056b6:	2a25      	cmp	r2, #37	; 0x25
 80056b8:	d1f9      	bne.n	80056ae <_vfiprintf_r+0x7a>
 80056ba:	ebba 0b04 	subs.w	fp, sl, r4
 80056be:	d00b      	beq.n	80056d8 <_vfiprintf_r+0xa4>
 80056c0:	465b      	mov	r3, fp
 80056c2:	4622      	mov	r2, r4
 80056c4:	4629      	mov	r1, r5
 80056c6:	4630      	mov	r0, r6
 80056c8:	f7ff ffa1 	bl	800560e <__sfputs_r>
 80056cc:	3001      	adds	r0, #1
 80056ce:	f000 80a9 	beq.w	8005824 <_vfiprintf_r+0x1f0>
 80056d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056d4:	445a      	add	r2, fp
 80056d6:	9209      	str	r2, [sp, #36]	; 0x24
 80056d8:	f89a 3000 	ldrb.w	r3, [sl]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 80a1 	beq.w	8005824 <_vfiprintf_r+0x1f0>
 80056e2:	2300      	movs	r3, #0
 80056e4:	f04f 32ff 	mov.w	r2, #4294967295
 80056e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056ec:	f10a 0a01 	add.w	sl, sl, #1
 80056f0:	9304      	str	r3, [sp, #16]
 80056f2:	9307      	str	r3, [sp, #28]
 80056f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056f8:	931a      	str	r3, [sp, #104]	; 0x68
 80056fa:	4654      	mov	r4, sl
 80056fc:	2205      	movs	r2, #5
 80056fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005702:	4854      	ldr	r0, [pc, #336]	; (8005854 <_vfiprintf_r+0x220>)
 8005704:	f7fa fd84 	bl	8000210 <memchr>
 8005708:	9a04      	ldr	r2, [sp, #16]
 800570a:	b9d8      	cbnz	r0, 8005744 <_vfiprintf_r+0x110>
 800570c:	06d1      	lsls	r1, r2, #27
 800570e:	bf44      	itt	mi
 8005710:	2320      	movmi	r3, #32
 8005712:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005716:	0713      	lsls	r3, r2, #28
 8005718:	bf44      	itt	mi
 800571a:	232b      	movmi	r3, #43	; 0x2b
 800571c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005720:	f89a 3000 	ldrb.w	r3, [sl]
 8005724:	2b2a      	cmp	r3, #42	; 0x2a
 8005726:	d015      	beq.n	8005754 <_vfiprintf_r+0x120>
 8005728:	9a07      	ldr	r2, [sp, #28]
 800572a:	4654      	mov	r4, sl
 800572c:	2000      	movs	r0, #0
 800572e:	f04f 0c0a 	mov.w	ip, #10
 8005732:	4621      	mov	r1, r4
 8005734:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005738:	3b30      	subs	r3, #48	; 0x30
 800573a:	2b09      	cmp	r3, #9
 800573c:	d94d      	bls.n	80057da <_vfiprintf_r+0x1a6>
 800573e:	b1b0      	cbz	r0, 800576e <_vfiprintf_r+0x13a>
 8005740:	9207      	str	r2, [sp, #28]
 8005742:	e014      	b.n	800576e <_vfiprintf_r+0x13a>
 8005744:	eba0 0308 	sub.w	r3, r0, r8
 8005748:	fa09 f303 	lsl.w	r3, r9, r3
 800574c:	4313      	orrs	r3, r2
 800574e:	9304      	str	r3, [sp, #16]
 8005750:	46a2      	mov	sl, r4
 8005752:	e7d2      	b.n	80056fa <_vfiprintf_r+0xc6>
 8005754:	9b03      	ldr	r3, [sp, #12]
 8005756:	1d19      	adds	r1, r3, #4
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	9103      	str	r1, [sp, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	bfbb      	ittet	lt
 8005760:	425b      	neglt	r3, r3
 8005762:	f042 0202 	orrlt.w	r2, r2, #2
 8005766:	9307      	strge	r3, [sp, #28]
 8005768:	9307      	strlt	r3, [sp, #28]
 800576a:	bfb8      	it	lt
 800576c:	9204      	strlt	r2, [sp, #16]
 800576e:	7823      	ldrb	r3, [r4, #0]
 8005770:	2b2e      	cmp	r3, #46	; 0x2e
 8005772:	d10c      	bne.n	800578e <_vfiprintf_r+0x15a>
 8005774:	7863      	ldrb	r3, [r4, #1]
 8005776:	2b2a      	cmp	r3, #42	; 0x2a
 8005778:	d134      	bne.n	80057e4 <_vfiprintf_r+0x1b0>
 800577a:	9b03      	ldr	r3, [sp, #12]
 800577c:	1d1a      	adds	r2, r3, #4
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	9203      	str	r2, [sp, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	bfb8      	it	lt
 8005786:	f04f 33ff 	movlt.w	r3, #4294967295
 800578a:	3402      	adds	r4, #2
 800578c:	9305      	str	r3, [sp, #20]
 800578e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005864 <_vfiprintf_r+0x230>
 8005792:	7821      	ldrb	r1, [r4, #0]
 8005794:	2203      	movs	r2, #3
 8005796:	4650      	mov	r0, sl
 8005798:	f7fa fd3a 	bl	8000210 <memchr>
 800579c:	b138      	cbz	r0, 80057ae <_vfiprintf_r+0x17a>
 800579e:	9b04      	ldr	r3, [sp, #16]
 80057a0:	eba0 000a 	sub.w	r0, r0, sl
 80057a4:	2240      	movs	r2, #64	; 0x40
 80057a6:	4082      	lsls	r2, r0
 80057a8:	4313      	orrs	r3, r2
 80057aa:	3401      	adds	r4, #1
 80057ac:	9304      	str	r3, [sp, #16]
 80057ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057b2:	4829      	ldr	r0, [pc, #164]	; (8005858 <_vfiprintf_r+0x224>)
 80057b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057b8:	2206      	movs	r2, #6
 80057ba:	f7fa fd29 	bl	8000210 <memchr>
 80057be:	2800      	cmp	r0, #0
 80057c0:	d03f      	beq.n	8005842 <_vfiprintf_r+0x20e>
 80057c2:	4b26      	ldr	r3, [pc, #152]	; (800585c <_vfiprintf_r+0x228>)
 80057c4:	bb1b      	cbnz	r3, 800580e <_vfiprintf_r+0x1da>
 80057c6:	9b03      	ldr	r3, [sp, #12]
 80057c8:	3307      	adds	r3, #7
 80057ca:	f023 0307 	bic.w	r3, r3, #7
 80057ce:	3308      	adds	r3, #8
 80057d0:	9303      	str	r3, [sp, #12]
 80057d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d4:	443b      	add	r3, r7
 80057d6:	9309      	str	r3, [sp, #36]	; 0x24
 80057d8:	e768      	b.n	80056ac <_vfiprintf_r+0x78>
 80057da:	fb0c 3202 	mla	r2, ip, r2, r3
 80057de:	460c      	mov	r4, r1
 80057e0:	2001      	movs	r0, #1
 80057e2:	e7a6      	b.n	8005732 <_vfiprintf_r+0xfe>
 80057e4:	2300      	movs	r3, #0
 80057e6:	3401      	adds	r4, #1
 80057e8:	9305      	str	r3, [sp, #20]
 80057ea:	4619      	mov	r1, r3
 80057ec:	f04f 0c0a 	mov.w	ip, #10
 80057f0:	4620      	mov	r0, r4
 80057f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057f6:	3a30      	subs	r2, #48	; 0x30
 80057f8:	2a09      	cmp	r2, #9
 80057fa:	d903      	bls.n	8005804 <_vfiprintf_r+0x1d0>
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0c6      	beq.n	800578e <_vfiprintf_r+0x15a>
 8005800:	9105      	str	r1, [sp, #20]
 8005802:	e7c4      	b.n	800578e <_vfiprintf_r+0x15a>
 8005804:	fb0c 2101 	mla	r1, ip, r1, r2
 8005808:	4604      	mov	r4, r0
 800580a:	2301      	movs	r3, #1
 800580c:	e7f0      	b.n	80057f0 <_vfiprintf_r+0x1bc>
 800580e:	ab03      	add	r3, sp, #12
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	462a      	mov	r2, r5
 8005814:	4b12      	ldr	r3, [pc, #72]	; (8005860 <_vfiprintf_r+0x22c>)
 8005816:	a904      	add	r1, sp, #16
 8005818:	4630      	mov	r0, r6
 800581a:	f3af 8000 	nop.w
 800581e:	4607      	mov	r7, r0
 8005820:	1c78      	adds	r0, r7, #1
 8005822:	d1d6      	bne.n	80057d2 <_vfiprintf_r+0x19e>
 8005824:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005826:	07d9      	lsls	r1, r3, #31
 8005828:	d405      	bmi.n	8005836 <_vfiprintf_r+0x202>
 800582a:	89ab      	ldrh	r3, [r5, #12]
 800582c:	059a      	lsls	r2, r3, #22
 800582e:	d402      	bmi.n	8005836 <_vfiprintf_r+0x202>
 8005830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005832:	f7ff fc75 	bl	8005120 <__retarget_lock_release_recursive>
 8005836:	89ab      	ldrh	r3, [r5, #12]
 8005838:	065b      	lsls	r3, r3, #25
 800583a:	f53f af1d 	bmi.w	8005678 <_vfiprintf_r+0x44>
 800583e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005840:	e71c      	b.n	800567c <_vfiprintf_r+0x48>
 8005842:	ab03      	add	r3, sp, #12
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	462a      	mov	r2, r5
 8005848:	4b05      	ldr	r3, [pc, #20]	; (8005860 <_vfiprintf_r+0x22c>)
 800584a:	a904      	add	r1, sp, #16
 800584c:	4630      	mov	r0, r6
 800584e:	f000 f879 	bl	8005944 <_printf_i>
 8005852:	e7e4      	b.n	800581e <_vfiprintf_r+0x1ea>
 8005854:	08006134 	.word	0x08006134
 8005858:	0800613e 	.word	0x0800613e
 800585c:	00000000 	.word	0x00000000
 8005860:	0800560f 	.word	0x0800560f
 8005864:	0800613a 	.word	0x0800613a

08005868 <_printf_common>:
 8005868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800586c:	4616      	mov	r6, r2
 800586e:	4699      	mov	r9, r3
 8005870:	688a      	ldr	r2, [r1, #8]
 8005872:	690b      	ldr	r3, [r1, #16]
 8005874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005878:	4293      	cmp	r3, r2
 800587a:	bfb8      	it	lt
 800587c:	4613      	movlt	r3, r2
 800587e:	6033      	str	r3, [r6, #0]
 8005880:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005884:	4607      	mov	r7, r0
 8005886:	460c      	mov	r4, r1
 8005888:	b10a      	cbz	r2, 800588e <_printf_common+0x26>
 800588a:	3301      	adds	r3, #1
 800588c:	6033      	str	r3, [r6, #0]
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	0699      	lsls	r1, r3, #26
 8005892:	bf42      	ittt	mi
 8005894:	6833      	ldrmi	r3, [r6, #0]
 8005896:	3302      	addmi	r3, #2
 8005898:	6033      	strmi	r3, [r6, #0]
 800589a:	6825      	ldr	r5, [r4, #0]
 800589c:	f015 0506 	ands.w	r5, r5, #6
 80058a0:	d106      	bne.n	80058b0 <_printf_common+0x48>
 80058a2:	f104 0a19 	add.w	sl, r4, #25
 80058a6:	68e3      	ldr	r3, [r4, #12]
 80058a8:	6832      	ldr	r2, [r6, #0]
 80058aa:	1a9b      	subs	r3, r3, r2
 80058ac:	42ab      	cmp	r3, r5
 80058ae:	dc26      	bgt.n	80058fe <_printf_common+0x96>
 80058b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058b4:	1e13      	subs	r3, r2, #0
 80058b6:	6822      	ldr	r2, [r4, #0]
 80058b8:	bf18      	it	ne
 80058ba:	2301      	movne	r3, #1
 80058bc:	0692      	lsls	r2, r2, #26
 80058be:	d42b      	bmi.n	8005918 <_printf_common+0xb0>
 80058c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058c4:	4649      	mov	r1, r9
 80058c6:	4638      	mov	r0, r7
 80058c8:	47c0      	blx	r8
 80058ca:	3001      	adds	r0, #1
 80058cc:	d01e      	beq.n	800590c <_printf_common+0xa4>
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	6922      	ldr	r2, [r4, #16]
 80058d2:	f003 0306 	and.w	r3, r3, #6
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	bf02      	ittt	eq
 80058da:	68e5      	ldreq	r5, [r4, #12]
 80058dc:	6833      	ldreq	r3, [r6, #0]
 80058de:	1aed      	subeq	r5, r5, r3
 80058e0:	68a3      	ldr	r3, [r4, #8]
 80058e2:	bf0c      	ite	eq
 80058e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058e8:	2500      	movne	r5, #0
 80058ea:	4293      	cmp	r3, r2
 80058ec:	bfc4      	itt	gt
 80058ee:	1a9b      	subgt	r3, r3, r2
 80058f0:	18ed      	addgt	r5, r5, r3
 80058f2:	2600      	movs	r6, #0
 80058f4:	341a      	adds	r4, #26
 80058f6:	42b5      	cmp	r5, r6
 80058f8:	d11a      	bne.n	8005930 <_printf_common+0xc8>
 80058fa:	2000      	movs	r0, #0
 80058fc:	e008      	b.n	8005910 <_printf_common+0xa8>
 80058fe:	2301      	movs	r3, #1
 8005900:	4652      	mov	r2, sl
 8005902:	4649      	mov	r1, r9
 8005904:	4638      	mov	r0, r7
 8005906:	47c0      	blx	r8
 8005908:	3001      	adds	r0, #1
 800590a:	d103      	bne.n	8005914 <_printf_common+0xac>
 800590c:	f04f 30ff 	mov.w	r0, #4294967295
 8005910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005914:	3501      	adds	r5, #1
 8005916:	e7c6      	b.n	80058a6 <_printf_common+0x3e>
 8005918:	18e1      	adds	r1, r4, r3
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	2030      	movs	r0, #48	; 0x30
 800591e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005922:	4422      	add	r2, r4
 8005924:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005928:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800592c:	3302      	adds	r3, #2
 800592e:	e7c7      	b.n	80058c0 <_printf_common+0x58>
 8005930:	2301      	movs	r3, #1
 8005932:	4622      	mov	r2, r4
 8005934:	4649      	mov	r1, r9
 8005936:	4638      	mov	r0, r7
 8005938:	47c0      	blx	r8
 800593a:	3001      	adds	r0, #1
 800593c:	d0e6      	beq.n	800590c <_printf_common+0xa4>
 800593e:	3601      	adds	r6, #1
 8005940:	e7d9      	b.n	80058f6 <_printf_common+0x8e>
	...

08005944 <_printf_i>:
 8005944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005948:	7e0f      	ldrb	r7, [r1, #24]
 800594a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800594c:	2f78      	cmp	r7, #120	; 0x78
 800594e:	4691      	mov	r9, r2
 8005950:	4680      	mov	r8, r0
 8005952:	460c      	mov	r4, r1
 8005954:	469a      	mov	sl, r3
 8005956:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800595a:	d807      	bhi.n	800596c <_printf_i+0x28>
 800595c:	2f62      	cmp	r7, #98	; 0x62
 800595e:	d80a      	bhi.n	8005976 <_printf_i+0x32>
 8005960:	2f00      	cmp	r7, #0
 8005962:	f000 80d4 	beq.w	8005b0e <_printf_i+0x1ca>
 8005966:	2f58      	cmp	r7, #88	; 0x58
 8005968:	f000 80c0 	beq.w	8005aec <_printf_i+0x1a8>
 800596c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005974:	e03a      	b.n	80059ec <_printf_i+0xa8>
 8005976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800597a:	2b15      	cmp	r3, #21
 800597c:	d8f6      	bhi.n	800596c <_printf_i+0x28>
 800597e:	a101      	add	r1, pc, #4	; (adr r1, 8005984 <_printf_i+0x40>)
 8005980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005984:	080059dd 	.word	0x080059dd
 8005988:	080059f1 	.word	0x080059f1
 800598c:	0800596d 	.word	0x0800596d
 8005990:	0800596d 	.word	0x0800596d
 8005994:	0800596d 	.word	0x0800596d
 8005998:	0800596d 	.word	0x0800596d
 800599c:	080059f1 	.word	0x080059f1
 80059a0:	0800596d 	.word	0x0800596d
 80059a4:	0800596d 	.word	0x0800596d
 80059a8:	0800596d 	.word	0x0800596d
 80059ac:	0800596d 	.word	0x0800596d
 80059b0:	08005af5 	.word	0x08005af5
 80059b4:	08005a1d 	.word	0x08005a1d
 80059b8:	08005aaf 	.word	0x08005aaf
 80059bc:	0800596d 	.word	0x0800596d
 80059c0:	0800596d 	.word	0x0800596d
 80059c4:	08005b17 	.word	0x08005b17
 80059c8:	0800596d 	.word	0x0800596d
 80059cc:	08005a1d 	.word	0x08005a1d
 80059d0:	0800596d 	.word	0x0800596d
 80059d4:	0800596d 	.word	0x0800596d
 80059d8:	08005ab7 	.word	0x08005ab7
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	1d1a      	adds	r2, r3, #4
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	602a      	str	r2, [r5, #0]
 80059e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059ec:	2301      	movs	r3, #1
 80059ee:	e09f      	b.n	8005b30 <_printf_i+0x1ec>
 80059f0:	6820      	ldr	r0, [r4, #0]
 80059f2:	682b      	ldr	r3, [r5, #0]
 80059f4:	0607      	lsls	r7, r0, #24
 80059f6:	f103 0104 	add.w	r1, r3, #4
 80059fa:	6029      	str	r1, [r5, #0]
 80059fc:	d501      	bpl.n	8005a02 <_printf_i+0xbe>
 80059fe:	681e      	ldr	r6, [r3, #0]
 8005a00:	e003      	b.n	8005a0a <_printf_i+0xc6>
 8005a02:	0646      	lsls	r6, r0, #25
 8005a04:	d5fb      	bpl.n	80059fe <_printf_i+0xba>
 8005a06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a0a:	2e00      	cmp	r6, #0
 8005a0c:	da03      	bge.n	8005a16 <_printf_i+0xd2>
 8005a0e:	232d      	movs	r3, #45	; 0x2d
 8005a10:	4276      	negs	r6, r6
 8005a12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a16:	485a      	ldr	r0, [pc, #360]	; (8005b80 <_printf_i+0x23c>)
 8005a18:	230a      	movs	r3, #10
 8005a1a:	e012      	b.n	8005a42 <_printf_i+0xfe>
 8005a1c:	682b      	ldr	r3, [r5, #0]
 8005a1e:	6820      	ldr	r0, [r4, #0]
 8005a20:	1d19      	adds	r1, r3, #4
 8005a22:	6029      	str	r1, [r5, #0]
 8005a24:	0605      	lsls	r5, r0, #24
 8005a26:	d501      	bpl.n	8005a2c <_printf_i+0xe8>
 8005a28:	681e      	ldr	r6, [r3, #0]
 8005a2a:	e002      	b.n	8005a32 <_printf_i+0xee>
 8005a2c:	0641      	lsls	r1, r0, #25
 8005a2e:	d5fb      	bpl.n	8005a28 <_printf_i+0xe4>
 8005a30:	881e      	ldrh	r6, [r3, #0]
 8005a32:	4853      	ldr	r0, [pc, #332]	; (8005b80 <_printf_i+0x23c>)
 8005a34:	2f6f      	cmp	r7, #111	; 0x6f
 8005a36:	bf0c      	ite	eq
 8005a38:	2308      	moveq	r3, #8
 8005a3a:	230a      	movne	r3, #10
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a42:	6865      	ldr	r5, [r4, #4]
 8005a44:	60a5      	str	r5, [r4, #8]
 8005a46:	2d00      	cmp	r5, #0
 8005a48:	bfa2      	ittt	ge
 8005a4a:	6821      	ldrge	r1, [r4, #0]
 8005a4c:	f021 0104 	bicge.w	r1, r1, #4
 8005a50:	6021      	strge	r1, [r4, #0]
 8005a52:	b90e      	cbnz	r6, 8005a58 <_printf_i+0x114>
 8005a54:	2d00      	cmp	r5, #0
 8005a56:	d04b      	beq.n	8005af0 <_printf_i+0x1ac>
 8005a58:	4615      	mov	r5, r2
 8005a5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a5e:	fb03 6711 	mls	r7, r3, r1, r6
 8005a62:	5dc7      	ldrb	r7, [r0, r7]
 8005a64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a68:	4637      	mov	r7, r6
 8005a6a:	42bb      	cmp	r3, r7
 8005a6c:	460e      	mov	r6, r1
 8005a6e:	d9f4      	bls.n	8005a5a <_printf_i+0x116>
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d10b      	bne.n	8005a8c <_printf_i+0x148>
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	07de      	lsls	r6, r3, #31
 8005a78:	d508      	bpl.n	8005a8c <_printf_i+0x148>
 8005a7a:	6923      	ldr	r3, [r4, #16]
 8005a7c:	6861      	ldr	r1, [r4, #4]
 8005a7e:	4299      	cmp	r1, r3
 8005a80:	bfde      	ittt	le
 8005a82:	2330      	movle	r3, #48	; 0x30
 8005a84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a8c:	1b52      	subs	r2, r2, r5
 8005a8e:	6122      	str	r2, [r4, #16]
 8005a90:	f8cd a000 	str.w	sl, [sp]
 8005a94:	464b      	mov	r3, r9
 8005a96:	aa03      	add	r2, sp, #12
 8005a98:	4621      	mov	r1, r4
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	f7ff fee4 	bl	8005868 <_printf_common>
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d14a      	bne.n	8005b3a <_printf_i+0x1f6>
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa8:	b004      	add	sp, #16
 8005aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	f043 0320 	orr.w	r3, r3, #32
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	4833      	ldr	r0, [pc, #204]	; (8005b84 <_printf_i+0x240>)
 8005ab8:	2778      	movs	r7, #120	; 0x78
 8005aba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	6829      	ldr	r1, [r5, #0]
 8005ac2:	061f      	lsls	r7, r3, #24
 8005ac4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ac8:	d402      	bmi.n	8005ad0 <_printf_i+0x18c>
 8005aca:	065f      	lsls	r7, r3, #25
 8005acc:	bf48      	it	mi
 8005ace:	b2b6      	uxthmi	r6, r6
 8005ad0:	07df      	lsls	r7, r3, #31
 8005ad2:	bf48      	it	mi
 8005ad4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ad8:	6029      	str	r1, [r5, #0]
 8005ada:	bf48      	it	mi
 8005adc:	6023      	strmi	r3, [r4, #0]
 8005ade:	b91e      	cbnz	r6, 8005ae8 <_printf_i+0x1a4>
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	f023 0320 	bic.w	r3, r3, #32
 8005ae6:	6023      	str	r3, [r4, #0]
 8005ae8:	2310      	movs	r3, #16
 8005aea:	e7a7      	b.n	8005a3c <_printf_i+0xf8>
 8005aec:	4824      	ldr	r0, [pc, #144]	; (8005b80 <_printf_i+0x23c>)
 8005aee:	e7e4      	b.n	8005aba <_printf_i+0x176>
 8005af0:	4615      	mov	r5, r2
 8005af2:	e7bd      	b.n	8005a70 <_printf_i+0x12c>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	6826      	ldr	r6, [r4, #0]
 8005af8:	6961      	ldr	r1, [r4, #20]
 8005afa:	1d18      	adds	r0, r3, #4
 8005afc:	6028      	str	r0, [r5, #0]
 8005afe:	0635      	lsls	r5, r6, #24
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	d501      	bpl.n	8005b08 <_printf_i+0x1c4>
 8005b04:	6019      	str	r1, [r3, #0]
 8005b06:	e002      	b.n	8005b0e <_printf_i+0x1ca>
 8005b08:	0670      	lsls	r0, r6, #25
 8005b0a:	d5fb      	bpl.n	8005b04 <_printf_i+0x1c0>
 8005b0c:	8019      	strh	r1, [r3, #0]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	6123      	str	r3, [r4, #16]
 8005b12:	4615      	mov	r5, r2
 8005b14:	e7bc      	b.n	8005a90 <_printf_i+0x14c>
 8005b16:	682b      	ldr	r3, [r5, #0]
 8005b18:	1d1a      	adds	r2, r3, #4
 8005b1a:	602a      	str	r2, [r5, #0]
 8005b1c:	681d      	ldr	r5, [r3, #0]
 8005b1e:	6862      	ldr	r2, [r4, #4]
 8005b20:	2100      	movs	r1, #0
 8005b22:	4628      	mov	r0, r5
 8005b24:	f7fa fb74 	bl	8000210 <memchr>
 8005b28:	b108      	cbz	r0, 8005b2e <_printf_i+0x1ea>
 8005b2a:	1b40      	subs	r0, r0, r5
 8005b2c:	6060      	str	r0, [r4, #4]
 8005b2e:	6863      	ldr	r3, [r4, #4]
 8005b30:	6123      	str	r3, [r4, #16]
 8005b32:	2300      	movs	r3, #0
 8005b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b38:	e7aa      	b.n	8005a90 <_printf_i+0x14c>
 8005b3a:	6923      	ldr	r3, [r4, #16]
 8005b3c:	462a      	mov	r2, r5
 8005b3e:	4649      	mov	r1, r9
 8005b40:	4640      	mov	r0, r8
 8005b42:	47d0      	blx	sl
 8005b44:	3001      	adds	r0, #1
 8005b46:	d0ad      	beq.n	8005aa4 <_printf_i+0x160>
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	079b      	lsls	r3, r3, #30
 8005b4c:	d413      	bmi.n	8005b76 <_printf_i+0x232>
 8005b4e:	68e0      	ldr	r0, [r4, #12]
 8005b50:	9b03      	ldr	r3, [sp, #12]
 8005b52:	4298      	cmp	r0, r3
 8005b54:	bfb8      	it	lt
 8005b56:	4618      	movlt	r0, r3
 8005b58:	e7a6      	b.n	8005aa8 <_printf_i+0x164>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	4632      	mov	r2, r6
 8005b5e:	4649      	mov	r1, r9
 8005b60:	4640      	mov	r0, r8
 8005b62:	47d0      	blx	sl
 8005b64:	3001      	adds	r0, #1
 8005b66:	d09d      	beq.n	8005aa4 <_printf_i+0x160>
 8005b68:	3501      	adds	r5, #1
 8005b6a:	68e3      	ldr	r3, [r4, #12]
 8005b6c:	9903      	ldr	r1, [sp, #12]
 8005b6e:	1a5b      	subs	r3, r3, r1
 8005b70:	42ab      	cmp	r3, r5
 8005b72:	dcf2      	bgt.n	8005b5a <_printf_i+0x216>
 8005b74:	e7eb      	b.n	8005b4e <_printf_i+0x20a>
 8005b76:	2500      	movs	r5, #0
 8005b78:	f104 0619 	add.w	r6, r4, #25
 8005b7c:	e7f5      	b.n	8005b6a <_printf_i+0x226>
 8005b7e:	bf00      	nop
 8005b80:	08006145 	.word	0x08006145
 8005b84:	08006156 	.word	0x08006156

08005b88 <__sflush_r>:
 8005b88:	898a      	ldrh	r2, [r1, #12]
 8005b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8e:	4605      	mov	r5, r0
 8005b90:	0710      	lsls	r0, r2, #28
 8005b92:	460c      	mov	r4, r1
 8005b94:	d458      	bmi.n	8005c48 <__sflush_r+0xc0>
 8005b96:	684b      	ldr	r3, [r1, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	dc05      	bgt.n	8005ba8 <__sflush_r+0x20>
 8005b9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	dc02      	bgt.n	8005ba8 <__sflush_r+0x20>
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005baa:	2e00      	cmp	r6, #0
 8005bac:	d0f9      	beq.n	8005ba2 <__sflush_r+0x1a>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bb4:	682f      	ldr	r7, [r5, #0]
 8005bb6:	6a21      	ldr	r1, [r4, #32]
 8005bb8:	602b      	str	r3, [r5, #0]
 8005bba:	d032      	beq.n	8005c22 <__sflush_r+0x9a>
 8005bbc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bbe:	89a3      	ldrh	r3, [r4, #12]
 8005bc0:	075a      	lsls	r2, r3, #29
 8005bc2:	d505      	bpl.n	8005bd0 <__sflush_r+0x48>
 8005bc4:	6863      	ldr	r3, [r4, #4]
 8005bc6:	1ac0      	subs	r0, r0, r3
 8005bc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bca:	b10b      	cbz	r3, 8005bd0 <__sflush_r+0x48>
 8005bcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bce:	1ac0      	subs	r0, r0, r3
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bd6:	6a21      	ldr	r1, [r4, #32]
 8005bd8:	4628      	mov	r0, r5
 8005bda:	47b0      	blx	r6
 8005bdc:	1c43      	adds	r3, r0, #1
 8005bde:	89a3      	ldrh	r3, [r4, #12]
 8005be0:	d106      	bne.n	8005bf0 <__sflush_r+0x68>
 8005be2:	6829      	ldr	r1, [r5, #0]
 8005be4:	291d      	cmp	r1, #29
 8005be6:	d82b      	bhi.n	8005c40 <__sflush_r+0xb8>
 8005be8:	4a29      	ldr	r2, [pc, #164]	; (8005c90 <__sflush_r+0x108>)
 8005bea:	410a      	asrs	r2, r1
 8005bec:	07d6      	lsls	r6, r2, #31
 8005bee:	d427      	bmi.n	8005c40 <__sflush_r+0xb8>
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	6062      	str	r2, [r4, #4]
 8005bf4:	04d9      	lsls	r1, r3, #19
 8005bf6:	6922      	ldr	r2, [r4, #16]
 8005bf8:	6022      	str	r2, [r4, #0]
 8005bfa:	d504      	bpl.n	8005c06 <__sflush_r+0x7e>
 8005bfc:	1c42      	adds	r2, r0, #1
 8005bfe:	d101      	bne.n	8005c04 <__sflush_r+0x7c>
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	b903      	cbnz	r3, 8005c06 <__sflush_r+0x7e>
 8005c04:	6560      	str	r0, [r4, #84]	; 0x54
 8005c06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c08:	602f      	str	r7, [r5, #0]
 8005c0a:	2900      	cmp	r1, #0
 8005c0c:	d0c9      	beq.n	8005ba2 <__sflush_r+0x1a>
 8005c0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c12:	4299      	cmp	r1, r3
 8005c14:	d002      	beq.n	8005c1c <__sflush_r+0x94>
 8005c16:	4628      	mov	r0, r5
 8005c18:	f7ff fa92 	bl	8005140 <_free_r>
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	6360      	str	r0, [r4, #52]	; 0x34
 8005c20:	e7c0      	b.n	8005ba4 <__sflush_r+0x1c>
 8005c22:	2301      	movs	r3, #1
 8005c24:	4628      	mov	r0, r5
 8005c26:	47b0      	blx	r6
 8005c28:	1c41      	adds	r1, r0, #1
 8005c2a:	d1c8      	bne.n	8005bbe <__sflush_r+0x36>
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0c5      	beq.n	8005bbe <__sflush_r+0x36>
 8005c32:	2b1d      	cmp	r3, #29
 8005c34:	d001      	beq.n	8005c3a <__sflush_r+0xb2>
 8005c36:	2b16      	cmp	r3, #22
 8005c38:	d101      	bne.n	8005c3e <__sflush_r+0xb6>
 8005c3a:	602f      	str	r7, [r5, #0]
 8005c3c:	e7b1      	b.n	8005ba2 <__sflush_r+0x1a>
 8005c3e:	89a3      	ldrh	r3, [r4, #12]
 8005c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c44:	81a3      	strh	r3, [r4, #12]
 8005c46:	e7ad      	b.n	8005ba4 <__sflush_r+0x1c>
 8005c48:	690f      	ldr	r7, [r1, #16]
 8005c4a:	2f00      	cmp	r7, #0
 8005c4c:	d0a9      	beq.n	8005ba2 <__sflush_r+0x1a>
 8005c4e:	0793      	lsls	r3, r2, #30
 8005c50:	680e      	ldr	r6, [r1, #0]
 8005c52:	bf08      	it	eq
 8005c54:	694b      	ldreq	r3, [r1, #20]
 8005c56:	600f      	str	r7, [r1, #0]
 8005c58:	bf18      	it	ne
 8005c5a:	2300      	movne	r3, #0
 8005c5c:	eba6 0807 	sub.w	r8, r6, r7
 8005c60:	608b      	str	r3, [r1, #8]
 8005c62:	f1b8 0f00 	cmp.w	r8, #0
 8005c66:	dd9c      	ble.n	8005ba2 <__sflush_r+0x1a>
 8005c68:	6a21      	ldr	r1, [r4, #32]
 8005c6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c6c:	4643      	mov	r3, r8
 8005c6e:	463a      	mov	r2, r7
 8005c70:	4628      	mov	r0, r5
 8005c72:	47b0      	blx	r6
 8005c74:	2800      	cmp	r0, #0
 8005c76:	dc06      	bgt.n	8005c86 <__sflush_r+0xfe>
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c7e:	81a3      	strh	r3, [r4, #12]
 8005c80:	f04f 30ff 	mov.w	r0, #4294967295
 8005c84:	e78e      	b.n	8005ba4 <__sflush_r+0x1c>
 8005c86:	4407      	add	r7, r0
 8005c88:	eba8 0800 	sub.w	r8, r8, r0
 8005c8c:	e7e9      	b.n	8005c62 <__sflush_r+0xda>
 8005c8e:	bf00      	nop
 8005c90:	dfbffffe 	.word	0xdfbffffe

08005c94 <_fflush_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	690b      	ldr	r3, [r1, #16]
 8005c98:	4605      	mov	r5, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	b913      	cbnz	r3, 8005ca4 <_fflush_r+0x10>
 8005c9e:	2500      	movs	r5, #0
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	bd38      	pop	{r3, r4, r5, pc}
 8005ca4:	b118      	cbz	r0, 8005cae <_fflush_r+0x1a>
 8005ca6:	6a03      	ldr	r3, [r0, #32]
 8005ca8:	b90b      	cbnz	r3, 8005cae <_fflush_r+0x1a>
 8005caa:	f7ff f913 	bl	8004ed4 <__sinit>
 8005cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0f3      	beq.n	8005c9e <_fflush_r+0xa>
 8005cb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cb8:	07d0      	lsls	r0, r2, #31
 8005cba:	d404      	bmi.n	8005cc6 <_fflush_r+0x32>
 8005cbc:	0599      	lsls	r1, r3, #22
 8005cbe:	d402      	bmi.n	8005cc6 <_fflush_r+0x32>
 8005cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cc2:	f7ff fa2c 	bl	800511e <__retarget_lock_acquire_recursive>
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	4621      	mov	r1, r4
 8005cca:	f7ff ff5d 	bl	8005b88 <__sflush_r>
 8005cce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cd0:	07da      	lsls	r2, r3, #31
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	d4e4      	bmi.n	8005ca0 <_fflush_r+0xc>
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	059b      	lsls	r3, r3, #22
 8005cda:	d4e1      	bmi.n	8005ca0 <_fflush_r+0xc>
 8005cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cde:	f7ff fa1f 	bl	8005120 <__retarget_lock_release_recursive>
 8005ce2:	e7dd      	b.n	8005ca0 <_fflush_r+0xc>

08005ce4 <__swbuf_r>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	460e      	mov	r6, r1
 8005ce8:	4614      	mov	r4, r2
 8005cea:	4605      	mov	r5, r0
 8005cec:	b118      	cbz	r0, 8005cf6 <__swbuf_r+0x12>
 8005cee:	6a03      	ldr	r3, [r0, #32]
 8005cf0:	b90b      	cbnz	r3, 8005cf6 <__swbuf_r+0x12>
 8005cf2:	f7ff f8ef 	bl	8004ed4 <__sinit>
 8005cf6:	69a3      	ldr	r3, [r4, #24]
 8005cf8:	60a3      	str	r3, [r4, #8]
 8005cfa:	89a3      	ldrh	r3, [r4, #12]
 8005cfc:	071a      	lsls	r2, r3, #28
 8005cfe:	d525      	bpl.n	8005d4c <__swbuf_r+0x68>
 8005d00:	6923      	ldr	r3, [r4, #16]
 8005d02:	b31b      	cbz	r3, 8005d4c <__swbuf_r+0x68>
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	6922      	ldr	r2, [r4, #16]
 8005d08:	1a98      	subs	r0, r3, r2
 8005d0a:	6963      	ldr	r3, [r4, #20]
 8005d0c:	b2f6      	uxtb	r6, r6
 8005d0e:	4283      	cmp	r3, r0
 8005d10:	4637      	mov	r7, r6
 8005d12:	dc04      	bgt.n	8005d1e <__swbuf_r+0x3a>
 8005d14:	4621      	mov	r1, r4
 8005d16:	4628      	mov	r0, r5
 8005d18:	f7ff ffbc 	bl	8005c94 <_fflush_r>
 8005d1c:	b9e0      	cbnz	r0, 8005d58 <__swbuf_r+0x74>
 8005d1e:	68a3      	ldr	r3, [r4, #8]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	60a3      	str	r3, [r4, #8]
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	6022      	str	r2, [r4, #0]
 8005d2a:	701e      	strb	r6, [r3, #0]
 8005d2c:	6962      	ldr	r2, [r4, #20]
 8005d2e:	1c43      	adds	r3, r0, #1
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d004      	beq.n	8005d3e <__swbuf_r+0x5a>
 8005d34:	89a3      	ldrh	r3, [r4, #12]
 8005d36:	07db      	lsls	r3, r3, #31
 8005d38:	d506      	bpl.n	8005d48 <__swbuf_r+0x64>
 8005d3a:	2e0a      	cmp	r6, #10
 8005d3c:	d104      	bne.n	8005d48 <__swbuf_r+0x64>
 8005d3e:	4621      	mov	r1, r4
 8005d40:	4628      	mov	r0, r5
 8005d42:	f7ff ffa7 	bl	8005c94 <_fflush_r>
 8005d46:	b938      	cbnz	r0, 8005d58 <__swbuf_r+0x74>
 8005d48:	4638      	mov	r0, r7
 8005d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f000 f806 	bl	8005d60 <__swsetup_r>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	d0d5      	beq.n	8005d04 <__swbuf_r+0x20>
 8005d58:	f04f 37ff 	mov.w	r7, #4294967295
 8005d5c:	e7f4      	b.n	8005d48 <__swbuf_r+0x64>
	...

08005d60 <__swsetup_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	4b2a      	ldr	r3, [pc, #168]	; (8005e0c <__swsetup_r+0xac>)
 8005d64:	4605      	mov	r5, r0
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	460c      	mov	r4, r1
 8005d6a:	b118      	cbz	r0, 8005d74 <__swsetup_r+0x14>
 8005d6c:	6a03      	ldr	r3, [r0, #32]
 8005d6e:	b90b      	cbnz	r3, 8005d74 <__swsetup_r+0x14>
 8005d70:	f7ff f8b0 	bl	8004ed4 <__sinit>
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d7a:	0718      	lsls	r0, r3, #28
 8005d7c:	d422      	bmi.n	8005dc4 <__swsetup_r+0x64>
 8005d7e:	06d9      	lsls	r1, r3, #27
 8005d80:	d407      	bmi.n	8005d92 <__swsetup_r+0x32>
 8005d82:	2309      	movs	r3, #9
 8005d84:	602b      	str	r3, [r5, #0]
 8005d86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d8a:	81a3      	strh	r3, [r4, #12]
 8005d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d90:	e034      	b.n	8005dfc <__swsetup_r+0x9c>
 8005d92:	0758      	lsls	r0, r3, #29
 8005d94:	d512      	bpl.n	8005dbc <__swsetup_r+0x5c>
 8005d96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d98:	b141      	cbz	r1, 8005dac <__swsetup_r+0x4c>
 8005d9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d9e:	4299      	cmp	r1, r3
 8005da0:	d002      	beq.n	8005da8 <__swsetup_r+0x48>
 8005da2:	4628      	mov	r0, r5
 8005da4:	f7ff f9cc 	bl	8005140 <_free_r>
 8005da8:	2300      	movs	r3, #0
 8005daa:	6363      	str	r3, [r4, #52]	; 0x34
 8005dac:	89a3      	ldrh	r3, [r4, #12]
 8005dae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005db2:	81a3      	strh	r3, [r4, #12]
 8005db4:	2300      	movs	r3, #0
 8005db6:	6063      	str	r3, [r4, #4]
 8005db8:	6923      	ldr	r3, [r4, #16]
 8005dba:	6023      	str	r3, [r4, #0]
 8005dbc:	89a3      	ldrh	r3, [r4, #12]
 8005dbe:	f043 0308 	orr.w	r3, r3, #8
 8005dc2:	81a3      	strh	r3, [r4, #12]
 8005dc4:	6923      	ldr	r3, [r4, #16]
 8005dc6:	b94b      	cbnz	r3, 8005ddc <__swsetup_r+0x7c>
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd2:	d003      	beq.n	8005ddc <__swsetup_r+0x7c>
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f000 f899 	bl	8005f0e <__smakebuf_r>
 8005ddc:	89a0      	ldrh	r0, [r4, #12]
 8005dde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005de2:	f010 0301 	ands.w	r3, r0, #1
 8005de6:	d00a      	beq.n	8005dfe <__swsetup_r+0x9e>
 8005de8:	2300      	movs	r3, #0
 8005dea:	60a3      	str	r3, [r4, #8]
 8005dec:	6963      	ldr	r3, [r4, #20]
 8005dee:	425b      	negs	r3, r3
 8005df0:	61a3      	str	r3, [r4, #24]
 8005df2:	6923      	ldr	r3, [r4, #16]
 8005df4:	b943      	cbnz	r3, 8005e08 <__swsetup_r+0xa8>
 8005df6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005dfa:	d1c4      	bne.n	8005d86 <__swsetup_r+0x26>
 8005dfc:	bd38      	pop	{r3, r4, r5, pc}
 8005dfe:	0781      	lsls	r1, r0, #30
 8005e00:	bf58      	it	pl
 8005e02:	6963      	ldrpl	r3, [r4, #20]
 8005e04:	60a3      	str	r3, [r4, #8]
 8005e06:	e7f4      	b.n	8005df2 <__swsetup_r+0x92>
 8005e08:	2000      	movs	r0, #0
 8005e0a:	e7f7      	b.n	8005dfc <__swsetup_r+0x9c>
 8005e0c:	20000068 	.word	0x20000068

08005e10 <memmove>:
 8005e10:	4288      	cmp	r0, r1
 8005e12:	b510      	push	{r4, lr}
 8005e14:	eb01 0402 	add.w	r4, r1, r2
 8005e18:	d902      	bls.n	8005e20 <memmove+0x10>
 8005e1a:	4284      	cmp	r4, r0
 8005e1c:	4623      	mov	r3, r4
 8005e1e:	d807      	bhi.n	8005e30 <memmove+0x20>
 8005e20:	1e43      	subs	r3, r0, #1
 8005e22:	42a1      	cmp	r1, r4
 8005e24:	d008      	beq.n	8005e38 <memmove+0x28>
 8005e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e2e:	e7f8      	b.n	8005e22 <memmove+0x12>
 8005e30:	4402      	add	r2, r0
 8005e32:	4601      	mov	r1, r0
 8005e34:	428a      	cmp	r2, r1
 8005e36:	d100      	bne.n	8005e3a <memmove+0x2a>
 8005e38:	bd10      	pop	{r4, pc}
 8005e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e42:	e7f7      	b.n	8005e34 <memmove+0x24>

08005e44 <_sbrk_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	4d06      	ldr	r5, [pc, #24]	; (8005e60 <_sbrk_r+0x1c>)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	4608      	mov	r0, r1
 8005e4e:	602b      	str	r3, [r5, #0]
 8005e50:	f7fa fe24 	bl	8000a9c <_sbrk>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	d102      	bne.n	8005e5e <_sbrk_r+0x1a>
 8005e58:	682b      	ldr	r3, [r5, #0]
 8005e5a:	b103      	cbz	r3, 8005e5e <_sbrk_r+0x1a>
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
 8005e60:	20004bd0 	.word	0x20004bd0

08005e64 <_realloc_r>:
 8005e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e68:	4680      	mov	r8, r0
 8005e6a:	4614      	mov	r4, r2
 8005e6c:	460e      	mov	r6, r1
 8005e6e:	b921      	cbnz	r1, 8005e7a <_realloc_r+0x16>
 8005e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e74:	4611      	mov	r1, r2
 8005e76:	f7ff b9cf 	b.w	8005218 <_malloc_r>
 8005e7a:	b92a      	cbnz	r2, 8005e88 <_realloc_r+0x24>
 8005e7c:	f7ff f960 	bl	8005140 <_free_r>
 8005e80:	4625      	mov	r5, r4
 8005e82:	4628      	mov	r0, r5
 8005e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e88:	f000 f8a0 	bl	8005fcc <_malloc_usable_size_r>
 8005e8c:	4284      	cmp	r4, r0
 8005e8e:	4607      	mov	r7, r0
 8005e90:	d802      	bhi.n	8005e98 <_realloc_r+0x34>
 8005e92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e96:	d812      	bhi.n	8005ebe <_realloc_r+0x5a>
 8005e98:	4621      	mov	r1, r4
 8005e9a:	4640      	mov	r0, r8
 8005e9c:	f7ff f9bc 	bl	8005218 <_malloc_r>
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d0ed      	beq.n	8005e82 <_realloc_r+0x1e>
 8005ea6:	42bc      	cmp	r4, r7
 8005ea8:	4622      	mov	r2, r4
 8005eaa:	4631      	mov	r1, r6
 8005eac:	bf28      	it	cs
 8005eae:	463a      	movcs	r2, r7
 8005eb0:	f7ff f937 	bl	8005122 <memcpy>
 8005eb4:	4631      	mov	r1, r6
 8005eb6:	4640      	mov	r0, r8
 8005eb8:	f7ff f942 	bl	8005140 <_free_r>
 8005ebc:	e7e1      	b.n	8005e82 <_realloc_r+0x1e>
 8005ebe:	4635      	mov	r5, r6
 8005ec0:	e7df      	b.n	8005e82 <_realloc_r+0x1e>

08005ec2 <__swhatbuf_r>:
 8005ec2:	b570      	push	{r4, r5, r6, lr}
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eca:	2900      	cmp	r1, #0
 8005ecc:	b096      	sub	sp, #88	; 0x58
 8005ece:	4615      	mov	r5, r2
 8005ed0:	461e      	mov	r6, r3
 8005ed2:	da0d      	bge.n	8005ef0 <__swhatbuf_r+0x2e>
 8005ed4:	89a3      	ldrh	r3, [r4, #12]
 8005ed6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005eda:	f04f 0100 	mov.w	r1, #0
 8005ede:	bf0c      	ite	eq
 8005ee0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005ee4:	2340      	movne	r3, #64	; 0x40
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	6031      	str	r1, [r6, #0]
 8005eea:	602b      	str	r3, [r5, #0]
 8005eec:	b016      	add	sp, #88	; 0x58
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	466a      	mov	r2, sp
 8005ef2:	f000 f849 	bl	8005f88 <_fstat_r>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	dbec      	blt.n	8005ed4 <__swhatbuf_r+0x12>
 8005efa:	9901      	ldr	r1, [sp, #4]
 8005efc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005f00:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005f04:	4259      	negs	r1, r3
 8005f06:	4159      	adcs	r1, r3
 8005f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f0c:	e7eb      	b.n	8005ee6 <__swhatbuf_r+0x24>

08005f0e <__smakebuf_r>:
 8005f0e:	898b      	ldrh	r3, [r1, #12]
 8005f10:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f12:	079d      	lsls	r5, r3, #30
 8005f14:	4606      	mov	r6, r0
 8005f16:	460c      	mov	r4, r1
 8005f18:	d507      	bpl.n	8005f2a <__smakebuf_r+0x1c>
 8005f1a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f1e:	6023      	str	r3, [r4, #0]
 8005f20:	6123      	str	r3, [r4, #16]
 8005f22:	2301      	movs	r3, #1
 8005f24:	6163      	str	r3, [r4, #20]
 8005f26:	b002      	add	sp, #8
 8005f28:	bd70      	pop	{r4, r5, r6, pc}
 8005f2a:	ab01      	add	r3, sp, #4
 8005f2c:	466a      	mov	r2, sp
 8005f2e:	f7ff ffc8 	bl	8005ec2 <__swhatbuf_r>
 8005f32:	9900      	ldr	r1, [sp, #0]
 8005f34:	4605      	mov	r5, r0
 8005f36:	4630      	mov	r0, r6
 8005f38:	f7ff f96e 	bl	8005218 <_malloc_r>
 8005f3c:	b948      	cbnz	r0, 8005f52 <__smakebuf_r+0x44>
 8005f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f42:	059a      	lsls	r2, r3, #22
 8005f44:	d4ef      	bmi.n	8005f26 <__smakebuf_r+0x18>
 8005f46:	f023 0303 	bic.w	r3, r3, #3
 8005f4a:	f043 0302 	orr.w	r3, r3, #2
 8005f4e:	81a3      	strh	r3, [r4, #12]
 8005f50:	e7e3      	b.n	8005f1a <__smakebuf_r+0xc>
 8005f52:	89a3      	ldrh	r3, [r4, #12]
 8005f54:	6020      	str	r0, [r4, #0]
 8005f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5a:	81a3      	strh	r3, [r4, #12]
 8005f5c:	9b00      	ldr	r3, [sp, #0]
 8005f5e:	6163      	str	r3, [r4, #20]
 8005f60:	9b01      	ldr	r3, [sp, #4]
 8005f62:	6120      	str	r0, [r4, #16]
 8005f64:	b15b      	cbz	r3, 8005f7e <__smakebuf_r+0x70>
 8005f66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f6a:	4630      	mov	r0, r6
 8005f6c:	f000 f81e 	bl	8005fac <_isatty_r>
 8005f70:	b128      	cbz	r0, 8005f7e <__smakebuf_r+0x70>
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	f023 0303 	bic.w	r3, r3, #3
 8005f78:	f043 0301 	orr.w	r3, r3, #1
 8005f7c:	81a3      	strh	r3, [r4, #12]
 8005f7e:	89a3      	ldrh	r3, [r4, #12]
 8005f80:	431d      	orrs	r5, r3
 8005f82:	81a5      	strh	r5, [r4, #12]
 8005f84:	e7cf      	b.n	8005f26 <__smakebuf_r+0x18>
	...

08005f88 <_fstat_r>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	4d07      	ldr	r5, [pc, #28]	; (8005fa8 <_fstat_r+0x20>)
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	4604      	mov	r4, r0
 8005f90:	4608      	mov	r0, r1
 8005f92:	4611      	mov	r1, r2
 8005f94:	602b      	str	r3, [r5, #0]
 8005f96:	f7fa fd59 	bl	8000a4c <_fstat>
 8005f9a:	1c43      	adds	r3, r0, #1
 8005f9c:	d102      	bne.n	8005fa4 <_fstat_r+0x1c>
 8005f9e:	682b      	ldr	r3, [r5, #0]
 8005fa0:	b103      	cbz	r3, 8005fa4 <_fstat_r+0x1c>
 8005fa2:	6023      	str	r3, [r4, #0]
 8005fa4:	bd38      	pop	{r3, r4, r5, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20004bd0 	.word	0x20004bd0

08005fac <_isatty_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4d06      	ldr	r5, [pc, #24]	; (8005fc8 <_isatty_r+0x1c>)
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	602b      	str	r3, [r5, #0]
 8005fb8:	f7fa fd58 	bl	8000a6c <_isatty>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d102      	bne.n	8005fc6 <_isatty_r+0x1a>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	b103      	cbz	r3, 8005fc6 <_isatty_r+0x1a>
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	20004bd0 	.word	0x20004bd0

08005fcc <_malloc_usable_size_r>:
 8005fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fd0:	1f18      	subs	r0, r3, #4
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	bfbc      	itt	lt
 8005fd6:	580b      	ldrlt	r3, [r1, r0]
 8005fd8:	18c0      	addlt	r0, r0, r3
 8005fda:	4770      	bx	lr

08005fdc <_init>:
 8005fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fde:	bf00      	nop
 8005fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe2:	bc08      	pop	{r3}
 8005fe4:	469e      	mov	lr, r3
 8005fe6:	4770      	bx	lr

08005fe8 <_fini>:
 8005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fea:	bf00      	nop
 8005fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fee:	bc08      	pop	{r3}
 8005ff0:	469e      	mov	lr, r3
 8005ff2:	4770      	bx	lr
