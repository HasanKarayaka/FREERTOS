
06_LED_CONTROL_HAZIR_FONK_KULLANMADAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004988  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004b58  08004b58  00014b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c08  08004c08  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004c08  08004c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c10  08004c10  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c10  08004c10  00014c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c14  08004c14  00014c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c8  20000010  08004c28  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049d8  08004c28  000249d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000135c9  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e81  00000000  00000000  0003364c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  000364d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd8  00000000  00000000  000376c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d11  00000000  00000000  000384a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ed2  00000000  00000000  0003b1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7e94  00000000  00000000  0004f083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b48  00000000  00000000  00126f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0012ba60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004b40 	.word	0x08004b40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004b40 	.word	0x08004b40

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fa6b 	bl	80009ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f833 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f891 	bl	8000640 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800051e:	f001 fda7 	bl	8002070 <osKernelInitialize>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
//  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
  xTaskCreate(ledFlashTask, "Led Control Görevi", 128, NULL, 2, &myLedTaskHandle);
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <main+0x50>)
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	2302      	movs	r3, #2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2300      	movs	r3, #0
 800052c:	2280      	movs	r2, #128	; 0x80
 800052e:	490c      	ldr	r1, [pc, #48]	; (8000560 <main+0x54>)
 8000530:	480c      	ldr	r0, [pc, #48]	; (8000564 <main+0x58>)
 8000532:	f002 fca0 	bl	8002e76 <xTaskCreate>
  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000536:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <main+0x5c>)
 8000538:	2100      	movs	r1, #0
 800053a:	480c      	ldr	r0, [pc, #48]	; (800056c <main+0x60>)
 800053c:	f001 fdbc 	bl	80020b8 <osThreadNew>
 8000540:	4603      	mov	r3, r0
 8000542:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <main+0x64>)
 8000544:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000546:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <main+0x68>)
 8000548:	2100      	movs	r1, #0
 800054a:	480b      	ldr	r0, [pc, #44]	; (8000578 <main+0x6c>)
 800054c:	f001 fdb4 	bl	80020b8 <osThreadNew>
 8000550:	4603      	mov	r3, r0
 8000552:	4a0a      	ldr	r2, [pc, #40]	; (800057c <main+0x70>)
 8000554:	6013      	str	r3, [r2, #0]
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
//  osKernelStart();
    vTaskStartScheduler();
 8000556:	f002 fe07 	bl	8003168 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055a:	e7fe      	b.n	800055a <main+0x4e>
 800055c:	20000034 	.word	0x20000034
 8000560:	08004b7c 	.word	0x08004b7c
 8000564:	080006e1 	.word	0x080006e1
 8000568:	08004ba8 	.word	0x08004ba8
 800056c:	08000771 	.word	0x08000771
 8000570:	2000002c 	.word	0x2000002c
 8000574:	08004bcc 	.word	0x08004bcc
 8000578:	080007b9 	.word	0x080007b9
 800057c:	20000030 	.word	0x20000030

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 031c 	add.w	r3, r7, #28
 800058a:	2234      	movs	r2, #52	; 0x34
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f004 fa9c 	bl	8004acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b23      	ldr	r3, [pc, #140]	; (8000638 <SystemClock_Config+0xb8>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	4a22      	ldr	r2, [pc, #136]	; (8000638 <SystemClock_Config+0xb8>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	; 0x40
 80005b4:	4b20      	ldr	r3, [pc, #128]	; (8000638 <SystemClock_Config+0xb8>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c0:	2300      	movs	r3, #0
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <SystemClock_Config+0xbc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005cc:	4a1b      	ldr	r2, [pc, #108]	; (800063c <SystemClock_Config+0xbc>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b19      	ldr	r3, [pc, #100]	; (800063c <SystemClock_Config+0xbc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	2301      	movs	r3, #1
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e8:	2310      	movs	r3, #16
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ec:	2300      	movs	r3, #0
 80005ee:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 ffdf 	bl	80015b8 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000600:	f000 f8f4 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fce8 	bl	8000ff4 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800062a:	f000 f8df 	bl	80007ec <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3750      	adds	r7, #80	; 0x50
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_GPIO_Init+0x94>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a1d      	ldr	r2, [pc, #116]	; (80006d4 <MX_GPIO_Init+0x94>)
 8000660:	f043 0320 	orr.w	r3, r3, #32
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_GPIO_Init+0x94>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0320 	and.w	r3, r3, #32
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_GPIO_Init+0x94>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <MX_GPIO_Init+0x94>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_GPIO_Init+0x94>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2107      	movs	r1, #7
 8000692:	4811      	ldr	r0, [pc, #68]	; (80006d8 <MX_GPIO_Init+0x98>)
 8000694:	f000 fc7a 	bl	8000f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000698:	2307      	movs	r3, #7
 800069a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	4619      	mov	r1, r3
 80006ae:	480a      	ldr	r0, [pc, #40]	; (80006d8 <MX_GPIO_Init+0x98>)
 80006b0:	f000 fac0 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006b4:	2302      	movs	r3, #2
 80006b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	4619      	mov	r1, r3
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_GPIO_Init+0x9c>)
 80006c8:	f000 fab4 	bl	8000c34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40021400 	.word	0x40021400
 80006dc:	40020000 	.word	0x40020000

080006e0 <ledFlashTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void ledFlashTask(void *argument)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(buttoncount == 0)
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <ledFlashTask+0x88>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d105      	bne.n	80006fc <ledFlashTask+0x1c>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_2, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2107      	movs	r1, #7
 80006f4:	481d      	ldr	r0, [pc, #116]	; (800076c <ledFlashTask+0x8c>)
 80006f6:	f000 fc49 	bl	8000f8c <HAL_GPIO_WritePin>
 80006fa:	e030      	b.n	800075e <ledFlashTask+0x7e>
	  }
	  else if(buttoncount == 1)
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <ledFlashTask+0x88>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d108      	bne.n	8000716 <ledFlashTask+0x36>
	  {
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_2);
 8000704:	2107      	movs	r1, #7
 8000706:	4819      	ldr	r0, [pc, #100]	; (800076c <ledFlashTask+0x8c>)
 8000708:	f000 fc59 	bl	8000fbe <HAL_GPIO_TogglePin>
	  vTaskDelay(1000);
 800070c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000710:	f002 fcf6 	bl	8003100 <vTaskDelay>
 8000714:	e023      	b.n	800075e <ledFlashTask+0x7e>
	  }
	  else if(buttoncount == 2)
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <ledFlashTask+0x88>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b02      	cmp	r3, #2
 800071c:	d108      	bne.n	8000730 <ledFlashTask+0x50>
	  {
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_2);
 800071e:	2107      	movs	r1, #7
 8000720:	4812      	ldr	r0, [pc, #72]	; (800076c <ledFlashTask+0x8c>)
 8000722:	f000 fc4c 	bl	8000fbe <HAL_GPIO_TogglePin>
	  vTaskDelay(500);
 8000726:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800072a:	f002 fce9 	bl	8003100 <vTaskDelay>
 800072e:	e016      	b.n	800075e <ledFlashTask+0x7e>
	  }
	  else if(buttoncount == 3)
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <ledFlashTask+0x88>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b03      	cmp	r3, #3
 8000736:	d107      	bne.n	8000748 <ledFlashTask+0x68>
	  {
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_2);
 8000738:	2107      	movs	r1, #7
 800073a:	480c      	ldr	r0, [pc, #48]	; (800076c <ledFlashTask+0x8c>)
 800073c:	f000 fc3f 	bl	8000fbe <HAL_GPIO_TogglePin>
	  vTaskDelay(200);
 8000740:	20c8      	movs	r0, #200	; 0xc8
 8000742:	f002 fcdd 	bl	8003100 <vTaskDelay>
 8000746:	e00a      	b.n	800075e <ledFlashTask+0x7e>
	  }
	  else if(buttoncount == 4)
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <ledFlashTask+0x88>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b04      	cmp	r3, #4
 800074e:	d106      	bne.n	800075e <ledFlashTask+0x7e>
	  {
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_2);
 8000750:	2107      	movs	r1, #7
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <ledFlashTask+0x8c>)
 8000754:	f000 fc33 	bl	8000fbe <HAL_GPIO_TogglePin>
	  vTaskDelay(75);
 8000758:	204b      	movs	r0, #75	; 0x4b
 800075a:	f002 fcd1 	bl	8003100 <vTaskDelay>
	  }
    osDelay(1);
 800075e:	2001      	movs	r0, #1
 8000760:	f001 fd3c 	bl	80021dc <osDelay>
	  if(buttoncount == 0)
 8000764:	e7c0      	b.n	80006e8 <ledFlashTask+0x8>
 8000766:	bf00      	nop
 8000768:	20000038 	.word	0x20000038
 800076c:	40021400 	.word	0x40021400

08000770 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==GPIO_PIN_SET)
 8000778:	2102      	movs	r1, #2
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <StartTask02+0x40>)
 800077c:	f000 fbee 	bl	8000f5c <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d10f      	bne.n	80007a6 <StartTask02+0x36>
	  {
		  buttoncount++;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <StartTask02+0x44>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <StartTask02+0x44>)
 8000790:	701a      	strb	r2, [r3, #0]
		  vTaskDelay(50);
 8000792:	2032      	movs	r0, #50	; 0x32
 8000794:	f002 fcb4 	bl	8003100 <vTaskDelay>
		  if(buttoncount == 5)
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <StartTask02+0x44>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b05      	cmp	r3, #5
 800079e:	d102      	bne.n	80007a6 <StartTask02+0x36>
			  buttoncount = 0;
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <StartTask02+0x44>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]

	  }

    osDelay(1);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f001 fd18 	bl	80021dc <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==GPIO_PIN_SET)
 80007ac:	e7e4      	b.n	8000778 <StartTask02+0x8>
 80007ae:	bf00      	nop
 80007b0:	40020000 	.word	0x40020000
 80007b4:	20000038 	.word	0x20000038

080007b8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007c0:	2001      	movs	r0, #1
 80007c2:	f001 fd0b 	bl	80021dc <osDelay>
 80007c6:	e7fb      	b.n	80007c0 <StartTask03+0x8>

080007c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d101      	bne.n	80007de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007da:	f000 f929 	bl	8000a30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40010000 	.word	0x40010000

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <Error_Handler+0x8>
	...

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_MspInit+0x54>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a11      	ldr	r2, [pc, #68]	; (800084c <HAL_MspInit+0x54>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <HAL_MspInit+0x54>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <HAL_MspInit+0x54>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <HAL_MspInit+0x54>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <HAL_MspInit+0x54>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	210f      	movs	r1, #15
 800083a:	f06f 0001 	mvn.w	r0, #1
 800083e:	f000 f9cf 	bl	8000be0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	4b2e      	ldr	r3, [pc, #184]	; (8000920 <HAL_InitTick+0xd0>)
 8000866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000868:	4a2d      	ldr	r2, [pc, #180]	; (8000920 <HAL_InitTick+0xd0>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	6453      	str	r3, [r2, #68]	; 0x44
 8000870:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <HAL_InitTick+0xd0>)
 8000872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800087c:	f107 020c 	add.w	r2, r7, #12
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4611      	mov	r1, r2
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fcba 	bl	8001200 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800088c:	f000 fca4 	bl	80011d8 <HAL_RCC_GetPCLK2Freq>
 8000890:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000894:	4a23      	ldr	r2, [pc, #140]	; (8000924 <HAL_InitTick+0xd4>)
 8000896:	fba2 2303 	umull	r2, r3, r2, r3
 800089a:	0c9b      	lsrs	r3, r3, #18
 800089c:	3b01      	subs	r3, #1
 800089e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008a0:	4b21      	ldr	r3, [pc, #132]	; (8000928 <HAL_InitTick+0xd8>)
 80008a2:	4a22      	ldr	r2, [pc, #136]	; (800092c <HAL_InitTick+0xdc>)
 80008a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <HAL_InitTick+0xd8>)
 80008a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008ac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008ae:	4a1e      	ldr	r2, [pc, #120]	; (8000928 <HAL_InitTick+0xd8>)
 80008b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <HAL_InitTick+0xd8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <HAL_InitTick+0xd8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <HAL_InitTick+0xd8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008c6:	4818      	ldr	r0, [pc, #96]	; (8000928 <HAL_InitTick+0xd8>)
 80008c8:	f001 f914 	bl	8001af4 <HAL_TIM_Base_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80008d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d11b      	bne.n	8000912 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008da:	4813      	ldr	r0, [pc, #76]	; (8000928 <HAL_InitTick+0xd8>)
 80008dc:	f001 f964 	bl	8001ba8 <HAL_TIM_Base_Start_IT>
 80008e0:	4603      	mov	r3, r0
 80008e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80008e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d111      	bne.n	8000912 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008ee:	2019      	movs	r0, #25
 80008f0:	f000 f992 	bl	8000c18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b0f      	cmp	r3, #15
 80008f8:	d808      	bhi.n	800090c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80008fa:	2200      	movs	r2, #0
 80008fc:	6879      	ldr	r1, [r7, #4]
 80008fe:	2019      	movs	r0, #25
 8000900:	f000 f96e 	bl	8000be0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000904:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <HAL_InitTick+0xe0>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6013      	str	r3, [r2, #0]
 800090a:	e002      	b.n	8000912 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800090c:	2301      	movs	r3, #1
 800090e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000912:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000916:	4618      	mov	r0, r3
 8000918:	3730      	adds	r7, #48	; 0x30
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	431bde83 	.word	0x431bde83
 8000928:	2000003c 	.word	0x2000003c
 800092c:	40010000 	.word	0x40010000
 8000930:	20000004 	.word	0x20000004

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000966:	f001 f98f 	bl	8001c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000003c 	.word	0x2000003c

08000974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <SystemInit+0x20>)
 800097a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <SystemInit+0x20>)
 8000980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800099e:	490e      	ldr	r1, [pc, #56]	; (80009d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009a0:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009b4:	4c0b      	ldr	r4, [pc, #44]	; (80009e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009c2:	f7ff ffd7 	bl	8000974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c6:	f004 f889 	bl	8004adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ca:	f7ff fd9f 	bl	800050c <main>
  bx  lr    
 80009ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009dc:	08004c18 	.word	0x08004c18
  ldr r2, =_sbss
 80009e0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009e4:	200049d8 	.word	0x200049d8

080009e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC_IRQHandler>
	...

080009ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <HAL_Init+0x40>)
 80009f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <HAL_Init+0x40>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <HAL_Init+0x40>)
 8000a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_Init+0x40>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_Init+0x40>)
 8000a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 f8d8 	bl	8000bca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1a:	200f      	movs	r0, #15
 8000a1c:	f7ff ff18 	bl	8000850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a20:	f7ff feea 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023c00 	.word	0x40023c00

08000a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x20>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_IncTick+0x24>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_IncTick+0x24>)
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000084 	.word	0x20000084

08000a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <HAL_GetTick+0x14>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000084 	.word	0x20000084

08000a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	60d3      	str	r3, [r2, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	f003 0307 	and.w	r3, r3, #7
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	db0b      	blt.n	8000afe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	f003 021f 	and.w	r2, r3, #31
 8000aec:	4907      	ldr	r1, [pc, #28]	; (8000b0c <__NVIC_EnableIRQ+0x38>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	095b      	lsrs	r3, r3, #5
 8000af4:	2001      	movs	r0, #1
 8000af6:	fa00 f202 	lsl.w	r2, r0, r2
 8000afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000e100 	.word	0xe000e100

08000b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	6039      	str	r1, [r7, #0]
 8000b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	db0a      	blt.n	8000b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	490c      	ldr	r1, [pc, #48]	; (8000b5c <__NVIC_SetPriority+0x4c>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	0112      	lsls	r2, r2, #4
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	440b      	add	r3, r1
 8000b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b38:	e00a      	b.n	8000b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4908      	ldr	r1, [pc, #32]	; (8000b60 <__NVIC_SetPriority+0x50>)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	3b04      	subs	r3, #4
 8000b48:	0112      	lsls	r2, r2, #4
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	761a      	strb	r2, [r3, #24]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	f1c3 0307 	rsb	r3, r3, #7
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	bf28      	it	cs
 8000b82:	2304      	movcs	r3, #4
 8000b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	d902      	bls.n	8000b94 <NVIC_EncodePriority+0x30>
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3b03      	subs	r3, #3
 8000b92:	e000      	b.n	8000b96 <NVIC_EncodePriority+0x32>
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bac:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	43d9      	mvns	r1, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	4313      	orrs	r3, r2
         );
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3724      	adds	r7, #36	; 0x24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ff4c 	bl	8000a70 <__NVIC_SetPriorityGrouping>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
 8000bec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf2:	f7ff ff61 	bl	8000ab8 <__NVIC_GetPriorityGrouping>
 8000bf6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	68b9      	ldr	r1, [r7, #8]
 8000bfc:	6978      	ldr	r0, [r7, #20]
 8000bfe:	f7ff ffb1 	bl	8000b64 <NVIC_EncodePriority>
 8000c02:	4602      	mov	r2, r0
 8000c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff80 	bl	8000b10 <__NVIC_SetPriority>
}
 8000c10:	bf00      	nop
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff ff54 	bl	8000ad4 <__NVIC_EnableIRQ>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
 8000c4e:	e165      	b.n	8000f1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c50:	2201      	movs	r2, #1
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	f040 8154 	bne.w	8000f16 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0303 	and.w	r3, r3, #3
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d005      	beq.n	8000c86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d130      	bne.n	8000ce8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	2203      	movs	r2, #3
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	68da      	ldr	r2, [r3, #12]
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	f003 0201 	and.w	r2, r3, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d017      	beq.n	8000d24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	2203      	movs	r2, #3
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d123      	bne.n	8000d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	08da      	lsrs	r2, r3, #3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3208      	adds	r2, #8
 8000d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	220f      	movs	r2, #15
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	691a      	ldr	r2, [r3, #16]
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	08da      	lsrs	r2, r3, #3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3208      	adds	r2, #8
 8000d72:	69b9      	ldr	r1, [r7, #24]
 8000d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0203 	and.w	r2, r3, #3
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	f000 80ae 	beq.w	8000f16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b5d      	ldr	r3, [pc, #372]	; (8000f34 <HAL_GPIO_Init+0x300>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a5c      	ldr	r2, [pc, #368]	; (8000f34 <HAL_GPIO_Init+0x300>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dca:	4b5a      	ldr	r3, [pc, #360]	; (8000f34 <HAL_GPIO_Init+0x300>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dd6:	4a58      	ldr	r2, [pc, #352]	; (8000f38 <HAL_GPIO_Init+0x304>)
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	3302      	adds	r3, #2
 8000dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	220f      	movs	r2, #15
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4f      	ldr	r2, [pc, #316]	; (8000f3c <HAL_GPIO_Init+0x308>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d025      	beq.n	8000e4e <HAL_GPIO_Init+0x21a>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a4e      	ldr	r2, [pc, #312]	; (8000f40 <HAL_GPIO_Init+0x30c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d01f      	beq.n	8000e4a <HAL_GPIO_Init+0x216>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4d      	ldr	r2, [pc, #308]	; (8000f44 <HAL_GPIO_Init+0x310>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d019      	beq.n	8000e46 <HAL_GPIO_Init+0x212>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4c      	ldr	r2, [pc, #304]	; (8000f48 <HAL_GPIO_Init+0x314>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d013      	beq.n	8000e42 <HAL_GPIO_Init+0x20e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4b      	ldr	r2, [pc, #300]	; (8000f4c <HAL_GPIO_Init+0x318>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d00d      	beq.n	8000e3e <HAL_GPIO_Init+0x20a>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a4a      	ldr	r2, [pc, #296]	; (8000f50 <HAL_GPIO_Init+0x31c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d007      	beq.n	8000e3a <HAL_GPIO_Init+0x206>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a49      	ldr	r2, [pc, #292]	; (8000f54 <HAL_GPIO_Init+0x320>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d101      	bne.n	8000e36 <HAL_GPIO_Init+0x202>
 8000e32:	2306      	movs	r3, #6
 8000e34:	e00c      	b.n	8000e50 <HAL_GPIO_Init+0x21c>
 8000e36:	2307      	movs	r3, #7
 8000e38:	e00a      	b.n	8000e50 <HAL_GPIO_Init+0x21c>
 8000e3a:	2305      	movs	r3, #5
 8000e3c:	e008      	b.n	8000e50 <HAL_GPIO_Init+0x21c>
 8000e3e:	2304      	movs	r3, #4
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x21c>
 8000e42:	2303      	movs	r3, #3
 8000e44:	e004      	b.n	8000e50 <HAL_GPIO_Init+0x21c>
 8000e46:	2302      	movs	r3, #2
 8000e48:	e002      	b.n	8000e50 <HAL_GPIO_Init+0x21c>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <HAL_GPIO_Init+0x21c>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	69fa      	ldr	r2, [r7, #28]
 8000e52:	f002 0203 	and.w	r2, r2, #3
 8000e56:	0092      	lsls	r2, r2, #2
 8000e58:	4093      	lsls	r3, r2
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e60:	4935      	ldr	r1, [pc, #212]	; (8000f38 <HAL_GPIO_Init+0x304>)
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e6e:	4b3a      	ldr	r3, [pc, #232]	; (8000f58 <HAL_GPIO_Init+0x324>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e92:	4a31      	ldr	r2, [pc, #196]	; (8000f58 <HAL_GPIO_Init+0x324>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e98:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <HAL_GPIO_Init+0x324>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ebc:	4a26      	ldr	r2, [pc, #152]	; (8000f58 <HAL_GPIO_Init+0x324>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ec2:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <HAL_GPIO_Init+0x324>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ee6:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <HAL_GPIO_Init+0x324>)
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <HAL_GPIO_Init+0x324>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f10:	4a11      	ldr	r2, [pc, #68]	; (8000f58 <HAL_GPIO_Init+0x324>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	61fb      	str	r3, [r7, #28]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2b0f      	cmp	r3, #15
 8000f20:	f67f ae96 	bls.w	8000c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40013800 	.word	0x40013800
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	40020400 	.word	0x40020400
 8000f44:	40020800 	.word	0x40020800
 8000f48:	40020c00 	.word	0x40020c00
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40021400 	.word	0x40021400
 8000f54:	40021800 	.word	0x40021800
 8000f58:	40013c00 	.word	0x40013c00

08000f5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d002      	beq.n	8000f7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f74:	2301      	movs	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	e001      	b.n	8000f7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f9c:	787b      	ldrb	r3, [r7, #1]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa2:	887a      	ldrh	r2, [r7, #2]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fa8:	e003      	b.n	8000fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000faa:	887b      	ldrh	r3, [r7, #2]
 8000fac:	041a      	lsls	r2, r3, #16
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	619a      	str	r2, [r3, #24]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b085      	sub	sp, #20
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fd0:	887a      	ldrh	r2, [r7, #2]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	041a      	lsls	r2, r3, #16
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	400b      	ands	r3, r1
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	619a      	str	r2, [r3, #24]
}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e0cc      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001008:	4b68      	ldr	r3, [pc, #416]	; (80011ac <HAL_RCC_ClockConfig+0x1b8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 030f 	and.w	r3, r3, #15
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	429a      	cmp	r2, r3
 8001014:	d90c      	bls.n	8001030 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001016:	4b65      	ldr	r3, [pc, #404]	; (80011ac <HAL_RCC_ClockConfig+0x1b8>)
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800101e:	4b63      	ldr	r3, [pc, #396]	; (80011ac <HAL_RCC_ClockConfig+0x1b8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d001      	beq.n	8001030 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e0b8      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d020      	beq.n	800107e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d005      	beq.n	8001054 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001048:	4b59      	ldr	r3, [pc, #356]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	4a58      	ldr	r2, [pc, #352]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 800104e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001052:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0308 	and.w	r3, r3, #8
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001060:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	4a52      	ldr	r2, [pc, #328]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800106a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800106c:	4b50      	ldr	r3, [pc, #320]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	494d      	ldr	r1, [pc, #308]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 800107a:	4313      	orrs	r3, r2
 800107c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d044      	beq.n	8001114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d107      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001092:	4b47      	ldr	r3, [pc, #284]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d119      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e07f      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d003      	beq.n	80010b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d107      	bne.n	80010c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010b2:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d109      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e06f      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c2:	4b3b      	ldr	r3, [pc, #236]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e067      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010d2:	4b37      	ldr	r3, [pc, #220]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f023 0203 	bic.w	r2, r3, #3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	4934      	ldr	r1, [pc, #208]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 80010e0:	4313      	orrs	r3, r2
 80010e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010e4:	f7ff fcb8 	bl	8000a58 <HAL_GetTick>
 80010e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ea:	e00a      	b.n	8001102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ec:	f7ff fcb4 	bl	8000a58 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e04f      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001102:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 020c 	and.w	r2, r3, #12
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	429a      	cmp	r2, r3
 8001112:	d1eb      	bne.n	80010ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001114:	4b25      	ldr	r3, [pc, #148]	; (80011ac <HAL_RCC_ClockConfig+0x1b8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 030f 	and.w	r3, r3, #15
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d20c      	bcs.n	800113c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001122:	4b22      	ldr	r3, [pc, #136]	; (80011ac <HAL_RCC_ClockConfig+0x1b8>)
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <HAL_RCC_ClockConfig+0x1b8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d001      	beq.n	800113c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e032      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	d008      	beq.n	800115a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	4916      	ldr	r1, [pc, #88]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001156:	4313      	orrs	r3, r2
 8001158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d009      	beq.n	800117a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	490e      	ldr	r1, [pc, #56]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	4313      	orrs	r3, r2
 8001178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800117a:	f000 f873 	bl	8001264 <HAL_RCC_GetSysClockFreq>
 800117e:	4602      	mov	r2, r0
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	490a      	ldr	r1, [pc, #40]	; (80011b4 <HAL_RCC_ClockConfig+0x1c0>)
 800118c:	5ccb      	ldrb	r3, [r1, r3]
 800118e:	fa22 f303 	lsr.w	r3, r2, r3
 8001192:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_RCC_ClockConfig+0x1c8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fb58 	bl	8000850 <HAL_InitTick>

  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023c00 	.word	0x40023c00
 80011b0:	40023800 	.word	0x40023800
 80011b4:	08004bf0 	.word	0x08004bf0
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000004 	.word	0x20000004

080011c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000000 	.word	0x20000000

080011d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80011dc:	f7ff fff0 	bl	80011c0 <HAL_RCC_GetHCLKFreq>
 80011e0:	4602      	mov	r2, r0
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	0b5b      	lsrs	r3, r3, #13
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	4903      	ldr	r1, [pc, #12]	; (80011fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80011ee:	5ccb      	ldrb	r3, [r1, r3]
 80011f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40023800 	.word	0x40023800
 80011fc:	08004c00 	.word	0x08004c00

08001200 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	220f      	movs	r2, #15
 800120e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_RCC_GetClockConfig+0x5c>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 0203 	and.w	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_RCC_GetClockConfig+0x5c>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <HAL_RCC_GetClockConfig+0x5c>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_RCC_GetClockConfig+0x5c>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	08db      	lsrs	r3, r3, #3
 800123a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <HAL_RCC_GetClockConfig+0x60>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 020f 	and.w	r2, r3, #15
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	601a      	str	r2, [r3, #0]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40023c00 	.word	0x40023c00

08001264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001268:	b0a6      	sub	sp, #152	; 0x98
 800126a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001272:	2300      	movs	r3, #0
 8001274:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800128a:	4bc8      	ldr	r3, [pc, #800]	; (80015ac <HAL_RCC_GetSysClockFreq+0x348>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b0c      	cmp	r3, #12
 8001294:	f200 817e 	bhi.w	8001594 <HAL_RCC_GetSysClockFreq+0x330>
 8001298:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800129a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129e:	bf00      	nop
 80012a0:	080012d5 	.word	0x080012d5
 80012a4:	08001595 	.word	0x08001595
 80012a8:	08001595 	.word	0x08001595
 80012ac:	08001595 	.word	0x08001595
 80012b0:	080012dd 	.word	0x080012dd
 80012b4:	08001595 	.word	0x08001595
 80012b8:	08001595 	.word	0x08001595
 80012bc:	08001595 	.word	0x08001595
 80012c0:	080012e5 	.word	0x080012e5
 80012c4:	08001595 	.word	0x08001595
 80012c8:	08001595 	.word	0x08001595
 80012cc:	08001595 	.word	0x08001595
 80012d0:	0800144f 	.word	0x0800144f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012d4:	4bb6      	ldr	r3, [pc, #728]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80012d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80012da:	e15f      	b.n	800159c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012dc:	4bb5      	ldr	r3, [pc, #724]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x350>)
 80012de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80012e2:	e15b      	b.n	800159c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012e4:	4bb1      	ldr	r3, [pc, #708]	; (80015ac <HAL_RCC_GetSysClockFreq+0x348>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012f0:	4bae      	ldr	r3, [pc, #696]	; (80015ac <HAL_RCC_GetSysClockFreq+0x348>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d031      	beq.n	8001360 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012fc:	4bab      	ldr	r3, [pc, #684]	; (80015ac <HAL_RCC_GetSysClockFreq+0x348>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	2200      	movs	r2, #0
 8001304:	66bb      	str	r3, [r7, #104]	; 0x68
 8001306:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800130a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800130e:	663b      	str	r3, [r7, #96]	; 0x60
 8001310:	2300      	movs	r3, #0
 8001312:	667b      	str	r3, [r7, #100]	; 0x64
 8001314:	4ba7      	ldr	r3, [pc, #668]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001316:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800131a:	462a      	mov	r2, r5
 800131c:	fb03 f202 	mul.w	r2, r3, r2
 8001320:	2300      	movs	r3, #0
 8001322:	4621      	mov	r1, r4
 8001324:	fb01 f303 	mul.w	r3, r1, r3
 8001328:	4413      	add	r3, r2
 800132a:	4aa2      	ldr	r2, [pc, #648]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x350>)
 800132c:	4621      	mov	r1, r4
 800132e:	fba1 1202 	umull	r1, r2, r1, r2
 8001332:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001334:	460a      	mov	r2, r1
 8001336:	67ba      	str	r2, [r7, #120]	; 0x78
 8001338:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800133a:	4413      	add	r3, r2
 800133c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800133e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001342:	2200      	movs	r2, #0
 8001344:	65bb      	str	r3, [r7, #88]	; 0x58
 8001346:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001348:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800134c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001350:	f7fe ff5e 	bl	8000210 <__aeabi_uldivmod>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4613      	mov	r3, r2
 800135a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800135e:	e064      	b.n	800142a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001360:	4b92      	ldr	r3, [pc, #584]	; (80015ac <HAL_RCC_GetSysClockFreq+0x348>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	099b      	lsrs	r3, r3, #6
 8001366:	2200      	movs	r2, #0
 8001368:	653b      	str	r3, [r7, #80]	; 0x50
 800136a:	657a      	str	r2, [r7, #84]	; 0x54
 800136c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800136e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001372:	64bb      	str	r3, [r7, #72]	; 0x48
 8001374:	2300      	movs	r3, #0
 8001376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001378:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800137c:	4622      	mov	r2, r4
 800137e:	462b      	mov	r3, r5
 8001380:	f04f 0000 	mov.w	r0, #0
 8001384:	f04f 0100 	mov.w	r1, #0
 8001388:	0159      	lsls	r1, r3, #5
 800138a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800138e:	0150      	lsls	r0, r2, #5
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4621      	mov	r1, r4
 8001396:	1a51      	subs	r1, r2, r1
 8001398:	6139      	str	r1, [r7, #16]
 800139a:	4629      	mov	r1, r5
 800139c:	eb63 0301 	sbc.w	r3, r3, r1
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	f04f 0300 	mov.w	r3, #0
 80013aa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80013ae:	4659      	mov	r1, fp
 80013b0:	018b      	lsls	r3, r1, #6
 80013b2:	4651      	mov	r1, sl
 80013b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013b8:	4651      	mov	r1, sl
 80013ba:	018a      	lsls	r2, r1, #6
 80013bc:	4651      	mov	r1, sl
 80013be:	ebb2 0801 	subs.w	r8, r2, r1
 80013c2:	4659      	mov	r1, fp
 80013c4:	eb63 0901 	sbc.w	r9, r3, r1
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013dc:	4690      	mov	r8, r2
 80013de:	4699      	mov	r9, r3
 80013e0:	4623      	mov	r3, r4
 80013e2:	eb18 0303 	adds.w	r3, r8, r3
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	462b      	mov	r3, r5
 80013ea:	eb49 0303 	adc.w	r3, r9, r3
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80013fc:	4629      	mov	r1, r5
 80013fe:	028b      	lsls	r3, r1, #10
 8001400:	4621      	mov	r1, r4
 8001402:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001406:	4621      	mov	r1, r4
 8001408:	028a      	lsls	r2, r1, #10
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001412:	2200      	movs	r2, #0
 8001414:	643b      	str	r3, [r7, #64]	; 0x40
 8001416:	647a      	str	r2, [r7, #68]	; 0x44
 8001418:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800141c:	f7fe fef8 	bl	8000210 <__aeabi_uldivmod>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4613      	mov	r3, r2
 8001426:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800142a:	4b60      	ldr	r3, [pc, #384]	; (80015ac <HAL_RCC_GetSysClockFreq+0x348>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	0c1b      	lsrs	r3, r3, #16
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	3301      	adds	r3, #1
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800143c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001440:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001444:	fbb2 f3f3 	udiv	r3, r2, r3
 8001448:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800144c:	e0a6      	b.n	800159c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800144e:	4b57      	ldr	r3, [pc, #348]	; (80015ac <HAL_RCC_GetSysClockFreq+0x348>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001456:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800145a:	4b54      	ldr	r3, [pc, #336]	; (80015ac <HAL_RCC_GetSysClockFreq+0x348>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d02a      	beq.n	80014bc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001466:	4b51      	ldr	r3, [pc, #324]	; (80015ac <HAL_RCC_GetSysClockFreq+0x348>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	099b      	lsrs	r3, r3, #6
 800146c:	2200      	movs	r2, #0
 800146e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001470:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001474:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001478:	2100      	movs	r1, #0
 800147a:	4b4e      	ldr	r3, [pc, #312]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x350>)
 800147c:	fb03 f201 	mul.w	r2, r3, r1
 8001480:	2300      	movs	r3, #0
 8001482:	fb00 f303 	mul.w	r3, r0, r3
 8001486:	4413      	add	r3, r2
 8001488:	4a4a      	ldr	r2, [pc, #296]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x350>)
 800148a:	fba0 1202 	umull	r1, r2, r0, r2
 800148e:	677a      	str	r2, [r7, #116]	; 0x74
 8001490:	460a      	mov	r2, r1
 8001492:	673a      	str	r2, [r7, #112]	; 0x70
 8001494:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001496:	4413      	add	r3, r2
 8001498:	677b      	str	r3, [r7, #116]	; 0x74
 800149a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800149e:	2200      	movs	r2, #0
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
 80014a2:	637a      	str	r2, [r7, #52]	; 0x34
 80014a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014a8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80014ac:	f7fe feb0 	bl	8000210 <__aeabi_uldivmod>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4613      	mov	r3, r2
 80014b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014ba:	e05b      	b.n	8001574 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014bc:	4b3b      	ldr	r3, [pc, #236]	; (80015ac <HAL_RCC_GetSysClockFreq+0x348>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	099b      	lsrs	r3, r3, #6
 80014c2:	2200      	movs	r2, #0
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80014c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014ce:	623b      	str	r3, [r7, #32]
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
 80014d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80014d8:	4642      	mov	r2, r8
 80014da:	464b      	mov	r3, r9
 80014dc:	f04f 0000 	mov.w	r0, #0
 80014e0:	f04f 0100 	mov.w	r1, #0
 80014e4:	0159      	lsls	r1, r3, #5
 80014e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014ea:	0150      	lsls	r0, r2, #5
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4641      	mov	r1, r8
 80014f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80014f6:	4649      	mov	r1, r9
 80014f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001508:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800150c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001510:	ebb2 040a 	subs.w	r4, r2, sl
 8001514:	eb63 050b 	sbc.w	r5, r3, fp
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	00eb      	lsls	r3, r5, #3
 8001522:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001526:	00e2      	lsls	r2, r4, #3
 8001528:	4614      	mov	r4, r2
 800152a:	461d      	mov	r5, r3
 800152c:	4643      	mov	r3, r8
 800152e:	18e3      	adds	r3, r4, r3
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	464b      	mov	r3, r9
 8001534:	eb45 0303 	adc.w	r3, r5, r3
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001546:	4629      	mov	r1, r5
 8001548:	028b      	lsls	r3, r1, #10
 800154a:	4621      	mov	r1, r4
 800154c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001550:	4621      	mov	r1, r4
 8001552:	028a      	lsls	r2, r1, #10
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800155c:	2200      	movs	r2, #0
 800155e:	61bb      	str	r3, [r7, #24]
 8001560:	61fa      	str	r2, [r7, #28]
 8001562:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001566:	f7fe fe53 	bl	8000210 <__aeabi_uldivmod>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4613      	mov	r3, r2
 8001570:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_RCC_GetSysClockFreq+0x348>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	0f1b      	lsrs	r3, r3, #28
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001582:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001586:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800158a:	fbb2 f3f3 	udiv	r3, r2, r3
 800158e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001592:	e003      	b.n	800159c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800159a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800159c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3798      	adds	r7, #152	; 0x98
 80015a4:	46bd      	mov	sp, r7
 80015a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	00f42400 	.word	0x00f42400
 80015b4:	017d7840 	.word	0x017d7840

080015b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e28d      	b.n	8001ae6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 8083 	beq.w	80016de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015d8:	4b94      	ldr	r3, [pc, #592]	; (800182c <HAL_RCC_OscConfig+0x274>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d019      	beq.n	8001618 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015e4:	4b91      	ldr	r3, [pc, #580]	; (800182c <HAL_RCC_OscConfig+0x274>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015f0:	4b8e      	ldr	r3, [pc, #568]	; (800182c <HAL_RCC_OscConfig+0x274>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015fc:	d00c      	beq.n	8001618 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015fe:	4b8b      	ldr	r3, [pc, #556]	; (800182c <HAL_RCC_OscConfig+0x274>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001606:	2b0c      	cmp	r3, #12
 8001608:	d112      	bne.n	8001630 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160a:	4b88      	ldr	r3, [pc, #544]	; (800182c <HAL_RCC_OscConfig+0x274>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001616:	d10b      	bne.n	8001630 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	4b84      	ldr	r3, [pc, #528]	; (800182c <HAL_RCC_OscConfig+0x274>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d05b      	beq.n	80016dc <HAL_RCC_OscConfig+0x124>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d157      	bne.n	80016dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e25a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001638:	d106      	bne.n	8001648 <HAL_RCC_OscConfig+0x90>
 800163a:	4b7c      	ldr	r3, [pc, #496]	; (800182c <HAL_RCC_OscConfig+0x274>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a7b      	ldr	r2, [pc, #492]	; (800182c <HAL_RCC_OscConfig+0x274>)
 8001640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e01d      	b.n	8001684 <HAL_RCC_OscConfig+0xcc>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0xb4>
 8001652:	4b76      	ldr	r3, [pc, #472]	; (800182c <HAL_RCC_OscConfig+0x274>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a75      	ldr	r2, [pc, #468]	; (800182c <HAL_RCC_OscConfig+0x274>)
 8001658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b73      	ldr	r3, [pc, #460]	; (800182c <HAL_RCC_OscConfig+0x274>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a72      	ldr	r2, [pc, #456]	; (800182c <HAL_RCC_OscConfig+0x274>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e00b      	b.n	8001684 <HAL_RCC_OscConfig+0xcc>
 800166c:	4b6f      	ldr	r3, [pc, #444]	; (800182c <HAL_RCC_OscConfig+0x274>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a6e      	ldr	r2, [pc, #440]	; (800182c <HAL_RCC_OscConfig+0x274>)
 8001672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b6c      	ldr	r3, [pc, #432]	; (800182c <HAL_RCC_OscConfig+0x274>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a6b      	ldr	r2, [pc, #428]	; (800182c <HAL_RCC_OscConfig+0x274>)
 800167e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d013      	beq.n	80016b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff f9e4 	bl	8000a58 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff f9e0 	bl	8000a58 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e21f      	b.n	8001ae6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	4b61      	ldr	r3, [pc, #388]	; (800182c <HAL_RCC_OscConfig+0x274>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0xdc>
 80016b2:	e014      	b.n	80016de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff f9d0 	bl	8000a58 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff f9cc 	bl	8000a58 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	; 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e20b      	b.n	8001ae6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ce:	4b57      	ldr	r3, [pc, #348]	; (800182c <HAL_RCC_OscConfig+0x274>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x104>
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d06f      	beq.n	80017ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016ea:	4b50      	ldr	r3, [pc, #320]	; (800182c <HAL_RCC_OscConfig+0x274>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d017      	beq.n	8001726 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016f6:	4b4d      	ldr	r3, [pc, #308]	; (800182c <HAL_RCC_OscConfig+0x274>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d105      	bne.n	800170e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001702:	4b4a      	ldr	r3, [pc, #296]	; (800182c <HAL_RCC_OscConfig+0x274>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00b      	beq.n	8001726 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170e:	4b47      	ldr	r3, [pc, #284]	; (800182c <HAL_RCC_OscConfig+0x274>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001716:	2b0c      	cmp	r3, #12
 8001718:	d11c      	bne.n	8001754 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800171a:	4b44      	ldr	r3, [pc, #272]	; (800182c <HAL_RCC_OscConfig+0x274>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d116      	bne.n	8001754 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001726:	4b41      	ldr	r3, [pc, #260]	; (800182c <HAL_RCC_OscConfig+0x274>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_RCC_OscConfig+0x186>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d001      	beq.n	800173e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e1d3      	b.n	8001ae6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173e:	4b3b      	ldr	r3, [pc, #236]	; (800182c <HAL_RCC_OscConfig+0x274>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4937      	ldr	r1, [pc, #220]	; (800182c <HAL_RCC_OscConfig+0x274>)
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001752:	e03a      	b.n	80017ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d020      	beq.n	800179e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800175c:	4b34      	ldr	r3, [pc, #208]	; (8001830 <HAL_RCC_OscConfig+0x278>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001762:	f7ff f979 	bl	8000a58 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176a:	f7ff f975 	bl	8000a58 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e1b4      	b.n	8001ae6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177c:	4b2b      	ldr	r3, [pc, #172]	; (800182c <HAL_RCC_OscConfig+0x274>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001788:	4b28      	ldr	r3, [pc, #160]	; (800182c <HAL_RCC_OscConfig+0x274>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4925      	ldr	r1, [pc, #148]	; (800182c <HAL_RCC_OscConfig+0x274>)
 8001798:	4313      	orrs	r3, r2
 800179a:	600b      	str	r3, [r1, #0]
 800179c:	e015      	b.n	80017ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800179e:	4b24      	ldr	r3, [pc, #144]	; (8001830 <HAL_RCC_OscConfig+0x278>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff f958 	bl	8000a58 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ac:	f7ff f954 	bl	8000a58 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e193      	b.n	8001ae6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_RCC_OscConfig+0x274>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d036      	beq.n	8001844 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d016      	beq.n	800180c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_RCC_OscConfig+0x27c>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e4:	f7ff f938 	bl	8000a58 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ec:	f7ff f934 	bl	8000a58 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e173      	b.n	8001ae6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_RCC_OscConfig+0x274>)
 8001800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x234>
 800180a:	e01b      	b.n	8001844 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_OscConfig+0x27c>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001812:	f7ff f921 	bl	8000a58 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001818:	e00e      	b.n	8001838 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800181a:	f7ff f91d 	bl	8000a58 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d907      	bls.n	8001838 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e15c      	b.n	8001ae6 <HAL_RCC_OscConfig+0x52e>
 800182c:	40023800 	.word	0x40023800
 8001830:	42470000 	.word	0x42470000
 8001834:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001838:	4b8a      	ldr	r3, [pc, #552]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 800183a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1ea      	bne.n	800181a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 8097 	beq.w	8001980 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001856:	4b83      	ldr	r3, [pc, #524]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10f      	bne.n	8001882 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	4b7f      	ldr	r3, [pc, #508]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a7e      	ldr	r2, [pc, #504]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 800186c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b7c      	ldr	r3, [pc, #496]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800187e:	2301      	movs	r3, #1
 8001880:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001882:	4b79      	ldr	r3, [pc, #484]	; (8001a68 <HAL_RCC_OscConfig+0x4b0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d118      	bne.n	80018c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800188e:	4b76      	ldr	r3, [pc, #472]	; (8001a68 <HAL_RCC_OscConfig+0x4b0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a75      	ldr	r2, [pc, #468]	; (8001a68 <HAL_RCC_OscConfig+0x4b0>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189a:	f7ff f8dd 	bl	8000a58 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a2:	f7ff f8d9 	bl	8000a58 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e118      	b.n	8001ae6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b4:	4b6c      	ldr	r3, [pc, #432]	; (8001a68 <HAL_RCC_OscConfig+0x4b0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d106      	bne.n	80018d6 <HAL_RCC_OscConfig+0x31e>
 80018c8:	4b66      	ldr	r3, [pc, #408]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018cc:	4a65      	ldr	r2, [pc, #404]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6713      	str	r3, [r2, #112]	; 0x70
 80018d4:	e01c      	b.n	8001910 <HAL_RCC_OscConfig+0x358>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b05      	cmp	r3, #5
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x340>
 80018de:	4b61      	ldr	r3, [pc, #388]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e2:	4a60      	ldr	r2, [pc, #384]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ea:	4b5e      	ldr	r3, [pc, #376]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ee:	4a5d      	ldr	r2, [pc, #372]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6713      	str	r3, [r2, #112]	; 0x70
 80018f6:	e00b      	b.n	8001910 <HAL_RCC_OscConfig+0x358>
 80018f8:	4b5a      	ldr	r3, [pc, #360]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fc:	4a59      	ldr	r2, [pc, #356]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 80018fe:	f023 0301 	bic.w	r3, r3, #1
 8001902:	6713      	str	r3, [r2, #112]	; 0x70
 8001904:	4b57      	ldr	r3, [pc, #348]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	4a56      	ldr	r2, [pc, #344]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 800190a:	f023 0304 	bic.w	r3, r3, #4
 800190e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d015      	beq.n	8001944 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001918:	f7ff f89e 	bl	8000a58 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191e:	e00a      	b.n	8001936 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001920:	f7ff f89a 	bl	8000a58 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	; 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e0d7      	b.n	8001ae6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001936:	4b4b      	ldr	r3, [pc, #300]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0ee      	beq.n	8001920 <HAL_RCC_OscConfig+0x368>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff f888 	bl	8000a58 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194a:	e00a      	b.n	8001962 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800194c:	f7ff f884 	bl	8000a58 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	; 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e0c1      	b.n	8001ae6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001962:	4b40      	ldr	r3, [pc, #256]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 8001964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ee      	bne.n	800194c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800196e:	7dfb      	ldrb	r3, [r7, #23]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d105      	bne.n	8001980 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001974:	4b3b      	ldr	r3, [pc, #236]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	4a3a      	ldr	r2, [pc, #232]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 800197a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800197e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80ad 	beq.w	8001ae4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800198a:	4b36      	ldr	r3, [pc, #216]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b08      	cmp	r3, #8
 8001994:	d060      	beq.n	8001a58 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d145      	bne.n	8001a2a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199e:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <HAL_RCC_OscConfig+0x4b4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a4:	f7ff f858 	bl	8000a58 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff f854 	bl	8000a58 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e093      	b.n	8001ae6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019be:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69da      	ldr	r2, [r3, #28]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	019b      	lsls	r3, r3, #6
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	085b      	lsrs	r3, r3, #1
 80019e2:	3b01      	subs	r3, #1
 80019e4:	041b      	lsls	r3, r3, #16
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	061b      	lsls	r3, r3, #24
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	071b      	lsls	r3, r3, #28
 80019f6:	491b      	ldr	r1, [pc, #108]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_RCC_OscConfig+0x4b4>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a02:	f7ff f829 	bl	8000a58 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0a:	f7ff f825 	bl	8000a58 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e064      	b.n	8001ae6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x452>
 8001a28:	e05c      	b.n	8001ae4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <HAL_RCC_OscConfig+0x4b4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff f812 	bl	8000a58 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a38:	f7ff f80e 	bl	8000a58 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e04d      	b.n	8001ae6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_RCC_OscConfig+0x4ac>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x480>
 8001a56:	e045      	b.n	8001ae4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e040      	b.n	8001ae6 <HAL_RCC_OscConfig+0x52e>
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a70:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <HAL_RCC_OscConfig+0x538>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d030      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d129      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d122      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d119      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	085b      	lsrs	r3, r3, #1
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d10f      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d107      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e041      	b.n	8001b8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f839 	bl	8001b92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3304      	adds	r3, #4
 8001b30:	4619      	mov	r1, r3
 8001b32:	4610      	mov	r0, r2
 8001b34:	f000 f9d8 	bl	8001ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d001      	beq.n	8001bc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e04e      	b.n	8001c5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a23      	ldr	r2, [pc, #140]	; (8001c6c <HAL_TIM_Base_Start_IT+0xc4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d022      	beq.n	8001c28 <HAL_TIM_Base_Start_IT+0x80>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bea:	d01d      	beq.n	8001c28 <HAL_TIM_Base_Start_IT+0x80>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1f      	ldr	r2, [pc, #124]	; (8001c70 <HAL_TIM_Base_Start_IT+0xc8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d018      	beq.n	8001c28 <HAL_TIM_Base_Start_IT+0x80>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1e      	ldr	r2, [pc, #120]	; (8001c74 <HAL_TIM_Base_Start_IT+0xcc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d013      	beq.n	8001c28 <HAL_TIM_Base_Start_IT+0x80>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d00e      	beq.n	8001c28 <HAL_TIM_Base_Start_IT+0x80>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a1b      	ldr	r2, [pc, #108]	; (8001c7c <HAL_TIM_Base_Start_IT+0xd4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d009      	beq.n	8001c28 <HAL_TIM_Base_Start_IT+0x80>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d004      	beq.n	8001c28 <HAL_TIM_Base_Start_IT+0x80>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d111      	bne.n	8001c4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d010      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 0201 	orr.w	r2, r2, #1
 8001c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c4a:	e007      	b.n	8001c5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40010000 	.word	0x40010000
 8001c70:	40000400 	.word	0x40000400
 8001c74:	40000800 	.word	0x40000800
 8001c78:	40000c00 	.word	0x40000c00
 8001c7c:	40010400 	.word	0x40010400
 8001c80:	40014000 	.word	0x40014000
 8001c84:	40001800 	.word	0x40001800

08001c88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d122      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d11b      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0202 	mvn.w	r2, #2
 8001cb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f8ee 	bl	8001eac <HAL_TIM_IC_CaptureCallback>
 8001cd0:	e005      	b.n	8001cde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f8e0 	bl	8001e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f8f1 	bl	8001ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d122      	bne.n	8001d38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d11b      	bne.n	8001d38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0204 	mvn.w	r2, #4
 8001d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f8c4 	bl	8001eac <HAL_TIM_IC_CaptureCallback>
 8001d24:	e005      	b.n	8001d32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f8b6 	bl	8001e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f8c7 	bl	8001ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d122      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d11b      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0208 	mvn.w	r2, #8
 8001d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2204      	movs	r2, #4
 8001d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f89a 	bl	8001eac <HAL_TIM_IC_CaptureCallback>
 8001d78:	e005      	b.n	8001d86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f88c 	bl	8001e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f89d 	bl	8001ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	2b10      	cmp	r3, #16
 8001d98:	d122      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b10      	cmp	r3, #16
 8001da6:	d11b      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0210 	mvn.w	r2, #16
 8001db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2208      	movs	r2, #8
 8001db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f870 	bl	8001eac <HAL_TIM_IC_CaptureCallback>
 8001dcc:	e005      	b.n	8001dda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f862 	bl	8001e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f873 	bl	8001ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d10e      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d107      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0201 	mvn.w	r2, #1
 8001e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7fe fcde 	bl	80007c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e16:	2b80      	cmp	r3, #128	; 0x80
 8001e18:	d10e      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e24:	2b80      	cmp	r3, #128	; 0x80
 8001e26:	d107      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f902 	bl	800203c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e42:	2b40      	cmp	r3, #64	; 0x40
 8001e44:	d10e      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e50:	2b40      	cmp	r3, #64	; 0x40
 8001e52:	d107      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f838 	bl	8001ed4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	d10e      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0320 	and.w	r3, r3, #32
 8001e7c:	2b20      	cmp	r3, #32
 8001e7e:	d107      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0220 	mvn.w	r2, #32
 8001e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8cc 	bl	8002028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a40      	ldr	r2, [pc, #256]	; (8001ffc <TIM_Base_SetConfig+0x114>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d013      	beq.n	8001f28 <TIM_Base_SetConfig+0x40>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f06:	d00f      	beq.n	8001f28 <TIM_Base_SetConfig+0x40>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3d      	ldr	r2, [pc, #244]	; (8002000 <TIM_Base_SetConfig+0x118>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00b      	beq.n	8001f28 <TIM_Base_SetConfig+0x40>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a3c      	ldr	r2, [pc, #240]	; (8002004 <TIM_Base_SetConfig+0x11c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d007      	beq.n	8001f28 <TIM_Base_SetConfig+0x40>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a3b      	ldr	r2, [pc, #236]	; (8002008 <TIM_Base_SetConfig+0x120>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d003      	beq.n	8001f28 <TIM_Base_SetConfig+0x40>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a3a      	ldr	r2, [pc, #232]	; (800200c <TIM_Base_SetConfig+0x124>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d108      	bne.n	8001f3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a2f      	ldr	r2, [pc, #188]	; (8001ffc <TIM_Base_SetConfig+0x114>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d02b      	beq.n	8001f9a <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f48:	d027      	beq.n	8001f9a <TIM_Base_SetConfig+0xb2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a2c      	ldr	r2, [pc, #176]	; (8002000 <TIM_Base_SetConfig+0x118>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d023      	beq.n	8001f9a <TIM_Base_SetConfig+0xb2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a2b      	ldr	r2, [pc, #172]	; (8002004 <TIM_Base_SetConfig+0x11c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d01f      	beq.n	8001f9a <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a2a      	ldr	r2, [pc, #168]	; (8002008 <TIM_Base_SetConfig+0x120>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d01b      	beq.n	8001f9a <TIM_Base_SetConfig+0xb2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a29      	ldr	r2, [pc, #164]	; (800200c <TIM_Base_SetConfig+0x124>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d017      	beq.n	8001f9a <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a28      	ldr	r2, [pc, #160]	; (8002010 <TIM_Base_SetConfig+0x128>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <TIM_Base_SetConfig+0xb2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a27      	ldr	r2, [pc, #156]	; (8002014 <TIM_Base_SetConfig+0x12c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00f      	beq.n	8001f9a <TIM_Base_SetConfig+0xb2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a26      	ldr	r2, [pc, #152]	; (8002018 <TIM_Base_SetConfig+0x130>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00b      	beq.n	8001f9a <TIM_Base_SetConfig+0xb2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a25      	ldr	r2, [pc, #148]	; (800201c <TIM_Base_SetConfig+0x134>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d007      	beq.n	8001f9a <TIM_Base_SetConfig+0xb2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a24      	ldr	r2, [pc, #144]	; (8002020 <TIM_Base_SetConfig+0x138>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d003      	beq.n	8001f9a <TIM_Base_SetConfig+0xb2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a23      	ldr	r2, [pc, #140]	; (8002024 <TIM_Base_SetConfig+0x13c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d108      	bne.n	8001fac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <TIM_Base_SetConfig+0x114>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d003      	beq.n	8001fe0 <TIM_Base_SetConfig+0xf8>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a0c      	ldr	r2, [pc, #48]	; (800200c <TIM_Base_SetConfig+0x124>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d103      	bne.n	8001fe8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	615a      	str	r2, [r3, #20]
}
 8001fee:	bf00      	nop
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40010000 	.word	0x40010000
 8002000:	40000400 	.word	0x40000400
 8002004:	40000800 	.word	0x40000800
 8002008:	40000c00 	.word	0x40000c00
 800200c:	40010400 	.word	0x40010400
 8002010:	40014000 	.word	0x40014000
 8002014:	40014400 	.word	0x40014400
 8002018:	40014800 	.word	0x40014800
 800201c:	40001800 	.word	0x40001800
 8002020:	40001c00 	.word	0x40001c00
 8002024:	40002000 	.word	0x40002000

08002028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <SysTick_Handler+0x1c>)
 8002056:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002058:	f001 fcce 	bl	80039f8 <xTaskGetSchedulerState>
 800205c:	4603      	mov	r3, r0
 800205e:	2b01      	cmp	r3, #1
 8002060:	d001      	beq.n	8002066 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002062:	f002 fab9 	bl	80045d8 <xPortSysTickHandler>
  }
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	e000e010 	.word	0xe000e010

08002070 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002076:	f3ef 8305 	mrs	r3, IPSR
 800207a:	603b      	str	r3, [r7, #0]
  return(result);
 800207c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002082:	f06f 0305 	mvn.w	r3, #5
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	e00c      	b.n	80020a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <osKernelInitialize+0x44>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <osKernelInitialize+0x44>)
 8002094:	2201      	movs	r2, #1
 8002096:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002098:	2300      	movs	r3, #0
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	e002      	b.n	80020a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800209e:	f04f 33ff 	mov.w	r3, #4294967295
 80020a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80020a4:	687b      	ldr	r3, [r7, #4]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000088 	.word	0x20000088

080020b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08e      	sub	sp, #56	; 0x38
 80020bc:	af04      	add	r7, sp, #16
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020c8:	f3ef 8305 	mrs	r3, IPSR
 80020cc:	617b      	str	r3, [r7, #20]
  return(result);
 80020ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d17e      	bne.n	80021d2 <osThreadNew+0x11a>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d07b      	beq.n	80021d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80020de:	2318      	movs	r3, #24
 80020e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d045      	beq.n	800217e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <osThreadNew+0x48>
        name = attr->name;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <osThreadNew+0x6e>
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	2b38      	cmp	r3, #56	; 0x38
 8002118:	d805      	bhi.n	8002126 <osThreadNew+0x6e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <osThreadNew+0x72>
        return (NULL);
 8002126:	2300      	movs	r3, #0
 8002128:	e054      	b.n	80021d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00e      	beq.n	8002160 <osThreadNew+0xa8>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2b5b      	cmp	r3, #91	; 0x5b
 8002148:	d90a      	bls.n	8002160 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <osThreadNew+0xa8>
        mem = 1;
 800215a:	2301      	movs	r3, #1
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	e010      	b.n	8002182 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10c      	bne.n	8002182 <osThreadNew+0xca>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d108      	bne.n	8002182 <osThreadNew+0xca>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d104      	bne.n	8002182 <osThreadNew+0xca>
          mem = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	e001      	b.n	8002182 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d110      	bne.n	80021aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002190:	9202      	str	r2, [sp, #8]
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	6a3a      	ldr	r2, [r7, #32]
 800219c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 fe0c 	bl	8002dbc <xTaskCreateStatic>
 80021a4:	4603      	mov	r3, r0
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	e013      	b.n	80021d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d110      	bne.n	80021d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	f107 0310 	add.w	r3, r7, #16
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 fe57 	bl	8002e76 <xTaskCreate>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d001      	beq.n	80021d2 <osThreadNew+0x11a>
            hTask = NULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80021d2:	693b      	ldr	r3, [r7, #16]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3728      	adds	r7, #40	; 0x28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021e4:	f3ef 8305 	mrs	r3, IPSR
 80021e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80021ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <osDelay+0x1c>
    stat = osErrorISR;
 80021f0:	f06f 0305 	mvn.w	r3, #5
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	e007      	b.n	8002208 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 ff7c 	bl	8003100 <vTaskDelay>
    }
  }

  return (stat);
 8002208:	68fb      	ldr	r3, [r7, #12]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4a07      	ldr	r2, [pc, #28]	; (8002240 <vApplicationGetIdleTaskMemory+0x2c>)
 8002224:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	4a06      	ldr	r2, [pc, #24]	; (8002244 <vApplicationGetIdleTaskMemory+0x30>)
 800222a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2280      	movs	r2, #128	; 0x80
 8002230:	601a      	str	r2, [r3, #0]
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	2000008c 	.word	0x2000008c
 8002244:	200000e8 	.word	0x200000e8

08002248 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4a07      	ldr	r2, [pc, #28]	; (8002274 <vApplicationGetTimerTaskMemory+0x2c>)
 8002258:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	4a06      	ldr	r2, [pc, #24]	; (8002278 <vApplicationGetTimerTaskMemory+0x30>)
 800225e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002266:	601a      	str	r2, [r3, #0]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	200002e8 	.word	0x200002e8
 8002278:	20000344 	.word	0x20000344

0800227c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f103 0208 	add.w	r2, r3, #8
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f04f 32ff 	mov.w	r2, #4294967295
 8002294:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f103 0208 	add.w	r2, r3, #8
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f103 0208 	add.w	r2, r3, #8
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022d6:	b480      	push	{r7}
 80022d8:	b085      	sub	sp, #20
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	601a      	str	r2, [r3, #0]
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002334:	d103      	bne.n	800233e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	e00c      	b.n	8002358 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3308      	adds	r3, #8
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	e002      	b.n	800234c <vListInsert+0x2e>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	429a      	cmp	r2, r3
 8002356:	d2f6      	bcs.n	8002346 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	601a      	str	r2, [r3, #0]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6892      	ldr	r2, [r2, #8]
 80023a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6852      	ldr	r2, [r2, #4]
 80023b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d103      	bne.n	80023c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	1e5a      	subs	r2, r3, #1
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10a      	bne.n	800240e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80023f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fc:	f383 8811 	msr	BASEPRI, r3
 8002400:	f3bf 8f6f 	isb	sy
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800240a:	bf00      	nop
 800240c:	e7fe      	b.n	800240c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800240e:	f002 f851 	bl	80044b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241a:	68f9      	ldr	r1, [r7, #12]
 800241c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	441a      	add	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	3b01      	subs	r3, #1
 8002440:	68f9      	ldr	r1, [r7, #12]
 8002442:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	441a      	add	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	22ff      	movs	r2, #255	; 0xff
 8002452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	22ff      	movs	r2, #255	; 0xff
 800245a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d114      	bne.n	800248e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01a      	beq.n	80024a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3310      	adds	r3, #16
 8002470:	4618      	mov	r0, r3
 8002472:	f001 f903 	bl	800367c <xTaskRemoveFromEventList>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d012      	beq.n	80024a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <xQueueGenericReset+0xcc>)
 800247e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	f3bf 8f6f 	isb	sy
 800248c:	e009      	b.n	80024a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3310      	adds	r3, #16
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fef2 	bl	800227c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	3324      	adds	r3, #36	; 0x24
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff feed 	bl	800227c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80024a2:	f002 f837 	bl	8004514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80024a6:	2301      	movs	r3, #1
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	e000ed04 	.word	0xe000ed04

080024b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08e      	sub	sp, #56	; 0x38
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10a      	bne.n	80024de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80024c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024cc:	f383 8811 	msr	BASEPRI, r3
 80024d0:	f3bf 8f6f 	isb	sy
 80024d4:	f3bf 8f4f 	dsb	sy
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80024da:	bf00      	nop
 80024dc:	e7fe      	b.n	80024dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10a      	bne.n	80024fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80024e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e8:	f383 8811 	msr	BASEPRI, r3
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024f6:	bf00      	nop
 80024f8:	e7fe      	b.n	80024f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <xQueueGenericCreateStatic+0x52>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <xQueueGenericCreateStatic+0x56>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <xQueueGenericCreateStatic+0x58>
 800250a:	2300      	movs	r3, #0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10a      	bne.n	8002526 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	623b      	str	r3, [r7, #32]
}
 8002522:	bf00      	nop
 8002524:	e7fe      	b.n	8002524 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d102      	bne.n	8002532 <xQueueGenericCreateStatic+0x7e>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <xQueueGenericCreateStatic+0x82>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <xQueueGenericCreateStatic+0x84>
 8002536:	2300      	movs	r3, #0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800253c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	61fb      	str	r3, [r7, #28]
}
 800254e:	bf00      	nop
 8002550:	e7fe      	b.n	8002550 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002552:	2350      	movs	r3, #80	; 0x50
 8002554:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2b50      	cmp	r3, #80	; 0x50
 800255a:	d00a      	beq.n	8002572 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800255c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002560:	f383 8811 	msr	BASEPRI, r3
 8002564:	f3bf 8f6f 	isb	sy
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	61bb      	str	r3, [r7, #24]
}
 800256e:	bf00      	nop
 8002570:	e7fe      	b.n	8002570 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002572:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00d      	beq.n	800259a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002586:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	4613      	mov	r3, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	68b9      	ldr	r1, [r7, #8]
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f805 	bl	80025a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800259c:	4618      	mov	r0, r3
 800259e:	3730      	adds	r7, #48	; 0x30
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d103      	bne.n	80025c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	e002      	b.n	80025c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025d2:	2101      	movs	r1, #1
 80025d4:	69b8      	ldr	r0, [r7, #24]
 80025d6:	f7ff ff05 	bl	80023e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08e      	sub	sp, #56	; 0x38
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025fa:	2300      	movs	r3, #0
 80025fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10a      	bne.n	800261e <xQueueGenericSend+0x32>
	__asm volatile
 8002608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800261a:	bf00      	nop
 800261c:	e7fe      	b.n	800261c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d103      	bne.n	800262c <xQueueGenericSend+0x40>
 8002624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <xQueueGenericSend+0x44>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <xQueueGenericSend+0x46>
 8002630:	2300      	movs	r3, #0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10a      	bne.n	800264c <xQueueGenericSend+0x60>
	__asm volatile
 8002636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263a:	f383 8811 	msr	BASEPRI, r3
 800263e:	f3bf 8f6f 	isb	sy
 8002642:	f3bf 8f4f 	dsb	sy
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002648:	bf00      	nop
 800264a:	e7fe      	b.n	800264a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d103      	bne.n	800265a <xQueueGenericSend+0x6e>
 8002652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <xQueueGenericSend+0x72>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <xQueueGenericSend+0x74>
 800265e:	2300      	movs	r3, #0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10a      	bne.n	800267a <xQueueGenericSend+0x8e>
	__asm volatile
 8002664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002668:	f383 8811 	msr	BASEPRI, r3
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f3bf 8f4f 	dsb	sy
 8002674:	623b      	str	r3, [r7, #32]
}
 8002676:	bf00      	nop
 8002678:	e7fe      	b.n	8002678 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800267a:	f001 f9bd 	bl	80039f8 <xTaskGetSchedulerState>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <xQueueGenericSend+0x9e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <xQueueGenericSend+0xa2>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <xQueueGenericSend+0xa4>
 800268e:	2300      	movs	r3, #0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10a      	bne.n	80026aa <xQueueGenericSend+0xbe>
	__asm volatile
 8002694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	61fb      	str	r3, [r7, #28]
}
 80026a6:	bf00      	nop
 80026a8:	e7fe      	b.n	80026a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80026aa:	f001 ff03 	bl	80044b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d302      	bcc.n	80026c0 <xQueueGenericSend+0xd4>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d129      	bne.n	8002714 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	68b9      	ldr	r1, [r7, #8]
 80026c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026c6:	f000 fa0b 	bl	8002ae0 <prvCopyDataToQueue>
 80026ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d010      	beq.n	80026f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d6:	3324      	adds	r3, #36	; 0x24
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 ffcf 	bl	800367c <xTaskRemoveFromEventList>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d013      	beq.n	800270c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80026e4:	4b3f      	ldr	r3, [pc, #252]	; (80027e4 <xQueueGenericSend+0x1f8>)
 80026e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	e00a      	b.n	800270c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80026f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80026fc:	4b39      	ldr	r3, [pc, #228]	; (80027e4 <xQueueGenericSend+0x1f8>)
 80026fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800270c:	f001 ff02 	bl	8004514 <vPortExitCritical>
				return pdPASS;
 8002710:	2301      	movs	r3, #1
 8002712:	e063      	b.n	80027dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d103      	bne.n	8002722 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800271a:	f001 fefb 	bl	8004514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800271e:	2300      	movs	r3, #0
 8002720:	e05c      	b.n	80027dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002724:	2b00      	cmp	r3, #0
 8002726:	d106      	bne.n	8002736 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	4618      	mov	r0, r3
 800272e:	f001 f809 	bl	8003744 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002732:	2301      	movs	r3, #1
 8002734:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002736:	f001 feed 	bl	8004514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800273a:	f000 fd7b 	bl	8003234 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800273e:	f001 feb9 	bl	80044b4 <vPortEnterCritical>
 8002742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002744:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002748:	b25b      	sxtb	r3, r3
 800274a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274e:	d103      	bne.n	8002758 <xQueueGenericSend+0x16c>
 8002750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800275e:	b25b      	sxtb	r3, r3
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d103      	bne.n	800276e <xQueueGenericSend+0x182>
 8002766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800276e:	f001 fed1 	bl	8004514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002772:	1d3a      	adds	r2, r7, #4
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fff8 	bl	8003770 <xTaskCheckForTimeOut>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d124      	bne.n	80027d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002786:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002788:	f000 faa2 	bl	8002cd0 <prvIsQueueFull>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d018      	beq.n	80027c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002794:	3310      	adds	r3, #16
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f000 ff1e 	bl	80035dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80027a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027a2:	f000 fa2d 	bl	8002c00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80027a6:	f000 fd53 	bl	8003250 <xTaskResumeAll>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f47f af7c 	bne.w	80026aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80027b2:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <xQueueGenericSend+0x1f8>)
 80027b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	f3bf 8f6f 	isb	sy
 80027c2:	e772      	b.n	80026aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80027c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027c6:	f000 fa1b 	bl	8002c00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027ca:	f000 fd41 	bl	8003250 <xTaskResumeAll>
 80027ce:	e76c      	b.n	80026aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80027d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027d2:	f000 fa15 	bl	8002c00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027d6:	f000 fd3b 	bl	8003250 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80027da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3738      	adds	r7, #56	; 0x38
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	e000ed04 	.word	0xe000ed04

080027e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b090      	sub	sp, #64	; 0x40
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80027fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002812:	bf00      	nop
 8002814:	e7fe      	b.n	8002814 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d103      	bne.n	8002824 <xQueueGenericSendFromISR+0x3c>
 800281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <xQueueGenericSendFromISR+0x40>
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <xQueueGenericSendFromISR+0x42>
 8002828:	2300      	movs	r3, #0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10a      	bne.n	8002844 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800282e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002832:	f383 8811 	msr	BASEPRI, r3
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002840:	bf00      	nop
 8002842:	e7fe      	b.n	8002842 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d103      	bne.n	8002852 <xQueueGenericSendFromISR+0x6a>
 800284a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <xQueueGenericSendFromISR+0x6e>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <xQueueGenericSendFromISR+0x70>
 8002856:	2300      	movs	r3, #0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800285c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002860:	f383 8811 	msr	BASEPRI, r3
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	623b      	str	r3, [r7, #32]
}
 800286e:	bf00      	nop
 8002870:	e7fe      	b.n	8002870 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002872:	f001 ff01 	bl	8004678 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002876:	f3ef 8211 	mrs	r2, BASEPRI
 800287a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287e:	f383 8811 	msr	BASEPRI, r3
 8002882:	f3bf 8f6f 	isb	sy
 8002886:	f3bf 8f4f 	dsb	sy
 800288a:	61fa      	str	r2, [r7, #28]
 800288c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800288e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002890:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289a:	429a      	cmp	r2, r3
 800289c:	d302      	bcc.n	80028a4 <xQueueGenericSendFromISR+0xbc>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d12f      	bne.n	8002904 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80028a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028ba:	f000 f911 	bl	8002ae0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80028be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80028c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c6:	d112      	bne.n	80028ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d016      	beq.n	80028fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d2:	3324      	adds	r3, #36	; 0x24
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 fed1 	bl	800367c <xTaskRemoveFromEventList>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00e      	beq.n	80028fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00b      	beq.n	80028fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e007      	b.n	80028fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80028ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028f2:	3301      	adds	r3, #1
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	b25a      	sxtb	r2, r3
 80028f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80028fe:	2301      	movs	r3, #1
 8002900:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002902:	e001      	b.n	8002908 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002904:	2300      	movs	r3, #0
 8002906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800290a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002912:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002916:	4618      	mov	r0, r3
 8002918:	3740      	adds	r7, #64	; 0x40
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08c      	sub	sp, #48	; 0x30
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800292c:	2300      	movs	r3, #0
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10a      	bne.n	8002950 <xQueueReceive+0x30>
	__asm volatile
 800293a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293e:	f383 8811 	msr	BASEPRI, r3
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	f3bf 8f4f 	dsb	sy
 800294a:	623b      	str	r3, [r7, #32]
}
 800294c:	bf00      	nop
 800294e:	e7fe      	b.n	800294e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <xQueueReceive+0x3e>
 8002956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <xQueueReceive+0x42>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <xQueueReceive+0x44>
 8002962:	2300      	movs	r3, #0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10a      	bne.n	800297e <xQueueReceive+0x5e>
	__asm volatile
 8002968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296c:	f383 8811 	msr	BASEPRI, r3
 8002970:	f3bf 8f6f 	isb	sy
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	61fb      	str	r3, [r7, #28]
}
 800297a:	bf00      	nop
 800297c:	e7fe      	b.n	800297c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800297e:	f001 f83b 	bl	80039f8 <xTaskGetSchedulerState>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <xQueueReceive+0x6e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <xQueueReceive+0x72>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <xQueueReceive+0x74>
 8002992:	2300      	movs	r3, #0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <xQueueReceive+0x8e>
	__asm volatile
 8002998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299c:	f383 8811 	msr	BASEPRI, r3
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	61bb      	str	r3, [r7, #24]
}
 80029aa:	bf00      	nop
 80029ac:	e7fe      	b.n	80029ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029ae:	f001 fd81 	bl	80044b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d01f      	beq.n	80029fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029c2:	f000 f8f7 	bl	8002bb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	1e5a      	subs	r2, r3, #1
 80029ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00f      	beq.n	80029f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d8:	3310      	adds	r3, #16
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fe4e 	bl	800367c <xTaskRemoveFromEventList>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80029e6:	4b3d      	ldr	r3, [pc, #244]	; (8002adc <xQueueReceive+0x1bc>)
 80029e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	f3bf 8f4f 	dsb	sy
 80029f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80029f6:	f001 fd8d 	bl	8004514 <vPortExitCritical>
				return pdPASS;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e069      	b.n	8002ad2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d103      	bne.n	8002a0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a04:	f001 fd86 	bl	8004514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e062      	b.n	8002ad2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a12:	f107 0310 	add.w	r3, r7, #16
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fe94 	bl	8003744 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a20:	f001 fd78 	bl	8004514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a24:	f000 fc06 	bl	8003234 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a28:	f001 fd44 	bl	80044b4 <vPortEnterCritical>
 8002a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a32:	b25b      	sxtb	r3, r3
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d103      	bne.n	8002a42 <xQueueReceive+0x122>
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a48:	b25b      	sxtb	r3, r3
 8002a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4e:	d103      	bne.n	8002a58 <xQueueReceive+0x138>
 8002a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a58:	f001 fd5c 	bl	8004514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a5c:	1d3a      	adds	r2, r7, #4
 8002a5e:	f107 0310 	add.w	r3, r7, #16
 8002a62:	4611      	mov	r1, r2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 fe83 	bl	8003770 <xTaskCheckForTimeOut>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d123      	bne.n	8002ab8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a72:	f000 f917 	bl	8002ca4 <prvIsQueueEmpty>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d017      	beq.n	8002aac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7e:	3324      	adds	r3, #36	; 0x24
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 fda9 	bl	80035dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a8c:	f000 f8b8 	bl	8002c00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a90:	f000 fbde 	bl	8003250 <xTaskResumeAll>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d189      	bne.n	80029ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002a9a:	4b10      	ldr	r3, [pc, #64]	; (8002adc <xQueueReceive+0x1bc>)
 8002a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	e780      	b.n	80029ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002aae:	f000 f8a7 	bl	8002c00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ab2:	f000 fbcd 	bl	8003250 <xTaskResumeAll>
 8002ab6:	e77a      	b.n	80029ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002aba:	f000 f8a1 	bl	8002c00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002abe:	f000 fbc7 	bl	8003250 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ac4:	f000 f8ee 	bl	8002ca4 <prvIsQueueEmpty>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f43f af6f 	beq.w	80029ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ad0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3730      	adds	r7, #48	; 0x30
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	e000ed04 	.word	0xe000ed04

08002ae0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10d      	bne.n	8002b1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d14d      	bne.n	8002ba2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 ff92 	bl	8003a34 <xTaskPriorityDisinherit>
 8002b10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	e043      	b.n	8002ba2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d119      	bne.n	8002b54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6858      	ldr	r0, [r3, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	f001 fffa 	bl	8004b24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	441a      	add	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d32b      	bcc.n	8002ba2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	e026      	b.n	8002ba2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	68d8      	ldr	r0, [r3, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	f001 ffe0 	bl	8004b24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	425b      	negs	r3, r3
 8002b6e:	441a      	add	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d207      	bcs.n	8002b90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	425b      	negs	r3, r3
 8002b8a:	441a      	add	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d105      	bne.n	8002ba2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002baa:	697b      	ldr	r3, [r7, #20]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d018      	beq.n	8002bf8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	441a      	add	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d303      	bcc.n	8002be8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68d9      	ldr	r1, [r3, #12]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	6838      	ldr	r0, [r7, #0]
 8002bf4:	f001 ff96 	bl	8004b24 <memcpy>
	}
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002c08:	f001 fc54 	bl	80044b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c14:	e011      	b.n	8002c3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d012      	beq.n	8002c44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3324      	adds	r3, #36	; 0x24
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fd2a 	bl	800367c <xTaskRemoveFromEventList>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c2e:	f000 fe01 	bl	8003834 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	dce9      	bgt.n	8002c16 <prvUnlockQueue+0x16>
 8002c42:	e000      	b.n	8002c46 <prvUnlockQueue+0x46>
					break;
 8002c44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	22ff      	movs	r2, #255	; 0xff
 8002c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c4e:	f001 fc61 	bl	8004514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c52:	f001 fc2f 	bl	80044b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c5e:	e011      	b.n	8002c84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d012      	beq.n	8002c8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3310      	adds	r3, #16
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 fd05 	bl	800367c <xTaskRemoveFromEventList>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c78:	f000 fddc 	bl	8003834 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c7c:	7bbb      	ldrb	r3, [r7, #14]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	dce9      	bgt.n	8002c60 <prvUnlockQueue+0x60>
 8002c8c:	e000      	b.n	8002c90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	22ff      	movs	r2, #255	; 0xff
 8002c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002c98:	f001 fc3c 	bl	8004514 <vPortExitCritical>
}
 8002c9c:	bf00      	nop
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cac:	f001 fc02 	bl	80044b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d102      	bne.n	8002cbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e001      	b.n	8002cc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cc2:	f001 fc27 	bl	8004514 <vPortExitCritical>

	return xReturn;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cd8:	f001 fbec 	bl	80044b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d102      	bne.n	8002cee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	e001      	b.n	8002cf2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cf2:	f001 fc0f 	bl	8004514 <vPortExitCritical>

	return xReturn;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	e014      	b.n	8002d3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d10:	4a0f      	ldr	r2, [pc, #60]	; (8002d50 <vQueueAddToRegistry+0x50>)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10b      	bne.n	8002d34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d1c:	490c      	ldr	r1, [pc, #48]	; (8002d50 <vQueueAddToRegistry+0x50>)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002d26:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <vQueueAddToRegistry+0x50>)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002d32:	e006      	b.n	8002d42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3301      	adds	r3, #1
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b07      	cmp	r3, #7
 8002d3e:	d9e7      	bls.n	8002d10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000744 	.word	0x20000744

08002d54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d64:	f001 fba6 	bl	80044b4 <vPortEnterCritical>
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d6e:	b25b      	sxtb	r3, r3
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d103      	bne.n	8002d7e <vQueueWaitForMessageRestricted+0x2a>
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d84:	b25b      	sxtb	r3, r3
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	d103      	bne.n	8002d94 <vQueueWaitForMessageRestricted+0x40>
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d94:	f001 fbbe 	bl	8004514 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d106      	bne.n	8002dae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	3324      	adds	r3, #36	; 0x24
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fc3b 	bl	8003624 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002dae:	6978      	ldr	r0, [r7, #20]
 8002db0:	f7ff ff26 	bl	8002c00 <prvUnlockQueue>
	}
 8002db4:	bf00      	nop
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08e      	sub	sp, #56	; 0x38
 8002dc0:	af04      	add	r7, sp, #16
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10a      	bne.n	8002de6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	623b      	str	r3, [r7, #32]
}
 8002de2:	bf00      	nop
 8002de4:	e7fe      	b.n	8002de4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <xTaskCreateStatic+0x46>
	__asm volatile
 8002dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df0:	f383 8811 	msr	BASEPRI, r3
 8002df4:	f3bf 8f6f 	isb	sy
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	61fb      	str	r3, [r7, #28]
}
 8002dfe:	bf00      	nop
 8002e00:	e7fe      	b.n	8002e00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e02:	235c      	movs	r3, #92	; 0x5c
 8002e04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b5c      	cmp	r3, #92	; 0x5c
 8002e0a:	d00a      	beq.n	8002e22 <xTaskCreateStatic+0x66>
	__asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	61bb      	str	r3, [r7, #24]
}
 8002e1e:	bf00      	nop
 8002e20:	e7fe      	b.n	8002e20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002e22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d01e      	beq.n	8002e68 <xTaskCreateStatic+0xac>
 8002e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d01b      	beq.n	8002e68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e42:	2300      	movs	r3, #0
 8002e44:	9303      	str	r3, [sp, #12]
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	9302      	str	r3, [sp, #8]
 8002e4a:	f107 0314 	add.w	r3, r7, #20
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f850 	bl	8002f00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e62:	f000 f8dd 	bl	8003020 <prvAddNewTaskToReadyList>
 8002e66:	e001      	b.n	8002e6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e6c:	697b      	ldr	r3, [r7, #20]
	}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3728      	adds	r7, #40	; 0x28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b08c      	sub	sp, #48	; 0x30
 8002e7a:	af04      	add	r7, sp, #16
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	603b      	str	r3, [r7, #0]
 8002e82:	4613      	mov	r3, r2
 8002e84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f001 fc34 	bl	80046f8 <pvPortMalloc>
 8002e90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00e      	beq.n	8002eb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e98:	205c      	movs	r0, #92	; 0x5c
 8002e9a:	f001 fc2d 	bl	80046f8 <pvPortMalloc>
 8002e9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8002eac:	e005      	b.n	8002eba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002eae:	6978      	ldr	r0, [r7, #20]
 8002eb0:	f001 fcee 	bl	8004890 <vPortFree>
 8002eb4:	e001      	b.n	8002eba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d017      	beq.n	8002ef0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ec8:	88fa      	ldrh	r2, [r7, #6]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	9303      	str	r3, [sp, #12]
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	9302      	str	r3, [sp, #8]
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f80e 	bl	8002f00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ee4:	69f8      	ldr	r0, [r7, #28]
 8002ee6:	f000 f89b 	bl	8003020 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002eea:	2301      	movs	r3, #1
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	e002      	b.n	8002ef6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ef6:	69bb      	ldr	r3, [r7, #24]
	}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3720      	adds	r7, #32
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	461a      	mov	r2, r3
 8002f18:	21a5      	movs	r1, #165	; 0xa5
 8002f1a:	f001 fdd7 	bl	8004acc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	f023 0307 	bic.w	r3, r3, #7
 8002f36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	617b      	str	r3, [r7, #20]
}
 8002f54:	bf00      	nop
 8002f56:	e7fe      	b.n	8002f56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d01f      	beq.n	8002f9e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	e012      	b.n	8002f8a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	4413      	add	r3, r2
 8002f6a:	7819      	ldrb	r1, [r3, #0]
 8002f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	4413      	add	r3, r2
 8002f72:	3334      	adds	r3, #52	; 0x34
 8002f74:	460a      	mov	r2, r1
 8002f76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d006      	beq.n	8002f92 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	3301      	adds	r3, #1
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	2b0f      	cmp	r3, #15
 8002f8e:	d9e9      	bls.n	8002f64 <prvInitialiseNewTask+0x64>
 8002f90:	e000      	b.n	8002f94 <prvInitialiseNewTask+0x94>
			{
				break;
 8002f92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f9c:	e003      	b.n	8002fa6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	2b37      	cmp	r3, #55	; 0x37
 8002faa:	d901      	bls.n	8002fb0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002fac:	2337      	movs	r3, #55	; 0x37
 8002fae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff f978 	bl	80022bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	3318      	adds	r3, #24
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff f973 	bl	80022bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	2200      	movs	r2, #0
 8002ff0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	68f9      	ldr	r1, [r7, #12]
 8002ffe:	69b8      	ldr	r0, [r7, #24]
 8003000:	f001 f928 	bl	8004254 <pxPortInitialiseStack>
 8003004:	4602      	mov	r2, r0
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003014:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003016:	bf00      	nop
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003028:	f001 fa44 	bl	80044b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800302c:	4b2d      	ldr	r3, [pc, #180]	; (80030e4 <prvAddNewTaskToReadyList+0xc4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3301      	adds	r3, #1
 8003032:	4a2c      	ldr	r2, [pc, #176]	; (80030e4 <prvAddNewTaskToReadyList+0xc4>)
 8003034:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003036:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <prvAddNewTaskToReadyList+0xc8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800303e:	4a2a      	ldr	r2, [pc, #168]	; (80030e8 <prvAddNewTaskToReadyList+0xc8>)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003044:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <prvAddNewTaskToReadyList+0xc4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d110      	bne.n	800306e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800304c:	f000 fc16 	bl	800387c <prvInitialiseTaskLists>
 8003050:	e00d      	b.n	800306e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003052:	4b26      	ldr	r3, [pc, #152]	; (80030ec <prvAddNewTaskToReadyList+0xcc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800305a:	4b23      	ldr	r3, [pc, #140]	; (80030e8 <prvAddNewTaskToReadyList+0xc8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	429a      	cmp	r2, r3
 8003066:	d802      	bhi.n	800306e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003068:	4a1f      	ldr	r2, [pc, #124]	; (80030e8 <prvAddNewTaskToReadyList+0xc8>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800306e:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <prvAddNewTaskToReadyList+0xd0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3301      	adds	r3, #1
 8003074:	4a1e      	ldr	r2, [pc, #120]	; (80030f0 <prvAddNewTaskToReadyList+0xd0>)
 8003076:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003078:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <prvAddNewTaskToReadyList+0xd0>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003084:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <prvAddNewTaskToReadyList+0xd4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d903      	bls.n	8003094 <prvAddNewTaskToReadyList+0x74>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	4a18      	ldr	r2, [pc, #96]	; (80030f4 <prvAddNewTaskToReadyList+0xd4>)
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <prvAddNewTaskToReadyList+0xd8>)
 80030a2:	441a      	add	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3304      	adds	r3, #4
 80030a8:	4619      	mov	r1, r3
 80030aa:	4610      	mov	r0, r2
 80030ac:	f7ff f913 	bl	80022d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80030b0:	f001 fa30 	bl	8004514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80030b4:	4b0d      	ldr	r3, [pc, #52]	; (80030ec <prvAddNewTaskToReadyList+0xcc>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00e      	beq.n	80030da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <prvAddNewTaskToReadyList+0xc8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d207      	bcs.n	80030da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <prvAddNewTaskToReadyList+0xdc>)
 80030cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	f3bf 8f4f 	dsb	sy
 80030d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000c58 	.word	0x20000c58
 80030e8:	20000784 	.word	0x20000784
 80030ec:	20000c64 	.word	0x20000c64
 80030f0:	20000c74 	.word	0x20000c74
 80030f4:	20000c60 	.word	0x20000c60
 80030f8:	20000788 	.word	0x20000788
 80030fc:	e000ed04 	.word	0xe000ed04

08003100 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d017      	beq.n	8003142 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003112:	4b13      	ldr	r3, [pc, #76]	; (8003160 <vTaskDelay+0x60>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <vTaskDelay+0x30>
	__asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	60bb      	str	r3, [r7, #8]
}
 800312c:	bf00      	nop
 800312e:	e7fe      	b.n	800312e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003130:	f000 f880 	bl	8003234 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003134:	2100      	movs	r1, #0
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fcea 	bl	8003b10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800313c:	f000 f888 	bl	8003250 <xTaskResumeAll>
 8003140:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d107      	bne.n	8003158 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003148:	4b06      	ldr	r3, [pc, #24]	; (8003164 <vTaskDelay+0x64>)
 800314a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20000c80 	.word	0x20000c80
 8003164:	e000ed04 	.word	0xe000ed04

08003168 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08a      	sub	sp, #40	; 0x28
 800316c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003176:	463a      	mov	r2, r7
 8003178:	1d39      	adds	r1, r7, #4
 800317a:	f107 0308 	add.w	r3, r7, #8
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff f848 	bl	8002214 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003184:	6839      	ldr	r1, [r7, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	9202      	str	r2, [sp, #8]
 800318c:	9301      	str	r3, [sp, #4]
 800318e:	2300      	movs	r3, #0
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	2300      	movs	r3, #0
 8003194:	460a      	mov	r2, r1
 8003196:	4921      	ldr	r1, [pc, #132]	; (800321c <vTaskStartScheduler+0xb4>)
 8003198:	4821      	ldr	r0, [pc, #132]	; (8003220 <vTaskStartScheduler+0xb8>)
 800319a:	f7ff fe0f 	bl	8002dbc <xTaskCreateStatic>
 800319e:	4603      	mov	r3, r0
 80031a0:	4a20      	ldr	r2, [pc, #128]	; (8003224 <vTaskStartScheduler+0xbc>)
 80031a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80031a4:	4b1f      	ldr	r3, [pc, #124]	; (8003224 <vTaskStartScheduler+0xbc>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80031ac:	2301      	movs	r3, #1
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	e001      	b.n	80031b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d102      	bne.n	80031c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80031bc:	f000 fcfc 	bl	8003bb8 <xTimerCreateTimerTask>
 80031c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d116      	bne.n	80031f6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80031c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	613b      	str	r3, [r7, #16]
}
 80031da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80031dc:	4b12      	ldr	r3, [pc, #72]	; (8003228 <vTaskStartScheduler+0xc0>)
 80031de:	f04f 32ff 	mov.w	r2, #4294967295
 80031e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80031e4:	4b11      	ldr	r3, [pc, #68]	; (800322c <vTaskStartScheduler+0xc4>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031ea:	4b11      	ldr	r3, [pc, #68]	; (8003230 <vTaskStartScheduler+0xc8>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80031f0:	f001 f8be 	bl	8004370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80031f4:	e00e      	b.n	8003214 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fc:	d10a      	bne.n	8003214 <vTaskStartScheduler+0xac>
	__asm volatile
 80031fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003202:	f383 8811 	msr	BASEPRI, r3
 8003206:	f3bf 8f6f 	isb	sy
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	60fb      	str	r3, [r7, #12]
}
 8003210:	bf00      	nop
 8003212:	e7fe      	b.n	8003212 <vTaskStartScheduler+0xaa>
}
 8003214:	bf00      	nop
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	08004b90 	.word	0x08004b90
 8003220:	0800384d 	.word	0x0800384d
 8003224:	20000c7c 	.word	0x20000c7c
 8003228:	20000c78 	.word	0x20000c78
 800322c:	20000c64 	.word	0x20000c64
 8003230:	20000c5c 	.word	0x20000c5c

08003234 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003238:	4b04      	ldr	r3, [pc, #16]	; (800324c <vTaskSuspendAll+0x18>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3301      	adds	r3, #1
 800323e:	4a03      	ldr	r2, [pc, #12]	; (800324c <vTaskSuspendAll+0x18>)
 8003240:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003242:	bf00      	nop
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	20000c80 	.word	0x20000c80

08003250 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800325e:	4b42      	ldr	r3, [pc, #264]	; (8003368 <xTaskResumeAll+0x118>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10a      	bne.n	800327c <xTaskResumeAll+0x2c>
	__asm volatile
 8003266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	603b      	str	r3, [r7, #0]
}
 8003278:	bf00      	nop
 800327a:	e7fe      	b.n	800327a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800327c:	f001 f91a 	bl	80044b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003280:	4b39      	ldr	r3, [pc, #228]	; (8003368 <xTaskResumeAll+0x118>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3b01      	subs	r3, #1
 8003286:	4a38      	ldr	r2, [pc, #224]	; (8003368 <xTaskResumeAll+0x118>)
 8003288:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800328a:	4b37      	ldr	r3, [pc, #220]	; (8003368 <xTaskResumeAll+0x118>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d162      	bne.n	8003358 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003292:	4b36      	ldr	r3, [pc, #216]	; (800336c <xTaskResumeAll+0x11c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d05e      	beq.n	8003358 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800329a:	e02f      	b.n	80032fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800329c:	4b34      	ldr	r3, [pc, #208]	; (8003370 <xTaskResumeAll+0x120>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3318      	adds	r3, #24
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff f871 	bl	8002390 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	3304      	adds	r3, #4
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff f86c 	bl	8002390 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032bc:	4b2d      	ldr	r3, [pc, #180]	; (8003374 <xTaskResumeAll+0x124>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d903      	bls.n	80032cc <xTaskResumeAll+0x7c>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	4a2a      	ldr	r2, [pc, #168]	; (8003374 <xTaskResumeAll+0x124>)
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4a27      	ldr	r2, [pc, #156]	; (8003378 <xTaskResumeAll+0x128>)
 80032da:	441a      	add	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	3304      	adds	r3, #4
 80032e0:	4619      	mov	r1, r3
 80032e2:	4610      	mov	r0, r2
 80032e4:	f7fe fff7 	bl	80022d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ec:	4b23      	ldr	r3, [pc, #140]	; (800337c <xTaskResumeAll+0x12c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d302      	bcc.n	80032fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80032f6:	4b22      	ldr	r3, [pc, #136]	; (8003380 <xTaskResumeAll+0x130>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032fc:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <xTaskResumeAll+0x120>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1cb      	bne.n	800329c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800330a:	f000 fb55 	bl	80039b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800330e:	4b1d      	ldr	r3, [pc, #116]	; (8003384 <xTaskResumeAll+0x134>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d010      	beq.n	800333c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800331a:	f000 f847 	bl	80033ac <xTaskIncrementTick>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003324:	4b16      	ldr	r3, [pc, #88]	; (8003380 <xTaskResumeAll+0x130>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3b01      	subs	r3, #1
 800332e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f1      	bne.n	800331a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003336:	4b13      	ldr	r3, [pc, #76]	; (8003384 <xTaskResumeAll+0x134>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800333c:	4b10      	ldr	r3, [pc, #64]	; (8003380 <xTaskResumeAll+0x130>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d009      	beq.n	8003358 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003344:	2301      	movs	r3, #1
 8003346:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003348:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <xTaskResumeAll+0x138>)
 800334a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003358:	f001 f8dc 	bl	8004514 <vPortExitCritical>

	return xAlreadyYielded;
 800335c:	68bb      	ldr	r3, [r7, #8]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000c80 	.word	0x20000c80
 800336c:	20000c58 	.word	0x20000c58
 8003370:	20000c18 	.word	0x20000c18
 8003374:	20000c60 	.word	0x20000c60
 8003378:	20000788 	.word	0x20000788
 800337c:	20000784 	.word	0x20000784
 8003380:	20000c6c 	.word	0x20000c6c
 8003384:	20000c68 	.word	0x20000c68
 8003388:	e000ed04 	.word	0xe000ed04

0800338c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003392:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <xTaskGetTickCount+0x1c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003398:	687b      	ldr	r3, [r7, #4]
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000c5c 	.word	0x20000c5c

080033ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033b6:	4b4f      	ldr	r3, [pc, #316]	; (80034f4 <xTaskIncrementTick+0x148>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f040 808f 	bne.w	80034de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033c0:	4b4d      	ldr	r3, [pc, #308]	; (80034f8 <xTaskIncrementTick+0x14c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80033c8:	4a4b      	ldr	r2, [pc, #300]	; (80034f8 <xTaskIncrementTick+0x14c>)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d120      	bne.n	8003416 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80033d4:	4b49      	ldr	r3, [pc, #292]	; (80034fc <xTaskIncrementTick+0x150>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	603b      	str	r3, [r7, #0]
}
 80033f0:	bf00      	nop
 80033f2:	e7fe      	b.n	80033f2 <xTaskIncrementTick+0x46>
 80033f4:	4b41      	ldr	r3, [pc, #260]	; (80034fc <xTaskIncrementTick+0x150>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b41      	ldr	r3, [pc, #260]	; (8003500 <xTaskIncrementTick+0x154>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a3f      	ldr	r2, [pc, #252]	; (80034fc <xTaskIncrementTick+0x150>)
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4a3f      	ldr	r2, [pc, #252]	; (8003500 <xTaskIncrementTick+0x154>)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b3e      	ldr	r3, [pc, #248]	; (8003504 <xTaskIncrementTick+0x158>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3301      	adds	r3, #1
 800340e:	4a3d      	ldr	r2, [pc, #244]	; (8003504 <xTaskIncrementTick+0x158>)
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	f000 fad1 	bl	80039b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003416:	4b3c      	ldr	r3, [pc, #240]	; (8003508 <xTaskIncrementTick+0x15c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	429a      	cmp	r2, r3
 800341e:	d349      	bcc.n	80034b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003420:	4b36      	ldr	r3, [pc, #216]	; (80034fc <xTaskIncrementTick+0x150>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d104      	bne.n	8003434 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800342a:	4b37      	ldr	r3, [pc, #220]	; (8003508 <xTaskIncrementTick+0x15c>)
 800342c:	f04f 32ff 	mov.w	r2, #4294967295
 8003430:	601a      	str	r2, [r3, #0]
					break;
 8003432:	e03f      	b.n	80034b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003434:	4b31      	ldr	r3, [pc, #196]	; (80034fc <xTaskIncrementTick+0x150>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	d203      	bcs.n	8003454 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800344c:	4a2e      	ldr	r2, [pc, #184]	; (8003508 <xTaskIncrementTick+0x15c>)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003452:	e02f      	b.n	80034b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	3304      	adds	r3, #4
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe ff99 	bl	8002390 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	2b00      	cmp	r3, #0
 8003464:	d004      	beq.n	8003470 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	3318      	adds	r3, #24
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe ff90 	bl	8002390 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003474:	4b25      	ldr	r3, [pc, #148]	; (800350c <xTaskIncrementTick+0x160>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d903      	bls.n	8003484 <xTaskIncrementTick+0xd8>
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	4a22      	ldr	r2, [pc, #136]	; (800350c <xTaskIncrementTick+0x160>)
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4a1f      	ldr	r2, [pc, #124]	; (8003510 <xTaskIncrementTick+0x164>)
 8003492:	441a      	add	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	3304      	adds	r3, #4
 8003498:	4619      	mov	r1, r3
 800349a:	4610      	mov	r0, r2
 800349c:	f7fe ff1b 	bl	80022d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a4:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <xTaskIncrementTick+0x168>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d3b8      	bcc.n	8003420 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80034ae:	2301      	movs	r3, #1
 80034b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034b2:	e7b5      	b.n	8003420 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034b4:	4b17      	ldr	r3, [pc, #92]	; (8003514 <xTaskIncrementTick+0x168>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ba:	4915      	ldr	r1, [pc, #84]	; (8003510 <xTaskIncrementTick+0x164>)
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d901      	bls.n	80034d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80034cc:	2301      	movs	r3, #1
 80034ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80034d0:	4b11      	ldr	r3, [pc, #68]	; (8003518 <xTaskIncrementTick+0x16c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d007      	beq.n	80034e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80034d8:	2301      	movs	r3, #1
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	e004      	b.n	80034e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80034de:	4b0f      	ldr	r3, [pc, #60]	; (800351c <xTaskIncrementTick+0x170>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3301      	adds	r3, #1
 80034e4:	4a0d      	ldr	r2, [pc, #52]	; (800351c <xTaskIncrementTick+0x170>)
 80034e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80034e8:	697b      	ldr	r3, [r7, #20]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000c80 	.word	0x20000c80
 80034f8:	20000c5c 	.word	0x20000c5c
 80034fc:	20000c10 	.word	0x20000c10
 8003500:	20000c14 	.word	0x20000c14
 8003504:	20000c70 	.word	0x20000c70
 8003508:	20000c78 	.word	0x20000c78
 800350c:	20000c60 	.word	0x20000c60
 8003510:	20000788 	.word	0x20000788
 8003514:	20000784 	.word	0x20000784
 8003518:	20000c6c 	.word	0x20000c6c
 800351c:	20000c68 	.word	0x20000c68

08003520 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003526:	4b28      	ldr	r3, [pc, #160]	; (80035c8 <vTaskSwitchContext+0xa8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800352e:	4b27      	ldr	r3, [pc, #156]	; (80035cc <vTaskSwitchContext+0xac>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003534:	e041      	b.n	80035ba <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003536:	4b25      	ldr	r3, [pc, #148]	; (80035cc <vTaskSwitchContext+0xac>)
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800353c:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <vTaskSwitchContext+0xb0>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e010      	b.n	8003566 <vTaskSwitchContext+0x46>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10a      	bne.n	8003560 <vTaskSwitchContext+0x40>
	__asm volatile
 800354a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	607b      	str	r3, [r7, #4]
}
 800355c:	bf00      	nop
 800355e:	e7fe      	b.n	800355e <vTaskSwitchContext+0x3e>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3b01      	subs	r3, #1
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	491b      	ldr	r1, [pc, #108]	; (80035d4 <vTaskSwitchContext+0xb4>)
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0e4      	beq.n	8003544 <vTaskSwitchContext+0x24>
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4a13      	ldr	r2, [pc, #76]	; (80035d4 <vTaskSwitchContext+0xb4>)
 8003586:	4413      	add	r3, r2
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	3308      	adds	r3, #8
 800359c:	429a      	cmp	r2, r3
 800359e:	d104      	bne.n	80035aa <vTaskSwitchContext+0x8a>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4a09      	ldr	r2, [pc, #36]	; (80035d8 <vTaskSwitchContext+0xb8>)
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4a06      	ldr	r2, [pc, #24]	; (80035d0 <vTaskSwitchContext+0xb0>)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6013      	str	r3, [r2, #0]
}
 80035ba:	bf00      	nop
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000c80 	.word	0x20000c80
 80035cc:	20000c6c 	.word	0x20000c6c
 80035d0:	20000c60 	.word	0x20000c60
 80035d4:	20000788 	.word	0x20000788
 80035d8:	20000784 	.word	0x20000784

080035dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	60fb      	str	r3, [r7, #12]
}
 80035fe:	bf00      	nop
 8003600:	e7fe      	b.n	8003600 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <vTaskPlaceOnEventList+0x44>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3318      	adds	r3, #24
 8003608:	4619      	mov	r1, r3
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fe fe87 	bl	800231e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003610:	2101      	movs	r1, #1
 8003612:	6838      	ldr	r0, [r7, #0]
 8003614:	f000 fa7c 	bl	8003b10 <prvAddCurrentTaskToDelayedList>
}
 8003618:	bf00      	nop
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20000784 	.word	0x20000784

08003624 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	617b      	str	r3, [r7, #20]
}
 8003648:	bf00      	nop
 800364a:	e7fe      	b.n	800364a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <vTaskPlaceOnEventListRestricted+0x54>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3318      	adds	r3, #24
 8003652:	4619      	mov	r1, r3
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f7fe fe3e 	bl	80022d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003660:	f04f 33ff 	mov.w	r3, #4294967295
 8003664:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	68b8      	ldr	r0, [r7, #8]
 800366a:	f000 fa51 	bl	8003b10 <prvAddCurrentTaskToDelayedList>
	}
 800366e:	bf00      	nop
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000784 	.word	0x20000784

0800367c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10a      	bne.n	80036a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	60fb      	str	r3, [r7, #12]
}
 80036a4:	bf00      	nop
 80036a6:	e7fe      	b.n	80036a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	3318      	adds	r3, #24
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fe fe6f 	bl	8002390 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036b2:	4b1e      	ldr	r3, [pc, #120]	; (800372c <xTaskRemoveFromEventList+0xb0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d11d      	bne.n	80036f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	3304      	adds	r3, #4
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe fe66 	bl	8002390 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c8:	4b19      	ldr	r3, [pc, #100]	; (8003730 <xTaskRemoveFromEventList+0xb4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d903      	bls.n	80036d8 <xTaskRemoveFromEventList+0x5c>
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	4a16      	ldr	r2, [pc, #88]	; (8003730 <xTaskRemoveFromEventList+0xb4>)
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4a13      	ldr	r2, [pc, #76]	; (8003734 <xTaskRemoveFromEventList+0xb8>)
 80036e6:	441a      	add	r2, r3
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	3304      	adds	r3, #4
 80036ec:	4619      	mov	r1, r3
 80036ee:	4610      	mov	r0, r2
 80036f0:	f7fe fdf1 	bl	80022d6 <vListInsertEnd>
 80036f4:	e005      	b.n	8003702 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	3318      	adds	r3, #24
 80036fa:	4619      	mov	r1, r3
 80036fc:	480e      	ldr	r0, [pc, #56]	; (8003738 <xTaskRemoveFromEventList+0xbc>)
 80036fe:	f7fe fdea 	bl	80022d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <xTaskRemoveFromEventList+0xc0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	429a      	cmp	r2, r3
 800370e:	d905      	bls.n	800371c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003710:	2301      	movs	r3, #1
 8003712:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <xTaskRemoveFromEventList+0xc4>)
 8003716:	2201      	movs	r2, #1
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e001      	b.n	8003720 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003720:	697b      	ldr	r3, [r7, #20]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000c80 	.word	0x20000c80
 8003730:	20000c60 	.word	0x20000c60
 8003734:	20000788 	.word	0x20000788
 8003738:	20000c18 	.word	0x20000c18
 800373c:	20000784 	.word	0x20000784
 8003740:	20000c6c 	.word	0x20000c6c

08003744 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <vTaskInternalSetTimeOutState+0x24>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <vTaskInternalSetTimeOutState+0x28>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	605a      	str	r2, [r3, #4]
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	20000c70 	.word	0x20000c70
 800376c:	20000c5c 	.word	0x20000c5c

08003770 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10a      	bne.n	8003796 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	613b      	str	r3, [r7, #16]
}
 8003792:	bf00      	nop
 8003794:	e7fe      	b.n	8003794 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	60fb      	str	r3, [r7, #12]
}
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80037b2:	f000 fe7f 	bl	80044b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80037b6:	4b1d      	ldr	r3, [pc, #116]	; (800382c <xTaskCheckForTimeOut+0xbc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ce:	d102      	bne.n	80037d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	e023      	b.n	800381e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	4b15      	ldr	r3, [pc, #84]	; (8003830 <xTaskCheckForTimeOut+0xc0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d007      	beq.n	80037f2 <xTaskCheckForTimeOut+0x82>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d302      	bcc.n	80037f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80037ec:	2301      	movs	r3, #1
 80037ee:	61fb      	str	r3, [r7, #28]
 80037f0:	e015      	b.n	800381e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d20b      	bcs.n	8003814 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	1ad2      	subs	r2, r2, r3
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ff9b 	bl	8003744 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
 8003812:	e004      	b.n	800381e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800381a:	2301      	movs	r3, #1
 800381c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800381e:	f000 fe79 	bl	8004514 <vPortExitCritical>

	return xReturn;
 8003822:	69fb      	ldr	r3, [r7, #28]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3720      	adds	r7, #32
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	20000c5c 	.word	0x20000c5c
 8003830:	20000c70 	.word	0x20000c70

08003834 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <vTaskMissedYield+0x14>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]
}
 800383e:	bf00      	nop
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	20000c6c 	.word	0x20000c6c

0800384c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003854:	f000 f852 	bl	80038fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003858:	4b06      	ldr	r3, [pc, #24]	; (8003874 <prvIdleTask+0x28>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d9f9      	bls.n	8003854 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <prvIdleTask+0x2c>)
 8003862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003870:	e7f0      	b.n	8003854 <prvIdleTask+0x8>
 8003872:	bf00      	nop
 8003874:	20000788 	.word	0x20000788
 8003878:	e000ed04 	.word	0xe000ed04

0800387c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	e00c      	b.n	80038a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4a12      	ldr	r2, [pc, #72]	; (80038dc <prvInitialiseTaskLists+0x60>)
 8003894:	4413      	add	r3, r2
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe fcf0 	bl	800227c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3301      	adds	r3, #1
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b37      	cmp	r3, #55	; 0x37
 80038a6:	d9ef      	bls.n	8003888 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80038a8:	480d      	ldr	r0, [pc, #52]	; (80038e0 <prvInitialiseTaskLists+0x64>)
 80038aa:	f7fe fce7 	bl	800227c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80038ae:	480d      	ldr	r0, [pc, #52]	; (80038e4 <prvInitialiseTaskLists+0x68>)
 80038b0:	f7fe fce4 	bl	800227c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80038b4:	480c      	ldr	r0, [pc, #48]	; (80038e8 <prvInitialiseTaskLists+0x6c>)
 80038b6:	f7fe fce1 	bl	800227c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80038ba:	480c      	ldr	r0, [pc, #48]	; (80038ec <prvInitialiseTaskLists+0x70>)
 80038bc:	f7fe fcde 	bl	800227c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80038c0:	480b      	ldr	r0, [pc, #44]	; (80038f0 <prvInitialiseTaskLists+0x74>)
 80038c2:	f7fe fcdb 	bl	800227c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80038c6:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <prvInitialiseTaskLists+0x78>)
 80038c8:	4a05      	ldr	r2, [pc, #20]	; (80038e0 <prvInitialiseTaskLists+0x64>)
 80038ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038cc:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <prvInitialiseTaskLists+0x7c>)
 80038ce:	4a05      	ldr	r2, [pc, #20]	; (80038e4 <prvInitialiseTaskLists+0x68>)
 80038d0:	601a      	str	r2, [r3, #0]
}
 80038d2:	bf00      	nop
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000788 	.word	0x20000788
 80038e0:	20000be8 	.word	0x20000be8
 80038e4:	20000bfc 	.word	0x20000bfc
 80038e8:	20000c18 	.word	0x20000c18
 80038ec:	20000c2c 	.word	0x20000c2c
 80038f0:	20000c44 	.word	0x20000c44
 80038f4:	20000c10 	.word	0x20000c10
 80038f8:	20000c14 	.word	0x20000c14

080038fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003902:	e019      	b.n	8003938 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003904:	f000 fdd6 	bl	80044b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003908:	4b10      	ldr	r3, [pc, #64]	; (800394c <prvCheckTasksWaitingTermination+0x50>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3304      	adds	r3, #4
 8003914:	4618      	mov	r0, r3
 8003916:	f7fe fd3b 	bl	8002390 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <prvCheckTasksWaitingTermination+0x54>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3b01      	subs	r3, #1
 8003920:	4a0b      	ldr	r2, [pc, #44]	; (8003950 <prvCheckTasksWaitingTermination+0x54>)
 8003922:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <prvCheckTasksWaitingTermination+0x58>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3b01      	subs	r3, #1
 800392a:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <prvCheckTasksWaitingTermination+0x58>)
 800392c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800392e:	f000 fdf1 	bl	8004514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f810 	bl	8003958 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <prvCheckTasksWaitingTermination+0x58>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e1      	bne.n	8003904 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000c2c 	.word	0x20000c2c
 8003950:	20000c58 	.word	0x20000c58
 8003954:	20000c40 	.word	0x20000c40

08003958 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003966:	2b00      	cmp	r3, #0
 8003968:	d108      	bne.n	800397c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	4618      	mov	r0, r3
 8003970:	f000 ff8e 	bl	8004890 <vPortFree>
				vPortFree( pxTCB );
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 ff8b 	bl	8004890 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800397a:	e018      	b.n	80039ae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003982:	2b01      	cmp	r3, #1
 8003984:	d103      	bne.n	800398e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 ff82 	bl	8004890 <vPortFree>
	}
 800398c:	e00f      	b.n	80039ae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003994:	2b02      	cmp	r3, #2
 8003996:	d00a      	beq.n	80039ae <prvDeleteTCB+0x56>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	60fb      	str	r3, [r7, #12]
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <prvDeleteTCB+0x54>
	}
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <prvResetNextTaskUnblockTime+0x38>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d104      	bne.n	80039d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80039c8:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <prvResetNextTaskUnblockTime+0x3c>)
 80039ca:	f04f 32ff 	mov.w	r2, #4294967295
 80039ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80039d0:	e008      	b.n	80039e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039d2:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <prvResetNextTaskUnblockTime+0x38>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <prvResetNextTaskUnblockTime+0x3c>)
 80039e2:	6013      	str	r3, [r2, #0]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	20000c10 	.word	0x20000c10
 80039f4:	20000c78 	.word	0x20000c78

080039f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80039fe:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <xTaskGetSchedulerState+0x34>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d102      	bne.n	8003a0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a06:	2301      	movs	r3, #1
 8003a08:	607b      	str	r3, [r7, #4]
 8003a0a:	e008      	b.n	8003a1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a0c:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <xTaskGetSchedulerState+0x38>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d102      	bne.n	8003a1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a14:	2302      	movs	r3, #2
 8003a16:	607b      	str	r3, [r7, #4]
 8003a18:	e001      	b.n	8003a1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a1e:	687b      	ldr	r3, [r7, #4]
	}
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	20000c64 	.word	0x20000c64
 8003a30:	20000c80 	.word	0x20000c80

08003a34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d056      	beq.n	8003af8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a4a:	4b2e      	ldr	r3, [pc, #184]	; (8003b04 <xTaskPriorityDisinherit+0xd0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d00a      	beq.n	8003a6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	60fb      	str	r3, [r7, #12]
}
 8003a66:	bf00      	nop
 8003a68:	e7fe      	b.n	8003a68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10a      	bne.n	8003a88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	60bb      	str	r3, [r7, #8]
}
 8003a84:	bf00      	nop
 8003a86:	e7fe      	b.n	8003a86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8c:	1e5a      	subs	r2, r3, #1
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d02c      	beq.n	8003af8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d128      	bne.n	8003af8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe fc70 	bl	8002390 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac8:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <xTaskPriorityDisinherit+0xd4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d903      	bls.n	8003ad8 <xTaskPriorityDisinherit+0xa4>
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	4a0c      	ldr	r2, [pc, #48]	; (8003b08 <xTaskPriorityDisinherit+0xd4>)
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4a09      	ldr	r2, [pc, #36]	; (8003b0c <xTaskPriorityDisinherit+0xd8>)
 8003ae6:	441a      	add	r2, r3
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	3304      	adds	r3, #4
 8003aec:	4619      	mov	r1, r3
 8003aee:	4610      	mov	r0, r2
 8003af0:	f7fe fbf1 	bl	80022d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003af8:	697b      	ldr	r3, [r7, #20]
	}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20000784 	.word	0x20000784
 8003b08:	20000c60 	.word	0x20000c60
 8003b0c:	20000788 	.word	0x20000788

08003b10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b1a:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <prvAddCurrentTaskToDelayedList+0x90>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b20:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3304      	adds	r3, #4
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe fc32 	bl	8002390 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d10a      	bne.n	8003b4a <prvAddCurrentTaskToDelayedList+0x3a>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	4619      	mov	r1, r3
 8003b42:	4819      	ldr	r0, [pc, #100]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003b44:	f7fe fbc7 	bl	80022d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b48:	e026      	b.n	8003b98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4413      	add	r3, r2
 8003b50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b52:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d209      	bcs.n	8003b76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <prvAddCurrentTaskToDelayedList+0x9c>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	f7fe fbd5 	bl	800231e <vListInsert>
}
 8003b74:	e010      	b.n	8003b98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b76:	4b0e      	ldr	r3, [pc, #56]	; (8003bb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f7fe fbcb 	bl	800231e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b88:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d202      	bcs.n	8003b98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003b92:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	6013      	str	r3, [r2, #0]
}
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	20000c5c 	.word	0x20000c5c
 8003ba4:	20000784 	.word	0x20000784
 8003ba8:	20000c44 	.word	0x20000c44
 8003bac:	20000c14 	.word	0x20000c14
 8003bb0:	20000c10 	.word	0x20000c10
 8003bb4:	20000c78 	.word	0x20000c78

08003bb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08a      	sub	sp, #40	; 0x28
 8003bbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003bc2:	f000 fb07 	bl	80041d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003bc6:	4b1c      	ldr	r3, [pc, #112]	; (8003c38 <xTimerCreateTimerTask+0x80>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d021      	beq.n	8003c12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003bd6:	1d3a      	adds	r2, r7, #4
 8003bd8:	f107 0108 	add.w	r1, r7, #8
 8003bdc:	f107 030c 	add.w	r3, r7, #12
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fe fb31 	bl	8002248 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	9202      	str	r2, [sp, #8]
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	460a      	mov	r2, r1
 8003bf8:	4910      	ldr	r1, [pc, #64]	; (8003c3c <xTimerCreateTimerTask+0x84>)
 8003bfa:	4811      	ldr	r0, [pc, #68]	; (8003c40 <xTimerCreateTimerTask+0x88>)
 8003bfc:	f7ff f8de 	bl	8002dbc <xTaskCreateStatic>
 8003c00:	4603      	mov	r3, r0
 8003c02:	4a10      	ldr	r2, [pc, #64]	; (8003c44 <xTimerCreateTimerTask+0x8c>)
 8003c04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003c06:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <xTimerCreateTimerTask+0x8c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	613b      	str	r3, [r7, #16]
}
 8003c2a:	bf00      	nop
 8003c2c:	e7fe      	b.n	8003c2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003c2e:	697b      	ldr	r3, [r7, #20]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000cb4 	.word	0x20000cb4
 8003c3c:	08004b98 	.word	0x08004b98
 8003c40:	08003d7d 	.word	0x08003d7d
 8003c44:	20000cb8 	.word	0x20000cb8

08003c48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	; 0x28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	623b      	str	r3, [r7, #32]
}
 8003c72:	bf00      	nop
 8003c74:	e7fe      	b.n	8003c74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003c76:	4b1a      	ldr	r3, [pc, #104]	; (8003ce0 <xTimerGenericCommand+0x98>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d02a      	beq.n	8003cd4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b05      	cmp	r3, #5
 8003c8e:	dc18      	bgt.n	8003cc2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c90:	f7ff feb2 	bl	80039f8 <xTaskGetSchedulerState>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d109      	bne.n	8003cae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <xTimerGenericCommand+0x98>)
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	f107 0110 	add.w	r1, r7, #16
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca6:	f7fe fca1 	bl	80025ec <xQueueGenericSend>
 8003caa:	6278      	str	r0, [r7, #36]	; 0x24
 8003cac:	e012      	b.n	8003cd4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003cae:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <xTimerGenericCommand+0x98>)
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	f107 0110 	add.w	r1, r7, #16
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f7fe fc97 	bl	80025ec <xQueueGenericSend>
 8003cbe:	6278      	str	r0, [r7, #36]	; 0x24
 8003cc0:	e008      	b.n	8003cd4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003cc2:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <xTimerGenericCommand+0x98>)
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	f107 0110 	add.w	r1, r7, #16
 8003cca:	2300      	movs	r3, #0
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	f7fe fd8b 	bl	80027e8 <xQueueGenericSendFromISR>
 8003cd2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3728      	adds	r7, #40	; 0x28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000cb4 	.word	0x20000cb4

08003ce4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cee:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <prvProcessExpiredTimer+0x94>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fe fb47 	bl	8002390 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d022      	beq.n	8003d56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	699a      	ldr	r2, [r3, #24]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	18d1      	adds	r1, r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	6978      	ldr	r0, [r7, #20]
 8003d1e:	f000 f8d1 	bl	8003ec4 <prvInsertTimerInActiveList>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d01f      	beq.n	8003d68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d28:	2300      	movs	r3, #0
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	2100      	movs	r1, #0
 8003d32:	6978      	ldr	r0, [r7, #20]
 8003d34:	f7ff ff88 	bl	8003c48 <xTimerGenericCommand>
 8003d38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d113      	bne.n	8003d68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	60fb      	str	r3, [r7, #12]
}
 8003d52:	bf00      	nop
 8003d54:	e7fe      	b.n	8003d54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	6978      	ldr	r0, [r7, #20]
 8003d6e:	4798      	blx	r3
}
 8003d70:	bf00      	nop
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	20000cac 	.word	0x20000cac

08003d7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d84:	f107 0308 	add.w	r3, r7, #8
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 f857 	bl	8003e3c <prvGetNextExpireTime>
 8003d8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4619      	mov	r1, r3
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f803 	bl	8003da0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003d9a:	f000 f8d5 	bl	8003f48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d9e:	e7f1      	b.n	8003d84 <prvTimerTask+0x8>

08003da0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003daa:	f7ff fa43 	bl	8003234 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dae:	f107 0308 	add.w	r3, r7, #8
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 f866 	bl	8003e84 <prvSampleTimeNow>
 8003db8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d130      	bne.n	8003e22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <prvProcessTimerOrBlockTask+0x3c>
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d806      	bhi.n	8003ddc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003dce:	f7ff fa3f 	bl	8003250 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003dd2:	68f9      	ldr	r1, [r7, #12]
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ff85 	bl	8003ce4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003dda:	e024      	b.n	8003e26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d008      	beq.n	8003df4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003de2:	4b13      	ldr	r3, [pc, #76]	; (8003e30 <prvProcessTimerOrBlockTask+0x90>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <prvProcessTimerOrBlockTask+0x50>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <prvProcessTimerOrBlockTask+0x52>
 8003df0:	2300      	movs	r3, #0
 8003df2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003df4:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <prvProcessTimerOrBlockTask+0x94>)
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	4619      	mov	r1, r3
 8003e02:	f7fe ffa7 	bl	8002d54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003e06:	f7ff fa23 	bl	8003250 <xTaskResumeAll>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003e10:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <prvProcessTimerOrBlockTask+0x98>)
 8003e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	f3bf 8f6f 	isb	sy
}
 8003e20:	e001      	b.n	8003e26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003e22:	f7ff fa15 	bl	8003250 <xTaskResumeAll>
}
 8003e26:	bf00      	nop
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20000cb0 	.word	0x20000cb0
 8003e34:	20000cb4 	.word	0x20000cb4
 8003e38:	e000ed04 	.word	0xe000ed04

08003e3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e44:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <prvGetNextExpireTime+0x44>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <prvGetNextExpireTime+0x16>
 8003e4e:	2201      	movs	r2, #1
 8003e50:	e000      	b.n	8003e54 <prvGetNextExpireTime+0x18>
 8003e52:	2200      	movs	r2, #0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d105      	bne.n	8003e6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e60:	4b07      	ldr	r3, [pc, #28]	; (8003e80 <prvGetNextExpireTime+0x44>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	e001      	b.n	8003e70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003e70:	68fb      	ldr	r3, [r7, #12]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000cac 	.word	0x20000cac

08003e84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003e8c:	f7ff fa7e 	bl	800338c <xTaskGetTickCount>
 8003e90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003e92:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <prvSampleTimeNow+0x3c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d205      	bcs.n	8003ea8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003e9c:	f000 f936 	bl	800410c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	e002      	b.n	8003eae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003eae:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <prvSampleTimeNow+0x3c>)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000cbc 	.word	0x20000cbc

08003ec4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d812      	bhi.n	8003f10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	1ad2      	subs	r2, r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d302      	bcc.n	8003efe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	e01b      	b.n	8003f36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003efe:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <prvInsertTimerInActiveList+0x7c>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	3304      	adds	r3, #4
 8003f06:	4619      	mov	r1, r3
 8003f08:	4610      	mov	r0, r2
 8003f0a:	f7fe fa08 	bl	800231e <vListInsert>
 8003f0e:	e012      	b.n	8003f36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d206      	bcs.n	8003f26 <prvInsertTimerInActiveList+0x62>
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d302      	bcc.n	8003f26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	e007      	b.n	8003f36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f26:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <prvInsertTimerInActiveList+0x80>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4610      	mov	r0, r2
 8003f32:	f7fe f9f4 	bl	800231e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003f36:	697b      	ldr	r3, [r7, #20]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20000cb0 	.word	0x20000cb0
 8003f44:	20000cac 	.word	0x20000cac

08003f48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08e      	sub	sp, #56	; 0x38
 8003f4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f4e:	e0ca      	b.n	80040e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	da18      	bge.n	8003f88 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003f56:	1d3b      	adds	r3, r7, #4
 8003f58:	3304      	adds	r3, #4
 8003f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10a      	bne.n	8003f78 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	61fb      	str	r3, [r7, #28]
}
 8003f74:	bf00      	nop
 8003f76:	e7fe      	b.n	8003f76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f7e:	6850      	ldr	r0, [r2, #4]
 8003f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f82:	6892      	ldr	r2, [r2, #8]
 8003f84:	4611      	mov	r1, r2
 8003f86:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f2c0 80ab 	blt.w	80040e6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d004      	beq.n	8003fa6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe f9f5 	bl	8002390 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fa6:	463b      	mov	r3, r7
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff ff6b 	bl	8003e84 <prvSampleTimeNow>
 8003fae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b09      	cmp	r3, #9
 8003fb4:	f200 8096 	bhi.w	80040e4 <prvProcessReceivedCommands+0x19c>
 8003fb8:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <prvProcessReceivedCommands+0x78>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08003fe9 	.word	0x08003fe9
 8003fc4:	08003fe9 	.word	0x08003fe9
 8003fc8:	08003fe9 	.word	0x08003fe9
 8003fcc:	0800405d 	.word	0x0800405d
 8003fd0:	08004071 	.word	0x08004071
 8003fd4:	080040bb 	.word	0x080040bb
 8003fd8:	08003fe9 	.word	0x08003fe9
 8003fdc:	08003fe9 	.word	0x08003fe9
 8003fe0:	0800405d 	.word	0x0800405d
 8003fe4:	08004071 	.word	0x08004071
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	18d1      	adds	r1, r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004008:	f7ff ff5c 	bl	8003ec4 <prvInsertTimerInActiveList>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d069      	beq.n	80040e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004018:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d05e      	beq.n	80040e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	441a      	add	r2, r3
 8004030:	2300      	movs	r3, #0
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	2300      	movs	r3, #0
 8004036:	2100      	movs	r1, #0
 8004038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800403a:	f7ff fe05 	bl	8003c48 <xTimerGenericCommand>
 800403e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d14f      	bne.n	80040e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	61bb      	str	r3, [r7, #24]
}
 8004058:	bf00      	nop
 800405a:	e7fe      	b.n	800405a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800405c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	b2da      	uxtb	r2, r3
 8004068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800406e:	e03a      	b.n	80040e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	b2da      	uxtb	r2, r3
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004086:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10a      	bne.n	80040a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	617b      	str	r3, [r7, #20]
}
 80040a2:	bf00      	nop
 80040a4:	e7fe      	b.n	80040a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	18d1      	adds	r1, r2, r3
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040b4:	f7ff ff06 	bl	8003ec4 <prvInsertTimerInActiveList>
					break;
 80040b8:	e015      	b.n	80040e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80040ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d103      	bne.n	80040d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80040c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040ca:	f000 fbe1 	bl	8004890 <vPortFree>
 80040ce:	e00a      	b.n	80040e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80040e2:	e000      	b.n	80040e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80040e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040e6:	4b08      	ldr	r3, [pc, #32]	; (8004108 <prvProcessReceivedCommands+0x1c0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	1d39      	adds	r1, r7, #4
 80040ec:	2200      	movs	r2, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fe fc16 	bl	8002920 <xQueueReceive>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f47f af2a 	bne.w	8003f50 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	3730      	adds	r7, #48	; 0x30
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000cb4 	.word	0x20000cb4

0800410c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004112:	e048      	b.n	80041a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004114:	4b2d      	ldr	r3, [pc, #180]	; (80041cc <prvSwitchTimerLists+0xc0>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800411e:	4b2b      	ldr	r3, [pc, #172]	; (80041cc <prvSwitchTimerLists+0xc0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3304      	adds	r3, #4
 800412c:	4618      	mov	r0, r3
 800412e:	f7fe f92f 	bl	8002390 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d02e      	beq.n	80041a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	4413      	add	r3, r2
 8004150:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	429a      	cmp	r2, r3
 8004158:	d90e      	bls.n	8004178 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004166:	4b19      	ldr	r3, [pc, #100]	; (80041cc <prvSwitchTimerLists+0xc0>)
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3304      	adds	r3, #4
 800416e:	4619      	mov	r1, r3
 8004170:	4610      	mov	r0, r2
 8004172:	f7fe f8d4 	bl	800231e <vListInsert>
 8004176:	e016      	b.n	80041a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004178:	2300      	movs	r3, #0
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	2300      	movs	r3, #0
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	2100      	movs	r1, #0
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f7ff fd60 	bl	8003c48 <xTimerGenericCommand>
 8004188:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	603b      	str	r3, [r7, #0]
}
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041a6:	4b09      	ldr	r3, [pc, #36]	; (80041cc <prvSwitchTimerLists+0xc0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1b1      	bne.n	8004114 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80041b0:	4b06      	ldr	r3, [pc, #24]	; (80041cc <prvSwitchTimerLists+0xc0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <prvSwitchTimerLists+0xc4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a04      	ldr	r2, [pc, #16]	; (80041cc <prvSwitchTimerLists+0xc0>)
 80041bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80041be:	4a04      	ldr	r2, [pc, #16]	; (80041d0 <prvSwitchTimerLists+0xc4>)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	6013      	str	r3, [r2, #0]
}
 80041c4:	bf00      	nop
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20000cac 	.word	0x20000cac
 80041d0:	20000cb0 	.word	0x20000cb0

080041d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80041da:	f000 f96b 	bl	80044b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80041de:	4b15      	ldr	r3, [pc, #84]	; (8004234 <prvCheckForValidListAndQueue+0x60>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d120      	bne.n	8004228 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80041e6:	4814      	ldr	r0, [pc, #80]	; (8004238 <prvCheckForValidListAndQueue+0x64>)
 80041e8:	f7fe f848 	bl	800227c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80041ec:	4813      	ldr	r0, [pc, #76]	; (800423c <prvCheckForValidListAndQueue+0x68>)
 80041ee:	f7fe f845 	bl	800227c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80041f2:	4b13      	ldr	r3, [pc, #76]	; (8004240 <prvCheckForValidListAndQueue+0x6c>)
 80041f4:	4a10      	ldr	r2, [pc, #64]	; (8004238 <prvCheckForValidListAndQueue+0x64>)
 80041f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80041f8:	4b12      	ldr	r3, [pc, #72]	; (8004244 <prvCheckForValidListAndQueue+0x70>)
 80041fa:	4a10      	ldr	r2, [pc, #64]	; (800423c <prvCheckForValidListAndQueue+0x68>)
 80041fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80041fe:	2300      	movs	r3, #0
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	4b11      	ldr	r3, [pc, #68]	; (8004248 <prvCheckForValidListAndQueue+0x74>)
 8004204:	4a11      	ldr	r2, [pc, #68]	; (800424c <prvCheckForValidListAndQueue+0x78>)
 8004206:	2110      	movs	r1, #16
 8004208:	200a      	movs	r0, #10
 800420a:	f7fe f953 	bl	80024b4 <xQueueGenericCreateStatic>
 800420e:	4603      	mov	r3, r0
 8004210:	4a08      	ldr	r2, [pc, #32]	; (8004234 <prvCheckForValidListAndQueue+0x60>)
 8004212:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004214:	4b07      	ldr	r3, [pc, #28]	; (8004234 <prvCheckForValidListAndQueue+0x60>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <prvCheckForValidListAndQueue+0x60>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	490b      	ldr	r1, [pc, #44]	; (8004250 <prvCheckForValidListAndQueue+0x7c>)
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe fd6c 	bl	8002d00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004228:	f000 f974 	bl	8004514 <vPortExitCritical>
}
 800422c:	bf00      	nop
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20000cb4 	.word	0x20000cb4
 8004238:	20000c84 	.word	0x20000c84
 800423c:	20000c98 	.word	0x20000c98
 8004240:	20000cac 	.word	0x20000cac
 8004244:	20000cb0 	.word	0x20000cb0
 8004248:	20000d60 	.word	0x20000d60
 800424c:	20000cc0 	.word	0x20000cc0
 8004250:	08004ba0 	.word	0x08004ba0

08004254 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	3b04      	subs	r3, #4
 8004264:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800426c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3b04      	subs	r3, #4
 8004272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f023 0201 	bic.w	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3b04      	subs	r3, #4
 8004282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004284:	4a0c      	ldr	r2, [pc, #48]	; (80042b8 <pxPortInitialiseStack+0x64>)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3b14      	subs	r3, #20
 800428e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3b04      	subs	r3, #4
 800429a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f06f 0202 	mvn.w	r2, #2
 80042a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3b20      	subs	r3, #32
 80042a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80042aa:	68fb      	ldr	r3, [r7, #12]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	080042bd 	.word	0x080042bd

080042bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042c6:	4b12      	ldr	r3, [pc, #72]	; (8004310 <prvTaskExitError+0x54>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d00a      	beq.n	80042e6 <prvTaskExitError+0x2a>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	60fb      	str	r3, [r7, #12]
}
 80042e2:	bf00      	nop
 80042e4:	e7fe      	b.n	80042e4 <prvTaskExitError+0x28>
	__asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	60bb      	str	r3, [r7, #8]
}
 80042f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042fa:	bf00      	nop
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0fc      	beq.n	80042fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	2000000c 	.word	0x2000000c
	...

08004320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <pxCurrentTCBConst2>)
 8004322:	6819      	ldr	r1, [r3, #0]
 8004324:	6808      	ldr	r0, [r1, #0]
 8004326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800432a:	f380 8809 	msr	PSP, r0
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f04f 0000 	mov.w	r0, #0
 8004336:	f380 8811 	msr	BASEPRI, r0
 800433a:	4770      	bx	lr
 800433c:	f3af 8000 	nop.w

08004340 <pxCurrentTCBConst2>:
 8004340:	20000784 	.word	0x20000784
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop

08004348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004348:	4808      	ldr	r0, [pc, #32]	; (800436c <prvPortStartFirstTask+0x24>)
 800434a:	6800      	ldr	r0, [r0, #0]
 800434c:	6800      	ldr	r0, [r0, #0]
 800434e:	f380 8808 	msr	MSP, r0
 8004352:	f04f 0000 	mov.w	r0, #0
 8004356:	f380 8814 	msr	CONTROL, r0
 800435a:	b662      	cpsie	i
 800435c:	b661      	cpsie	f
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	df00      	svc	0
 8004368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800436a:	bf00      	nop
 800436c:	e000ed08 	.word	0xe000ed08

08004370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004376:	4b46      	ldr	r3, [pc, #280]	; (8004490 <xPortStartScheduler+0x120>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a46      	ldr	r2, [pc, #280]	; (8004494 <xPortStartScheduler+0x124>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d10a      	bne.n	8004396 <xPortStartScheduler+0x26>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	613b      	str	r3, [r7, #16]
}
 8004392:	bf00      	nop
 8004394:	e7fe      	b.n	8004394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004396:	4b3e      	ldr	r3, [pc, #248]	; (8004490 <xPortStartScheduler+0x120>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a3f      	ldr	r2, [pc, #252]	; (8004498 <xPortStartScheduler+0x128>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d10a      	bne.n	80043b6 <xPortStartScheduler+0x46>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	60fb      	str	r3, [r7, #12]
}
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043b6:	4b39      	ldr	r3, [pc, #228]	; (800449c <xPortStartScheduler+0x12c>)
 80043b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	22ff      	movs	r2, #255	; 0xff
 80043c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	4b31      	ldr	r3, [pc, #196]	; (80044a0 <xPortStartScheduler+0x130>)
 80043dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043de:	4b31      	ldr	r3, [pc, #196]	; (80044a4 <xPortStartScheduler+0x134>)
 80043e0:	2207      	movs	r2, #7
 80043e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043e4:	e009      	b.n	80043fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80043e6:	4b2f      	ldr	r3, [pc, #188]	; (80044a4 <xPortStartScheduler+0x134>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	4a2d      	ldr	r2, [pc, #180]	; (80044a4 <xPortStartScheduler+0x134>)
 80043ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004402:	2b80      	cmp	r3, #128	; 0x80
 8004404:	d0ef      	beq.n	80043e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004406:	4b27      	ldr	r3, [pc, #156]	; (80044a4 <xPortStartScheduler+0x134>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f1c3 0307 	rsb	r3, r3, #7
 800440e:	2b04      	cmp	r3, #4
 8004410:	d00a      	beq.n	8004428 <xPortStartScheduler+0xb8>
	__asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	60bb      	str	r3, [r7, #8]
}
 8004424:	bf00      	nop
 8004426:	e7fe      	b.n	8004426 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004428:	4b1e      	ldr	r3, [pc, #120]	; (80044a4 <xPortStartScheduler+0x134>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	4a1d      	ldr	r2, [pc, #116]	; (80044a4 <xPortStartScheduler+0x134>)
 8004430:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004432:	4b1c      	ldr	r3, [pc, #112]	; (80044a4 <xPortStartScheduler+0x134>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800443a:	4a1a      	ldr	r2, [pc, #104]	; (80044a4 <xPortStartScheduler+0x134>)
 800443c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	b2da      	uxtb	r2, r3
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004446:	4b18      	ldr	r3, [pc, #96]	; (80044a8 <xPortStartScheduler+0x138>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a17      	ldr	r2, [pc, #92]	; (80044a8 <xPortStartScheduler+0x138>)
 800444c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004450:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004452:	4b15      	ldr	r3, [pc, #84]	; (80044a8 <xPortStartScheduler+0x138>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a14      	ldr	r2, [pc, #80]	; (80044a8 <xPortStartScheduler+0x138>)
 8004458:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800445c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800445e:	f000 f8dd 	bl	800461c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004462:	4b12      	ldr	r3, [pc, #72]	; (80044ac <xPortStartScheduler+0x13c>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004468:	f000 f8fc 	bl	8004664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800446c:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <xPortStartScheduler+0x140>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a0f      	ldr	r2, [pc, #60]	; (80044b0 <xPortStartScheduler+0x140>)
 8004472:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004476:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004478:	f7ff ff66 	bl	8004348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800447c:	f7ff f850 	bl	8003520 <vTaskSwitchContext>
	prvTaskExitError();
 8004480:	f7ff ff1c 	bl	80042bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	e000ed00 	.word	0xe000ed00
 8004494:	410fc271 	.word	0x410fc271
 8004498:	410fc270 	.word	0x410fc270
 800449c:	e000e400 	.word	0xe000e400
 80044a0:	20000db0 	.word	0x20000db0
 80044a4:	20000db4 	.word	0x20000db4
 80044a8:	e000ed20 	.word	0xe000ed20
 80044ac:	2000000c 	.word	0x2000000c
 80044b0:	e000ef34 	.word	0xe000ef34

080044b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	607b      	str	r3, [r7, #4]
}
 80044cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044ce:	4b0f      	ldr	r3, [pc, #60]	; (800450c <vPortEnterCritical+0x58>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3301      	adds	r3, #1
 80044d4:	4a0d      	ldr	r2, [pc, #52]	; (800450c <vPortEnterCritical+0x58>)
 80044d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80044d8:	4b0c      	ldr	r3, [pc, #48]	; (800450c <vPortEnterCritical+0x58>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d10f      	bne.n	8004500 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <vPortEnterCritical+0x5c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <vPortEnterCritical+0x4c>
	__asm volatile
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	603b      	str	r3, [r7, #0]
}
 80044fc:	bf00      	nop
 80044fe:	e7fe      	b.n	80044fe <vPortEnterCritical+0x4a>
	}
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	2000000c 	.word	0x2000000c
 8004510:	e000ed04 	.word	0xe000ed04

08004514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800451a:	4b12      	ldr	r3, [pc, #72]	; (8004564 <vPortExitCritical+0x50>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10a      	bne.n	8004538 <vPortExitCritical+0x24>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	607b      	str	r3, [r7, #4]
}
 8004534:	bf00      	nop
 8004536:	e7fe      	b.n	8004536 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004538:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <vPortExitCritical+0x50>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3b01      	subs	r3, #1
 800453e:	4a09      	ldr	r2, [pc, #36]	; (8004564 <vPortExitCritical+0x50>)
 8004540:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004542:	4b08      	ldr	r3, [pc, #32]	; (8004564 <vPortExitCritical+0x50>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d105      	bne.n	8004556 <vPortExitCritical+0x42>
 800454a:	2300      	movs	r3, #0
 800454c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	f383 8811 	msr	BASEPRI, r3
}
 8004554:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	2000000c 	.word	0x2000000c
	...

08004570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004570:	f3ef 8009 	mrs	r0, PSP
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <pxCurrentTCBConst>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	f01e 0f10 	tst.w	lr, #16
 8004580:	bf08      	it	eq
 8004582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800458a:	6010      	str	r0, [r2, #0]
 800458c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004590:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004594:	f380 8811 	msr	BASEPRI, r0
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f7fe ffbe 	bl	8003520 <vTaskSwitchContext>
 80045a4:	f04f 0000 	mov.w	r0, #0
 80045a8:	f380 8811 	msr	BASEPRI, r0
 80045ac:	bc09      	pop	{r0, r3}
 80045ae:	6819      	ldr	r1, [r3, #0]
 80045b0:	6808      	ldr	r0, [r1, #0]
 80045b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b6:	f01e 0f10 	tst.w	lr, #16
 80045ba:	bf08      	it	eq
 80045bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045c0:	f380 8809 	msr	PSP, r0
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	f3af 8000 	nop.w

080045d0 <pxCurrentTCBConst>:
 80045d0:	20000784 	.word	0x20000784
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop

080045d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	607b      	str	r3, [r7, #4]
}
 80045f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80045f2:	f7fe fedb 	bl	80033ac <xTaskIncrementTick>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045fc:	4b06      	ldr	r3, [pc, #24]	; (8004618 <xPortSysTickHandler+0x40>)
 80045fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	2300      	movs	r3, #0
 8004606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	f383 8811 	msr	BASEPRI, r3
}
 800460e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004610:	bf00      	nop
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	e000ed04 	.word	0xe000ed04

0800461c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004620:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <vPortSetupTimerInterrupt+0x34>)
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004626:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <vPortSetupTimerInterrupt+0x38>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800462c:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <vPortSetupTimerInterrupt+0x3c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a0a      	ldr	r2, [pc, #40]	; (800465c <vPortSetupTimerInterrupt+0x40>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	099b      	lsrs	r3, r3, #6
 8004638:	4a09      	ldr	r2, [pc, #36]	; (8004660 <vPortSetupTimerInterrupt+0x44>)
 800463a:	3b01      	subs	r3, #1
 800463c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800463e:	4b04      	ldr	r3, [pc, #16]	; (8004650 <vPortSetupTimerInterrupt+0x34>)
 8004640:	2207      	movs	r2, #7
 8004642:	601a      	str	r2, [r3, #0]
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	e000e010 	.word	0xe000e010
 8004654:	e000e018 	.word	0xe000e018
 8004658:	20000000 	.word	0x20000000
 800465c:	10624dd3 	.word	0x10624dd3
 8004660:	e000e014 	.word	0xe000e014

08004664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004674 <vPortEnableVFP+0x10>
 8004668:	6801      	ldr	r1, [r0, #0]
 800466a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800466e:	6001      	str	r1, [r0, #0]
 8004670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004672:	bf00      	nop
 8004674:	e000ed88 	.word	0xe000ed88

08004678 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800467e:	f3ef 8305 	mrs	r3, IPSR
 8004682:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b0f      	cmp	r3, #15
 8004688:	d914      	bls.n	80046b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800468a:	4a17      	ldr	r2, [pc, #92]	; (80046e8 <vPortValidateInterruptPriority+0x70>)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004694:	4b15      	ldr	r3, [pc, #84]	; (80046ec <vPortValidateInterruptPriority+0x74>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	7afa      	ldrb	r2, [r7, #11]
 800469a:	429a      	cmp	r2, r3
 800469c:	d20a      	bcs.n	80046b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	607b      	str	r3, [r7, #4]
}
 80046b0:	bf00      	nop
 80046b2:	e7fe      	b.n	80046b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80046b4:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <vPortValidateInterruptPriority+0x78>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046bc:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <vPortValidateInterruptPriority+0x7c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d90a      	bls.n	80046da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	603b      	str	r3, [r7, #0]
}
 80046d6:	bf00      	nop
 80046d8:	e7fe      	b.n	80046d8 <vPortValidateInterruptPriority+0x60>
	}
 80046da:	bf00      	nop
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	e000e3f0 	.word	0xe000e3f0
 80046ec:	20000db0 	.word	0x20000db0
 80046f0:	e000ed0c 	.word	0xe000ed0c
 80046f4:	20000db4 	.word	0x20000db4

080046f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08a      	sub	sp, #40	; 0x28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004700:	2300      	movs	r3, #0
 8004702:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004704:	f7fe fd96 	bl	8003234 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004708:	4b5b      	ldr	r3, [pc, #364]	; (8004878 <pvPortMalloc+0x180>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004710:	f000 f920 	bl	8004954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004714:	4b59      	ldr	r3, [pc, #356]	; (800487c <pvPortMalloc+0x184>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4013      	ands	r3, r2
 800471c:	2b00      	cmp	r3, #0
 800471e:	f040 8093 	bne.w	8004848 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d01d      	beq.n	8004764 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004728:	2208      	movs	r2, #8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4413      	add	r3, r2
 800472e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	2b00      	cmp	r3, #0
 8004738:	d014      	beq.n	8004764 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f023 0307 	bic.w	r3, r3, #7
 8004740:	3308      	adds	r3, #8
 8004742:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <pvPortMalloc+0x6c>
	__asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	617b      	str	r3, [r7, #20]
}
 8004760:	bf00      	nop
 8004762:	e7fe      	b.n	8004762 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d06e      	beq.n	8004848 <pvPortMalloc+0x150>
 800476a:	4b45      	ldr	r3, [pc, #276]	; (8004880 <pvPortMalloc+0x188>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	429a      	cmp	r2, r3
 8004772:	d869      	bhi.n	8004848 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004774:	4b43      	ldr	r3, [pc, #268]	; (8004884 <pvPortMalloc+0x18c>)
 8004776:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004778:	4b42      	ldr	r3, [pc, #264]	; (8004884 <pvPortMalloc+0x18c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800477e:	e004      	b.n	800478a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	429a      	cmp	r2, r3
 8004792:	d903      	bls.n	800479c <pvPortMalloc+0xa4>
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f1      	bne.n	8004780 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800479c:	4b36      	ldr	r3, [pc, #216]	; (8004878 <pvPortMalloc+0x180>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d050      	beq.n	8004848 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2208      	movs	r2, #8
 80047ac:	4413      	add	r3, r2
 80047ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	1ad2      	subs	r2, r2, r3
 80047c0:	2308      	movs	r3, #8
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d91f      	bls.n	8004808 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4413      	add	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <pvPortMalloc+0xf8>
	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	613b      	str	r3, [r7, #16]
}
 80047ec:	bf00      	nop
 80047ee:	e7fe      	b.n	80047ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	1ad2      	subs	r2, r2, r3
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004802:	69b8      	ldr	r0, [r7, #24]
 8004804:	f000 f908 	bl	8004a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004808:	4b1d      	ldr	r3, [pc, #116]	; (8004880 <pvPortMalloc+0x188>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	4a1b      	ldr	r2, [pc, #108]	; (8004880 <pvPortMalloc+0x188>)
 8004814:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004816:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <pvPortMalloc+0x188>)
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <pvPortMalloc+0x190>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d203      	bcs.n	800482a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004822:	4b17      	ldr	r3, [pc, #92]	; (8004880 <pvPortMalloc+0x188>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a18      	ldr	r2, [pc, #96]	; (8004888 <pvPortMalloc+0x190>)
 8004828:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	4b13      	ldr	r3, [pc, #76]	; (800487c <pvPortMalloc+0x184>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	431a      	orrs	r2, r3
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800483e:	4b13      	ldr	r3, [pc, #76]	; (800488c <pvPortMalloc+0x194>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3301      	adds	r3, #1
 8004844:	4a11      	ldr	r2, [pc, #68]	; (800488c <pvPortMalloc+0x194>)
 8004846:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004848:	f7fe fd02 	bl	8003250 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <pvPortMalloc+0x174>
	__asm volatile
 8004856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	60fb      	str	r3, [r7, #12]
}
 8004868:	bf00      	nop
 800486a:	e7fe      	b.n	800486a <pvPortMalloc+0x172>
	return pvReturn;
 800486c:	69fb      	ldr	r3, [r7, #28]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3728      	adds	r7, #40	; 0x28
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	200049c0 	.word	0x200049c0
 800487c:	200049d4 	.word	0x200049d4
 8004880:	200049c4 	.word	0x200049c4
 8004884:	200049b8 	.word	0x200049b8
 8004888:	200049c8 	.word	0x200049c8
 800488c:	200049cc 	.word	0x200049cc

08004890 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d04d      	beq.n	800493e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048a2:	2308      	movs	r3, #8
 80048a4:	425b      	negs	r3, r3
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4413      	add	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	4b24      	ldr	r3, [pc, #144]	; (8004948 <vPortFree+0xb8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10a      	bne.n	80048d4 <vPortFree+0x44>
	__asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	60fb      	str	r3, [r7, #12]
}
 80048d0:	bf00      	nop
 80048d2:	e7fe      	b.n	80048d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <vPortFree+0x62>
	__asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	60bb      	str	r3, [r7, #8]
}
 80048ee:	bf00      	nop
 80048f0:	e7fe      	b.n	80048f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	4b14      	ldr	r3, [pc, #80]	; (8004948 <vPortFree+0xb8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01e      	beq.n	800493e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d11a      	bne.n	800493e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <vPortFree+0xb8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	43db      	mvns	r3, r3
 8004912:	401a      	ands	r2, r3
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004918:	f7fe fc8c 	bl	8003234 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	4b0a      	ldr	r3, [pc, #40]	; (800494c <vPortFree+0xbc>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4413      	add	r3, r2
 8004926:	4a09      	ldr	r2, [pc, #36]	; (800494c <vPortFree+0xbc>)
 8004928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800492a:	6938      	ldr	r0, [r7, #16]
 800492c:	f000 f874 	bl	8004a18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004930:	4b07      	ldr	r3, [pc, #28]	; (8004950 <vPortFree+0xc0>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3301      	adds	r3, #1
 8004936:	4a06      	ldr	r2, [pc, #24]	; (8004950 <vPortFree+0xc0>)
 8004938:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800493a:	f7fe fc89 	bl	8003250 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800493e:	bf00      	nop
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	200049d4 	.word	0x200049d4
 800494c:	200049c4 	.word	0x200049c4
 8004950:	200049d0 	.word	0x200049d0

08004954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800495a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800495e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004960:	4b27      	ldr	r3, [pc, #156]	; (8004a00 <prvHeapInit+0xac>)
 8004962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00c      	beq.n	8004988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3307      	adds	r3, #7
 8004972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0307 	bic.w	r3, r3, #7
 800497a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	4a1f      	ldr	r2, [pc, #124]	; (8004a00 <prvHeapInit+0xac>)
 8004984:	4413      	add	r3, r2
 8004986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800498c:	4a1d      	ldr	r2, [pc, #116]	; (8004a04 <prvHeapInit+0xb0>)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004992:	4b1c      	ldr	r3, [pc, #112]	; (8004a04 <prvHeapInit+0xb0>)
 8004994:	2200      	movs	r2, #0
 8004996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	4413      	add	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049a0:	2208      	movs	r2, #8
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1a9b      	subs	r3, r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0307 	bic.w	r3, r3, #7
 80049ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4a15      	ldr	r2, [pc, #84]	; (8004a08 <prvHeapInit+0xb4>)
 80049b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049b6:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <prvHeapInit+0xb4>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2200      	movs	r2, #0
 80049bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049be:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <prvHeapInit+0xb4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	1ad2      	subs	r2, r2, r3
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049d4:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <prvHeapInit+0xb4>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4a0a      	ldr	r2, [pc, #40]	; (8004a0c <prvHeapInit+0xb8>)
 80049e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	4a09      	ldr	r2, [pc, #36]	; (8004a10 <prvHeapInit+0xbc>)
 80049ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80049ec:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <prvHeapInit+0xc0>)
 80049ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80049f2:	601a      	str	r2, [r3, #0]
}
 80049f4:	bf00      	nop
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	20000db8 	.word	0x20000db8
 8004a04:	200049b8 	.word	0x200049b8
 8004a08:	200049c0 	.word	0x200049c0
 8004a0c:	200049c8 	.word	0x200049c8
 8004a10:	200049c4 	.word	0x200049c4
 8004a14:	200049d4 	.word	0x200049d4

08004a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a20:	4b28      	ldr	r3, [pc, #160]	; (8004ac4 <prvInsertBlockIntoFreeList+0xac>)
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	e002      	b.n	8004a2c <prvInsertBlockIntoFreeList+0x14>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d8f7      	bhi.n	8004a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	4413      	add	r3, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d108      	bne.n	8004a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	441a      	add	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	441a      	add	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d118      	bne.n	8004aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d00d      	beq.n	8004a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	441a      	add	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	e008      	b.n	8004aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a96:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	e003      	b.n	8004aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d002      	beq.n	8004ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ab6:	bf00      	nop
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	200049b8 	.word	0x200049b8
 8004ac8:	200049c0 	.word	0x200049c0

08004acc <memset>:
 8004acc:	4402      	add	r2, r0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d100      	bne.n	8004ad6 <memset+0xa>
 8004ad4:	4770      	bx	lr
 8004ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8004ada:	e7f9      	b.n	8004ad0 <memset+0x4>

08004adc <__libc_init_array>:
 8004adc:	b570      	push	{r4, r5, r6, lr}
 8004ade:	4d0d      	ldr	r5, [pc, #52]	; (8004b14 <__libc_init_array+0x38>)
 8004ae0:	4c0d      	ldr	r4, [pc, #52]	; (8004b18 <__libc_init_array+0x3c>)
 8004ae2:	1b64      	subs	r4, r4, r5
 8004ae4:	10a4      	asrs	r4, r4, #2
 8004ae6:	2600      	movs	r6, #0
 8004ae8:	42a6      	cmp	r6, r4
 8004aea:	d109      	bne.n	8004b00 <__libc_init_array+0x24>
 8004aec:	4d0b      	ldr	r5, [pc, #44]	; (8004b1c <__libc_init_array+0x40>)
 8004aee:	4c0c      	ldr	r4, [pc, #48]	; (8004b20 <__libc_init_array+0x44>)
 8004af0:	f000 f826 	bl	8004b40 <_init>
 8004af4:	1b64      	subs	r4, r4, r5
 8004af6:	10a4      	asrs	r4, r4, #2
 8004af8:	2600      	movs	r6, #0
 8004afa:	42a6      	cmp	r6, r4
 8004afc:	d105      	bne.n	8004b0a <__libc_init_array+0x2e>
 8004afe:	bd70      	pop	{r4, r5, r6, pc}
 8004b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b04:	4798      	blx	r3
 8004b06:	3601      	adds	r6, #1
 8004b08:	e7ee      	b.n	8004ae8 <__libc_init_array+0xc>
 8004b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b0e:	4798      	blx	r3
 8004b10:	3601      	adds	r6, #1
 8004b12:	e7f2      	b.n	8004afa <__libc_init_array+0x1e>
 8004b14:	08004c10 	.word	0x08004c10
 8004b18:	08004c10 	.word	0x08004c10
 8004b1c:	08004c10 	.word	0x08004c10
 8004b20:	08004c14 	.word	0x08004c14

08004b24 <memcpy>:
 8004b24:	440a      	add	r2, r1
 8004b26:	4291      	cmp	r1, r2
 8004b28:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b2c:	d100      	bne.n	8004b30 <memcpy+0xc>
 8004b2e:	4770      	bx	lr
 8004b30:	b510      	push	{r4, lr}
 8004b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b3a:	4291      	cmp	r1, r2
 8004b3c:	d1f9      	bne.n	8004b32 <memcpy+0xe>
 8004b3e:	bd10      	pop	{r4, pc}

08004b40 <_init>:
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b42:	bf00      	nop
 8004b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b46:	bc08      	pop	{r3}
 8004b48:	469e      	mov	lr, r3
 8004b4a:	4770      	bx	lr

08004b4c <_fini>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	bf00      	nop
 8004b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b52:	bc08      	pop	{r3}
 8004b54:	469e      	mov	lr, r3
 8004b56:	4770      	bx	lr
