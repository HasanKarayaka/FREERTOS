
14_Queue_Processing_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000679c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800696c  0800696c  0001696c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ad0  08006ad0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006ad0  08006ad0  00016ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ad8  08006ad8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ad8  08006ad8  00016ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006adc  08006adc  00016adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bdc  20000060  08006b40  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c3c  08006b40  00024c3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012ede  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f06  00000000  00000000  00032fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f78  00000000  00000000  00035eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bde  00000000  00000000  00036e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000038ee  00000000  00000000  00037a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012874  00000000  00000000  0003b2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2afc  00000000  00000000  0004db70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000447c  00000000  00000000  0012066c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00124ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006954 	.word	0x08006954

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08006954 	.word	0x08006954

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <printMessage>:
		  __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_RXNE);
	}
}

void printMessage(char *myMessage)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < strlen(myMessage); i++)
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	e012      	b.n	80005f0 <printMessage+0x34>
	{
        while (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET) {
        	 HAL_UART_Transmit(&huart2, (uint8_t*)&myMessage[i], 1, HAL_MAX_DELAY);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	18d1      	adds	r1, r2, r3
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	2201      	movs	r2, #1
 80005d6:	480c      	ldr	r0, [pc, #48]	; (8000608 <printMessage+0x4c>)
 80005d8:	f001 ff95 	bl	8002506 <HAL_UART_Transmit>
        while (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET) {
 80005dc:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <printMessage+0x4c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e6:	2b80      	cmp	r3, #128	; 0x80
 80005e8:	d0ef      	beq.n	80005ca <printMessage+0xe>
	for(int i = 0; i < strlen(myMessage); i++)
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	3301      	adds	r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f7ff fe0d 	bl	8000210 <strlen>
 80005f6:	4602      	mov	r2, r0
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d8ee      	bhi.n	80005dc <printMessage+0x20>
        }
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	2000007c 	.word	0x2000007c

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	Uart_Write_Queue = xQueueCreate(10, sizeof(char*));
 8000610:	2200      	movs	r2, #0
 8000612:	2104      	movs	r1, #4
 8000614:	200a      	movs	r0, #10
 8000616:	f003 fa31 	bl	8003a7c <xQueueGenericCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a27      	ldr	r2, [pc, #156]	; (80006bc <main+0xb0>)
 800061e:	6013      	str	r3, [r2, #0]

	Command_Queue = xQueueCreate(10, sizeof(APP_COMMAND_t*));
 8000620:	2200      	movs	r2, #0
 8000622:	2104      	movs	r1, #4
 8000624:	200a      	movs	r0, #10
 8000626:	f003 fa29 	bl	8003a7c <xQueueGenericCreate>
 800062a:	4603      	mov	r3, r0
 800062c:	4a24      	ldr	r2, [pc, #144]	; (80006c0 <main+0xb4>)
 800062e:	6013      	str	r3, [r2, #0]

	if((Uart_Write_Queue != NULL) && ( Command_Queue != NULL))
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <main+0xb0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d02b      	beq.n	8000690 <main+0x84>
 8000638:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <main+0xb4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d027      	beq.n	8000690 <main+0x84>
	{
		sprintf(myMessage,"Queue creating succesful.\r\n"	);
 8000640:	4920      	ldr	r1, [pc, #128]	; (80006c4 <main+0xb8>)
 8000642:	4821      	ldr	r0, [pc, #132]	; (80006c8 <main+0xbc>)
 8000644:	f005 fce2 	bl	800600c <siprintf>
		printMessage(myMessage);
 8000648:	481f      	ldr	r0, [pc, #124]	; (80006c8 <main+0xbc>)
 800064a:	f7ff ffb7 	bl	80005bc <printMessage>

		  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800064e:	4a1f      	ldr	r2, [pc, #124]	; (80006cc <main+0xc0>)
 8000650:	2100      	movs	r1, #0
 8000652:	481f      	ldr	r0, [pc, #124]	; (80006d0 <main+0xc4>)
 8000654:	f002 ff9c 	bl	8003590 <osThreadNew>
 8000658:	4603      	mov	r3, r0
 800065a:	4a1e      	ldr	r2, [pc, #120]	; (80006d4 <main+0xc8>)
 800065c:	6013      	str	r3, [r2, #0]

		  /* creation of myTask02 */
		  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800065e:	4a1e      	ldr	r2, [pc, #120]	; (80006d8 <main+0xcc>)
 8000660:	2100      	movs	r1, #0
 8000662:	481e      	ldr	r0, [pc, #120]	; (80006dc <main+0xd0>)
 8000664:	f002 ff94 	bl	8003590 <osThreadNew>
 8000668:	4603      	mov	r3, r0
 800066a:	4a1d      	ldr	r2, [pc, #116]	; (80006e0 <main+0xd4>)
 800066c:	6013      	str	r3, [r2, #0]

		  /* creation of myTask03 */
		  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 800066e:	4a1d      	ldr	r2, [pc, #116]	; (80006e4 <main+0xd8>)
 8000670:	2100      	movs	r1, #0
 8000672:	481d      	ldr	r0, [pc, #116]	; (80006e8 <main+0xdc>)
 8000674:	f002 ff8c 	bl	8003590 <osThreadNew>
 8000678:	4603      	mov	r3, r0
 800067a:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <main+0xe0>)
 800067c:	6013      	str	r3, [r2, #0]

		  /* creation of myTask04 */
		  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <main+0xe4>)
 8000680:	2100      	movs	r1, #0
 8000682:	481c      	ldr	r0, [pc, #112]	; (80006f4 <main+0xe8>)
 8000684:	f002 ff84 	bl	8003590 <osThreadNew>
 8000688:	4603      	mov	r3, r0
 800068a:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <main+0xec>)
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	e006      	b.n	800069e <main+0x92>
	}
	else
	{
		sprintf(myMessage,"Queue creating failed.\r\n"	);
 8000690:	491a      	ldr	r1, [pc, #104]	; (80006fc <main+0xf0>)
 8000692:	480d      	ldr	r0, [pc, #52]	; (80006c8 <main+0xbc>)
 8000694:	f005 fcba 	bl	800600c <siprintf>
		printMessage(myMessage);
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <main+0xbc>)
 800069a:	f7ff ff8f 	bl	80005bc <printMessage>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069e:	f000 fad5 	bl	8000c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a2:	f000 f82d 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a6:	f000 f8dd 	bl	8000864 <MX_GPIO_Init>
  MX_DMA_Init();
 80006aa:	f000 f8bb 	bl	8000824 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006ae:	f000 f887 	bl	80007c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006b2:	f002 ff23 	bl	80034fc <osKernelInitialize>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006b6:	f002 ff45 	bl	8003544 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <main+0xae>
 80006bc:	20000194 	.word	0x20000194
 80006c0:	20000198 	.word	0x20000198
 80006c4:	0800699c 	.word	0x0800699c
 80006c8:	20000130 	.word	0x20000130
 80006cc:	080069ec 	.word	0x080069ec
 80006d0:	08000951 	.word	0x08000951
 80006d4:	20000120 	.word	0x20000120
 80006d8:	08006a10 	.word	0x08006a10
 80006dc:	08000961 	.word	0x08000961
 80006e0:	20000124 	.word	0x20000124
 80006e4:	08006a34 	.word	0x08006a34
 80006e8:	08000971 	.word	0x08000971
 80006ec:	20000128 	.word	0x20000128
 80006f0:	08006a58 	.word	0x08006a58
 80006f4:	08000981 	.word	0x08000981
 80006f8:	2000012c 	.word	0x2000012c
 80006fc:	080069b8 	.word	0x080069b8

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	; 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	2234      	movs	r2, #52	; 0x34
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f005 fc9c 	bl	800604c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <SystemClock_Config+0xb8>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a22      	ldr	r2, [pc, #136]	; (80007b8 <SystemClock_Config+0xb8>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <SystemClock_Config+0xb8>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000740:	2300      	movs	r3, #0
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <SystemClock_Config+0xbc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074c:	4a1b      	ldr	r2, [pc, #108]	; (80007bc <SystemClock_Config+0xbc>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <SystemClock_Config+0xbc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000760:	2302      	movs	r3, #2
 8000762:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2310      	movs	r3, #16
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800076c:	2300      	movs	r3, #0
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fbdb 	bl	8001f30 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000780:	f000 f906 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 f902 	bl	80019a8 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007aa:	f000 f8f1 	bl	8000990 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	; 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_USART2_UART_Init+0x5c>)
 80007c6:	4a16      	ldr	r2, [pc, #88]	; (8000820 <MX_USART2_UART_Init+0x60>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_USART2_UART_Init+0x5c>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_USART2_UART_Init+0x5c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_USART2_UART_Init+0x5c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_USART2_UART_Init+0x5c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_USART2_UART_Init+0x5c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART2_UART_Init+0x5c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_USART2_UART_Init+0x5c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]

  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2105      	movs	r1, #5
 80007fa:	2026      	movs	r0, #38	; 0x26
 80007fc:	f000 fb73 	bl	8000ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000800:	2026      	movs	r0, #38	; 0x26
 8000802:	f000 fb8c 	bl	8000f1e <HAL_NVIC_EnableIRQ>
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART2_UART_Init+0x5c>)
 8000808:	f001 fe30 	bl	800246c <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000812:	f000 f8bd 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000007c 	.word	0x2000007c
 8000820:	40004400 	.word	0x40004400

08000824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_DMA_Init+0x3c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <MX_DMA_Init+0x3c>)
 8000834:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_DMA_Init+0x3c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0); //kesme fonksiyonuna önelik atıyor
 8000846:	2200      	movs	r2, #0
 8000848:	2105      	movs	r1, #5
 800084a:	2011      	movs	r0, #17
 800084c:	f000 fb4b 	bl	8000ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000850:	2011      	movs	r0, #17
 8000852:	f000 fb64 	bl	8000f1e <HAL_NVIC_EnableIRQ>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	4b30      	ldr	r3, [pc, #192]	; (8000940 <MX_GPIO_Init+0xdc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a2f      	ldr	r2, [pc, #188]	; (8000940 <MX_GPIO_Init+0xdc>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <MX_GPIO_Init+0xdc>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b29      	ldr	r3, [pc, #164]	; (8000940 <MX_GPIO_Init+0xdc>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a28      	ldr	r2, [pc, #160]	; (8000940 <MX_GPIO_Init+0xdc>)
 80008a0:	f043 0320 	orr.w	r3, r3, #32
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_GPIO_Init+0xdc>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0320 	and.w	r3, r3, #32
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b22      	ldr	r3, [pc, #136]	; (8000940 <MX_GPIO_Init+0xdc>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a21      	ldr	r2, [pc, #132]	; (8000940 <MX_GPIO_Init+0xdc>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_GPIO_Init+0xdc>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80008d4:	481b      	ldr	r0, [pc, #108]	; (8000944 <MX_GPIO_Init+0xe0>)
 80008d6:	f001 f84d 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2107      	movs	r1, #7
 80008de:	481a      	ldr	r0, [pc, #104]	; (8000948 <MX_GPIO_Init+0xe4>)
 80008e0:	f001 f848 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80008e4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80008e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	4811      	ldr	r0, [pc, #68]	; (8000944 <MX_GPIO_Init+0xe0>)
 80008fe:	f000 fea5 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000902:	2307      	movs	r3, #7
 8000904:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4619      	mov	r1, r3
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <MX_GPIO_Init+0xe4>)
 800091a:	f000 fe97 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800091e:	2302      	movs	r3, #2
 8000920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4619      	mov	r1, r3
 8000930:	4806      	ldr	r0, [pc, #24]	; (800094c <MX_GPIO_Init+0xe8>)
 8000932:	f000 fe8b 	bl	800164c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40020800 	.word	0x40020800
 8000948:	40021400 	.word	0x40021400
 800094c:	40020000 	.word	0x40020000

08000950 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000958:	2001      	movs	r0, #1
 800095a:	f002 feab 	bl	80036b4 <osDelay>
 800095e:	e7fb      	b.n	8000958 <StartDefaultTask+0x8>

08000960 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000968:	2001      	movs	r0, #1
 800096a:	f002 fea3 	bl	80036b4 <osDelay>
 800096e:	e7fb      	b.n	8000968 <StartTask02+0x8>

08000970 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000978:	2001      	movs	r0, #1
 800097a:	f002 fe9b 	bl	80036b4 <osDelay>
 800097e:	e7fb      	b.n	8000978 <StartTask03+0x8>

08000980 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000988:	2001      	movs	r0, #1
 800098a:	f002 fe93 	bl	80036b4 <osDelay>
 800098e:	e7fb      	b.n	8000988 <StartTask04+0x8>

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>
	...

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_MspInit+0x54>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <HAL_MspInit+0x54>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	; 0x44
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_MspInit+0x54>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <HAL_MspInit+0x54>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <HAL_MspInit+0x54>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <HAL_MspInit+0x54>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	210f      	movs	r1, #15
 80009de:	f06f 0001 	mvn.w	r0, #1
 80009e2:	f000 fa80 	bl	8000ee6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800

080009f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a34      	ldr	r2, [pc, #208]	; (8000ae4 <HAL_UART_MspInit+0xf0>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d161      	bne.n	8000ada <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	4b33      	ldr	r3, [pc, #204]	; (8000ae8 <HAL_UART_MspInit+0xf4>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	4a32      	ldr	r2, [pc, #200]	; (8000ae8 <HAL_UART_MspInit+0xf4>)
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	6413      	str	r3, [r2, #64]	; 0x40
 8000a26:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <HAL_UART_MspInit+0xf4>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <HAL_UART_MspInit+0xf4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a2b      	ldr	r2, [pc, #172]	; (8000ae8 <HAL_UART_MspInit+0xf4>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <HAL_UART_MspInit+0xf4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a4e:	230c      	movs	r3, #12
 8000a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	4820      	ldr	r0, [pc, #128]	; (8000aec <HAL_UART_MspInit+0xf8>)
 8000a6a:	f000 fdef 	bl	800164c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000a6e:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <HAL_UART_MspInit+0xfc>)
 8000a70:	4a20      	ldr	r2, [pc, #128]	; (8000af4 <HAL_UART_MspInit+0x100>)
 8000a72:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000a74:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <HAL_UART_MspInit+0xfc>)
 8000a76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a7a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <HAL_UART_MspInit+0xfc>)
 8000a7e:	2240      	movs	r2, #64	; 0x40
 8000a80:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a82:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <HAL_UART_MspInit+0xfc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <HAL_UART_MspInit+0xfc>)
 8000a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a8e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <HAL_UART_MspInit+0xfc>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <HAL_UART_MspInit+0xfc>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <HAL_UART_MspInit+0xfc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <HAL_UART_MspInit+0xfc>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_UART_MspInit+0xfc>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000aae:	4810      	ldr	r0, [pc, #64]	; (8000af0 <HAL_UART_MspInit+0xfc>)
 8000ab0:	f000 fa50 	bl	8000f54 <HAL_DMA_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000aba:	f7ff ff69 	bl	8000990 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <HAL_UART_MspInit+0xfc>)
 8000ac2:	635a      	str	r2, [r3, #52]	; 0x34
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_UART_MspInit+0xfc>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2105      	movs	r1, #5
 8000ace:	2026      	movs	r0, #38	; 0x26
 8000ad0:	f000 fa09 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ad4:	2026      	movs	r0, #38	; 0x26
 8000ad6:	f000 fa22 	bl	8000f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ada:	bf00      	nop
 8000adc:	3728      	adds	r7, #40	; 0x28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40004400 	.word	0x40004400
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	200000c0 	.word	0x200000c0
 8000af4:	400260a0 	.word	0x400260a0

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b28:	f000 f8e2 	bl	8000cf0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b2c:	f004 fa0a 	bl	8004f44 <xTaskGetSchedulerState>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d001      	beq.n	8000b3a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b36:	f004 ffef 	bl	8005b18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <DMA1_Stream6_IRQHandler+0x10>)
 8000b46:	f000 fb45 	bl	80011d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200000c0 	.word	0x200000c0

08000b54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <USART2_IRQHandler+0x10>)
 8000b5a:	f001 fd67 	bl	800262c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000007c 	.word	0x2000007c

08000b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b70:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <_sbrk+0x5c>)
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <_sbrk+0x60>)
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d102      	bne.n	8000b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <_sbrk+0x64>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <_sbrk+0x68>)
 8000b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d207      	bcs.n	8000ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b98:	f005 fa60 	bl	800605c <__errno>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba6:	e009      	b.n	8000bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <_sbrk+0x64>)
 8000bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bba:	68fb      	ldr	r3, [r7, #12]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20020000 	.word	0x20020000
 8000bc8:	00000400 	.word	0x00000400
 8000bcc:	2000019c 	.word	0x2000019c
 8000bd0:	20004c40 	.word	0x20004c40

08000bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <SystemInit+0x20>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <SystemInit+0x20>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bfe:	490e      	ldr	r1, [pc, #56]	; (8000c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c14:	4c0b      	ldr	r4, [pc, #44]	; (8000c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c22:	f7ff ffd7 	bl	8000bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f005 fa1f 	bl	8006068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2a:	f7ff fcef 	bl	800060c <main>
  bx  lr    
 8000c2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c3c:	08006ae0 	.word	0x08006ae0
  ldr r2, =_sbss
 8000c40:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c44:	20004c3c 	.word	0x20004c3c

08000c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC_IRQHandler>
	...

08000c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <HAL_Init+0x40>)
 8000c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <HAL_Init+0x40>)
 8000c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <HAL_Init+0x40>)
 8000c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 f92b 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7a:	200f      	movs	r0, #15
 8000c7c:	f000 f808 	bl	8000c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c80:	f7ff fe8c 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023c00 	.word	0x40023c00

08000c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_InitTick+0x54>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_InitTick+0x58>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f943 	bl	8000f3a <HAL_SYSTICK_Config>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00e      	b.n	8000cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d80a      	bhi.n	8000cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f000 f90b 	bl	8000ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd0:	4a06      	ldr	r2, [pc, #24]	; (8000cec <HAL_InitTick+0x5c>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e000      	b.n	8000cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000004 	.word	0x20000004

08000cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008
 8000d14:	200001a0 	.word	0x200001a0

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	200001a0 	.word	0x200001a0

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4907      	ldr	r1, [pc, #28]	; (8000dcc <__NVIC_EnableIRQ+0x38>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f7ff ff8e 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff29 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff3e 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff8e 	bl	8000e24 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5d 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff31 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffa2 	bl	8000e8c <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff feda 	bl	8000d18 <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d101      	bne.n	8000f70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e099      	b.n	80010a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2202      	movs	r2, #2
 8000f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0201 	bic.w	r2, r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f90:	e00f      	b.n	8000fb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f92:	f7ff fec1 	bl	8000d18 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b05      	cmp	r3, #5
 8000f9e:	d908      	bls.n	8000fb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2220      	movs	r2, #32
 8000fa4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2203      	movs	r2, #3
 8000faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e078      	b.n	80010a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1e8      	bne.n	8000f92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	4b38      	ldr	r3, [pc, #224]	; (80010ac <HAL_DMA_Init+0x158>)
 8000fcc:	4013      	ands	r3, r2
 8000fce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4313      	orrs	r3, r2
 8001002:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	2b04      	cmp	r3, #4
 800100a:	d107      	bne.n	800101c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	4313      	orrs	r3, r2
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4313      	orrs	r3, r2
 800101a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	f023 0307 	bic.w	r3, r3, #7
 8001032:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	4313      	orrs	r3, r2
 800103c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	2b04      	cmp	r3, #4
 8001044:	d117      	bne.n	8001076 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	4313      	orrs	r3, r2
 800104e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00e      	beq.n	8001076 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 fa7b 	bl	8001554 <DMA_CheckFifoParam>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d008      	beq.n	8001076 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2240      	movs	r2, #64	; 0x40
 8001068:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001072:	2301      	movs	r3, #1
 8001074:	e016      	b.n	80010a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 fa32 	bl	80014e8 <DMA_CalcBaseAndBitshift>
 8001084:	4603      	mov	r3, r0
 8001086:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108c:	223f      	movs	r2, #63	; 0x3f
 800108e:	409a      	lsls	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	f010803f 	.word	0xf010803f

080010b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010be:	f7ff fe2b 	bl	8000d18 <HAL_GetTick>
 80010c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d008      	beq.n	80010e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2280      	movs	r2, #128	; 0x80
 80010d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e052      	b.n	8001188 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 0216 	bic.w	r2, r2, #22
 80010f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	695a      	ldr	r2, [r3, #20]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001100:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	2b00      	cmp	r3, #0
 8001108:	d103      	bne.n	8001112 <HAL_DMA_Abort+0x62>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800110e:	2b00      	cmp	r3, #0
 8001110:	d007      	beq.n	8001122 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 0208 	bic.w	r2, r2, #8
 8001120:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0201 	bic.w	r2, r2, #1
 8001130:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001132:	e013      	b.n	800115c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001134:	f7ff fdf0 	bl	8000d18 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b05      	cmp	r3, #5
 8001140:	d90c      	bls.n	800115c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2220      	movs	r2, #32
 8001146:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2203      	movs	r2, #3
 800114c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e015      	b.n	8001188 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1e4      	bne.n	8001134 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800116e:	223f      	movs	r2, #63	; 0x3f
 8001170:	409a      	lsls	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d004      	beq.n	80011ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00c      	b.n	80011c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2205      	movs	r2, #5
 80011b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 0201 	bic.w	r2, r2, #1
 80011c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011e0:	4b8e      	ldr	r3, [pc, #568]	; (800141c <HAL_DMA_IRQHandler+0x248>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a8e      	ldr	r2, [pc, #568]	; (8001420 <HAL_DMA_IRQHandler+0x24c>)
 80011e6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ea:	0a9b      	lsrs	r3, r3, #10
 80011ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fe:	2208      	movs	r2, #8
 8001200:	409a      	lsls	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4013      	ands	r3, r2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d01a      	beq.n	8001240 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d013      	beq.n	8001240 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0204 	bic.w	r2, r2, #4
 8001226:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122c:	2208      	movs	r2, #8
 800122e:	409a      	lsls	r2, r3
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001238:	f043 0201 	orr.w	r2, r3, #1
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001244:	2201      	movs	r2, #1
 8001246:	409a      	lsls	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4013      	ands	r3, r2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d012      	beq.n	8001276 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00b      	beq.n	8001276 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001262:	2201      	movs	r2, #1
 8001264:	409a      	lsls	r2, r3
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800126e:	f043 0202 	orr.w	r2, r3, #2
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127a:	2204      	movs	r2, #4
 800127c:	409a      	lsls	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4013      	ands	r3, r2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d012      	beq.n	80012ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00b      	beq.n	80012ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001298:	2204      	movs	r2, #4
 800129a:	409a      	lsls	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a4:	f043 0204 	orr.w	r2, r3, #4
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b0:	2210      	movs	r2, #16
 80012b2:	409a      	lsls	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d043      	beq.n	8001344 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d03c      	beq.n	8001344 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ce:	2210      	movs	r2, #16
 80012d0:	409a      	lsls	r2, r3
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d018      	beq.n	8001316 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d108      	bne.n	8001304 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d024      	beq.n	8001344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	4798      	blx	r3
 8001302:	e01f      	b.n	8001344 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001308:	2b00      	cmp	r3, #0
 800130a:	d01b      	beq.n	8001344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	4798      	blx	r3
 8001314:	e016      	b.n	8001344 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001320:	2b00      	cmp	r3, #0
 8001322:	d107      	bne.n	8001334 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0208 	bic.w	r2, r2, #8
 8001332:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001348:	2220      	movs	r2, #32
 800134a:	409a      	lsls	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 808f 	beq.w	8001474 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0310 	and.w	r3, r3, #16
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 8087 	beq.w	8001474 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136a:	2220      	movs	r2, #32
 800136c:	409a      	lsls	r2, r3
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b05      	cmp	r3, #5
 800137c:	d136      	bne.n	80013ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0216 	bic.w	r2, r2, #22
 800138c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	695a      	ldr	r2, [r3, #20]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800139c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d103      	bne.n	80013ae <HAL_DMA_IRQHandler+0x1da>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d007      	beq.n	80013be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0208 	bic.w	r2, r2, #8
 80013bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c2:	223f      	movs	r2, #63	; 0x3f
 80013c4:	409a      	lsls	r2, r3
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d07e      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	4798      	blx	r3
        }
        return;
 80013ea:	e079      	b.n	80014e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d01d      	beq.n	8001436 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10d      	bne.n	8001424 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140c:	2b00      	cmp	r3, #0
 800140e:	d031      	beq.n	8001474 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	4798      	blx	r3
 8001418:	e02c      	b.n	8001474 <HAL_DMA_IRQHandler+0x2a0>
 800141a:	bf00      	nop
 800141c:	20000000 	.word	0x20000000
 8001420:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001428:	2b00      	cmp	r3, #0
 800142a:	d023      	beq.n	8001474 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	4798      	blx	r3
 8001434:	e01e      	b.n	8001474 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10f      	bne.n	8001464 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0210 	bic.w	r2, r2, #16
 8001452:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001478:	2b00      	cmp	r3, #0
 800147a:	d032      	beq.n	80014e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	d022      	beq.n	80014ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2205      	movs	r2, #5
 800148c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0201 	bic.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	3301      	adds	r3, #1
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d307      	bcc.n	80014bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f2      	bne.n	80014a0 <HAL_DMA_IRQHandler+0x2cc>
 80014ba:	e000      	b.n	80014be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80014bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	4798      	blx	r3
 80014de:	e000      	b.n	80014e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80014e0:	bf00      	nop
    }
  }
}
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	3b10      	subs	r3, #16
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <DMA_CalcBaseAndBitshift+0x64>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001502:	4a13      	ldr	r2, [pc, #76]	; (8001550 <DMA_CalcBaseAndBitshift+0x68>)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b03      	cmp	r3, #3
 8001514:	d909      	bls.n	800152a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800151e:	f023 0303 	bic.w	r3, r3, #3
 8001522:	1d1a      	adds	r2, r3, #4
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	659a      	str	r2, [r3, #88]	; 0x58
 8001528:	e007      	b.n	800153a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001532:	f023 0303 	bic.w	r3, r3, #3
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	aaaaaaab 	.word	0xaaaaaaab
 8001550:	08006a94 	.word	0x08006a94

08001554 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d11f      	bne.n	80015ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b03      	cmp	r3, #3
 8001572:	d856      	bhi.n	8001622 <DMA_CheckFifoParam+0xce>
 8001574:	a201      	add	r2, pc, #4	; (adr r2, 800157c <DMA_CheckFifoParam+0x28>)
 8001576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157a:	bf00      	nop
 800157c:	0800158d 	.word	0x0800158d
 8001580:	0800159f 	.word	0x0800159f
 8001584:	0800158d 	.word	0x0800158d
 8001588:	08001623 	.word	0x08001623
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001590:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d046      	beq.n	8001626 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800159c:	e043      	b.n	8001626 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015a6:	d140      	bne.n	800162a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015ac:	e03d      	b.n	800162a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015b6:	d121      	bne.n	80015fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d837      	bhi.n	800162e <DMA_CheckFifoParam+0xda>
 80015be:	a201      	add	r2, pc, #4	; (adr r2, 80015c4 <DMA_CheckFifoParam+0x70>)
 80015c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c4:	080015d5 	.word	0x080015d5
 80015c8:	080015db 	.word	0x080015db
 80015cc:	080015d5 	.word	0x080015d5
 80015d0:	080015ed 	.word	0x080015ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
      break;
 80015d8:	e030      	b.n	800163c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d025      	beq.n	8001632 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015ea:	e022      	b.n	8001632 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015f4:	d11f      	bne.n	8001636 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015fa:	e01c      	b.n	8001636 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d903      	bls.n	800160a <DMA_CheckFifoParam+0xb6>
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b03      	cmp	r3, #3
 8001606:	d003      	beq.n	8001610 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001608:	e018      	b.n	800163c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
      break;
 800160e:	e015      	b.n	800163c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00e      	beq.n	800163a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
      break;
 8001620:	e00b      	b.n	800163a <DMA_CheckFifoParam+0xe6>
      break;
 8001622:	bf00      	nop
 8001624:	e00a      	b.n	800163c <DMA_CheckFifoParam+0xe8>
      break;
 8001626:	bf00      	nop
 8001628:	e008      	b.n	800163c <DMA_CheckFifoParam+0xe8>
      break;
 800162a:	bf00      	nop
 800162c:	e006      	b.n	800163c <DMA_CheckFifoParam+0xe8>
      break;
 800162e:	bf00      	nop
 8001630:	e004      	b.n	800163c <DMA_CheckFifoParam+0xe8>
      break;
 8001632:	bf00      	nop
 8001634:	e002      	b.n	800163c <DMA_CheckFifoParam+0xe8>
      break;   
 8001636:	bf00      	nop
 8001638:	e000      	b.n	800163c <DMA_CheckFifoParam+0xe8>
      break;
 800163a:	bf00      	nop
    }
  } 
  
  return status; 
 800163c:	7bfb      	ldrb	r3, [r7, #15]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop

0800164c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
 8001666:	e165      	b.n	8001934 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001668:	2201      	movs	r2, #1
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	429a      	cmp	r2, r3
 8001682:	f040 8154 	bne.w	800192e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	2b01      	cmp	r3, #1
 8001690:	d005      	beq.n	800169e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800169a:	2b02      	cmp	r3, #2
 800169c:	d130      	bne.n	8001700 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	2203      	movs	r2, #3
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016d4:	2201      	movs	r2, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	f003 0201 	and.w	r2, r3, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b03      	cmp	r3, #3
 800170a:	d017      	beq.n	800173c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	2203      	movs	r2, #3
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d123      	bne.n	8001790 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	08da      	lsrs	r2, r3, #3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3208      	adds	r2, #8
 8001750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	220f      	movs	r2, #15
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	691a      	ldr	r2, [r3, #16]
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	08da      	lsrs	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3208      	adds	r2, #8
 800178a:	69b9      	ldr	r1, [r7, #24]
 800178c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	2203      	movs	r2, #3
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0203 	and.w	r2, r3, #3
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80ae 	beq.w	800192e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b5d      	ldr	r3, [pc, #372]	; (800194c <HAL_GPIO_Init+0x300>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	4a5c      	ldr	r2, [pc, #368]	; (800194c <HAL_GPIO_Init+0x300>)
 80017dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e0:	6453      	str	r3, [r2, #68]	; 0x44
 80017e2:	4b5a      	ldr	r3, [pc, #360]	; (800194c <HAL_GPIO_Init+0x300>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ee:	4a58      	ldr	r2, [pc, #352]	; (8001950 <HAL_GPIO_Init+0x304>)
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	089b      	lsrs	r3, r3, #2
 80017f4:	3302      	adds	r3, #2
 80017f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	220f      	movs	r2, #15
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4f      	ldr	r2, [pc, #316]	; (8001954 <HAL_GPIO_Init+0x308>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d025      	beq.n	8001866 <HAL_GPIO_Init+0x21a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4e      	ldr	r2, [pc, #312]	; (8001958 <HAL_GPIO_Init+0x30c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d01f      	beq.n	8001862 <HAL_GPIO_Init+0x216>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4d      	ldr	r2, [pc, #308]	; (800195c <HAL_GPIO_Init+0x310>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d019      	beq.n	800185e <HAL_GPIO_Init+0x212>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4c      	ldr	r2, [pc, #304]	; (8001960 <HAL_GPIO_Init+0x314>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d013      	beq.n	800185a <HAL_GPIO_Init+0x20e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4b      	ldr	r2, [pc, #300]	; (8001964 <HAL_GPIO_Init+0x318>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d00d      	beq.n	8001856 <HAL_GPIO_Init+0x20a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4a      	ldr	r2, [pc, #296]	; (8001968 <HAL_GPIO_Init+0x31c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d007      	beq.n	8001852 <HAL_GPIO_Init+0x206>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a49      	ldr	r2, [pc, #292]	; (800196c <HAL_GPIO_Init+0x320>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d101      	bne.n	800184e <HAL_GPIO_Init+0x202>
 800184a:	2306      	movs	r3, #6
 800184c:	e00c      	b.n	8001868 <HAL_GPIO_Init+0x21c>
 800184e:	2307      	movs	r3, #7
 8001850:	e00a      	b.n	8001868 <HAL_GPIO_Init+0x21c>
 8001852:	2305      	movs	r3, #5
 8001854:	e008      	b.n	8001868 <HAL_GPIO_Init+0x21c>
 8001856:	2304      	movs	r3, #4
 8001858:	e006      	b.n	8001868 <HAL_GPIO_Init+0x21c>
 800185a:	2303      	movs	r3, #3
 800185c:	e004      	b.n	8001868 <HAL_GPIO_Init+0x21c>
 800185e:	2302      	movs	r3, #2
 8001860:	e002      	b.n	8001868 <HAL_GPIO_Init+0x21c>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_GPIO_Init+0x21c>
 8001866:	2300      	movs	r3, #0
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	f002 0203 	and.w	r2, r2, #3
 800186e:	0092      	lsls	r2, r2, #2
 8001870:	4093      	lsls	r3, r2
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001878:	4935      	ldr	r1, [pc, #212]	; (8001950 <HAL_GPIO_Init+0x304>)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001886:	4b3a      	ldr	r3, [pc, #232]	; (8001970 <HAL_GPIO_Init+0x324>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018aa:	4a31      	ldr	r2, [pc, #196]	; (8001970 <HAL_GPIO_Init+0x324>)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018b0:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <HAL_GPIO_Init+0x324>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d4:	4a26      	ldr	r2, [pc, #152]	; (8001970 <HAL_GPIO_Init+0x324>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018da:	4b25      	ldr	r3, [pc, #148]	; (8001970 <HAL_GPIO_Init+0x324>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018fe:	4a1c      	ldr	r2, [pc, #112]	; (8001970 <HAL_GPIO_Init+0x324>)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001904:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <HAL_GPIO_Init+0x324>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001928:	4a11      	ldr	r2, [pc, #68]	; (8001970 <HAL_GPIO_Init+0x324>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3301      	adds	r3, #1
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	2b0f      	cmp	r3, #15
 8001938:	f67f ae96 	bls.w	8001668 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40013800 	.word	0x40013800
 8001954:	40020000 	.word	0x40020000
 8001958:	40020400 	.word	0x40020400
 800195c:	40020800 	.word	0x40020800
 8001960:	40020c00 	.word	0x40020c00
 8001964:	40021000 	.word	0x40021000
 8001968:	40021400 	.word	0x40021400
 800196c:	40021800 	.word	0x40021800
 8001970:	40013c00 	.word	0x40013c00

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001990:	e003      	b.n	800199a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	041a      	lsls	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	619a      	str	r2, [r3, #24]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0cc      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b68      	ldr	r3, [pc, #416]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d90c      	bls.n	80019e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b65      	ldr	r3, [pc, #404]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	4b63      	ldr	r3, [pc, #396]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0b8      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d020      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019fc:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4a58      	ldr	r2, [pc, #352]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a14:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4a52      	ldr	r2, [pc, #328]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a20:	4b50      	ldr	r3, [pc, #320]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	494d      	ldr	r1, [pc, #308]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d044      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d119      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e07f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d003      	beq.n	8001a66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e06f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e067      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a86:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f023 0203 	bic.w	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4934      	ldr	r1, [pc, #208]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a98:	f7ff f93e 	bl	8000d18 <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7ff f93a 	bl	8000d18 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e04f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 020c 	and.w	r2, r3, #12
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1eb      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d20c      	bcs.n	8001af0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e032      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d008      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4916      	ldr	r1, [pc, #88]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d009      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	490e      	ldr	r1, [pc, #56]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b2e:	f000 f855 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 8001b32:	4602      	mov	r2, r0
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	490a      	ldr	r1, [pc, #40]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	5ccb      	ldrb	r3, [r1, r3]
 8001b42:	fa22 f303 	lsr.w	r3, r2, r3
 8001b46:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f89e 	bl	8000c90 <HAL_InitTick>

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023c00 	.word	0x40023c00
 8001b64:	40023800 	.word	0x40023800
 8001b68:	08006a7c 	.word	0x08006a7c
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000004 	.word	0x20000004

08001b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000000 	.word	0x20000000

08001b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b90:	f7ff fff0 	bl	8001b74 <HAL_RCC_GetHCLKFreq>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	0a9b      	lsrs	r3, r3, #10
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	4903      	ldr	r1, [pc, #12]	; (8001bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ba2:	5ccb      	ldrb	r3, [r1, r3]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	08006a8c 	.word	0x08006a8c

08001bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bb8:	f7ff ffdc 	bl	8001b74 <HAL_RCC_GetHCLKFreq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	0b5b      	lsrs	r3, r3, #13
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	4903      	ldr	r1, [pc, #12]	; (8001bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bca:	5ccb      	ldrb	r3, [r1, r3]
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	08006a8c 	.word	0x08006a8c

08001bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001be0:	b0a6      	sub	sp, #152	; 0x98
 8001be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c02:	4bc8      	ldr	r3, [pc, #800]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	f200 817e 	bhi.w	8001f0c <HAL_RCC_GetSysClockFreq+0x330>
 8001c10:	a201      	add	r2, pc, #4	; (adr r2, 8001c18 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c16:	bf00      	nop
 8001c18:	08001c4d 	.word	0x08001c4d
 8001c1c:	08001f0d 	.word	0x08001f0d
 8001c20:	08001f0d 	.word	0x08001f0d
 8001c24:	08001f0d 	.word	0x08001f0d
 8001c28:	08001c55 	.word	0x08001c55
 8001c2c:	08001f0d 	.word	0x08001f0d
 8001c30:	08001f0d 	.word	0x08001f0d
 8001c34:	08001f0d 	.word	0x08001f0d
 8001c38:	08001c5d 	.word	0x08001c5d
 8001c3c:	08001f0d 	.word	0x08001f0d
 8001c40:	08001f0d 	.word	0x08001f0d
 8001c44:	08001f0d 	.word	0x08001f0d
 8001c48:	08001dc7 	.word	0x08001dc7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c4c:	4bb6      	ldr	r3, [pc, #728]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001c52:	e15f      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c54:	4bb5      	ldr	r3, [pc, #724]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x350>)
 8001c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001c5a:	e15b      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c5c:	4bb1      	ldr	r3, [pc, #708]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c68:	4bae      	ldr	r3, [pc, #696]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d031      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c74:	4bab      	ldr	r3, [pc, #684]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	099b      	lsrs	r3, r3, #6
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c86:	663b      	str	r3, [r7, #96]	; 0x60
 8001c88:	2300      	movs	r3, #0
 8001c8a:	667b      	str	r3, [r7, #100]	; 0x64
 8001c8c:	4ba7      	ldr	r3, [pc, #668]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x350>)
 8001c8e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001c92:	462a      	mov	r2, r5
 8001c94:	fb03 f202 	mul.w	r2, r3, r2
 8001c98:	2300      	movs	r3, #0
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4aa2      	ldr	r2, [pc, #648]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x350>)
 8001ca4:	4621      	mov	r1, r4
 8001ca6:	fba1 1202 	umull	r1, r2, r1, r2
 8001caa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001cac:	460a      	mov	r2, r1
 8001cae:	67ba      	str	r2, [r7, #120]	; 0x78
 8001cb0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001cb2:	4413      	add	r3, r2
 8001cb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cba:	2200      	movs	r2, #0
 8001cbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8001cbe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001cc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cc4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001cc8:	f7fe fafa 	bl	80002c0 <__aeabi_uldivmod>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001cd6:	e064      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd8:	4b92      	ldr	r3, [pc, #584]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	099b      	lsrs	r3, r3, #6
 8001cde:	2200      	movs	r2, #0
 8001ce0:	653b      	str	r3, [r7, #80]	; 0x50
 8001ce2:	657a      	str	r2, [r7, #84]	; 0x54
 8001ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cea:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cec:	2300      	movs	r3, #0
 8001cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cf0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001cf4:	4622      	mov	r2, r4
 8001cf6:	462b      	mov	r3, r5
 8001cf8:	f04f 0000 	mov.w	r0, #0
 8001cfc:	f04f 0100 	mov.w	r1, #0
 8001d00:	0159      	lsls	r1, r3, #5
 8001d02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d06:	0150      	lsls	r0, r2, #5
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	1a51      	subs	r1, r2, r1
 8001d10:	6139      	str	r1, [r7, #16]
 8001d12:	4629      	mov	r1, r5
 8001d14:	eb63 0301 	sbc.w	r3, r3, r1
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d26:	4659      	mov	r1, fp
 8001d28:	018b      	lsls	r3, r1, #6
 8001d2a:	4651      	mov	r1, sl
 8001d2c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d30:	4651      	mov	r1, sl
 8001d32:	018a      	lsls	r2, r1, #6
 8001d34:	4651      	mov	r1, sl
 8001d36:	ebb2 0801 	subs.w	r8, r2, r1
 8001d3a:	4659      	mov	r1, fp
 8001d3c:	eb63 0901 	sbc.w	r9, r3, r1
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d54:	4690      	mov	r8, r2
 8001d56:	4699      	mov	r9, r3
 8001d58:	4623      	mov	r3, r4
 8001d5a:	eb18 0303 	adds.w	r3, r8, r3
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	462b      	mov	r3, r5
 8001d62:	eb49 0303 	adc.w	r3, r9, r3
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d74:	4629      	mov	r1, r5
 8001d76:	028b      	lsls	r3, r1, #10
 8001d78:	4621      	mov	r1, r4
 8001d7a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d7e:	4621      	mov	r1, r4
 8001d80:	028a      	lsls	r2, r1, #10
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8001d8e:	647a      	str	r2, [r7, #68]	; 0x44
 8001d90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d94:	f7fe fa94 	bl	80002c0 <__aeabi_uldivmod>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001da2:	4b60      	ldr	r3, [pc, #384]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	0c1b      	lsrs	r3, r3, #16
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	3301      	adds	r3, #1
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001db4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001dc4:	e0a6      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc6:	4b57      	ldr	r3, [pc, #348]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dd2:	4b54      	ldr	r3, [pc, #336]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d02a      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dde:	4b51      	ldr	r3, [pc, #324]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	099b      	lsrs	r3, r3, #6
 8001de4:	2200      	movs	r2, #0
 8001de6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001de8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001df0:	2100      	movs	r1, #0
 8001df2:	4b4e      	ldr	r3, [pc, #312]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x350>)
 8001df4:	fb03 f201 	mul.w	r2, r3, r1
 8001df8:	2300      	movs	r3, #0
 8001dfa:	fb00 f303 	mul.w	r3, r0, r3
 8001dfe:	4413      	add	r3, r2
 8001e00:	4a4a      	ldr	r2, [pc, #296]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x350>)
 8001e02:	fba0 1202 	umull	r1, r2, r0, r2
 8001e06:	677a      	str	r2, [r7, #116]	; 0x74
 8001e08:	460a      	mov	r2, r1
 8001e0a:	673a      	str	r2, [r7, #112]	; 0x70
 8001e0c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001e0e:	4413      	add	r3, r2
 8001e10:	677b      	str	r3, [r7, #116]	; 0x74
 8001e12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e16:	2200      	movs	r2, #0
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
 8001e1a:	637a      	str	r2, [r7, #52]	; 0x34
 8001e1c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e20:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001e24:	f7fe fa4c 	bl	80002c0 <__aeabi_uldivmod>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e32:	e05b      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e34:	4b3b      	ldr	r3, [pc, #236]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	099b      	lsrs	r3, r3, #6
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e46:	623b      	str	r3, [r7, #32]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e50:	4642      	mov	r2, r8
 8001e52:	464b      	mov	r3, r9
 8001e54:	f04f 0000 	mov.w	r0, #0
 8001e58:	f04f 0100 	mov.w	r1, #0
 8001e5c:	0159      	lsls	r1, r3, #5
 8001e5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e62:	0150      	lsls	r0, r2, #5
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4641      	mov	r1, r8
 8001e6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e6e:	4649      	mov	r1, r9
 8001e70:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e88:	ebb2 040a 	subs.w	r4, r2, sl
 8001e8c:	eb63 050b 	sbc.w	r5, r3, fp
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	00eb      	lsls	r3, r5, #3
 8001e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e9e:	00e2      	lsls	r2, r4, #3
 8001ea0:	4614      	mov	r4, r2
 8001ea2:	461d      	mov	r5, r3
 8001ea4:	4643      	mov	r3, r8
 8001ea6:	18e3      	adds	r3, r4, r3
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	464b      	mov	r3, r9
 8001eac:	eb45 0303 	adc.w	r3, r5, r3
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	028b      	lsls	r3, r1, #10
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ec8:	4621      	mov	r1, r4
 8001eca:	028a      	lsls	r2, r1, #10
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	61bb      	str	r3, [r7, #24]
 8001ed8:	61fa      	str	r2, [r7, #28]
 8001eda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ede:	f7fe f9ef 	bl	80002c0 <__aeabi_uldivmod>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001eec:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	0f1b      	lsrs	r3, r3, #28
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001efa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001f0a:	e003      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001f0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001f12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3798      	adds	r7, #152	; 0x98
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800
 8001f28:	00f42400 	.word	0x00f42400
 8001f2c:	017d7840 	.word	0x017d7840

08001f30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e28d      	b.n	800245e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8083 	beq.w	8002056 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f50:	4b94      	ldr	r3, [pc, #592]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d019      	beq.n	8001f90 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f5c:	4b91      	ldr	r3, [pc, #580]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d106      	bne.n	8001f76 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f68:	4b8e      	ldr	r3, [pc, #568]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f74:	d00c      	beq.n	8001f90 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f76:	4b8b      	ldr	r3, [pc, #556]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f7e:	2b0c      	cmp	r3, #12
 8001f80:	d112      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f82:	4b88      	ldr	r3, [pc, #544]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	4b84      	ldr	r3, [pc, #528]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d05b      	beq.n	8002054 <HAL_RCC_OscConfig+0x124>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d157      	bne.n	8002054 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e25a      	b.n	800245e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb0:	d106      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x90>
 8001fb2:	4b7c      	ldr	r3, [pc, #496]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a7b      	ldr	r2, [pc, #492]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e01d      	b.n	8001ffc <HAL_RCC_OscConfig+0xcc>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0xb4>
 8001fca:	4b76      	ldr	r3, [pc, #472]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a75      	ldr	r2, [pc, #468]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8001fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	4b73      	ldr	r3, [pc, #460]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a72      	ldr	r2, [pc, #456]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCC_OscConfig+0xcc>
 8001fe4:	4b6f      	ldr	r3, [pc, #444]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a6e      	ldr	r2, [pc, #440]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8001fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b6c      	ldr	r3, [pc, #432]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a6b      	ldr	r2, [pc, #428]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8001ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d013      	beq.n	800202c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7fe fe88 	bl	8000d18 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800200c:	f7fe fe84 	bl	8000d18 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b64      	cmp	r3, #100	; 0x64
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e21f      	b.n	800245e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	4b61      	ldr	r3, [pc, #388]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0xdc>
 800202a:	e014      	b.n	8002056 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7fe fe74 	bl	8000d18 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002034:	f7fe fe70 	bl	8000d18 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e20b      	b.n	800245e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	4b57      	ldr	r3, [pc, #348]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x104>
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d06f      	beq.n	8002142 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002062:	4b50      	ldr	r3, [pc, #320]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b00      	cmp	r3, #0
 800206c:	d017      	beq.n	800209e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800206e:	4b4d      	ldr	r3, [pc, #308]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002076:	2b08      	cmp	r3, #8
 8002078:	d105      	bne.n	8002086 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800207a:	4b4a      	ldr	r3, [pc, #296]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00b      	beq.n	800209e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002086:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800208e:	2b0c      	cmp	r3, #12
 8002090:	d11c      	bne.n	80020cc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002092:	4b44      	ldr	r3, [pc, #272]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d116      	bne.n	80020cc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209e:	4b41      	ldr	r3, [pc, #260]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_RCC_OscConfig+0x186>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d001      	beq.n	80020b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e1d3      	b.n	800245e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b6:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4937      	ldr	r1, [pc, #220]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	e03a      	b.n	8002142 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d020      	beq.n	8002116 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d4:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <HAL_RCC_OscConfig+0x278>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7fe fe1d 	bl	8000d18 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e2:	f7fe fe19 	bl	8000d18 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e1b4      	b.n	800245e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f4:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002100:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4925      	ldr	r1, [pc, #148]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8002110:	4313      	orrs	r3, r2
 8002112:	600b      	str	r3, [r1, #0]
 8002114:	e015      	b.n	8002142 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002116:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <HAL_RCC_OscConfig+0x278>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7fe fdfc 	bl	8000d18 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002124:	f7fe fdf8 	bl	8000d18 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e193      	b.n	800245e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002136:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d036      	beq.n	80021bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d016      	beq.n	8002184 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <HAL_RCC_OscConfig+0x27c>)
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215c:	f7fe fddc 	bl	8000d18 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002164:	f7fe fdd8 	bl	8000d18 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e173      	b.n	800245e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 8002178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0x234>
 8002182:	e01b      	b.n	80021bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_RCC_OscConfig+0x27c>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218a:	f7fe fdc5 	bl	8000d18 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002190:	e00e      	b.n	80021b0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002192:	f7fe fdc1 	bl	8000d18 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d907      	bls.n	80021b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e15c      	b.n	800245e <HAL_RCC_OscConfig+0x52e>
 80021a4:	40023800 	.word	0x40023800
 80021a8:	42470000 	.word	0x42470000
 80021ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b0:	4b8a      	ldr	r3, [pc, #552]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 80021b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1ea      	bne.n	8002192 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 8097 	beq.w	80022f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ce:	4b83      	ldr	r3, [pc, #524]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10f      	bne.n	80021fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	4b7f      	ldr	r3, [pc, #508]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	4a7e      	ldr	r2, [pc, #504]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ea:	4b7c      	ldr	r3, [pc, #496]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f6:	2301      	movs	r3, #1
 80021f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fa:	4b79      	ldr	r3, [pc, #484]	; (80023e0 <HAL_RCC_OscConfig+0x4b0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d118      	bne.n	8002238 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002206:	4b76      	ldr	r3, [pc, #472]	; (80023e0 <HAL_RCC_OscConfig+0x4b0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a75      	ldr	r2, [pc, #468]	; (80023e0 <HAL_RCC_OscConfig+0x4b0>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002212:	f7fe fd81 	bl	8000d18 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221a:	f7fe fd7d 	bl	8000d18 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e118      	b.n	800245e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	4b6c      	ldr	r3, [pc, #432]	; (80023e0 <HAL_RCC_OscConfig+0x4b0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d106      	bne.n	800224e <HAL_RCC_OscConfig+0x31e>
 8002240:	4b66      	ldr	r3, [pc, #408]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 8002242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002244:	4a65      	ldr	r2, [pc, #404]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6713      	str	r3, [r2, #112]	; 0x70
 800224c:	e01c      	b.n	8002288 <HAL_RCC_OscConfig+0x358>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b05      	cmp	r3, #5
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x340>
 8002256:	4b61      	ldr	r3, [pc, #388]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 8002258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225a:	4a60      	ldr	r2, [pc, #384]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 800225c:	f043 0304 	orr.w	r3, r3, #4
 8002260:	6713      	str	r3, [r2, #112]	; 0x70
 8002262:	4b5e      	ldr	r3, [pc, #376]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002266:	4a5d      	ldr	r2, [pc, #372]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6713      	str	r3, [r2, #112]	; 0x70
 800226e:	e00b      	b.n	8002288 <HAL_RCC_OscConfig+0x358>
 8002270:	4b5a      	ldr	r3, [pc, #360]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 8002272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002274:	4a59      	ldr	r2, [pc, #356]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 8002276:	f023 0301 	bic.w	r3, r3, #1
 800227a:	6713      	str	r3, [r2, #112]	; 0x70
 800227c:	4b57      	ldr	r3, [pc, #348]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	4a56      	ldr	r2, [pc, #344]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 8002282:	f023 0304 	bic.w	r3, r3, #4
 8002286:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d015      	beq.n	80022bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002290:	f7fe fd42 	bl	8000d18 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002296:	e00a      	b.n	80022ae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002298:	f7fe fd3e 	bl	8000d18 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e0d7      	b.n	800245e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ae:	4b4b      	ldr	r3, [pc, #300]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0ee      	beq.n	8002298 <HAL_RCC_OscConfig+0x368>
 80022ba:	e014      	b.n	80022e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7fe fd2c 	bl	8000d18 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c2:	e00a      	b.n	80022da <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c4:	f7fe fd28 	bl	8000d18 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e0c1      	b.n	800245e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022da:	4b40      	ldr	r3, [pc, #256]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 80022dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1ee      	bne.n	80022c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022e6:	7dfb      	ldrb	r3, [r7, #23]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d105      	bne.n	80022f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ec:	4b3b      	ldr	r3, [pc, #236]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	4a3a      	ldr	r2, [pc, #232]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 80022f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80ad 	beq.w	800245c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002302:	4b36      	ldr	r3, [pc, #216]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b08      	cmp	r3, #8
 800230c:	d060      	beq.n	80023d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d145      	bne.n	80023a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002316:	4b33      	ldr	r3, [pc, #204]	; (80023e4 <HAL_RCC_OscConfig+0x4b4>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe fcfc 	bl	8000d18 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002324:	f7fe fcf8 	bl	8000d18 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e093      	b.n	800245e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002336:	4b29      	ldr	r3, [pc, #164]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69da      	ldr	r2, [r3, #28]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	019b      	lsls	r3, r3, #6
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	085b      	lsrs	r3, r3, #1
 800235a:	3b01      	subs	r3, #1
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	061b      	lsls	r3, r3, #24
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	071b      	lsls	r3, r3, #28
 800236e:	491b      	ldr	r1, [pc, #108]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <HAL_RCC_OscConfig+0x4b4>)
 8002376:	2201      	movs	r2, #1
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7fe fccd 	bl	8000d18 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002382:	f7fe fcc9 	bl	8000d18 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e064      	b.n	800245e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x452>
 80023a0:	e05c      	b.n	800245c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <HAL_RCC_OscConfig+0x4b4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7fe fcb6 	bl	8000d18 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b0:	f7fe fcb2 	bl	8000d18 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e04d      	b.n	800245e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_RCC_OscConfig+0x4ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x480>
 80023ce:	e045      	b.n	800245c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d107      	bne.n	80023e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e040      	b.n	800245e <HAL_RCC_OscConfig+0x52e>
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40007000 	.word	0x40007000
 80023e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023e8:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <HAL_RCC_OscConfig+0x538>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d030      	beq.n	8002458 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002400:	429a      	cmp	r2, r3
 8002402:	d129      	bne.n	8002458 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d122      	bne.n	8002458 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002418:	4013      	ands	r3, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800241e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002420:	4293      	cmp	r3, r2
 8002422:	d119      	bne.n	8002458 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	085b      	lsrs	r3, r3, #1
 8002430:	3b01      	subs	r3, #1
 8002432:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002434:	429a      	cmp	r2, r3
 8002436:	d10f      	bne.n	8002458 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002444:	429a      	cmp	r2, r3
 8002446:	d107      	bne.n	8002458 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800

0800246c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e03f      	b.n	80024fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7fe faae 	bl	80009f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2224      	movs	r2, #36	; 0x24
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 fd7b 	bl	8002fac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b08a      	sub	sp, #40	; 0x28
 800250a:	af02      	add	r7, sp, #8
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4613      	mov	r3, r2
 8002514:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b20      	cmp	r3, #32
 8002524:	d17c      	bne.n	8002620 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <HAL_UART_Transmit+0x2c>
 800252c:	88fb      	ldrh	r3, [r7, #6]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e075      	b.n	8002622 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_UART_Transmit+0x3e>
 8002540:	2302      	movs	r3, #2
 8002542:	e06e      	b.n	8002622 <HAL_UART_Transmit+0x11c>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2221      	movs	r2, #33	; 0x21
 8002556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800255a:	f7fe fbdd 	bl	8000d18 <HAL_GetTick>
 800255e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	88fa      	ldrh	r2, [r7, #6]
 8002564:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	88fa      	ldrh	r2, [r7, #6]
 800256a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002574:	d108      	bne.n	8002588 <HAL_UART_Transmit+0x82>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d104      	bne.n	8002588 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	61bb      	str	r3, [r7, #24]
 8002586:	e003      	b.n	8002590 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800258c:	2300      	movs	r3, #0
 800258e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002598:	e02a      	b.n	80025f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2200      	movs	r2, #0
 80025a2:	2180      	movs	r1, #128	; 0x80
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 faf9 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e036      	b.n	8002622 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10b      	bne.n	80025d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	3302      	adds	r3, #2
 80025ce:	61bb      	str	r3, [r7, #24]
 80025d0:	e007      	b.n	80025e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	781a      	ldrb	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	3301      	adds	r3, #1
 80025e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1cf      	bne.n	800259a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2200      	movs	r2, #0
 8002602:	2140      	movs	r1, #64	; 0x40
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 fac9 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e006      	b.n	8002622 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	e000      	b.n	8002622 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002620:	2302      	movs	r3, #2
  }
}
 8002622:	4618      	mov	r0, r3
 8002624:	3720      	adds	r7, #32
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b0ba      	sub	sp, #232	; 0xe8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002652:	2300      	movs	r3, #0
 8002654:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002658:	2300      	movs	r3, #0
 800265a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800265e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800266a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10f      	bne.n	8002692 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <HAL_UART_IRQHandler+0x66>
 800267e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fbd3 	bl	8002e36 <UART_Receive_IT>
      return;
 8002690:	e256      	b.n	8002b40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002692:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80de 	beq.w	8002858 <HAL_UART_IRQHandler+0x22c>
 800269c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d106      	bne.n	80026b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 80d1 	beq.w	8002858 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00b      	beq.n	80026da <HAL_UART_IRQHandler+0xae>
 80026c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f043 0201 	orr.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_UART_IRQHandler+0xd2>
 80026e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f043 0202 	orr.w	r2, r3, #2
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00b      	beq.n	8002722 <HAL_UART_IRQHandler+0xf6>
 800270a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f043 0204 	orr.w	r2, r3, #4
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d011      	beq.n	8002752 <HAL_UART_IRQHandler+0x126>
 800272e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d105      	bne.n	8002746 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800273a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f043 0208 	orr.w	r2, r3, #8
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 81ed 	beq.w	8002b36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800275c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_UART_IRQHandler+0x14e>
 8002768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 fb5e 	bl	8002e36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002784:	2b40      	cmp	r3, #64	; 0x40
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d103      	bne.n	80027a6 <HAL_UART_IRQHandler+0x17a>
 800279e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d04f      	beq.n	8002846 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fa66 	bl	8002c78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b6:	2b40      	cmp	r3, #64	; 0x40
 80027b8:	d141      	bne.n	800283e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3314      	adds	r3, #20
 80027c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027c8:	e853 3f00 	ldrex	r3, [r3]
 80027cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80027d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3314      	adds	r3, #20
 80027e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80027e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80027ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80027f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80027f6:	e841 2300 	strex	r3, r2, [r1]
 80027fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80027fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1d9      	bne.n	80027ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	2b00      	cmp	r3, #0
 800280c:	d013      	beq.n	8002836 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	4a7d      	ldr	r2, [pc, #500]	; (8002a08 <HAL_UART_IRQHandler+0x3dc>)
 8002814:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fcb8 	bl	8001190 <HAL_DMA_Abort_IT>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d016      	beq.n	8002854 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002830:	4610      	mov	r0, r2
 8002832:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002834:	e00e      	b.n	8002854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f99a 	bl	8002b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800283c:	e00a      	b.n	8002854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f996 	bl	8002b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002844:	e006      	b.n	8002854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f992 	bl	8002b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002852:	e170      	b.n	8002b36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002854:	bf00      	nop
    return;
 8002856:	e16e      	b.n	8002b36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	2b01      	cmp	r3, #1
 800285e:	f040 814a 	bne.w	8002af6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 8143 	beq.w	8002af6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 813c 	beq.w	8002af6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	f040 80b4 	bne.w	8002a0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 8140 	beq.w	8002b3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028c2:	429a      	cmp	r2, r3
 80028c4:	f080 8139 	bcs.w	8002b3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028da:	f000 8088 	beq.w	80029ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	330c      	adds	r3, #12
 80028e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028ec:	e853 3f00 	ldrex	r3, [r3]
 80028f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80028f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	330c      	adds	r3, #12
 8002906:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800290a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800290e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002912:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002916:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800291a:	e841 2300 	strex	r3, r2, [r1]
 800291e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1d9      	bne.n	80028de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3314      	adds	r3, #20
 8002930:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002934:	e853 3f00 	ldrex	r3, [r3]
 8002938:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800293a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3314      	adds	r3, #20
 800294a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800294e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002952:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002954:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002956:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800295a:	e841 2300 	strex	r3, r2, [r1]
 800295e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1e1      	bne.n	800292a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3314      	adds	r3, #20
 800296c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002970:	e853 3f00 	ldrex	r3, [r3]
 8002974:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800297c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3314      	adds	r3, #20
 8002986:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800298a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800298c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002990:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002992:	e841 2300 	strex	r3, r2, [r1]
 8002996:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1e3      	bne.n	8002966 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	330c      	adds	r3, #12
 80029b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b6:	e853 3f00 	ldrex	r3, [r3]
 80029ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80029bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029be:	f023 0310 	bic.w	r3, r3, #16
 80029c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	330c      	adds	r3, #12
 80029cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80029d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80029d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029d8:	e841 2300 	strex	r3, r2, [r1]
 80029dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80029de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1e3      	bne.n	80029ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe fb61 	bl	80010b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	4619      	mov	r1, r3
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f8c0 	bl	8002b84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a04:	e099      	b.n	8002b3a <HAL_UART_IRQHandler+0x50e>
 8002a06:	bf00      	nop
 8002a08:	08002d3f 	.word	0x08002d3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 808b 	beq.w	8002b3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8086 	beq.w	8002b3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	330c      	adds	r3, #12
 8002a38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3c:	e853 3f00 	ldrex	r3, [r3]
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	330c      	adds	r3, #12
 8002a52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a56:	647a      	str	r2, [r7, #68]	; 0x44
 8002a58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a5e:	e841 2300 	strex	r3, r2, [r1]
 8002a62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e3      	bne.n	8002a32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3314      	adds	r3, #20
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	e853 3f00 	ldrex	r3, [r3]
 8002a78:	623b      	str	r3, [r7, #32]
   return(result);
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3314      	adds	r3, #20
 8002a8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a8e:	633a      	str	r2, [r7, #48]	; 0x30
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a96:	e841 2300 	strex	r3, r2, [r1]
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1e3      	bne.n	8002a6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	330c      	adds	r3, #12
 8002ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	e853 3f00 	ldrex	r3, [r3]
 8002abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0310 	bic.w	r3, r3, #16
 8002ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	330c      	adds	r3, #12
 8002ad0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ad4:	61fa      	str	r2, [r7, #28]
 8002ad6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad8:	69b9      	ldr	r1, [r7, #24]
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	e841 2300 	strex	r3, r2, [r1]
 8002ae0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1e3      	bne.n	8002ab0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002aec:	4619      	mov	r1, r3
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f848 	bl	8002b84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002af4:	e023      	b.n	8002b3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d009      	beq.n	8002b16 <HAL_UART_IRQHandler+0x4ea>
 8002b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f929 	bl	8002d66 <UART_Transmit_IT>
    return;
 8002b14:	e014      	b.n	8002b40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00e      	beq.n	8002b40 <HAL_UART_IRQHandler+0x514>
 8002b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d008      	beq.n	8002b40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f969 	bl	8002e06 <UART_EndTransmit_IT>
    return;
 8002b34:	e004      	b.n	8002b40 <HAL_UART_IRQHandler+0x514>
    return;
 8002b36:	bf00      	nop
 8002b38:	e002      	b.n	8002b40 <HAL_UART_IRQHandler+0x514>
      return;
 8002b3a:	bf00      	nop
 8002b3c:	e000      	b.n	8002b40 <HAL_UART_IRQHandler+0x514>
      return;
 8002b3e:	bf00      	nop
  }
}
 8002b40:	37e8      	adds	r7, #232	; 0xe8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop

08002b48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b090      	sub	sp, #64	; 0x40
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bac:	e050      	b.n	8002c50 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d04c      	beq.n	8002c50 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <UART_WaitOnFlagUntilTimeout+0x30>
 8002bbc:	f7fe f8ac 	bl	8000d18 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d241      	bcs.n	8002c50 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	330c      	adds	r3, #12
 8002bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd6:	e853 3f00 	ldrex	r3, [r3]
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	330c      	adds	r3, #12
 8002bea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bec:	637a      	str	r2, [r7, #52]	; 0x34
 8002bee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bf4:	e841 2300 	strex	r3, r2, [r1]
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1e5      	bne.n	8002bcc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3314      	adds	r3, #20
 8002c06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	e853 3f00 	ldrex	r3, [r3]
 8002c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f023 0301 	bic.w	r3, r3, #1
 8002c16:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3314      	adds	r3, #20
 8002c1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c20:	623a      	str	r2, [r7, #32]
 8002c22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c24:	69f9      	ldr	r1, [r7, #28]
 8002c26:	6a3a      	ldr	r2, [r7, #32]
 8002c28:	e841 2300 	strex	r3, r2, [r1]
 8002c2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e5      	bne.n	8002c00 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e00f      	b.n	8002c70 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	bf0c      	ite	eq
 8002c60:	2301      	moveq	r3, #1
 8002c62:	2300      	movne	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d09f      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3740      	adds	r7, #64	; 0x40
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b095      	sub	sp, #84	; 0x54
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	330c      	adds	r3, #12
 8002c86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8a:	e853 3f00 	ldrex	r3, [r3]
 8002c8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	330c      	adds	r3, #12
 8002c9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ca0:	643a      	str	r2, [r7, #64]	; 0x40
 8002ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ca6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ca8:	e841 2300 	strex	r3, r2, [r1]
 8002cac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1e5      	bne.n	8002c80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3314      	adds	r3, #20
 8002cba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	e853 3f00 	ldrex	r3, [r3]
 8002cc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f023 0301 	bic.w	r3, r3, #1
 8002cca:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3314      	adds	r3, #20
 8002cd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cdc:	e841 2300 	strex	r3, r2, [r1]
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1e5      	bne.n	8002cb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d119      	bne.n	8002d24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	330c      	adds	r3, #12
 8002cf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	e853 3f00 	ldrex	r3, [r3]
 8002cfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f023 0310 	bic.w	r3, r3, #16
 8002d06:	647b      	str	r3, [r7, #68]	; 0x44
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	330c      	adds	r3, #12
 8002d0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d10:	61ba      	str	r2, [r7, #24]
 8002d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d14:	6979      	ldr	r1, [r7, #20]
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	e841 2300 	strex	r3, r2, [r1]
 8002d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e5      	bne.n	8002cf0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d32:	bf00      	nop
 8002d34:	3754      	adds	r7, #84	; 0x54
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7ff ff09 	bl	8002b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b21      	cmp	r3, #33	; 0x21
 8002d78:	d13e      	bne.n	8002df8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d82:	d114      	bne.n	8002dae <UART_Transmit_IT+0x48>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d110      	bne.n	8002dae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002da0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	1c9a      	adds	r2, r3, #2
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	621a      	str	r2, [r3, #32]
 8002dac:	e008      	b.n	8002dc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	1c59      	adds	r1, r3, #1
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6211      	str	r1, [r2, #32]
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10f      	bne.n	8002df4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002de2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002df2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	e000      	b.n	8002dfa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002df8:	2302      	movs	r3, #2
  }
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff fe8e 	bl	8002b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b08c      	sub	sp, #48	; 0x30
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b22      	cmp	r3, #34	; 0x22
 8002e48:	f040 80ab 	bne.w	8002fa2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e54:	d117      	bne.n	8002e86 <UART_Receive_IT+0x50>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d113      	bne.n	8002e86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	1c9a      	adds	r2, r3, #2
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	629a      	str	r2, [r3, #40]	; 0x28
 8002e84:	e026      	b.n	8002ed4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e98:	d007      	beq.n	8002eaa <UART_Receive_IT+0x74>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10a      	bne.n	8002eb8 <UART_Receive_IT+0x82>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	e008      	b.n	8002eca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d15a      	bne.n	8002f9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0220 	bic.w	r2, r2, #32
 8002ef6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d135      	bne.n	8002f94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	330c      	adds	r3, #12
 8002f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	e853 3f00 	ldrex	r3, [r3]
 8002f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f023 0310 	bic.w	r3, r3, #16
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	330c      	adds	r3, #12
 8002f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4e:	623a      	str	r2, [r7, #32]
 8002f50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f52:	69f9      	ldr	r1, [r7, #28]
 8002f54:	6a3a      	ldr	r2, [r7, #32]
 8002f56:	e841 2300 	strex	r3, r2, [r1]
 8002f5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1e5      	bne.n	8002f2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0310 	and.w	r3, r3, #16
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d10a      	bne.n	8002f86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff fdf9 	bl	8002b84 <HAL_UARTEx_RxEventCallback>
 8002f92:	e002      	b.n	8002f9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff fde1 	bl	8002b5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e002      	b.n	8002fa4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e000      	b.n	8002fa4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002fa2:	2302      	movs	r3, #2
  }
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3730      	adds	r7, #48	; 0x30
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb0:	b0c0      	sub	sp, #256	; 0x100
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc8:	68d9      	ldr	r1, [r3, #12]
 8002fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	ea40 0301 	orr.w	r3, r0, r1
 8002fd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003004:	f021 010c 	bic.w	r1, r1, #12
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003012:	430b      	orrs	r3, r1
 8003014:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003026:	6999      	ldr	r1, [r3, #24]
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	ea40 0301 	orr.w	r3, r0, r1
 8003032:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4b8f      	ldr	r3, [pc, #572]	; (8003278 <UART_SetConfig+0x2cc>)
 800303c:	429a      	cmp	r2, r3
 800303e:	d005      	beq.n	800304c <UART_SetConfig+0xa0>
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4b8d      	ldr	r3, [pc, #564]	; (800327c <UART_SetConfig+0x2d0>)
 8003048:	429a      	cmp	r2, r3
 800304a:	d104      	bne.n	8003056 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800304c:	f7fe fdb2 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 8003050:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003054:	e003      	b.n	800305e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003056:	f7fe fd99 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 800305a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800305e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003068:	f040 810c 	bne.w	8003284 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800306c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003070:	2200      	movs	r2, #0
 8003072:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003076:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800307a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800307e:	4622      	mov	r2, r4
 8003080:	462b      	mov	r3, r5
 8003082:	1891      	adds	r1, r2, r2
 8003084:	65b9      	str	r1, [r7, #88]	; 0x58
 8003086:	415b      	adcs	r3, r3
 8003088:	65fb      	str	r3, [r7, #92]	; 0x5c
 800308a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800308e:	4621      	mov	r1, r4
 8003090:	eb12 0801 	adds.w	r8, r2, r1
 8003094:	4629      	mov	r1, r5
 8003096:	eb43 0901 	adc.w	r9, r3, r1
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030ae:	4690      	mov	r8, r2
 80030b0:	4699      	mov	r9, r3
 80030b2:	4623      	mov	r3, r4
 80030b4:	eb18 0303 	adds.w	r3, r8, r3
 80030b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030bc:	462b      	mov	r3, r5
 80030be:	eb49 0303 	adc.w	r3, r9, r3
 80030c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030da:	460b      	mov	r3, r1
 80030dc:	18db      	adds	r3, r3, r3
 80030de:	653b      	str	r3, [r7, #80]	; 0x50
 80030e0:	4613      	mov	r3, r2
 80030e2:	eb42 0303 	adc.w	r3, r2, r3
 80030e6:	657b      	str	r3, [r7, #84]	; 0x54
 80030e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030f0:	f7fd f8e6 	bl	80002c0 <__aeabi_uldivmod>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4b61      	ldr	r3, [pc, #388]	; (8003280 <UART_SetConfig+0x2d4>)
 80030fa:	fba3 2302 	umull	r2, r3, r3, r2
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	011c      	lsls	r4, r3, #4
 8003102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003106:	2200      	movs	r2, #0
 8003108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800310c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003110:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003114:	4642      	mov	r2, r8
 8003116:	464b      	mov	r3, r9
 8003118:	1891      	adds	r1, r2, r2
 800311a:	64b9      	str	r1, [r7, #72]	; 0x48
 800311c:	415b      	adcs	r3, r3
 800311e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003120:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003124:	4641      	mov	r1, r8
 8003126:	eb12 0a01 	adds.w	sl, r2, r1
 800312a:	4649      	mov	r1, r9
 800312c:	eb43 0b01 	adc.w	fp, r3, r1
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800313c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003140:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003144:	4692      	mov	sl, r2
 8003146:	469b      	mov	fp, r3
 8003148:	4643      	mov	r3, r8
 800314a:	eb1a 0303 	adds.w	r3, sl, r3
 800314e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003152:	464b      	mov	r3, r9
 8003154:	eb4b 0303 	adc.w	r3, fp, r3
 8003158:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003168:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800316c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003170:	460b      	mov	r3, r1
 8003172:	18db      	adds	r3, r3, r3
 8003174:	643b      	str	r3, [r7, #64]	; 0x40
 8003176:	4613      	mov	r3, r2
 8003178:	eb42 0303 	adc.w	r3, r2, r3
 800317c:	647b      	str	r3, [r7, #68]	; 0x44
 800317e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003182:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003186:	f7fd f89b 	bl	80002c0 <__aeabi_uldivmod>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4611      	mov	r1, r2
 8003190:	4b3b      	ldr	r3, [pc, #236]	; (8003280 <UART_SetConfig+0x2d4>)
 8003192:	fba3 2301 	umull	r2, r3, r3, r1
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2264      	movs	r2, #100	; 0x64
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	1acb      	subs	r3, r1, r3
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031a6:	4b36      	ldr	r3, [pc, #216]	; (8003280 <UART_SetConfig+0x2d4>)
 80031a8:	fba3 2302 	umull	r2, r3, r3, r2
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031b4:	441c      	add	r4, r3
 80031b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ba:	2200      	movs	r2, #0
 80031bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80031c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80031c8:	4642      	mov	r2, r8
 80031ca:	464b      	mov	r3, r9
 80031cc:	1891      	adds	r1, r2, r2
 80031ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80031d0:	415b      	adcs	r3, r3
 80031d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031d8:	4641      	mov	r1, r8
 80031da:	1851      	adds	r1, r2, r1
 80031dc:	6339      	str	r1, [r7, #48]	; 0x30
 80031de:	4649      	mov	r1, r9
 80031e0:	414b      	adcs	r3, r1
 80031e2:	637b      	str	r3, [r7, #52]	; 0x34
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031f0:	4659      	mov	r1, fp
 80031f2:	00cb      	lsls	r3, r1, #3
 80031f4:	4651      	mov	r1, sl
 80031f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031fa:	4651      	mov	r1, sl
 80031fc:	00ca      	lsls	r2, r1, #3
 80031fe:	4610      	mov	r0, r2
 8003200:	4619      	mov	r1, r3
 8003202:	4603      	mov	r3, r0
 8003204:	4642      	mov	r2, r8
 8003206:	189b      	adds	r3, r3, r2
 8003208:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800320c:	464b      	mov	r3, r9
 800320e:	460a      	mov	r2, r1
 8003210:	eb42 0303 	adc.w	r3, r2, r3
 8003214:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003224:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003228:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800322c:	460b      	mov	r3, r1
 800322e:	18db      	adds	r3, r3, r3
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
 8003232:	4613      	mov	r3, r2
 8003234:	eb42 0303 	adc.w	r3, r2, r3
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800323a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800323e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003242:	f7fd f83d 	bl	80002c0 <__aeabi_uldivmod>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <UART_SetConfig+0x2d4>)
 800324c:	fba3 1302 	umull	r1, r3, r3, r2
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	2164      	movs	r1, #100	; 0x64
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	3332      	adds	r3, #50	; 0x32
 800325e:	4a08      	ldr	r2, [pc, #32]	; (8003280 <UART_SetConfig+0x2d4>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	f003 0207 	and.w	r2, r3, #7
 800326a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4422      	add	r2, r4
 8003272:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003274:	e106      	b.n	8003484 <UART_SetConfig+0x4d8>
 8003276:	bf00      	nop
 8003278:	40011000 	.word	0x40011000
 800327c:	40011400 	.word	0x40011400
 8003280:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003288:	2200      	movs	r2, #0
 800328a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800328e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003292:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003296:	4642      	mov	r2, r8
 8003298:	464b      	mov	r3, r9
 800329a:	1891      	adds	r1, r2, r2
 800329c:	6239      	str	r1, [r7, #32]
 800329e:	415b      	adcs	r3, r3
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
 80032a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032a6:	4641      	mov	r1, r8
 80032a8:	1854      	adds	r4, r2, r1
 80032aa:	4649      	mov	r1, r9
 80032ac:	eb43 0501 	adc.w	r5, r3, r1
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	00eb      	lsls	r3, r5, #3
 80032ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032be:	00e2      	lsls	r2, r4, #3
 80032c0:	4614      	mov	r4, r2
 80032c2:	461d      	mov	r5, r3
 80032c4:	4643      	mov	r3, r8
 80032c6:	18e3      	adds	r3, r4, r3
 80032c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032cc:	464b      	mov	r3, r9
 80032ce:	eb45 0303 	adc.w	r3, r5, r3
 80032d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032f2:	4629      	mov	r1, r5
 80032f4:	008b      	lsls	r3, r1, #2
 80032f6:	4621      	mov	r1, r4
 80032f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032fc:	4621      	mov	r1, r4
 80032fe:	008a      	lsls	r2, r1, #2
 8003300:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003304:	f7fc ffdc 	bl	80002c0 <__aeabi_uldivmod>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4b60      	ldr	r3, [pc, #384]	; (8003490 <UART_SetConfig+0x4e4>)
 800330e:	fba3 2302 	umull	r2, r3, r3, r2
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	011c      	lsls	r4, r3, #4
 8003316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800331a:	2200      	movs	r2, #0
 800331c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003320:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003324:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003328:	4642      	mov	r2, r8
 800332a:	464b      	mov	r3, r9
 800332c:	1891      	adds	r1, r2, r2
 800332e:	61b9      	str	r1, [r7, #24]
 8003330:	415b      	adcs	r3, r3
 8003332:	61fb      	str	r3, [r7, #28]
 8003334:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003338:	4641      	mov	r1, r8
 800333a:	1851      	adds	r1, r2, r1
 800333c:	6139      	str	r1, [r7, #16]
 800333e:	4649      	mov	r1, r9
 8003340:	414b      	adcs	r3, r1
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003350:	4659      	mov	r1, fp
 8003352:	00cb      	lsls	r3, r1, #3
 8003354:	4651      	mov	r1, sl
 8003356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800335a:	4651      	mov	r1, sl
 800335c:	00ca      	lsls	r2, r1, #3
 800335e:	4610      	mov	r0, r2
 8003360:	4619      	mov	r1, r3
 8003362:	4603      	mov	r3, r0
 8003364:	4642      	mov	r2, r8
 8003366:	189b      	adds	r3, r3, r2
 8003368:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800336c:	464b      	mov	r3, r9
 800336e:	460a      	mov	r2, r1
 8003370:	eb42 0303 	adc.w	r3, r2, r3
 8003374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	67bb      	str	r3, [r7, #120]	; 0x78
 8003382:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003390:	4649      	mov	r1, r9
 8003392:	008b      	lsls	r3, r1, #2
 8003394:	4641      	mov	r1, r8
 8003396:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800339a:	4641      	mov	r1, r8
 800339c:	008a      	lsls	r2, r1, #2
 800339e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033a2:	f7fc ff8d 	bl	80002c0 <__aeabi_uldivmod>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4611      	mov	r1, r2
 80033ac:	4b38      	ldr	r3, [pc, #224]	; (8003490 <UART_SetConfig+0x4e4>)
 80033ae:	fba3 2301 	umull	r2, r3, r3, r1
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2264      	movs	r2, #100	; 0x64
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	1acb      	subs	r3, r1, r3
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	3332      	adds	r3, #50	; 0x32
 80033c0:	4a33      	ldr	r2, [pc, #204]	; (8003490 <UART_SetConfig+0x4e4>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033cc:	441c      	add	r4, r3
 80033ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033d2:	2200      	movs	r2, #0
 80033d4:	673b      	str	r3, [r7, #112]	; 0x70
 80033d6:	677a      	str	r2, [r7, #116]	; 0x74
 80033d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033dc:	4642      	mov	r2, r8
 80033de:	464b      	mov	r3, r9
 80033e0:	1891      	adds	r1, r2, r2
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	415b      	adcs	r3, r3
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033ec:	4641      	mov	r1, r8
 80033ee:	1851      	adds	r1, r2, r1
 80033f0:	6039      	str	r1, [r7, #0]
 80033f2:	4649      	mov	r1, r9
 80033f4:	414b      	adcs	r3, r1
 80033f6:	607b      	str	r3, [r7, #4]
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003404:	4659      	mov	r1, fp
 8003406:	00cb      	lsls	r3, r1, #3
 8003408:	4651      	mov	r1, sl
 800340a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800340e:	4651      	mov	r1, sl
 8003410:	00ca      	lsls	r2, r1, #3
 8003412:	4610      	mov	r0, r2
 8003414:	4619      	mov	r1, r3
 8003416:	4603      	mov	r3, r0
 8003418:	4642      	mov	r2, r8
 800341a:	189b      	adds	r3, r3, r2
 800341c:	66bb      	str	r3, [r7, #104]	; 0x68
 800341e:	464b      	mov	r3, r9
 8003420:	460a      	mov	r2, r1
 8003422:	eb42 0303 	adc.w	r3, r2, r3
 8003426:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	663b      	str	r3, [r7, #96]	; 0x60
 8003432:	667a      	str	r2, [r7, #100]	; 0x64
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003440:	4649      	mov	r1, r9
 8003442:	008b      	lsls	r3, r1, #2
 8003444:	4641      	mov	r1, r8
 8003446:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800344a:	4641      	mov	r1, r8
 800344c:	008a      	lsls	r2, r1, #2
 800344e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003452:	f7fc ff35 	bl	80002c0 <__aeabi_uldivmod>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <UART_SetConfig+0x4e4>)
 800345c:	fba3 1302 	umull	r1, r3, r3, r2
 8003460:	095b      	lsrs	r3, r3, #5
 8003462:	2164      	movs	r1, #100	; 0x64
 8003464:	fb01 f303 	mul.w	r3, r1, r3
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	3332      	adds	r3, #50	; 0x32
 800346e:	4a08      	ldr	r2, [pc, #32]	; (8003490 <UART_SetConfig+0x4e4>)
 8003470:	fba2 2303 	umull	r2, r3, r2, r3
 8003474:	095b      	lsrs	r3, r3, #5
 8003476:	f003 020f 	and.w	r2, r3, #15
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4422      	add	r2, r4
 8003482:	609a      	str	r2, [r3, #8]
}
 8003484:	bf00      	nop
 8003486:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800348a:	46bd      	mov	sp, r7
 800348c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003490:	51eb851f 	.word	0x51eb851f

08003494 <__NVIC_SetPriority>:
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	6039      	str	r1, [r7, #0]
 800349e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	db0a      	blt.n	80034be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	490c      	ldr	r1, [pc, #48]	; (80034e0 <__NVIC_SetPriority+0x4c>)
 80034ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b2:	0112      	lsls	r2, r2, #4
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	440b      	add	r3, r1
 80034b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034bc:	e00a      	b.n	80034d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	4908      	ldr	r1, [pc, #32]	; (80034e4 <__NVIC_SetPriority+0x50>)
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	3b04      	subs	r3, #4
 80034cc:	0112      	lsls	r2, r2, #4
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	440b      	add	r3, r1
 80034d2:	761a      	strb	r2, [r3, #24]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000e100 	.word	0xe000e100
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80034ec:	2100      	movs	r1, #0
 80034ee:	f06f 0004 	mvn.w	r0, #4
 80034f2:	f7ff ffcf 	bl	8003494 <__NVIC_SetPriority>
#endif
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003502:	f3ef 8305 	mrs	r3, IPSR
 8003506:	603b      	str	r3, [r7, #0]
  return(result);
 8003508:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800350e:	f06f 0305 	mvn.w	r3, #5
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	e00c      	b.n	8003530 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003516:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <osKernelInitialize+0x44>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d105      	bne.n	800352a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <osKernelInitialize+0x44>)
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003524:	2300      	movs	r3, #0
 8003526:	607b      	str	r3, [r7, #4]
 8003528:	e002      	b.n	8003530 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800352a:	f04f 33ff 	mov.w	r3, #4294967295
 800352e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003530:	687b      	ldr	r3, [r7, #4]
}
 8003532:	4618      	mov	r0, r3
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	200001a4 	.word	0x200001a4

08003544 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800354a:	f3ef 8305 	mrs	r3, IPSR
 800354e:	603b      	str	r3, [r7, #0]
  return(result);
 8003550:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003556:	f06f 0305 	mvn.w	r3, #5
 800355a:	607b      	str	r3, [r7, #4]
 800355c:	e010      	b.n	8003580 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800355e:	4b0b      	ldr	r3, [pc, #44]	; (800358c <osKernelStart+0x48>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d109      	bne.n	800357a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003566:	f7ff ffbf 	bl	80034e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800356a:	4b08      	ldr	r3, [pc, #32]	; (800358c <osKernelStart+0x48>)
 800356c:	2202      	movs	r2, #2
 800356e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003570:	f001 f8a0 	bl	80046b4 <vTaskStartScheduler>
      stat = osOK;
 8003574:	2300      	movs	r3, #0
 8003576:	607b      	str	r3, [r7, #4]
 8003578:	e002      	b.n	8003580 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800357a:	f04f 33ff 	mov.w	r3, #4294967295
 800357e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003580:	687b      	ldr	r3, [r7, #4]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	200001a4 	.word	0x200001a4

08003590 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b08e      	sub	sp, #56	; 0x38
 8003594:	af04      	add	r7, sp, #16
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800359c:	2300      	movs	r3, #0
 800359e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035a0:	f3ef 8305 	mrs	r3, IPSR
 80035a4:	617b      	str	r3, [r7, #20]
  return(result);
 80035a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d17e      	bne.n	80036aa <osThreadNew+0x11a>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d07b      	beq.n	80036aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80035b6:	2318      	movs	r3, #24
 80035b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80035be:	f04f 33ff 	mov.w	r3, #4294967295
 80035c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d045      	beq.n	8003656 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <osThreadNew+0x48>
        name = attr->name;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <osThreadNew+0x6e>
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	2b38      	cmp	r3, #56	; 0x38
 80035f0:	d805      	bhi.n	80035fe <osThreadNew+0x6e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <osThreadNew+0x72>
        return (NULL);
 80035fe:	2300      	movs	r3, #0
 8003600:	e054      	b.n	80036ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	089b      	lsrs	r3, r3, #2
 8003610:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00e      	beq.n	8003638 <osThreadNew+0xa8>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b5b      	cmp	r3, #91	; 0x5b
 8003620:	d90a      	bls.n	8003638 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003626:	2b00      	cmp	r3, #0
 8003628:	d006      	beq.n	8003638 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <osThreadNew+0xa8>
        mem = 1;
 8003632:	2301      	movs	r3, #1
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	e010      	b.n	800365a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10c      	bne.n	800365a <osThreadNew+0xca>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d108      	bne.n	800365a <osThreadNew+0xca>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d104      	bne.n	800365a <osThreadNew+0xca>
          mem = 0;
 8003650:	2300      	movs	r3, #0
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	e001      	b.n	800365a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d110      	bne.n	8003682 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003668:	9202      	str	r2, [sp, #8]
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	6a3a      	ldr	r2, [r7, #32]
 8003674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 fe46 	bl	8004308 <xTaskCreateStatic>
 800367c:	4603      	mov	r3, r0
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	e013      	b.n	80036aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d110      	bne.n	80036aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	b29a      	uxth	r2, r3
 800368c:	f107 0310 	add.w	r3, r7, #16
 8003690:	9301      	str	r3, [sp, #4]
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 fe91 	bl	80043c2 <xTaskCreate>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d001      	beq.n	80036aa <osThreadNew+0x11a>
            hTask = NULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80036aa:	693b      	ldr	r3, [r7, #16]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3728      	adds	r7, #40	; 0x28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036bc:	f3ef 8305 	mrs	r3, IPSR
 80036c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80036c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <osDelay+0x1c>
    stat = osErrorISR;
 80036c8:	f06f 0305 	mvn.w	r3, #5
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	e007      	b.n	80036e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 ffb6 	bl	800464c <vTaskDelay>
    }
  }

  return (stat);
 80036e0:	68fb      	ldr	r3, [r7, #12]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4a07      	ldr	r2, [pc, #28]	; (8003718 <vApplicationGetIdleTaskMemory+0x2c>)
 80036fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	4a06      	ldr	r2, [pc, #24]	; (800371c <vApplicationGetIdleTaskMemory+0x30>)
 8003702:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2280      	movs	r2, #128	; 0x80
 8003708:	601a      	str	r2, [r3, #0]
}
 800370a:	bf00      	nop
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	200001a8 	.word	0x200001a8
 800371c:	20000204 	.word	0x20000204

08003720 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4a07      	ldr	r2, [pc, #28]	; (800374c <vApplicationGetTimerTaskMemory+0x2c>)
 8003730:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4a06      	ldr	r2, [pc, #24]	; (8003750 <vApplicationGetTimerTaskMemory+0x30>)
 8003736:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800373e:	601a      	str	r2, [r3, #0]
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	20000404 	.word	0x20000404
 8003750:	20000460 	.word	0x20000460

08003754 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f103 0208 	add.w	r2, r3, #8
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f04f 32ff 	mov.w	r2, #4294967295
 800376c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f103 0208 	add.w	r2, r3, #8
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f103 0208 	add.w	r2, r3, #8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037ae:	b480      	push	{r7}
 80037b0:	b085      	sub	sp, #20
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	601a      	str	r2, [r3, #0]
}
 80037ea:	bf00      	nop
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037f6:	b480      	push	{r7}
 80037f8:	b085      	sub	sp, #20
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d103      	bne.n	8003816 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	e00c      	b.n	8003830 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3308      	adds	r3, #8
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	e002      	b.n	8003824 <vListInsert+0x2e>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	429a      	cmp	r2, r3
 800382e:	d2f6      	bcs.n	800381e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	601a      	str	r2, [r3, #0]
}
 800385c:	bf00      	nop
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6892      	ldr	r2, [r2, #8]
 800387e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6852      	ldr	r2, [r2, #4]
 8003888:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	429a      	cmp	r2, r3
 8003892:	d103      	bne.n	800389c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	1e5a      	subs	r2, r3, #1
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10a      	bne.n	80038e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038e2:	bf00      	nop
 80038e4:	e7fe      	b.n	80038e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80038e6:	f002 f885 	bl	80059f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f2:	68f9      	ldr	r1, [r7, #12]
 80038f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038f6:	fb01 f303 	mul.w	r3, r1, r3
 80038fa:	441a      	add	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003916:	3b01      	subs	r3, #1
 8003918:	68f9      	ldr	r1, [r7, #12]
 800391a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	441a      	add	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	22ff      	movs	r2, #255	; 0xff
 800392a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	22ff      	movs	r2, #255	; 0xff
 8003932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d114      	bne.n	8003966 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01a      	beq.n	800397a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	3310      	adds	r3, #16
 8003948:	4618      	mov	r0, r3
 800394a:	f001 f93d 	bl	8004bc8 <xTaskRemoveFromEventList>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d012      	beq.n	800397a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003954:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <xQueueGenericReset+0xcc>)
 8003956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	e009      	b.n	800397a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	3310      	adds	r3, #16
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff fef2 	bl	8003754 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	3324      	adds	r3, #36	; 0x24
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff feed 	bl	8003754 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800397a:	f002 f86b 	bl	8005a54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800397e:	2301      	movs	r3, #1
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	e000ed04 	.word	0xe000ed04

0800398c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08e      	sub	sp, #56	; 0x38
 8003990:	af02      	add	r7, sp, #8
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039ce:	bf00      	nop
 80039d0:	e7fe      	b.n	80039d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <xQueueGenericCreateStatic+0x52>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <xQueueGenericCreateStatic+0x56>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <xQueueGenericCreateStatic+0x58>
 80039e2:	2300      	movs	r3, #0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10a      	bne.n	80039fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80039e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	623b      	str	r3, [r7, #32]
}
 80039fa:	bf00      	nop
 80039fc:	e7fe      	b.n	80039fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d102      	bne.n	8003a0a <xQueueGenericCreateStatic+0x7e>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <xQueueGenericCreateStatic+0x82>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <xQueueGenericCreateStatic+0x84>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	61fb      	str	r3, [r7, #28]
}
 8003a26:	bf00      	nop
 8003a28:	e7fe      	b.n	8003a28 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a2a:	2350      	movs	r3, #80	; 0x50
 8003a2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b50      	cmp	r3, #80	; 0x50
 8003a32:	d00a      	beq.n	8003a4a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	61bb      	str	r3, [r7, #24]
}
 8003a46:	bf00      	nop
 8003a48:	e7fe      	b.n	8003a48 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a4a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00d      	beq.n	8003a72 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	4613      	mov	r3, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	68b9      	ldr	r1, [r7, #8]
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f83f 	bl	8003af0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3730      	adds	r7, #48	; 0x30
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08a      	sub	sp, #40	; 0x28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	4613      	mov	r3, r2
 8003a88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	613b      	str	r3, [r7, #16]
}
 8003aa2:	bf00      	nop
 8003aa4:	e7fe      	b.n	8003aa4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	fb02 f303 	mul.w	r3, r2, r3
 8003aae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	3350      	adds	r3, #80	; 0x50
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f002 f8bf 	bl	8005c38 <pvPortMalloc>
 8003aba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d011      	beq.n	8003ae6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	3350      	adds	r3, #80	; 0x50
 8003aca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ad4:	79fa      	ldrb	r2, [r7, #7]
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	4613      	mov	r3, r2
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f805 	bl	8003af0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ae6:	69bb      	ldr	r3, [r7, #24]
	}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3720      	adds	r7, #32
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d103      	bne.n	8003b0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	e002      	b.n	8003b12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b1e:	2101      	movs	r1, #1
 8003b20:	69b8      	ldr	r0, [r7, #24]
 8003b22:	f7ff fecb 	bl	80038bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08e      	sub	sp, #56	; 0x38
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b46:	2300      	movs	r3, #0
 8003b48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <xQueueGenericSend+0x32>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d103      	bne.n	8003b78 <xQueueGenericSend+0x40>
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <xQueueGenericSend+0x44>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <xQueueGenericSend+0x46>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <xQueueGenericSend+0x60>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d103      	bne.n	8003ba6 <xQueueGenericSend+0x6e>
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <xQueueGenericSend+0x72>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <xQueueGenericSend+0x74>
 8003baa:	2300      	movs	r3, #0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <xQueueGenericSend+0x8e>
	__asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	623b      	str	r3, [r7, #32]
}
 8003bc2:	bf00      	nop
 8003bc4:	e7fe      	b.n	8003bc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bc6:	f001 f9bd 	bl	8004f44 <xTaskGetSchedulerState>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d102      	bne.n	8003bd6 <xQueueGenericSend+0x9e>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <xQueueGenericSend+0xa2>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <xQueueGenericSend+0xa4>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10a      	bne.n	8003bf6 <xQueueGenericSend+0xbe>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	61fb      	str	r3, [r7, #28]
}
 8003bf2:	bf00      	nop
 8003bf4:	e7fe      	b.n	8003bf4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bf6:	f001 fefd 	bl	80059f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d302      	bcc.n	8003c0c <xQueueGenericSend+0xd4>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d129      	bne.n	8003c60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c12:	f000 fa0b 	bl	800402c <prvCopyDataToQueue>
 8003c16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d010      	beq.n	8003c42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	3324      	adds	r3, #36	; 0x24
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 ffcf 	bl	8004bc8 <xTaskRemoveFromEventList>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d013      	beq.n	8003c58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c30:	4b3f      	ldr	r3, [pc, #252]	; (8003d30 <xQueueGenericSend+0x1f8>)
 8003c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	e00a      	b.n	8003c58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c48:	4b39      	ldr	r3, [pc, #228]	; (8003d30 <xQueueGenericSend+0x1f8>)
 8003c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c58:	f001 fefc 	bl	8005a54 <vPortExitCritical>
				return pdPASS;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e063      	b.n	8003d28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d103      	bne.n	8003c6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c66:	f001 fef5 	bl	8005a54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e05c      	b.n	8003d28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d106      	bne.n	8003c82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c74:	f107 0314 	add.w	r3, r7, #20
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f001 f809 	bl	8004c90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c82:	f001 fee7 	bl	8005a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c86:	f000 fd7b 	bl	8004780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c8a:	f001 feb3 	bl	80059f4 <vPortEnterCritical>
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c94:	b25b      	sxtb	r3, r3
 8003c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9a:	d103      	bne.n	8003ca4 <xQueueGenericSend+0x16c>
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003caa:	b25b      	sxtb	r3, r3
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d103      	bne.n	8003cba <xQueueGenericSend+0x182>
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cba:	f001 fecb 	bl	8005a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cbe:	1d3a      	adds	r2, r7, #4
 8003cc0:	f107 0314 	add.w	r3, r7, #20
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fff8 	bl	8004cbc <xTaskCheckForTimeOut>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d124      	bne.n	8003d1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003cd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cd4:	f000 faa2 	bl	800421c <prvIsQueueFull>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d018      	beq.n	8003d10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	3310      	adds	r3, #16
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 ff1e 	bl	8004b28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cee:	f000 fa2d 	bl	800414c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003cf2:	f000 fd53 	bl	800479c <xTaskResumeAll>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f47f af7c 	bne.w	8003bf6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003cfe:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <xQueueGenericSend+0x1f8>)
 8003d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	e772      	b.n	8003bf6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d12:	f000 fa1b 	bl	800414c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d16:	f000 fd41 	bl	800479c <xTaskResumeAll>
 8003d1a:	e76c      	b.n	8003bf6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d1e:	f000 fa15 	bl	800414c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d22:	f000 fd3b 	bl	800479c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3738      	adds	r7, #56	; 0x38
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	e000ed04 	.word	0xe000ed04

08003d34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b090      	sub	sp, #64	; 0x40
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10a      	bne.n	8003d62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d5e:	bf00      	nop
 8003d60:	e7fe      	b.n	8003d60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d103      	bne.n	8003d70 <xQueueGenericSendFromISR+0x3c>
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <xQueueGenericSendFromISR+0x40>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <xQueueGenericSendFromISR+0x42>
 8003d74:	2300      	movs	r3, #0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10a      	bne.n	8003d90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d8c:	bf00      	nop
 8003d8e:	e7fe      	b.n	8003d8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d103      	bne.n	8003d9e <xQueueGenericSendFromISR+0x6a>
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <xQueueGenericSendFromISR+0x6e>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <xQueueGenericSendFromISR+0x70>
 8003da2:	2300      	movs	r3, #0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	623b      	str	r3, [r7, #32]
}
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003dbe:	f001 fefb 	bl	8005bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003dc2:	f3ef 8211 	mrs	r2, BASEPRI
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	61fa      	str	r2, [r7, #28]
 8003dd8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003dda:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ddc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d302      	bcc.n	8003df0 <xQueueGenericSendFromISR+0xbc>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d12f      	bne.n	8003e50 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e06:	f000 f911 	bl	800402c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e12:	d112      	bne.n	8003e3a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d016      	beq.n	8003e4a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1e:	3324      	adds	r3, #36	; 0x24
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 fed1 	bl	8004bc8 <xTaskRemoveFromEventList>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00e      	beq.n	8003e4a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00b      	beq.n	8003e4a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	e007      	b.n	8003e4a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e3e:	3301      	adds	r3, #1
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	b25a      	sxtb	r2, r3
 8003e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003e4e:	e001      	b.n	8003e54 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e56:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3740      	adds	r7, #64	; 0x40
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08c      	sub	sp, #48	; 0x30
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10a      	bne.n	8003e9c <xQueueReceive+0x30>
	__asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	623b      	str	r3, [r7, #32]
}
 8003e98:	bf00      	nop
 8003e9a:	e7fe      	b.n	8003e9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <xQueueReceive+0x3e>
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <xQueueReceive+0x42>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <xQueueReceive+0x44>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <xQueueReceive+0x5e>
	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	61fb      	str	r3, [r7, #28]
}
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003eca:	f001 f83b 	bl	8004f44 <xTaskGetSchedulerState>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <xQueueReceive+0x6e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <xQueueReceive+0x72>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <xQueueReceive+0x74>
 8003ede:	2300      	movs	r3, #0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <xQueueReceive+0x8e>
	__asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	61bb      	str	r3, [r7, #24]
}
 8003ef6:	bf00      	nop
 8003ef8:	e7fe      	b.n	8003ef8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003efa:	f001 fd7b 	bl	80059f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d01f      	beq.n	8003f4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f0e:	f000 f8f7 	bl	8004100 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	1e5a      	subs	r2, r3, #1
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00f      	beq.n	8003f42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f24:	3310      	adds	r3, #16
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fe4e 	bl	8004bc8 <xTaskRemoveFromEventList>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d007      	beq.n	8003f42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f32:	4b3d      	ldr	r3, [pc, #244]	; (8004028 <xQueueReceive+0x1bc>)
 8003f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f42:	f001 fd87 	bl	8005a54 <vPortExitCritical>
				return pdPASS;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e069      	b.n	800401e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d103      	bne.n	8003f58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f50:	f001 fd80 	bl	8005a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f54:	2300      	movs	r3, #0
 8003f56:	e062      	b.n	800401e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f5e:	f107 0310 	add.w	r3, r7, #16
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fe94 	bl	8004c90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f6c:	f001 fd72 	bl	8005a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f70:	f000 fc06 	bl	8004780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f74:	f001 fd3e 	bl	80059f4 <vPortEnterCritical>
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f7e:	b25b      	sxtb	r3, r3
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f84:	d103      	bne.n	8003f8e <xQueueReceive+0x122>
 8003f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f94:	b25b      	sxtb	r3, r3
 8003f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9a:	d103      	bne.n	8003fa4 <xQueueReceive+0x138>
 8003f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fa4:	f001 fd56 	bl	8005a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fa8:	1d3a      	adds	r2, r7, #4
 8003faa:	f107 0310 	add.w	r3, r7, #16
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fe83 	bl	8004cbc <xTaskCheckForTimeOut>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d123      	bne.n	8004004 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fbe:	f000 f917 	bl	80041f0 <prvIsQueueEmpty>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d017      	beq.n	8003ff8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	3324      	adds	r3, #36	; 0x24
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	4611      	mov	r1, r2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fda9 	bl	8004b28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fd8:	f000 f8b8 	bl	800414c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fdc:	f000 fbde 	bl	800479c <xTaskResumeAll>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d189      	bne.n	8003efa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <xQueueReceive+0x1bc>)
 8003fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	e780      	b.n	8003efa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ffa:	f000 f8a7 	bl	800414c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ffe:	f000 fbcd 	bl	800479c <xTaskResumeAll>
 8004002:	e77a      	b.n	8003efa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004006:	f000 f8a1 	bl	800414c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800400a:	f000 fbc7 	bl	800479c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800400e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004010:	f000 f8ee 	bl	80041f0 <prvIsQueueEmpty>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	f43f af6f 	beq.w	8003efa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800401c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800401e:	4618      	mov	r0, r3
 8004020:	3730      	adds	r7, #48	; 0x30
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	e000ed04 	.word	0xe000ed04

0800402c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10d      	bne.n	8004066 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d14d      	bne.n	80040ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	4618      	mov	r0, r3
 8004058:	f000 ff92 	bl	8004f80 <xTaskPriorityDisinherit>
 800405c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	e043      	b.n	80040ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d119      	bne.n	80040a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6858      	ldr	r0, [r3, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	461a      	mov	r2, r3
 8004076:	68b9      	ldr	r1, [r7, #8]
 8004078:	f002 f81c 	bl	80060b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	441a      	add	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	429a      	cmp	r2, r3
 8004094:	d32b      	bcc.n	80040ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	605a      	str	r2, [r3, #4]
 800409e:	e026      	b.n	80040ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	68d8      	ldr	r0, [r3, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	461a      	mov	r2, r3
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	f002 f802 	bl	80060b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	425b      	negs	r3, r3
 80040ba:	441a      	add	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d207      	bcs.n	80040dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	425b      	negs	r3, r3
 80040d6:	441a      	add	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d105      	bne.n	80040ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80040f6:	697b      	ldr	r3, [r7, #20]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	d018      	beq.n	8004144 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	441a      	add	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	429a      	cmp	r2, r3
 800412a:	d303      	bcc.n	8004134 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68d9      	ldr	r1, [r3, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	461a      	mov	r2, r3
 800413e:	6838      	ldr	r0, [r7, #0]
 8004140:	f001 ffb8 	bl	80060b4 <memcpy>
	}
}
 8004144:	bf00      	nop
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004154:	f001 fc4e 	bl	80059f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800415e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004160:	e011      	b.n	8004186 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	2b00      	cmp	r3, #0
 8004168:	d012      	beq.n	8004190 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3324      	adds	r3, #36	; 0x24
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fd2a 	bl	8004bc8 <xTaskRemoveFromEventList>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800417a:	f000 fe01 	bl	8004d80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800417e:	7bfb      	ldrb	r3, [r7, #15]
 8004180:	3b01      	subs	r3, #1
 8004182:	b2db      	uxtb	r3, r3
 8004184:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800418a:	2b00      	cmp	r3, #0
 800418c:	dce9      	bgt.n	8004162 <prvUnlockQueue+0x16>
 800418e:	e000      	b.n	8004192 <prvUnlockQueue+0x46>
					break;
 8004190:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	22ff      	movs	r2, #255	; 0xff
 8004196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800419a:	f001 fc5b 	bl	8005a54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800419e:	f001 fc29 	bl	80059f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041aa:	e011      	b.n	80041d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d012      	beq.n	80041da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3310      	adds	r3, #16
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fd05 	bl	8004bc8 <xTaskRemoveFromEventList>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041c4:	f000 fddc 	bl	8004d80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041c8:	7bbb      	ldrb	r3, [r7, #14]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	dce9      	bgt.n	80041ac <prvUnlockQueue+0x60>
 80041d8:	e000      	b.n	80041dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	22ff      	movs	r2, #255	; 0xff
 80041e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80041e4:	f001 fc36 	bl	8005a54 <vPortExitCritical>
}
 80041e8:	bf00      	nop
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041f8:	f001 fbfc 	bl	80059f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d102      	bne.n	800420a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004204:	2301      	movs	r3, #1
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	e001      	b.n	800420e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800420e:	f001 fc21 	bl	8005a54 <vPortExitCritical>

	return xReturn;
 8004212:	68fb      	ldr	r3, [r7, #12]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004224:	f001 fbe6 	bl	80059f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004230:	429a      	cmp	r2, r3
 8004232:	d102      	bne.n	800423a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004234:	2301      	movs	r3, #1
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	e001      	b.n	800423e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800423e:	f001 fc09 	bl	8005a54 <vPortExitCritical>

	return xReturn;
 8004242:	68fb      	ldr	r3, [r7, #12]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	e014      	b.n	8004286 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800425c:	4a0f      	ldr	r2, [pc, #60]	; (800429c <vQueueAddToRegistry+0x50>)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10b      	bne.n	8004280 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004268:	490c      	ldr	r1, [pc, #48]	; (800429c <vQueueAddToRegistry+0x50>)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004272:	4a0a      	ldr	r2, [pc, #40]	; (800429c <vQueueAddToRegistry+0x50>)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4413      	add	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800427e:	e006      	b.n	800428e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3301      	adds	r3, #1
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b07      	cmp	r3, #7
 800428a:	d9e7      	bls.n	800425c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	20000860 	.word	0x20000860

080042a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80042b0:	f001 fba0 	bl	80059f4 <vPortEnterCritical>
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042ba:	b25b      	sxtb	r3, r3
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c0:	d103      	bne.n	80042ca <vQueueWaitForMessageRestricted+0x2a>
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042d0:	b25b      	sxtb	r3, r3
 80042d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d6:	d103      	bne.n	80042e0 <vQueueWaitForMessageRestricted+0x40>
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042e0:	f001 fbb8 	bl	8005a54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d106      	bne.n	80042fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	3324      	adds	r3, #36	; 0x24
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fc3b 	bl	8004b70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042fa:	6978      	ldr	r0, [r7, #20]
 80042fc:	f7ff ff26 	bl	800414c <prvUnlockQueue>
	}
 8004300:	bf00      	nop
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08e      	sub	sp, #56	; 0x38
 800430c:	af04      	add	r7, sp, #16
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10a      	bne.n	8004332 <xTaskCreateStatic+0x2a>
	__asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	623b      	str	r3, [r7, #32]
}
 800432e:	bf00      	nop
 8004330:	e7fe      	b.n	8004330 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <xTaskCreateStatic+0x46>
	__asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	61fb      	str	r3, [r7, #28]
}
 800434a:	bf00      	nop
 800434c:	e7fe      	b.n	800434c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800434e:	235c      	movs	r3, #92	; 0x5c
 8004350:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b5c      	cmp	r3, #92	; 0x5c
 8004356:	d00a      	beq.n	800436e <xTaskCreateStatic+0x66>
	__asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	61bb      	str	r3, [r7, #24]
}
 800436a:	bf00      	nop
 800436c:	e7fe      	b.n	800436c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800436e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004372:	2b00      	cmp	r3, #0
 8004374:	d01e      	beq.n	80043b4 <xTaskCreateStatic+0xac>
 8004376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004378:	2b00      	cmp	r3, #0
 800437a:	d01b      	beq.n	80043b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800437c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004384:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	2202      	movs	r2, #2
 800438a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800438e:	2300      	movs	r3, #0
 8004390:	9303      	str	r3, [sp, #12]
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	9302      	str	r3, [sp, #8]
 8004396:	f107 0314 	add.w	r3, r7, #20
 800439a:	9301      	str	r3, [sp, #4]
 800439c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 f850 	bl	800444c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043ae:	f000 f8dd 	bl	800456c <prvAddNewTaskToReadyList>
 80043b2:	e001      	b.n	80043b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043b8:	697b      	ldr	r3, [r7, #20]
	}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3728      	adds	r7, #40	; 0x28
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b08c      	sub	sp, #48	; 0x30
 80043c6:	af04      	add	r7, sp, #16
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	603b      	str	r3, [r7, #0]
 80043ce:	4613      	mov	r3, r2
 80043d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f001 fc2e 	bl	8005c38 <pvPortMalloc>
 80043dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00e      	beq.n	8004402 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043e4:	205c      	movs	r0, #92	; 0x5c
 80043e6:	f001 fc27 	bl	8005c38 <pvPortMalloc>
 80043ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
 80043f8:	e005      	b.n	8004406 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043fa:	6978      	ldr	r0, [r7, #20]
 80043fc:	f001 fce8 	bl	8005dd0 <vPortFree>
 8004400:	e001      	b.n	8004406 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d017      	beq.n	800443c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004414:	88fa      	ldrh	r2, [r7, #6]
 8004416:	2300      	movs	r3, #0
 8004418:	9303      	str	r3, [sp, #12]
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	9302      	str	r3, [sp, #8]
 800441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004420:	9301      	str	r3, [sp, #4]
 8004422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f80e 	bl	800444c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004430:	69f8      	ldr	r0, [r7, #28]
 8004432:	f000 f89b 	bl	800456c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004436:	2301      	movs	r3, #1
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	e002      	b.n	8004442 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800443c:	f04f 33ff 	mov.w	r3, #4294967295
 8004440:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004442:	69bb      	ldr	r3, [r7, #24]
	}
 8004444:	4618      	mov	r0, r3
 8004446:	3720      	adds	r7, #32
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	461a      	mov	r2, r3
 8004464:	21a5      	movs	r1, #165	; 0xa5
 8004466:	f001 fdf1 	bl	800604c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004474:	3b01      	subs	r3, #1
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	f023 0307 	bic.w	r3, r3, #7
 8004482:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	617b      	str	r3, [r7, #20]
}
 80044a0:	bf00      	nop
 80044a2:	e7fe      	b.n	80044a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d01f      	beq.n	80044ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	e012      	b.n	80044d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	4413      	add	r3, r2
 80044b6:	7819      	ldrb	r1, [r3, #0]
 80044b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	4413      	add	r3, r2
 80044be:	3334      	adds	r3, #52	; 0x34
 80044c0:	460a      	mov	r2, r1
 80044c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d006      	beq.n	80044de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	3301      	adds	r3, #1
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	2b0f      	cmp	r3, #15
 80044da:	d9e9      	bls.n	80044b0 <prvInitialiseNewTask+0x64>
 80044dc:	e000      	b.n	80044e0 <prvInitialiseNewTask+0x94>
			{
				break;
 80044de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044e8:	e003      	b.n	80044f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f4:	2b37      	cmp	r3, #55	; 0x37
 80044f6:	d901      	bls.n	80044fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044f8:	2337      	movs	r3, #55	; 0x37
 80044fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004500:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004506:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450a:	2200      	movs	r2, #0
 800450c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800450e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004510:	3304      	adds	r3, #4
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff f93e 	bl	8003794 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	3318      	adds	r3, #24
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff f939 	bl	8003794 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004526:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004536:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	2200      	movs	r2, #0
 800453c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	68f9      	ldr	r1, [r7, #12]
 800454a:	69b8      	ldr	r0, [r7, #24]
 800454c:	f001 f928 	bl	80057a0 <pxPortInitialiseStack>
 8004550:	4602      	mov	r2, r0
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800455c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004560:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004562:	bf00      	nop
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004574:	f001 fa3e 	bl	80059f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004578:	4b2d      	ldr	r3, [pc, #180]	; (8004630 <prvAddNewTaskToReadyList+0xc4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3301      	adds	r3, #1
 800457e:	4a2c      	ldr	r2, [pc, #176]	; (8004630 <prvAddNewTaskToReadyList+0xc4>)
 8004580:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004582:	4b2c      	ldr	r3, [pc, #176]	; (8004634 <prvAddNewTaskToReadyList+0xc8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d109      	bne.n	800459e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800458a:	4a2a      	ldr	r2, [pc, #168]	; (8004634 <prvAddNewTaskToReadyList+0xc8>)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004590:	4b27      	ldr	r3, [pc, #156]	; (8004630 <prvAddNewTaskToReadyList+0xc4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d110      	bne.n	80045ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004598:	f000 fc16 	bl	8004dc8 <prvInitialiseTaskLists>
 800459c:	e00d      	b.n	80045ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800459e:	4b26      	ldr	r3, [pc, #152]	; (8004638 <prvAddNewTaskToReadyList+0xcc>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045a6:	4b23      	ldr	r3, [pc, #140]	; (8004634 <prvAddNewTaskToReadyList+0xc8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d802      	bhi.n	80045ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045b4:	4a1f      	ldr	r2, [pc, #124]	; (8004634 <prvAddNewTaskToReadyList+0xc8>)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045ba:	4b20      	ldr	r3, [pc, #128]	; (800463c <prvAddNewTaskToReadyList+0xd0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3301      	adds	r3, #1
 80045c0:	4a1e      	ldr	r2, [pc, #120]	; (800463c <prvAddNewTaskToReadyList+0xd0>)
 80045c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045c4:	4b1d      	ldr	r3, [pc, #116]	; (800463c <prvAddNewTaskToReadyList+0xd0>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d0:	4b1b      	ldr	r3, [pc, #108]	; (8004640 <prvAddNewTaskToReadyList+0xd4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d903      	bls.n	80045e0 <prvAddNewTaskToReadyList+0x74>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	4a18      	ldr	r2, [pc, #96]	; (8004640 <prvAddNewTaskToReadyList+0xd4>)
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4a15      	ldr	r2, [pc, #84]	; (8004644 <prvAddNewTaskToReadyList+0xd8>)
 80045ee:	441a      	add	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3304      	adds	r3, #4
 80045f4:	4619      	mov	r1, r3
 80045f6:	4610      	mov	r0, r2
 80045f8:	f7ff f8d9 	bl	80037ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045fc:	f001 fa2a 	bl	8005a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004600:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <prvAddNewTaskToReadyList+0xcc>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00e      	beq.n	8004626 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004608:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <prvAddNewTaskToReadyList+0xc8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004612:	429a      	cmp	r2, r3
 8004614:	d207      	bcs.n	8004626 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004616:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <prvAddNewTaskToReadyList+0xdc>)
 8004618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	20000d74 	.word	0x20000d74
 8004634:	200008a0 	.word	0x200008a0
 8004638:	20000d80 	.word	0x20000d80
 800463c:	20000d90 	.word	0x20000d90
 8004640:	20000d7c 	.word	0x20000d7c
 8004644:	200008a4 	.word	0x200008a4
 8004648:	e000ed04 	.word	0xe000ed04

0800464c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d017      	beq.n	800468e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800465e:	4b13      	ldr	r3, [pc, #76]	; (80046ac <vTaskDelay+0x60>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <vTaskDelay+0x30>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	60bb      	str	r3, [r7, #8]
}
 8004678:	bf00      	nop
 800467a:	e7fe      	b.n	800467a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800467c:	f000 f880 	bl	8004780 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004680:	2100      	movs	r1, #0
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fcea 	bl	800505c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004688:	f000 f888 	bl	800479c <xTaskResumeAll>
 800468c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d107      	bne.n	80046a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004694:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <vTaskDelay+0x64>)
 8004696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20000d9c 	.word	0x20000d9c
 80046b0:	e000ed04 	.word	0xe000ed04

080046b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08a      	sub	sp, #40	; 0x28
 80046b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046c2:	463a      	mov	r2, r7
 80046c4:	1d39      	adds	r1, r7, #4
 80046c6:	f107 0308 	add.w	r3, r7, #8
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff f80e 	bl	80036ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046d0:	6839      	ldr	r1, [r7, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	9202      	str	r2, [sp, #8]
 80046d8:	9301      	str	r3, [sp, #4]
 80046da:	2300      	movs	r3, #0
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	2300      	movs	r3, #0
 80046e0:	460a      	mov	r2, r1
 80046e2:	4921      	ldr	r1, [pc, #132]	; (8004768 <vTaskStartScheduler+0xb4>)
 80046e4:	4821      	ldr	r0, [pc, #132]	; (800476c <vTaskStartScheduler+0xb8>)
 80046e6:	f7ff fe0f 	bl	8004308 <xTaskCreateStatic>
 80046ea:	4603      	mov	r3, r0
 80046ec:	4a20      	ldr	r2, [pc, #128]	; (8004770 <vTaskStartScheduler+0xbc>)
 80046ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046f0:	4b1f      	ldr	r3, [pc, #124]	; (8004770 <vTaskStartScheduler+0xbc>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046f8:	2301      	movs	r3, #1
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	e001      	b.n	8004702 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d102      	bne.n	800470e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004708:	f000 fcfc 	bl	8005104 <xTimerCreateTimerTask>
 800470c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d116      	bne.n	8004742 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	613b      	str	r3, [r7, #16]
}
 8004726:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004728:	4b12      	ldr	r3, [pc, #72]	; (8004774 <vTaskStartScheduler+0xc0>)
 800472a:	f04f 32ff 	mov.w	r2, #4294967295
 800472e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <vTaskStartScheduler+0xc4>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004736:	4b11      	ldr	r3, [pc, #68]	; (800477c <vTaskStartScheduler+0xc8>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800473c:	f001 f8b8 	bl	80058b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004740:	e00e      	b.n	8004760 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d10a      	bne.n	8004760 <vTaskStartScheduler+0xac>
	__asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	60fb      	str	r3, [r7, #12]
}
 800475c:	bf00      	nop
 800475e:	e7fe      	b.n	800475e <vTaskStartScheduler+0xaa>
}
 8004760:	bf00      	nop
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	080069d4 	.word	0x080069d4
 800476c:	08004d99 	.word	0x08004d99
 8004770:	20000d98 	.word	0x20000d98
 8004774:	20000d94 	.word	0x20000d94
 8004778:	20000d80 	.word	0x20000d80
 800477c:	20000d78 	.word	0x20000d78

08004780 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004784:	4b04      	ldr	r3, [pc, #16]	; (8004798 <vTaskSuspendAll+0x18>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3301      	adds	r3, #1
 800478a:	4a03      	ldr	r2, [pc, #12]	; (8004798 <vTaskSuspendAll+0x18>)
 800478c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800478e:	bf00      	nop
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	20000d9c 	.word	0x20000d9c

0800479c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047aa:	4b42      	ldr	r3, [pc, #264]	; (80048b4 <xTaskResumeAll+0x118>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	603b      	str	r3, [r7, #0]
}
 80047c4:	bf00      	nop
 80047c6:	e7fe      	b.n	80047c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047c8:	f001 f914 	bl	80059f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047cc:	4b39      	ldr	r3, [pc, #228]	; (80048b4 <xTaskResumeAll+0x118>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	4a38      	ldr	r2, [pc, #224]	; (80048b4 <xTaskResumeAll+0x118>)
 80047d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047d6:	4b37      	ldr	r3, [pc, #220]	; (80048b4 <xTaskResumeAll+0x118>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d162      	bne.n	80048a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047de:	4b36      	ldr	r3, [pc, #216]	; (80048b8 <xTaskResumeAll+0x11c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d05e      	beq.n	80048a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047e6:	e02f      	b.n	8004848 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047e8:	4b34      	ldr	r3, [pc, #208]	; (80048bc <xTaskResumeAll+0x120>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3318      	adds	r3, #24
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff f837 	bl	8003868 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3304      	adds	r3, #4
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff f832 	bl	8003868 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004808:	4b2d      	ldr	r3, [pc, #180]	; (80048c0 <xTaskResumeAll+0x124>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d903      	bls.n	8004818 <xTaskResumeAll+0x7c>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	4a2a      	ldr	r2, [pc, #168]	; (80048c0 <xTaskResumeAll+0x124>)
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481c:	4613      	mov	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4a27      	ldr	r2, [pc, #156]	; (80048c4 <xTaskResumeAll+0x128>)
 8004826:	441a      	add	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3304      	adds	r3, #4
 800482c:	4619      	mov	r1, r3
 800482e:	4610      	mov	r0, r2
 8004830:	f7fe ffbd 	bl	80037ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004838:	4b23      	ldr	r3, [pc, #140]	; (80048c8 <xTaskResumeAll+0x12c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	429a      	cmp	r2, r3
 8004840:	d302      	bcc.n	8004848 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004842:	4b22      	ldr	r3, [pc, #136]	; (80048cc <xTaskResumeAll+0x130>)
 8004844:	2201      	movs	r2, #1
 8004846:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004848:	4b1c      	ldr	r3, [pc, #112]	; (80048bc <xTaskResumeAll+0x120>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1cb      	bne.n	80047e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004856:	f000 fb55 	bl	8004f04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800485a:	4b1d      	ldr	r3, [pc, #116]	; (80048d0 <xTaskResumeAll+0x134>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d010      	beq.n	8004888 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004866:	f000 f847 	bl	80048f8 <xTaskIncrementTick>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004870:	4b16      	ldr	r3, [pc, #88]	; (80048cc <xTaskResumeAll+0x130>)
 8004872:	2201      	movs	r2, #1
 8004874:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3b01      	subs	r3, #1
 800487a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f1      	bne.n	8004866 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004882:	4b13      	ldr	r3, [pc, #76]	; (80048d0 <xTaskResumeAll+0x134>)
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004888:	4b10      	ldr	r3, [pc, #64]	; (80048cc <xTaskResumeAll+0x130>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004890:	2301      	movs	r3, #1
 8004892:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004894:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <xTaskResumeAll+0x138>)
 8004896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048a4:	f001 f8d6 	bl	8005a54 <vPortExitCritical>

	return xAlreadyYielded;
 80048a8:	68bb      	ldr	r3, [r7, #8]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000d9c 	.word	0x20000d9c
 80048b8:	20000d74 	.word	0x20000d74
 80048bc:	20000d34 	.word	0x20000d34
 80048c0:	20000d7c 	.word	0x20000d7c
 80048c4:	200008a4 	.word	0x200008a4
 80048c8:	200008a0 	.word	0x200008a0
 80048cc:	20000d88 	.word	0x20000d88
 80048d0:	20000d84 	.word	0x20000d84
 80048d4:	e000ed04 	.word	0xe000ed04

080048d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048de:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <xTaskGetTickCount+0x1c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048e4:	687b      	ldr	r3, [r7, #4]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000d78 	.word	0x20000d78

080048f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004902:	4b4f      	ldr	r3, [pc, #316]	; (8004a40 <xTaskIncrementTick+0x148>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	f040 808f 	bne.w	8004a2a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800490c:	4b4d      	ldr	r3, [pc, #308]	; (8004a44 <xTaskIncrementTick+0x14c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3301      	adds	r3, #1
 8004912:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004914:	4a4b      	ldr	r2, [pc, #300]	; (8004a44 <xTaskIncrementTick+0x14c>)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d120      	bne.n	8004962 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004920:	4b49      	ldr	r3, [pc, #292]	; (8004a48 <xTaskIncrementTick+0x150>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <xTaskIncrementTick+0x48>
	__asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	603b      	str	r3, [r7, #0]
}
 800493c:	bf00      	nop
 800493e:	e7fe      	b.n	800493e <xTaskIncrementTick+0x46>
 8004940:	4b41      	ldr	r3, [pc, #260]	; (8004a48 <xTaskIncrementTick+0x150>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	4b41      	ldr	r3, [pc, #260]	; (8004a4c <xTaskIncrementTick+0x154>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a3f      	ldr	r2, [pc, #252]	; (8004a48 <xTaskIncrementTick+0x150>)
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	4a3f      	ldr	r2, [pc, #252]	; (8004a4c <xTaskIncrementTick+0x154>)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	4b3e      	ldr	r3, [pc, #248]	; (8004a50 <xTaskIncrementTick+0x158>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3301      	adds	r3, #1
 800495a:	4a3d      	ldr	r2, [pc, #244]	; (8004a50 <xTaskIncrementTick+0x158>)
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	f000 fad1 	bl	8004f04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004962:	4b3c      	ldr	r3, [pc, #240]	; (8004a54 <xTaskIncrementTick+0x15c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	429a      	cmp	r2, r3
 800496a:	d349      	bcc.n	8004a00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800496c:	4b36      	ldr	r3, [pc, #216]	; (8004a48 <xTaskIncrementTick+0x150>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d104      	bne.n	8004980 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004976:	4b37      	ldr	r3, [pc, #220]	; (8004a54 <xTaskIncrementTick+0x15c>)
 8004978:	f04f 32ff 	mov.w	r2, #4294967295
 800497c:	601a      	str	r2, [r3, #0]
					break;
 800497e:	e03f      	b.n	8004a00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004980:	4b31      	ldr	r3, [pc, #196]	; (8004a48 <xTaskIncrementTick+0x150>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	429a      	cmp	r2, r3
 8004996:	d203      	bcs.n	80049a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004998:	4a2e      	ldr	r2, [pc, #184]	; (8004a54 <xTaskIncrementTick+0x15c>)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800499e:	e02f      	b.n	8004a00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fe ff5f 	bl	8003868 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d004      	beq.n	80049bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	3318      	adds	r3, #24
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fe ff56 	bl	8003868 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c0:	4b25      	ldr	r3, [pc, #148]	; (8004a58 <xTaskIncrementTick+0x160>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d903      	bls.n	80049d0 <xTaskIncrementTick+0xd8>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	4a22      	ldr	r2, [pc, #136]	; (8004a58 <xTaskIncrementTick+0x160>)
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4a1f      	ldr	r2, [pc, #124]	; (8004a5c <xTaskIncrementTick+0x164>)
 80049de:	441a      	add	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4619      	mov	r1, r3
 80049e6:	4610      	mov	r0, r2
 80049e8:	f7fe fee1 	bl	80037ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f0:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <xTaskIncrementTick+0x168>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d3b8      	bcc.n	800496c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80049fa:	2301      	movs	r3, #1
 80049fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049fe:	e7b5      	b.n	800496c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a00:	4b17      	ldr	r3, [pc, #92]	; (8004a60 <xTaskIncrementTick+0x168>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a06:	4915      	ldr	r1, [pc, #84]	; (8004a5c <xTaskIncrementTick+0x164>)
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d901      	bls.n	8004a1c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a1c:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <xTaskIncrementTick+0x16c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d007      	beq.n	8004a34 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004a24:	2301      	movs	r3, #1
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	e004      	b.n	8004a34 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a2a:	4b0f      	ldr	r3, [pc, #60]	; (8004a68 <xTaskIncrementTick+0x170>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	4a0d      	ldr	r2, [pc, #52]	; (8004a68 <xTaskIncrementTick+0x170>)
 8004a32:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a34:	697b      	ldr	r3, [r7, #20]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000d9c 	.word	0x20000d9c
 8004a44:	20000d78 	.word	0x20000d78
 8004a48:	20000d2c 	.word	0x20000d2c
 8004a4c:	20000d30 	.word	0x20000d30
 8004a50:	20000d8c 	.word	0x20000d8c
 8004a54:	20000d94 	.word	0x20000d94
 8004a58:	20000d7c 	.word	0x20000d7c
 8004a5c:	200008a4 	.word	0x200008a4
 8004a60:	200008a0 	.word	0x200008a0
 8004a64:	20000d88 	.word	0x20000d88
 8004a68:	20000d84 	.word	0x20000d84

08004a6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a72:	4b28      	ldr	r3, [pc, #160]	; (8004b14 <vTaskSwitchContext+0xa8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a7a:	4b27      	ldr	r3, [pc, #156]	; (8004b18 <vTaskSwitchContext+0xac>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a80:	e041      	b.n	8004b06 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004a82:	4b25      	ldr	r3, [pc, #148]	; (8004b18 <vTaskSwitchContext+0xac>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a88:	4b24      	ldr	r3, [pc, #144]	; (8004b1c <vTaskSwitchContext+0xb0>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	e010      	b.n	8004ab2 <vTaskSwitchContext+0x46>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10a      	bne.n	8004aac <vTaskSwitchContext+0x40>
	__asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	607b      	str	r3, [r7, #4]
}
 8004aa8:	bf00      	nop
 8004aaa:	e7fe      	b.n	8004aaa <vTaskSwitchContext+0x3e>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	491b      	ldr	r1, [pc, #108]	; (8004b20 <vTaskSwitchContext+0xb4>)
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0e4      	beq.n	8004a90 <vTaskSwitchContext+0x24>
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4a13      	ldr	r2, [pc, #76]	; (8004b20 <vTaskSwitchContext+0xb4>)
 8004ad2:	4413      	add	r3, r2
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	605a      	str	r2, [r3, #4]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d104      	bne.n	8004af6 <vTaskSwitchContext+0x8a>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	605a      	str	r2, [r3, #4]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	4a09      	ldr	r2, [pc, #36]	; (8004b24 <vTaskSwitchContext+0xb8>)
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	4a06      	ldr	r2, [pc, #24]	; (8004b1c <vTaskSwitchContext+0xb0>)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6013      	str	r3, [r2, #0]
}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	20000d9c 	.word	0x20000d9c
 8004b18:	20000d88 	.word	0x20000d88
 8004b1c:	20000d7c 	.word	0x20000d7c
 8004b20:	200008a4 	.word	0x200008a4
 8004b24:	200008a0 	.word	0x200008a0

08004b28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10a      	bne.n	8004b4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	60fb      	str	r3, [r7, #12]
}
 8004b4a:	bf00      	nop
 8004b4c:	e7fe      	b.n	8004b4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b4e:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <vTaskPlaceOnEventList+0x44>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3318      	adds	r3, #24
 8004b54:	4619      	mov	r1, r3
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fe fe4d 	bl	80037f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	6838      	ldr	r0, [r7, #0]
 8004b60:	f000 fa7c 	bl	800505c <prvAddCurrentTaskToDelayedList>
}
 8004b64:	bf00      	nop
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	200008a0 	.word	0x200008a0

08004b70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10a      	bne.n	8004b98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	617b      	str	r3, [r7, #20]
}
 8004b94:	bf00      	nop
 8004b96:	e7fe      	b.n	8004b96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <vTaskPlaceOnEventListRestricted+0x54>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3318      	adds	r3, #24
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f7fe fe04 	bl	80037ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004bac:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	68b8      	ldr	r0, [r7, #8]
 8004bb6:	f000 fa51 	bl	800505c <prvAddCurrentTaskToDelayedList>
	}
 8004bba:	bf00      	nop
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	200008a0 	.word	0x200008a0

08004bc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10a      	bne.n	8004bf4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	60fb      	str	r3, [r7, #12]
}
 8004bf0:	bf00      	nop
 8004bf2:	e7fe      	b.n	8004bf2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	3318      	adds	r3, #24
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fe fe35 	bl	8003868 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bfe:	4b1e      	ldr	r3, [pc, #120]	; (8004c78 <xTaskRemoveFromEventList+0xb0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d11d      	bne.n	8004c42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	3304      	adds	r3, #4
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe fe2c 	bl	8003868 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c14:	4b19      	ldr	r3, [pc, #100]	; (8004c7c <xTaskRemoveFromEventList+0xb4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d903      	bls.n	8004c24 <xTaskRemoveFromEventList+0x5c>
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	4a16      	ldr	r2, [pc, #88]	; (8004c7c <xTaskRemoveFromEventList+0xb4>)
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4a13      	ldr	r2, [pc, #76]	; (8004c80 <xTaskRemoveFromEventList+0xb8>)
 8004c32:	441a      	add	r2, r3
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	3304      	adds	r3, #4
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	f7fe fdb7 	bl	80037ae <vListInsertEnd>
 8004c40:	e005      	b.n	8004c4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	3318      	adds	r3, #24
 8004c46:	4619      	mov	r1, r3
 8004c48:	480e      	ldr	r0, [pc, #56]	; (8004c84 <xTaskRemoveFromEventList+0xbc>)
 8004c4a:	f7fe fdb0 	bl	80037ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c52:	4b0d      	ldr	r3, [pc, #52]	; (8004c88 <xTaskRemoveFromEventList+0xc0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d905      	bls.n	8004c68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c60:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <xTaskRemoveFromEventList+0xc4>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	e001      	b.n	8004c6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c6c:	697b      	ldr	r3, [r7, #20]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20000d9c 	.word	0x20000d9c
 8004c7c:	20000d7c 	.word	0x20000d7c
 8004c80:	200008a4 	.word	0x200008a4
 8004c84:	20000d34 	.word	0x20000d34
 8004c88:	200008a0 	.word	0x200008a0
 8004c8c:	20000d88 	.word	0x20000d88

08004c90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c98:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <vTaskInternalSetTimeOutState+0x24>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ca0:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <vTaskInternalSetTimeOutState+0x28>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	605a      	str	r2, [r3, #4]
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	20000d8c 	.word	0x20000d8c
 8004cb8:	20000d78 	.word	0x20000d78

08004cbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10a      	bne.n	8004ce2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	613b      	str	r3, [r7, #16]
}
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	60fb      	str	r3, [r7, #12]
}
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004cfe:	f000 fe79 	bl	80059f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d02:	4b1d      	ldr	r3, [pc, #116]	; (8004d78 <xTaskCheckForTimeOut+0xbc>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d102      	bne.n	8004d22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61fb      	str	r3, [r7, #28]
 8004d20:	e023      	b.n	8004d6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4b15      	ldr	r3, [pc, #84]	; (8004d7c <xTaskCheckForTimeOut+0xc0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d007      	beq.n	8004d3e <xTaskCheckForTimeOut+0x82>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d302      	bcc.n	8004d3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	61fb      	str	r3, [r7, #28]
 8004d3c:	e015      	b.n	8004d6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d20b      	bcs.n	8004d60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	1ad2      	subs	r2, r2, r3
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff ff9b 	bl	8004c90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	e004      	b.n	8004d6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d66:	2301      	movs	r3, #1
 8004d68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d6a:	f000 fe73 	bl	8005a54 <vPortExitCritical>

	return xReturn;
 8004d6e:	69fb      	ldr	r3, [r7, #28]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20000d78 	.word	0x20000d78
 8004d7c:	20000d8c 	.word	0x20000d8c

08004d80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d84:	4b03      	ldr	r3, [pc, #12]	; (8004d94 <vTaskMissedYield+0x14>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
}
 8004d8a:	bf00      	nop
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	20000d88 	.word	0x20000d88

08004d98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004da0:	f000 f852 	bl	8004e48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <prvIdleTask+0x28>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d9f9      	bls.n	8004da0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004dac:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <prvIdleTask+0x2c>)
 8004dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004dbc:	e7f0      	b.n	8004da0 <prvIdleTask+0x8>
 8004dbe:	bf00      	nop
 8004dc0:	200008a4 	.word	0x200008a4
 8004dc4:	e000ed04 	.word	0xe000ed04

08004dc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dce:	2300      	movs	r3, #0
 8004dd0:	607b      	str	r3, [r7, #4]
 8004dd2:	e00c      	b.n	8004dee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4a12      	ldr	r2, [pc, #72]	; (8004e28 <prvInitialiseTaskLists+0x60>)
 8004de0:	4413      	add	r3, r2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fe fcb6 	bl	8003754 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3301      	adds	r3, #1
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b37      	cmp	r3, #55	; 0x37
 8004df2:	d9ef      	bls.n	8004dd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004df4:	480d      	ldr	r0, [pc, #52]	; (8004e2c <prvInitialiseTaskLists+0x64>)
 8004df6:	f7fe fcad 	bl	8003754 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004dfa:	480d      	ldr	r0, [pc, #52]	; (8004e30 <prvInitialiseTaskLists+0x68>)
 8004dfc:	f7fe fcaa 	bl	8003754 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e00:	480c      	ldr	r0, [pc, #48]	; (8004e34 <prvInitialiseTaskLists+0x6c>)
 8004e02:	f7fe fca7 	bl	8003754 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e06:	480c      	ldr	r0, [pc, #48]	; (8004e38 <prvInitialiseTaskLists+0x70>)
 8004e08:	f7fe fca4 	bl	8003754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e0c:	480b      	ldr	r0, [pc, #44]	; (8004e3c <prvInitialiseTaskLists+0x74>)
 8004e0e:	f7fe fca1 	bl	8003754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e12:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <prvInitialiseTaskLists+0x78>)
 8004e14:	4a05      	ldr	r2, [pc, #20]	; (8004e2c <prvInitialiseTaskLists+0x64>)
 8004e16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e18:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <prvInitialiseTaskLists+0x7c>)
 8004e1a:	4a05      	ldr	r2, [pc, #20]	; (8004e30 <prvInitialiseTaskLists+0x68>)
 8004e1c:	601a      	str	r2, [r3, #0]
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	200008a4 	.word	0x200008a4
 8004e2c:	20000d04 	.word	0x20000d04
 8004e30:	20000d18 	.word	0x20000d18
 8004e34:	20000d34 	.word	0x20000d34
 8004e38:	20000d48 	.word	0x20000d48
 8004e3c:	20000d60 	.word	0x20000d60
 8004e40:	20000d2c 	.word	0x20000d2c
 8004e44:	20000d30 	.word	0x20000d30

08004e48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e4e:	e019      	b.n	8004e84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e50:	f000 fdd0 	bl	80059f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e54:	4b10      	ldr	r3, [pc, #64]	; (8004e98 <prvCheckTasksWaitingTermination+0x50>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fe fd01 	bl	8003868 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e66:	4b0d      	ldr	r3, [pc, #52]	; (8004e9c <prvCheckTasksWaitingTermination+0x54>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	4a0b      	ldr	r2, [pc, #44]	; (8004e9c <prvCheckTasksWaitingTermination+0x54>)
 8004e6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <prvCheckTasksWaitingTermination+0x58>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	4a0a      	ldr	r2, [pc, #40]	; (8004ea0 <prvCheckTasksWaitingTermination+0x58>)
 8004e78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e7a:	f000 fdeb 	bl	8005a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f810 	bl	8004ea4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e84:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <prvCheckTasksWaitingTermination+0x58>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e1      	bne.n	8004e50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e8c:	bf00      	nop
 8004e8e:	bf00      	nop
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000d48 	.word	0x20000d48
 8004e9c:	20000d74 	.word	0x20000d74
 8004ea0:	20000d5c 	.word	0x20000d5c

08004ea4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d108      	bne.n	8004ec8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 ff88 	bl	8005dd0 <vPortFree>
				vPortFree( pxTCB );
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 ff85 	bl	8005dd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ec6:	e018      	b.n	8004efa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d103      	bne.n	8004eda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 ff7c 	bl	8005dd0 <vPortFree>
	}
 8004ed8:	e00f      	b.n	8004efa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d00a      	beq.n	8004efa <prvDeleteTCB+0x56>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	60fb      	str	r3, [r7, #12]
}
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <prvDeleteTCB+0x54>
	}
 8004efa:	bf00      	nop
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f0a:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <prvResetNextTaskUnblockTime+0x38>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d104      	bne.n	8004f1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f14:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <prvResetNextTaskUnblockTime+0x3c>)
 8004f16:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f1c:	e008      	b.n	8004f30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f1e:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <prvResetNextTaskUnblockTime+0x38>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	4a04      	ldr	r2, [pc, #16]	; (8004f40 <prvResetNextTaskUnblockTime+0x3c>)
 8004f2e:	6013      	str	r3, [r2, #0]
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	20000d2c 	.word	0x20000d2c
 8004f40:	20000d94 	.word	0x20000d94

08004f44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f4a:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <xTaskGetSchedulerState+0x34>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d102      	bne.n	8004f58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f52:	2301      	movs	r3, #1
 8004f54:	607b      	str	r3, [r7, #4]
 8004f56:	e008      	b.n	8004f6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f58:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <xTaskGetSchedulerState+0x38>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d102      	bne.n	8004f66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f60:	2302      	movs	r3, #2
 8004f62:	607b      	str	r3, [r7, #4]
 8004f64:	e001      	b.n	8004f6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f66:	2300      	movs	r3, #0
 8004f68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f6a:	687b      	ldr	r3, [r7, #4]
	}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	20000d80 	.word	0x20000d80
 8004f7c:	20000d9c 	.word	0x20000d9c

08004f80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d056      	beq.n	8005044 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f96:	4b2e      	ldr	r3, [pc, #184]	; (8005050 <xTaskPriorityDisinherit+0xd0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d00a      	beq.n	8004fb6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	60fb      	str	r3, [r7, #12]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10a      	bne.n	8004fd4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	60bb      	str	r3, [r7, #8]
}
 8004fd0:	bf00      	nop
 8004fd2:	e7fe      	b.n	8004fd2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd8:	1e5a      	subs	r2, r3, #1
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d02c      	beq.n	8005044 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d128      	bne.n	8005044 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fe fc36 	bl	8003868 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005014:	4b0f      	ldr	r3, [pc, #60]	; (8005054 <xTaskPriorityDisinherit+0xd4>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	429a      	cmp	r2, r3
 800501a:	d903      	bls.n	8005024 <xTaskPriorityDisinherit+0xa4>
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	4a0c      	ldr	r2, [pc, #48]	; (8005054 <xTaskPriorityDisinherit+0xd4>)
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4a09      	ldr	r2, [pc, #36]	; (8005058 <xTaskPriorityDisinherit+0xd8>)
 8005032:	441a      	add	r2, r3
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	3304      	adds	r3, #4
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f7fe fbb7 	bl	80037ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005040:	2301      	movs	r3, #1
 8005042:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005044:	697b      	ldr	r3, [r7, #20]
	}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	200008a0 	.word	0x200008a0
 8005054:	20000d7c 	.word	0x20000d7c
 8005058:	200008a4 	.word	0x200008a4

0800505c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005066:	4b21      	ldr	r3, [pc, #132]	; (80050ec <prvAddCurrentTaskToDelayedList+0x90>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800506c:	4b20      	ldr	r3, [pc, #128]	; (80050f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3304      	adds	r3, #4
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe fbf8 	bl	8003868 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507e:	d10a      	bne.n	8005096 <prvAddCurrentTaskToDelayedList+0x3a>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005086:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3304      	adds	r3, #4
 800508c:	4619      	mov	r1, r3
 800508e:	4819      	ldr	r0, [pc, #100]	; (80050f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005090:	f7fe fb8d 	bl	80037ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005094:	e026      	b.n	80050e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4413      	add	r3, r2
 800509c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800509e:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d209      	bcs.n	80050c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ae:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f7fe fb9b 	bl	80037f6 <vListInsert>
}
 80050c0:	e010      	b.n	80050e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050c2:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f7fe fb91 	bl	80037f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050d4:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d202      	bcs.n	80050e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050de:	4a08      	ldr	r2, [pc, #32]	; (8005100 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	6013      	str	r3, [r2, #0]
}
 80050e4:	bf00      	nop
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	20000d78 	.word	0x20000d78
 80050f0:	200008a0 	.word	0x200008a0
 80050f4:	20000d60 	.word	0x20000d60
 80050f8:	20000d30 	.word	0x20000d30
 80050fc:	20000d2c 	.word	0x20000d2c
 8005100:	20000d94 	.word	0x20000d94

08005104 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08a      	sub	sp, #40	; 0x28
 8005108:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800510e:	f000 fb07 	bl	8005720 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005112:	4b1c      	ldr	r3, [pc, #112]	; (8005184 <xTimerCreateTimerTask+0x80>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d021      	beq.n	800515e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800511e:	2300      	movs	r3, #0
 8005120:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005122:	1d3a      	adds	r2, r7, #4
 8005124:	f107 0108 	add.w	r1, r7, #8
 8005128:	f107 030c 	add.w	r3, r7, #12
 800512c:	4618      	mov	r0, r3
 800512e:	f7fe faf7 	bl	8003720 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	9202      	str	r2, [sp, #8]
 800513a:	9301      	str	r3, [sp, #4]
 800513c:	2302      	movs	r3, #2
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	2300      	movs	r3, #0
 8005142:	460a      	mov	r2, r1
 8005144:	4910      	ldr	r1, [pc, #64]	; (8005188 <xTimerCreateTimerTask+0x84>)
 8005146:	4811      	ldr	r0, [pc, #68]	; (800518c <xTimerCreateTimerTask+0x88>)
 8005148:	f7ff f8de 	bl	8004308 <xTaskCreateStatic>
 800514c:	4603      	mov	r3, r0
 800514e:	4a10      	ldr	r2, [pc, #64]	; (8005190 <xTimerCreateTimerTask+0x8c>)
 8005150:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005152:	4b0f      	ldr	r3, [pc, #60]	; (8005190 <xTimerCreateTimerTask+0x8c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800515a:	2301      	movs	r3, #1
 800515c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	613b      	str	r3, [r7, #16]
}
 8005176:	bf00      	nop
 8005178:	e7fe      	b.n	8005178 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800517a:	697b      	ldr	r3, [r7, #20]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	20000dd0 	.word	0x20000dd0
 8005188:	080069dc 	.word	0x080069dc
 800518c:	080052c9 	.word	0x080052c9
 8005190:	20000dd4 	.word	0x20000dd4

08005194 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b08a      	sub	sp, #40	; 0x28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10a      	bne.n	80051c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	623b      	str	r3, [r7, #32]
}
 80051be:	bf00      	nop
 80051c0:	e7fe      	b.n	80051c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051c2:	4b1a      	ldr	r3, [pc, #104]	; (800522c <xTimerGenericCommand+0x98>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d02a      	beq.n	8005220 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2b05      	cmp	r3, #5
 80051da:	dc18      	bgt.n	800520e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051dc:	f7ff feb2 	bl	8004f44 <xTaskGetSchedulerState>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d109      	bne.n	80051fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051e6:	4b11      	ldr	r3, [pc, #68]	; (800522c <xTimerGenericCommand+0x98>)
 80051e8:	6818      	ldr	r0, [r3, #0]
 80051ea:	f107 0110 	add.w	r1, r7, #16
 80051ee:	2300      	movs	r3, #0
 80051f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f2:	f7fe fca1 	bl	8003b38 <xQueueGenericSend>
 80051f6:	6278      	str	r0, [r7, #36]	; 0x24
 80051f8:	e012      	b.n	8005220 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051fa:	4b0c      	ldr	r3, [pc, #48]	; (800522c <xTimerGenericCommand+0x98>)
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	f107 0110 	add.w	r1, r7, #16
 8005202:	2300      	movs	r3, #0
 8005204:	2200      	movs	r2, #0
 8005206:	f7fe fc97 	bl	8003b38 <xQueueGenericSend>
 800520a:	6278      	str	r0, [r7, #36]	; 0x24
 800520c:	e008      	b.n	8005220 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800520e:	4b07      	ldr	r3, [pc, #28]	; (800522c <xTimerGenericCommand+0x98>)
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	f107 0110 	add.w	r1, r7, #16
 8005216:	2300      	movs	r3, #0
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	f7fe fd8b 	bl	8003d34 <xQueueGenericSendFromISR>
 800521e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005222:	4618      	mov	r0, r3
 8005224:	3728      	adds	r7, #40	; 0x28
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20000dd0 	.word	0x20000dd0

08005230 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af02      	add	r7, sp, #8
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800523a:	4b22      	ldr	r3, [pc, #136]	; (80052c4 <prvProcessExpiredTimer+0x94>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	3304      	adds	r3, #4
 8005248:	4618      	mov	r0, r3
 800524a:	f7fe fb0d 	bl	8003868 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	d022      	beq.n	80052a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	699a      	ldr	r2, [r3, #24]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	18d1      	adds	r1, r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	6978      	ldr	r0, [r7, #20]
 800526a:	f000 f8d1 	bl	8005410 <prvInsertTimerInActiveList>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01f      	beq.n	80052b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005274:	2300      	movs	r3, #0
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	2300      	movs	r3, #0
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	2100      	movs	r1, #0
 800527e:	6978      	ldr	r0, [r7, #20]
 8005280:	f7ff ff88 	bl	8005194 <xTimerGenericCommand>
 8005284:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d113      	bne.n	80052b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	60fb      	str	r3, [r7, #12]
}
 800529e:	bf00      	nop
 80052a0:	e7fe      	b.n	80052a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052a8:	f023 0301 	bic.w	r3, r3, #1
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	6978      	ldr	r0, [r7, #20]
 80052ba:	4798      	blx	r3
}
 80052bc:	bf00      	nop
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	20000dc8 	.word	0x20000dc8

080052c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052d0:	f107 0308 	add.w	r3, r7, #8
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 f857 	bl	8005388 <prvGetNextExpireTime>
 80052da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4619      	mov	r1, r3
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f803 	bl	80052ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052e6:	f000 f8d5 	bl	8005494 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052ea:	e7f1      	b.n	80052d0 <prvTimerTask+0x8>

080052ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052f6:	f7ff fa43 	bl	8004780 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052fa:	f107 0308 	add.w	r3, r7, #8
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f866 	bl	80053d0 <prvSampleTimeNow>
 8005304:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d130      	bne.n	800536e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10a      	bne.n	8005328 <prvProcessTimerOrBlockTask+0x3c>
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	429a      	cmp	r2, r3
 8005318:	d806      	bhi.n	8005328 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800531a:	f7ff fa3f 	bl	800479c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800531e:	68f9      	ldr	r1, [r7, #12]
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7ff ff85 	bl	8005230 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005326:	e024      	b.n	8005372 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d008      	beq.n	8005340 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800532e:	4b13      	ldr	r3, [pc, #76]	; (800537c <prvProcessTimerOrBlockTask+0x90>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <prvProcessTimerOrBlockTask+0x50>
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <prvProcessTimerOrBlockTask+0x52>
 800533c:	2300      	movs	r3, #0
 800533e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005340:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <prvProcessTimerOrBlockTask+0x94>)
 8005342:	6818      	ldr	r0, [r3, #0]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	4619      	mov	r1, r3
 800534e:	f7fe ffa7 	bl	80042a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005352:	f7ff fa23 	bl	800479c <xTaskResumeAll>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800535c:	4b09      	ldr	r3, [pc, #36]	; (8005384 <prvProcessTimerOrBlockTask+0x98>)
 800535e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	f3bf 8f6f 	isb	sy
}
 800536c:	e001      	b.n	8005372 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800536e:	f7ff fa15 	bl	800479c <xTaskResumeAll>
}
 8005372:	bf00      	nop
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20000dcc 	.word	0x20000dcc
 8005380:	20000dd0 	.word	0x20000dd0
 8005384:	e000ed04 	.word	0xe000ed04

08005388 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005390:	4b0e      	ldr	r3, [pc, #56]	; (80053cc <prvGetNextExpireTime+0x44>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <prvGetNextExpireTime+0x16>
 800539a:	2201      	movs	r2, #1
 800539c:	e000      	b.n	80053a0 <prvGetNextExpireTime+0x18>
 800539e:	2200      	movs	r2, #0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053ac:	4b07      	ldr	r3, [pc, #28]	; (80053cc <prvGetNextExpireTime+0x44>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	e001      	b.n	80053bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053bc:	68fb      	ldr	r3, [r7, #12]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	20000dc8 	.word	0x20000dc8

080053d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053d8:	f7ff fa7e 	bl	80048d8 <xTaskGetTickCount>
 80053dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053de:	4b0b      	ldr	r3, [pc, #44]	; (800540c <prvSampleTimeNow+0x3c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d205      	bcs.n	80053f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053e8:	f000 f936 	bl	8005658 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	e002      	b.n	80053fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053fa:	4a04      	ldr	r2, [pc, #16]	; (800540c <prvSampleTimeNow+0x3c>)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005400:	68fb      	ldr	r3, [r7, #12]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000dd8 	.word	0x20000dd8

08005410 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	429a      	cmp	r2, r3
 8005434:	d812      	bhi.n	800545c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	1ad2      	subs	r2, r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	429a      	cmp	r2, r3
 8005442:	d302      	bcc.n	800544a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005444:	2301      	movs	r3, #1
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	e01b      	b.n	8005482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800544a:	4b10      	ldr	r3, [pc, #64]	; (800548c <prvInsertTimerInActiveList+0x7c>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3304      	adds	r3, #4
 8005452:	4619      	mov	r1, r3
 8005454:	4610      	mov	r0, r2
 8005456:	f7fe f9ce 	bl	80037f6 <vListInsert>
 800545a:	e012      	b.n	8005482 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d206      	bcs.n	8005472 <prvInsertTimerInActiveList+0x62>
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d302      	bcc.n	8005472 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800546c:	2301      	movs	r3, #1
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	e007      	b.n	8005482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005472:	4b07      	ldr	r3, [pc, #28]	; (8005490 <prvInsertTimerInActiveList+0x80>)
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3304      	adds	r3, #4
 800547a:	4619      	mov	r1, r3
 800547c:	4610      	mov	r0, r2
 800547e:	f7fe f9ba 	bl	80037f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005482:	697b      	ldr	r3, [r7, #20]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20000dcc 	.word	0x20000dcc
 8005490:	20000dc8 	.word	0x20000dc8

08005494 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08e      	sub	sp, #56	; 0x38
 8005498:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800549a:	e0ca      	b.n	8005632 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	da18      	bge.n	80054d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80054a2:	1d3b      	adds	r3, r7, #4
 80054a4:	3304      	adds	r3, #4
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10a      	bne.n	80054c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	61fb      	str	r3, [r7, #28]
}
 80054c0:	bf00      	nop
 80054c2:	e7fe      	b.n	80054c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ca:	6850      	ldr	r0, [r2, #4]
 80054cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ce:	6892      	ldr	r2, [r2, #8]
 80054d0:	4611      	mov	r1, r2
 80054d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f2c0 80ab 	blt.w	8005632 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d004      	beq.n	80054f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	3304      	adds	r3, #4
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fe f9bb 	bl	8003868 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054f2:	463b      	mov	r3, r7
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff ff6b 	bl	80053d0 <prvSampleTimeNow>
 80054fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b09      	cmp	r3, #9
 8005500:	f200 8096 	bhi.w	8005630 <prvProcessReceivedCommands+0x19c>
 8005504:	a201      	add	r2, pc, #4	; (adr r2, 800550c <prvProcessReceivedCommands+0x78>)
 8005506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550a:	bf00      	nop
 800550c:	08005535 	.word	0x08005535
 8005510:	08005535 	.word	0x08005535
 8005514:	08005535 	.word	0x08005535
 8005518:	080055a9 	.word	0x080055a9
 800551c:	080055bd 	.word	0x080055bd
 8005520:	08005607 	.word	0x08005607
 8005524:	08005535 	.word	0x08005535
 8005528:	08005535 	.word	0x08005535
 800552c:	080055a9 	.word	0x080055a9
 8005530:	080055bd 	.word	0x080055bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800553a:	f043 0301 	orr.w	r3, r3, #1
 800553e:	b2da      	uxtb	r2, r3
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	18d1      	adds	r1, r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005554:	f7ff ff5c 	bl	8005410 <prvInsertTimerInActiveList>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d069      	beq.n	8005632 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005564:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d05e      	beq.n	8005632 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	441a      	add	r2, r3
 800557c:	2300      	movs	r3, #0
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	2300      	movs	r3, #0
 8005582:	2100      	movs	r1, #0
 8005584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005586:	f7ff fe05 	bl	8005194 <xTimerGenericCommand>
 800558a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d14f      	bne.n	8005632 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	61bb      	str	r3, [r7, #24]
}
 80055a4:	bf00      	nop
 80055a6:	e7fe      	b.n	80055a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055ae:	f023 0301 	bic.w	r3, r3, #1
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80055ba:	e03a      	b.n	8005632 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	617b      	str	r3, [r7, #20]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	18d1      	adds	r1, r2, r3
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005600:	f7ff ff06 	bl	8005410 <prvInsertTimerInActiveList>
					break;
 8005604:	e015      	b.n	8005632 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d103      	bne.n	800561c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005616:	f000 fbdb 	bl	8005dd0 <vPortFree>
 800561a:	e00a      	b.n	8005632 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	b2da      	uxtb	r2, r3
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800562e:	e000      	b.n	8005632 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005630:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005632:	4b08      	ldr	r3, [pc, #32]	; (8005654 <prvProcessReceivedCommands+0x1c0>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	1d39      	adds	r1, r7, #4
 8005638:	2200      	movs	r2, #0
 800563a:	4618      	mov	r0, r3
 800563c:	f7fe fc16 	bl	8003e6c <xQueueReceive>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	f47f af2a 	bne.w	800549c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005648:	bf00      	nop
 800564a:	bf00      	nop
 800564c:	3730      	adds	r7, #48	; 0x30
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000dd0 	.word	0x20000dd0

08005658 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800565e:	e048      	b.n	80056f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005660:	4b2d      	ldr	r3, [pc, #180]	; (8005718 <prvSwitchTimerLists+0xc0>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800566a:	4b2b      	ldr	r3, [pc, #172]	; (8005718 <prvSwitchTimerLists+0xc0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3304      	adds	r3, #4
 8005678:	4618      	mov	r0, r3
 800567a:	f7fe f8f5 	bl	8003868 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d02e      	beq.n	80056f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4413      	add	r3, r2
 800569c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d90e      	bls.n	80056c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056b2:	4b19      	ldr	r3, [pc, #100]	; (8005718 <prvSwitchTimerLists+0xc0>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3304      	adds	r3, #4
 80056ba:	4619      	mov	r1, r3
 80056bc:	4610      	mov	r0, r2
 80056be:	f7fe f89a 	bl	80037f6 <vListInsert>
 80056c2:	e016      	b.n	80056f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056c4:	2300      	movs	r3, #0
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	2300      	movs	r3, #0
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	2100      	movs	r1, #0
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f7ff fd60 	bl	8005194 <xTimerGenericCommand>
 80056d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10a      	bne.n	80056f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	603b      	str	r3, [r7, #0]
}
 80056ee:	bf00      	nop
 80056f0:	e7fe      	b.n	80056f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056f2:	4b09      	ldr	r3, [pc, #36]	; (8005718 <prvSwitchTimerLists+0xc0>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1b1      	bne.n	8005660 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056fc:	4b06      	ldr	r3, [pc, #24]	; (8005718 <prvSwitchTimerLists+0xc0>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005702:	4b06      	ldr	r3, [pc, #24]	; (800571c <prvSwitchTimerLists+0xc4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a04      	ldr	r2, [pc, #16]	; (8005718 <prvSwitchTimerLists+0xc0>)
 8005708:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800570a:	4a04      	ldr	r2, [pc, #16]	; (800571c <prvSwitchTimerLists+0xc4>)
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	6013      	str	r3, [r2, #0]
}
 8005710:	bf00      	nop
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	20000dc8 	.word	0x20000dc8
 800571c:	20000dcc 	.word	0x20000dcc

08005720 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005726:	f000 f965 	bl	80059f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800572a:	4b15      	ldr	r3, [pc, #84]	; (8005780 <prvCheckForValidListAndQueue+0x60>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d120      	bne.n	8005774 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005732:	4814      	ldr	r0, [pc, #80]	; (8005784 <prvCheckForValidListAndQueue+0x64>)
 8005734:	f7fe f80e 	bl	8003754 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005738:	4813      	ldr	r0, [pc, #76]	; (8005788 <prvCheckForValidListAndQueue+0x68>)
 800573a:	f7fe f80b 	bl	8003754 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800573e:	4b13      	ldr	r3, [pc, #76]	; (800578c <prvCheckForValidListAndQueue+0x6c>)
 8005740:	4a10      	ldr	r2, [pc, #64]	; (8005784 <prvCheckForValidListAndQueue+0x64>)
 8005742:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005744:	4b12      	ldr	r3, [pc, #72]	; (8005790 <prvCheckForValidListAndQueue+0x70>)
 8005746:	4a10      	ldr	r2, [pc, #64]	; (8005788 <prvCheckForValidListAndQueue+0x68>)
 8005748:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800574a:	2300      	movs	r3, #0
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	4b11      	ldr	r3, [pc, #68]	; (8005794 <prvCheckForValidListAndQueue+0x74>)
 8005750:	4a11      	ldr	r2, [pc, #68]	; (8005798 <prvCheckForValidListAndQueue+0x78>)
 8005752:	2110      	movs	r1, #16
 8005754:	200a      	movs	r0, #10
 8005756:	f7fe f919 	bl	800398c <xQueueGenericCreateStatic>
 800575a:	4603      	mov	r3, r0
 800575c:	4a08      	ldr	r2, [pc, #32]	; (8005780 <prvCheckForValidListAndQueue+0x60>)
 800575e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005760:	4b07      	ldr	r3, [pc, #28]	; (8005780 <prvCheckForValidListAndQueue+0x60>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005768:	4b05      	ldr	r3, [pc, #20]	; (8005780 <prvCheckForValidListAndQueue+0x60>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	490b      	ldr	r1, [pc, #44]	; (800579c <prvCheckForValidListAndQueue+0x7c>)
 800576e:	4618      	mov	r0, r3
 8005770:	f7fe fd6c 	bl	800424c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005774:	f000 f96e 	bl	8005a54 <vPortExitCritical>
}
 8005778:	bf00      	nop
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20000dd0 	.word	0x20000dd0
 8005784:	20000da0 	.word	0x20000da0
 8005788:	20000db4 	.word	0x20000db4
 800578c:	20000dc8 	.word	0x20000dc8
 8005790:	20000dcc 	.word	0x20000dcc
 8005794:	20000e7c 	.word	0x20000e7c
 8005798:	20000ddc 	.word	0x20000ddc
 800579c:	080069e4 	.word	0x080069e4

080057a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3b04      	subs	r3, #4
 80057b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3b04      	subs	r3, #4
 80057be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f023 0201 	bic.w	r2, r3, #1
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3b04      	subs	r3, #4
 80057ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057d0:	4a0c      	ldr	r2, [pc, #48]	; (8005804 <pxPortInitialiseStack+0x64>)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3b14      	subs	r3, #20
 80057da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3b04      	subs	r3, #4
 80057e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f06f 0202 	mvn.w	r2, #2
 80057ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3b20      	subs	r3, #32
 80057f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057f6:	68fb      	ldr	r3, [r7, #12]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	08005809 	.word	0x08005809

08005808 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800580e:	2300      	movs	r3, #0
 8005810:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005812:	4b12      	ldr	r3, [pc, #72]	; (800585c <prvTaskExitError+0x54>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581a:	d00a      	beq.n	8005832 <prvTaskExitError+0x2a>
	__asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	60fb      	str	r3, [r7, #12]
}
 800582e:	bf00      	nop
 8005830:	e7fe      	b.n	8005830 <prvTaskExitError+0x28>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	60bb      	str	r3, [r7, #8]
}
 8005844:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005846:	bf00      	nop
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0fc      	beq.n	8005848 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800584e:	bf00      	nop
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	2000000c 	.word	0x2000000c

08005860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005860:	4b07      	ldr	r3, [pc, #28]	; (8005880 <pxCurrentTCBConst2>)
 8005862:	6819      	ldr	r1, [r3, #0]
 8005864:	6808      	ldr	r0, [r1, #0]
 8005866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800586a:	f380 8809 	msr	PSP, r0
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f04f 0000 	mov.w	r0, #0
 8005876:	f380 8811 	msr	BASEPRI, r0
 800587a:	4770      	bx	lr
 800587c:	f3af 8000 	nop.w

08005880 <pxCurrentTCBConst2>:
 8005880:	200008a0 	.word	0x200008a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop

08005888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005888:	4808      	ldr	r0, [pc, #32]	; (80058ac <prvPortStartFirstTask+0x24>)
 800588a:	6800      	ldr	r0, [r0, #0]
 800588c:	6800      	ldr	r0, [r0, #0]
 800588e:	f380 8808 	msr	MSP, r0
 8005892:	f04f 0000 	mov.w	r0, #0
 8005896:	f380 8814 	msr	CONTROL, r0
 800589a:	b662      	cpsie	i
 800589c:	b661      	cpsie	f
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	df00      	svc	0
 80058a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058aa:	bf00      	nop
 80058ac:	e000ed08 	.word	0xe000ed08

080058b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058b6:	4b46      	ldr	r3, [pc, #280]	; (80059d0 <xPortStartScheduler+0x120>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a46      	ldr	r2, [pc, #280]	; (80059d4 <xPortStartScheduler+0x124>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10a      	bne.n	80058d6 <xPortStartScheduler+0x26>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	613b      	str	r3, [r7, #16]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058d6:	4b3e      	ldr	r3, [pc, #248]	; (80059d0 <xPortStartScheduler+0x120>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a3f      	ldr	r2, [pc, #252]	; (80059d8 <xPortStartScheduler+0x128>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d10a      	bne.n	80058f6 <xPortStartScheduler+0x46>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	60fb      	str	r3, [r7, #12]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058f6:	4b39      	ldr	r3, [pc, #228]	; (80059dc <xPortStartScheduler+0x12c>)
 80058f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	22ff      	movs	r2, #255	; 0xff
 8005906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005918:	b2da      	uxtb	r2, r3
 800591a:	4b31      	ldr	r3, [pc, #196]	; (80059e0 <xPortStartScheduler+0x130>)
 800591c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800591e:	4b31      	ldr	r3, [pc, #196]	; (80059e4 <xPortStartScheduler+0x134>)
 8005920:	2207      	movs	r2, #7
 8005922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005924:	e009      	b.n	800593a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005926:	4b2f      	ldr	r3, [pc, #188]	; (80059e4 <xPortStartScheduler+0x134>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3b01      	subs	r3, #1
 800592c:	4a2d      	ldr	r2, [pc, #180]	; (80059e4 <xPortStartScheduler+0x134>)
 800592e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	b2db      	uxtb	r3, r3
 8005938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800593a:	78fb      	ldrb	r3, [r7, #3]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005942:	2b80      	cmp	r3, #128	; 0x80
 8005944:	d0ef      	beq.n	8005926 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005946:	4b27      	ldr	r3, [pc, #156]	; (80059e4 <xPortStartScheduler+0x134>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f1c3 0307 	rsb	r3, r3, #7
 800594e:	2b04      	cmp	r3, #4
 8005950:	d00a      	beq.n	8005968 <xPortStartScheduler+0xb8>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	60bb      	str	r3, [r7, #8]
}
 8005964:	bf00      	nop
 8005966:	e7fe      	b.n	8005966 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005968:	4b1e      	ldr	r3, [pc, #120]	; (80059e4 <xPortStartScheduler+0x134>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	4a1d      	ldr	r2, [pc, #116]	; (80059e4 <xPortStartScheduler+0x134>)
 8005970:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005972:	4b1c      	ldr	r3, [pc, #112]	; (80059e4 <xPortStartScheduler+0x134>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800597a:	4a1a      	ldr	r2, [pc, #104]	; (80059e4 <xPortStartScheduler+0x134>)
 800597c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	b2da      	uxtb	r2, r3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005986:	4b18      	ldr	r3, [pc, #96]	; (80059e8 <xPortStartScheduler+0x138>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a17      	ldr	r2, [pc, #92]	; (80059e8 <xPortStartScheduler+0x138>)
 800598c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005992:	4b15      	ldr	r3, [pc, #84]	; (80059e8 <xPortStartScheduler+0x138>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a14      	ldr	r2, [pc, #80]	; (80059e8 <xPortStartScheduler+0x138>)
 8005998:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800599c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800599e:	f000 f8dd 	bl	8005b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059a2:	4b12      	ldr	r3, [pc, #72]	; (80059ec <xPortStartScheduler+0x13c>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059a8:	f000 f8fc 	bl	8005ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059ac:	4b10      	ldr	r3, [pc, #64]	; (80059f0 <xPortStartScheduler+0x140>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a0f      	ldr	r2, [pc, #60]	; (80059f0 <xPortStartScheduler+0x140>)
 80059b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059b8:	f7ff ff66 	bl	8005888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059bc:	f7ff f856 	bl	8004a6c <vTaskSwitchContext>
	prvTaskExitError();
 80059c0:	f7ff ff22 	bl	8005808 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	e000ed00 	.word	0xe000ed00
 80059d4:	410fc271 	.word	0x410fc271
 80059d8:	410fc270 	.word	0x410fc270
 80059dc:	e000e400 	.word	0xe000e400
 80059e0:	20000ecc 	.word	0x20000ecc
 80059e4:	20000ed0 	.word	0x20000ed0
 80059e8:	e000ed20 	.word	0xe000ed20
 80059ec:	2000000c 	.word	0x2000000c
 80059f0:	e000ef34 	.word	0xe000ef34

080059f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	607b      	str	r3, [r7, #4]
}
 8005a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a0e:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <vPortEnterCritical+0x58>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3301      	adds	r3, #1
 8005a14:	4a0d      	ldr	r2, [pc, #52]	; (8005a4c <vPortEnterCritical+0x58>)
 8005a16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a18:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <vPortEnterCritical+0x58>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d10f      	bne.n	8005a40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a20:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <vPortEnterCritical+0x5c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	603b      	str	r3, [r7, #0]
}
 8005a3c:	bf00      	nop
 8005a3e:	e7fe      	b.n	8005a3e <vPortEnterCritical+0x4a>
	}
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	2000000c 	.word	0x2000000c
 8005a50:	e000ed04 	.word	0xe000ed04

08005a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a5a:	4b12      	ldr	r3, [pc, #72]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10a      	bne.n	8005a78 <vPortExitCritical+0x24>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	607b      	str	r3, [r7, #4]
}
 8005a74:	bf00      	nop
 8005a76:	e7fe      	b.n	8005a76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a78:	4b0a      	ldr	r3, [pc, #40]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a82:	4b08      	ldr	r3, [pc, #32]	; (8005aa4 <vPortExitCritical+0x50>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d105      	bne.n	8005a96 <vPortExitCritical+0x42>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	f383 8811 	msr	BASEPRI, r3
}
 8005a94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	2000000c 	.word	0x2000000c
	...

08005ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ab0:	f3ef 8009 	mrs	r0, PSP
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	4b15      	ldr	r3, [pc, #84]	; (8005b10 <pxCurrentTCBConst>)
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	f01e 0f10 	tst.w	lr, #16
 8005ac0:	bf08      	it	eq
 8005ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aca:	6010      	str	r0, [r2, #0]
 8005acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ad4:	f380 8811 	msr	BASEPRI, r0
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f7fe ffc4 	bl	8004a6c <vTaskSwitchContext>
 8005ae4:	f04f 0000 	mov.w	r0, #0
 8005ae8:	f380 8811 	msr	BASEPRI, r0
 8005aec:	bc09      	pop	{r0, r3}
 8005aee:	6819      	ldr	r1, [r3, #0]
 8005af0:	6808      	ldr	r0, [r1, #0]
 8005af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af6:	f01e 0f10 	tst.w	lr, #16
 8005afa:	bf08      	it	eq
 8005afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b00:	f380 8809 	msr	PSP, r0
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	f3af 8000 	nop.w

08005b10 <pxCurrentTCBConst>:
 8005b10:	200008a0 	.word	0x200008a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop

08005b18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	607b      	str	r3, [r7, #4]
}
 8005b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b32:	f7fe fee1 	bl	80048f8 <xTaskIncrementTick>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <xPortSysTickHandler+0x40>)
 8005b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	2300      	movs	r3, #0
 8005b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	f383 8811 	msr	BASEPRI, r3
}
 8005b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b50:	bf00      	nop
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	e000ed04 	.word	0xe000ed04

08005b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b60:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <vPortSetupTimerInterrupt+0x34>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b66:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <vPortSetupTimerInterrupt+0x38>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <vPortSetupTimerInterrupt+0x3c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a0a      	ldr	r2, [pc, #40]	; (8005b9c <vPortSetupTimerInterrupt+0x40>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	099b      	lsrs	r3, r3, #6
 8005b78:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <vPortSetupTimerInterrupt+0x44>)
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b7e:	4b04      	ldr	r3, [pc, #16]	; (8005b90 <vPortSetupTimerInterrupt+0x34>)
 8005b80:	2207      	movs	r2, #7
 8005b82:	601a      	str	r2, [r3, #0]
}
 8005b84:	bf00      	nop
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	e000e010 	.word	0xe000e010
 8005b94:	e000e018 	.word	0xe000e018
 8005b98:	20000000 	.word	0x20000000
 8005b9c:	10624dd3 	.word	0x10624dd3
 8005ba0:	e000e014 	.word	0xe000e014

08005ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005bb4 <vPortEnableVFP+0x10>
 8005ba8:	6801      	ldr	r1, [r0, #0]
 8005baa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bae:	6001      	str	r1, [r0, #0]
 8005bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005bb2:	bf00      	nop
 8005bb4:	e000ed88 	.word	0xe000ed88

08005bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bbe:	f3ef 8305 	mrs	r3, IPSR
 8005bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b0f      	cmp	r3, #15
 8005bc8:	d914      	bls.n	8005bf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bca:	4a17      	ldr	r2, [pc, #92]	; (8005c28 <vPortValidateInterruptPriority+0x70>)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bd4:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <vPortValidateInterruptPriority+0x74>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	7afa      	ldrb	r2, [r7, #11]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d20a      	bcs.n	8005bf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	607b      	str	r3, [r7, #4]
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bf4:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <vPortValidateInterruptPriority+0x78>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bfc:	4b0d      	ldr	r3, [pc, #52]	; (8005c34 <vPortValidateInterruptPriority+0x7c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d90a      	bls.n	8005c1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	603b      	str	r3, [r7, #0]
}
 8005c16:	bf00      	nop
 8005c18:	e7fe      	b.n	8005c18 <vPortValidateInterruptPriority+0x60>
	}
 8005c1a:	bf00      	nop
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	e000e3f0 	.word	0xe000e3f0
 8005c2c:	20000ecc 	.word	0x20000ecc
 8005c30:	e000ed0c 	.word	0xe000ed0c
 8005c34:	20000ed0 	.word	0x20000ed0

08005c38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08a      	sub	sp, #40	; 0x28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c44:	f7fe fd9c 	bl	8004780 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c48:	4b5b      	ldr	r3, [pc, #364]	; (8005db8 <pvPortMalloc+0x180>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c50:	f000 f920 	bl	8005e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c54:	4b59      	ldr	r3, [pc, #356]	; (8005dbc <pvPortMalloc+0x184>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f040 8093 	bne.w	8005d88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01d      	beq.n	8005ca4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c68:	2208      	movs	r2, #8
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d014      	beq.n	8005ca4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f023 0307 	bic.w	r3, r3, #7
 8005c80:	3308      	adds	r3, #8
 8005c82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <pvPortMalloc+0x6c>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	617b      	str	r3, [r7, #20]
}
 8005ca0:	bf00      	nop
 8005ca2:	e7fe      	b.n	8005ca2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d06e      	beq.n	8005d88 <pvPortMalloc+0x150>
 8005caa:	4b45      	ldr	r3, [pc, #276]	; (8005dc0 <pvPortMalloc+0x188>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d869      	bhi.n	8005d88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cb4:	4b43      	ldr	r3, [pc, #268]	; (8005dc4 <pvPortMalloc+0x18c>)
 8005cb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cb8:	4b42      	ldr	r3, [pc, #264]	; (8005dc4 <pvPortMalloc+0x18c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cbe:	e004      	b.n	8005cca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d903      	bls.n	8005cdc <pvPortMalloc+0xa4>
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1f1      	bne.n	8005cc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cdc:	4b36      	ldr	r3, [pc, #216]	; (8005db8 <pvPortMalloc+0x180>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d050      	beq.n	8005d88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2208      	movs	r2, #8
 8005cec:	4413      	add	r3, r2
 8005cee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	1ad2      	subs	r2, r2, r3
 8005d00:	2308      	movs	r3, #8
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d91f      	bls.n	8005d48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <pvPortMalloc+0xf8>
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	613b      	str	r3, [r7, #16]
}
 8005d2c:	bf00      	nop
 8005d2e:	e7fe      	b.n	8005d2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	1ad2      	subs	r2, r2, r3
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d42:	69b8      	ldr	r0, [r7, #24]
 8005d44:	f000 f908 	bl	8005f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d48:	4b1d      	ldr	r3, [pc, #116]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	4a1b      	ldr	r2, [pc, #108]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d56:	4b1a      	ldr	r3, [pc, #104]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4b1b      	ldr	r3, [pc, #108]	; (8005dc8 <pvPortMalloc+0x190>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d203      	bcs.n	8005d6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d62:	4b17      	ldr	r3, [pc, #92]	; (8005dc0 <pvPortMalloc+0x188>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a18      	ldr	r2, [pc, #96]	; (8005dc8 <pvPortMalloc+0x190>)
 8005d68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <pvPortMalloc+0x184>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d7e:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <pvPortMalloc+0x194>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3301      	adds	r3, #1
 8005d84:	4a11      	ldr	r2, [pc, #68]	; (8005dcc <pvPortMalloc+0x194>)
 8005d86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d88:	f7fe fd08 	bl	800479c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <pvPortMalloc+0x174>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	60fb      	str	r3, [r7, #12]
}
 8005da8:	bf00      	nop
 8005daa:	e7fe      	b.n	8005daa <pvPortMalloc+0x172>
	return pvReturn;
 8005dac:	69fb      	ldr	r3, [r7, #28]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3728      	adds	r7, #40	; 0x28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	20004adc 	.word	0x20004adc
 8005dbc:	20004af0 	.word	0x20004af0
 8005dc0:	20004ae0 	.word	0x20004ae0
 8005dc4:	20004ad4 	.word	0x20004ad4
 8005dc8:	20004ae4 	.word	0x20004ae4
 8005dcc:	20004ae8 	.word	0x20004ae8

08005dd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d04d      	beq.n	8005e7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005de2:	2308      	movs	r3, #8
 8005de4:	425b      	negs	r3, r3
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4413      	add	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	4b24      	ldr	r3, [pc, #144]	; (8005e88 <vPortFree+0xb8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10a      	bne.n	8005e14 <vPortFree+0x44>
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	60fb      	str	r3, [r7, #12]
}
 8005e10:	bf00      	nop
 8005e12:	e7fe      	b.n	8005e12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <vPortFree+0x62>
	__asm volatile
 8005e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	60bb      	str	r3, [r7, #8]
}
 8005e2e:	bf00      	nop
 8005e30:	e7fe      	b.n	8005e30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <vPortFree+0xb8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01e      	beq.n	8005e7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d11a      	bne.n	8005e7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <vPortFree+0xb8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	43db      	mvns	r3, r3
 8005e52:	401a      	ands	r2, r3
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e58:	f7fe fc92 	bl	8004780 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	4b0a      	ldr	r3, [pc, #40]	; (8005e8c <vPortFree+0xbc>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4413      	add	r3, r2
 8005e66:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <vPortFree+0xbc>)
 8005e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e6a:	6938      	ldr	r0, [r7, #16]
 8005e6c:	f000 f874 	bl	8005f58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e70:	4b07      	ldr	r3, [pc, #28]	; (8005e90 <vPortFree+0xc0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3301      	adds	r3, #1
 8005e76:	4a06      	ldr	r2, [pc, #24]	; (8005e90 <vPortFree+0xc0>)
 8005e78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e7a:	f7fe fc8f 	bl	800479c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e7e:	bf00      	nop
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20004af0 	.word	0x20004af0
 8005e8c:	20004ae0 	.word	0x20004ae0
 8005e90:	20004aec 	.word	0x20004aec

08005e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ea0:	4b27      	ldr	r3, [pc, #156]	; (8005f40 <prvHeapInit+0xac>)
 8005ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00c      	beq.n	8005ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3307      	adds	r3, #7
 8005eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0307 	bic.w	r3, r3, #7
 8005eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	4a1f      	ldr	r2, [pc, #124]	; (8005f40 <prvHeapInit+0xac>)
 8005ec4:	4413      	add	r3, r2
 8005ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ecc:	4a1d      	ldr	r2, [pc, #116]	; (8005f44 <prvHeapInit+0xb0>)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ed2:	4b1c      	ldr	r3, [pc, #112]	; (8005f44 <prvHeapInit+0xb0>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	4413      	add	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ee0:	2208      	movs	r2, #8
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0307 	bic.w	r3, r3, #7
 8005eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4a15      	ldr	r2, [pc, #84]	; (8005f48 <prvHeapInit+0xb4>)
 8005ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ef6:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <prvHeapInit+0xb4>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2200      	movs	r2, #0
 8005efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005efe:	4b12      	ldr	r3, [pc, #72]	; (8005f48 <prvHeapInit+0xb4>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	1ad2      	subs	r2, r2, r3
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f14:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <prvHeapInit+0xb4>)
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <prvHeapInit+0xb8>)
 8005f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	4a09      	ldr	r2, [pc, #36]	; (8005f50 <prvHeapInit+0xbc>)
 8005f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f2c:	4b09      	ldr	r3, [pc, #36]	; (8005f54 <prvHeapInit+0xc0>)
 8005f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f32:	601a      	str	r2, [r3, #0]
}
 8005f34:	bf00      	nop
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	20000ed4 	.word	0x20000ed4
 8005f44:	20004ad4 	.word	0x20004ad4
 8005f48:	20004adc 	.word	0x20004adc
 8005f4c:	20004ae4 	.word	0x20004ae4
 8005f50:	20004ae0 	.word	0x20004ae0
 8005f54:	20004af0 	.word	0x20004af0

08005f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f60:	4b28      	ldr	r3, [pc, #160]	; (8006004 <prvInsertBlockIntoFreeList+0xac>)
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	e002      	b.n	8005f6c <prvInsertBlockIntoFreeList+0x14>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d8f7      	bhi.n	8005f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	4413      	add	r3, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d108      	bne.n	8005f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	441a      	add	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	441a      	add	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d118      	bne.n	8005fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	4b15      	ldr	r3, [pc, #84]	; (8006008 <prvInsertBlockIntoFreeList+0xb0>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d00d      	beq.n	8005fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	441a      	add	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	e008      	b.n	8005fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fd6:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <prvInsertBlockIntoFreeList+0xb0>)
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	e003      	b.n	8005fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d002      	beq.n	8005ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20004ad4 	.word	0x20004ad4
 8006008:	20004adc 	.word	0x20004adc

0800600c <siprintf>:
 800600c:	b40e      	push	{r1, r2, r3}
 800600e:	b500      	push	{lr}
 8006010:	b09c      	sub	sp, #112	; 0x70
 8006012:	ab1d      	add	r3, sp, #116	; 0x74
 8006014:	9002      	str	r0, [sp, #8]
 8006016:	9006      	str	r0, [sp, #24]
 8006018:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800601c:	4809      	ldr	r0, [pc, #36]	; (8006044 <siprintf+0x38>)
 800601e:	9107      	str	r1, [sp, #28]
 8006020:	9104      	str	r1, [sp, #16]
 8006022:	4909      	ldr	r1, [pc, #36]	; (8006048 <siprintf+0x3c>)
 8006024:	f853 2b04 	ldr.w	r2, [r3], #4
 8006028:	9105      	str	r1, [sp, #20]
 800602a:	6800      	ldr	r0, [r0, #0]
 800602c:	9301      	str	r3, [sp, #4]
 800602e:	a902      	add	r1, sp, #8
 8006030:	f000 f9a0 	bl	8006374 <_svfiprintf_r>
 8006034:	9b02      	ldr	r3, [sp, #8]
 8006036:	2200      	movs	r2, #0
 8006038:	701a      	strb	r2, [r3, #0]
 800603a:	b01c      	add	sp, #112	; 0x70
 800603c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006040:	b003      	add	sp, #12
 8006042:	4770      	bx	lr
 8006044:	2000005c 	.word	0x2000005c
 8006048:	ffff0208 	.word	0xffff0208

0800604c <memset>:
 800604c:	4402      	add	r2, r0
 800604e:	4603      	mov	r3, r0
 8006050:	4293      	cmp	r3, r2
 8006052:	d100      	bne.n	8006056 <memset+0xa>
 8006054:	4770      	bx	lr
 8006056:	f803 1b01 	strb.w	r1, [r3], #1
 800605a:	e7f9      	b.n	8006050 <memset+0x4>

0800605c <__errno>:
 800605c:	4b01      	ldr	r3, [pc, #4]	; (8006064 <__errno+0x8>)
 800605e:	6818      	ldr	r0, [r3, #0]
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	2000005c 	.word	0x2000005c

08006068 <__libc_init_array>:
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	4d0d      	ldr	r5, [pc, #52]	; (80060a0 <__libc_init_array+0x38>)
 800606c:	4c0d      	ldr	r4, [pc, #52]	; (80060a4 <__libc_init_array+0x3c>)
 800606e:	1b64      	subs	r4, r4, r5
 8006070:	10a4      	asrs	r4, r4, #2
 8006072:	2600      	movs	r6, #0
 8006074:	42a6      	cmp	r6, r4
 8006076:	d109      	bne.n	800608c <__libc_init_array+0x24>
 8006078:	4d0b      	ldr	r5, [pc, #44]	; (80060a8 <__libc_init_array+0x40>)
 800607a:	4c0c      	ldr	r4, [pc, #48]	; (80060ac <__libc_init_array+0x44>)
 800607c:	f000 fc6a 	bl	8006954 <_init>
 8006080:	1b64      	subs	r4, r4, r5
 8006082:	10a4      	asrs	r4, r4, #2
 8006084:	2600      	movs	r6, #0
 8006086:	42a6      	cmp	r6, r4
 8006088:	d105      	bne.n	8006096 <__libc_init_array+0x2e>
 800608a:	bd70      	pop	{r4, r5, r6, pc}
 800608c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006090:	4798      	blx	r3
 8006092:	3601      	adds	r6, #1
 8006094:	e7ee      	b.n	8006074 <__libc_init_array+0xc>
 8006096:	f855 3b04 	ldr.w	r3, [r5], #4
 800609a:	4798      	blx	r3
 800609c:	3601      	adds	r6, #1
 800609e:	e7f2      	b.n	8006086 <__libc_init_array+0x1e>
 80060a0:	08006ad8 	.word	0x08006ad8
 80060a4:	08006ad8 	.word	0x08006ad8
 80060a8:	08006ad8 	.word	0x08006ad8
 80060ac:	08006adc 	.word	0x08006adc

080060b0 <__retarget_lock_acquire_recursive>:
 80060b0:	4770      	bx	lr

080060b2 <__retarget_lock_release_recursive>:
 80060b2:	4770      	bx	lr

080060b4 <memcpy>:
 80060b4:	440a      	add	r2, r1
 80060b6:	4291      	cmp	r1, r2
 80060b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80060bc:	d100      	bne.n	80060c0 <memcpy+0xc>
 80060be:	4770      	bx	lr
 80060c0:	b510      	push	{r4, lr}
 80060c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060ca:	4291      	cmp	r1, r2
 80060cc:	d1f9      	bne.n	80060c2 <memcpy+0xe>
 80060ce:	bd10      	pop	{r4, pc}

080060d0 <_free_r>:
 80060d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060d2:	2900      	cmp	r1, #0
 80060d4:	d044      	beq.n	8006160 <_free_r+0x90>
 80060d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060da:	9001      	str	r0, [sp, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f1a1 0404 	sub.w	r4, r1, #4
 80060e2:	bfb8      	it	lt
 80060e4:	18e4      	addlt	r4, r4, r3
 80060e6:	f000 f8df 	bl	80062a8 <__malloc_lock>
 80060ea:	4a1e      	ldr	r2, [pc, #120]	; (8006164 <_free_r+0x94>)
 80060ec:	9801      	ldr	r0, [sp, #4]
 80060ee:	6813      	ldr	r3, [r2, #0]
 80060f0:	b933      	cbnz	r3, 8006100 <_free_r+0x30>
 80060f2:	6063      	str	r3, [r4, #4]
 80060f4:	6014      	str	r4, [r2, #0]
 80060f6:	b003      	add	sp, #12
 80060f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060fc:	f000 b8da 	b.w	80062b4 <__malloc_unlock>
 8006100:	42a3      	cmp	r3, r4
 8006102:	d908      	bls.n	8006116 <_free_r+0x46>
 8006104:	6825      	ldr	r5, [r4, #0]
 8006106:	1961      	adds	r1, r4, r5
 8006108:	428b      	cmp	r3, r1
 800610a:	bf01      	itttt	eq
 800610c:	6819      	ldreq	r1, [r3, #0]
 800610e:	685b      	ldreq	r3, [r3, #4]
 8006110:	1949      	addeq	r1, r1, r5
 8006112:	6021      	streq	r1, [r4, #0]
 8006114:	e7ed      	b.n	80060f2 <_free_r+0x22>
 8006116:	461a      	mov	r2, r3
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	b10b      	cbz	r3, 8006120 <_free_r+0x50>
 800611c:	42a3      	cmp	r3, r4
 800611e:	d9fa      	bls.n	8006116 <_free_r+0x46>
 8006120:	6811      	ldr	r1, [r2, #0]
 8006122:	1855      	adds	r5, r2, r1
 8006124:	42a5      	cmp	r5, r4
 8006126:	d10b      	bne.n	8006140 <_free_r+0x70>
 8006128:	6824      	ldr	r4, [r4, #0]
 800612a:	4421      	add	r1, r4
 800612c:	1854      	adds	r4, r2, r1
 800612e:	42a3      	cmp	r3, r4
 8006130:	6011      	str	r1, [r2, #0]
 8006132:	d1e0      	bne.n	80060f6 <_free_r+0x26>
 8006134:	681c      	ldr	r4, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	6053      	str	r3, [r2, #4]
 800613a:	440c      	add	r4, r1
 800613c:	6014      	str	r4, [r2, #0]
 800613e:	e7da      	b.n	80060f6 <_free_r+0x26>
 8006140:	d902      	bls.n	8006148 <_free_r+0x78>
 8006142:	230c      	movs	r3, #12
 8006144:	6003      	str	r3, [r0, #0]
 8006146:	e7d6      	b.n	80060f6 <_free_r+0x26>
 8006148:	6825      	ldr	r5, [r4, #0]
 800614a:	1961      	adds	r1, r4, r5
 800614c:	428b      	cmp	r3, r1
 800614e:	bf04      	itt	eq
 8006150:	6819      	ldreq	r1, [r3, #0]
 8006152:	685b      	ldreq	r3, [r3, #4]
 8006154:	6063      	str	r3, [r4, #4]
 8006156:	bf04      	itt	eq
 8006158:	1949      	addeq	r1, r1, r5
 800615a:	6021      	streq	r1, [r4, #0]
 800615c:	6054      	str	r4, [r2, #4]
 800615e:	e7ca      	b.n	80060f6 <_free_r+0x26>
 8006160:	b003      	add	sp, #12
 8006162:	bd30      	pop	{r4, r5, pc}
 8006164:	20004c34 	.word	0x20004c34

08006168 <sbrk_aligned>:
 8006168:	b570      	push	{r4, r5, r6, lr}
 800616a:	4e0e      	ldr	r6, [pc, #56]	; (80061a4 <sbrk_aligned+0x3c>)
 800616c:	460c      	mov	r4, r1
 800616e:	6831      	ldr	r1, [r6, #0]
 8006170:	4605      	mov	r5, r0
 8006172:	b911      	cbnz	r1, 800617a <sbrk_aligned+0x12>
 8006174:	f000 fba6 	bl	80068c4 <_sbrk_r>
 8006178:	6030      	str	r0, [r6, #0]
 800617a:	4621      	mov	r1, r4
 800617c:	4628      	mov	r0, r5
 800617e:	f000 fba1 	bl	80068c4 <_sbrk_r>
 8006182:	1c43      	adds	r3, r0, #1
 8006184:	d00a      	beq.n	800619c <sbrk_aligned+0x34>
 8006186:	1cc4      	adds	r4, r0, #3
 8006188:	f024 0403 	bic.w	r4, r4, #3
 800618c:	42a0      	cmp	r0, r4
 800618e:	d007      	beq.n	80061a0 <sbrk_aligned+0x38>
 8006190:	1a21      	subs	r1, r4, r0
 8006192:	4628      	mov	r0, r5
 8006194:	f000 fb96 	bl	80068c4 <_sbrk_r>
 8006198:	3001      	adds	r0, #1
 800619a:	d101      	bne.n	80061a0 <sbrk_aligned+0x38>
 800619c:	f04f 34ff 	mov.w	r4, #4294967295
 80061a0:	4620      	mov	r0, r4
 80061a2:	bd70      	pop	{r4, r5, r6, pc}
 80061a4:	20004c38 	.word	0x20004c38

080061a8 <_malloc_r>:
 80061a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061ac:	1ccd      	adds	r5, r1, #3
 80061ae:	f025 0503 	bic.w	r5, r5, #3
 80061b2:	3508      	adds	r5, #8
 80061b4:	2d0c      	cmp	r5, #12
 80061b6:	bf38      	it	cc
 80061b8:	250c      	movcc	r5, #12
 80061ba:	2d00      	cmp	r5, #0
 80061bc:	4607      	mov	r7, r0
 80061be:	db01      	blt.n	80061c4 <_malloc_r+0x1c>
 80061c0:	42a9      	cmp	r1, r5
 80061c2:	d905      	bls.n	80061d0 <_malloc_r+0x28>
 80061c4:	230c      	movs	r3, #12
 80061c6:	603b      	str	r3, [r7, #0]
 80061c8:	2600      	movs	r6, #0
 80061ca:	4630      	mov	r0, r6
 80061cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80062a4 <_malloc_r+0xfc>
 80061d4:	f000 f868 	bl	80062a8 <__malloc_lock>
 80061d8:	f8d8 3000 	ldr.w	r3, [r8]
 80061dc:	461c      	mov	r4, r3
 80061de:	bb5c      	cbnz	r4, 8006238 <_malloc_r+0x90>
 80061e0:	4629      	mov	r1, r5
 80061e2:	4638      	mov	r0, r7
 80061e4:	f7ff ffc0 	bl	8006168 <sbrk_aligned>
 80061e8:	1c43      	adds	r3, r0, #1
 80061ea:	4604      	mov	r4, r0
 80061ec:	d155      	bne.n	800629a <_malloc_r+0xf2>
 80061ee:	f8d8 4000 	ldr.w	r4, [r8]
 80061f2:	4626      	mov	r6, r4
 80061f4:	2e00      	cmp	r6, #0
 80061f6:	d145      	bne.n	8006284 <_malloc_r+0xdc>
 80061f8:	2c00      	cmp	r4, #0
 80061fa:	d048      	beq.n	800628e <_malloc_r+0xe6>
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	4631      	mov	r1, r6
 8006200:	4638      	mov	r0, r7
 8006202:	eb04 0903 	add.w	r9, r4, r3
 8006206:	f000 fb5d 	bl	80068c4 <_sbrk_r>
 800620a:	4581      	cmp	r9, r0
 800620c:	d13f      	bne.n	800628e <_malloc_r+0xe6>
 800620e:	6821      	ldr	r1, [r4, #0]
 8006210:	1a6d      	subs	r5, r5, r1
 8006212:	4629      	mov	r1, r5
 8006214:	4638      	mov	r0, r7
 8006216:	f7ff ffa7 	bl	8006168 <sbrk_aligned>
 800621a:	3001      	adds	r0, #1
 800621c:	d037      	beq.n	800628e <_malloc_r+0xe6>
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	442b      	add	r3, r5
 8006222:	6023      	str	r3, [r4, #0]
 8006224:	f8d8 3000 	ldr.w	r3, [r8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d038      	beq.n	800629e <_malloc_r+0xf6>
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	42a2      	cmp	r2, r4
 8006230:	d12b      	bne.n	800628a <_malloc_r+0xe2>
 8006232:	2200      	movs	r2, #0
 8006234:	605a      	str	r2, [r3, #4]
 8006236:	e00f      	b.n	8006258 <_malloc_r+0xb0>
 8006238:	6822      	ldr	r2, [r4, #0]
 800623a:	1b52      	subs	r2, r2, r5
 800623c:	d41f      	bmi.n	800627e <_malloc_r+0xd6>
 800623e:	2a0b      	cmp	r2, #11
 8006240:	d917      	bls.n	8006272 <_malloc_r+0xca>
 8006242:	1961      	adds	r1, r4, r5
 8006244:	42a3      	cmp	r3, r4
 8006246:	6025      	str	r5, [r4, #0]
 8006248:	bf18      	it	ne
 800624a:	6059      	strne	r1, [r3, #4]
 800624c:	6863      	ldr	r3, [r4, #4]
 800624e:	bf08      	it	eq
 8006250:	f8c8 1000 	streq.w	r1, [r8]
 8006254:	5162      	str	r2, [r4, r5]
 8006256:	604b      	str	r3, [r1, #4]
 8006258:	4638      	mov	r0, r7
 800625a:	f104 060b 	add.w	r6, r4, #11
 800625e:	f000 f829 	bl	80062b4 <__malloc_unlock>
 8006262:	f026 0607 	bic.w	r6, r6, #7
 8006266:	1d23      	adds	r3, r4, #4
 8006268:	1af2      	subs	r2, r6, r3
 800626a:	d0ae      	beq.n	80061ca <_malloc_r+0x22>
 800626c:	1b9b      	subs	r3, r3, r6
 800626e:	50a3      	str	r3, [r4, r2]
 8006270:	e7ab      	b.n	80061ca <_malloc_r+0x22>
 8006272:	42a3      	cmp	r3, r4
 8006274:	6862      	ldr	r2, [r4, #4]
 8006276:	d1dd      	bne.n	8006234 <_malloc_r+0x8c>
 8006278:	f8c8 2000 	str.w	r2, [r8]
 800627c:	e7ec      	b.n	8006258 <_malloc_r+0xb0>
 800627e:	4623      	mov	r3, r4
 8006280:	6864      	ldr	r4, [r4, #4]
 8006282:	e7ac      	b.n	80061de <_malloc_r+0x36>
 8006284:	4634      	mov	r4, r6
 8006286:	6876      	ldr	r6, [r6, #4]
 8006288:	e7b4      	b.n	80061f4 <_malloc_r+0x4c>
 800628a:	4613      	mov	r3, r2
 800628c:	e7cc      	b.n	8006228 <_malloc_r+0x80>
 800628e:	230c      	movs	r3, #12
 8006290:	603b      	str	r3, [r7, #0]
 8006292:	4638      	mov	r0, r7
 8006294:	f000 f80e 	bl	80062b4 <__malloc_unlock>
 8006298:	e797      	b.n	80061ca <_malloc_r+0x22>
 800629a:	6025      	str	r5, [r4, #0]
 800629c:	e7dc      	b.n	8006258 <_malloc_r+0xb0>
 800629e:	605b      	str	r3, [r3, #4]
 80062a0:	deff      	udf	#255	; 0xff
 80062a2:	bf00      	nop
 80062a4:	20004c34 	.word	0x20004c34

080062a8 <__malloc_lock>:
 80062a8:	4801      	ldr	r0, [pc, #4]	; (80062b0 <__malloc_lock+0x8>)
 80062aa:	f7ff bf01 	b.w	80060b0 <__retarget_lock_acquire_recursive>
 80062ae:	bf00      	nop
 80062b0:	20004c30 	.word	0x20004c30

080062b4 <__malloc_unlock>:
 80062b4:	4801      	ldr	r0, [pc, #4]	; (80062bc <__malloc_unlock+0x8>)
 80062b6:	f7ff befc 	b.w	80060b2 <__retarget_lock_release_recursive>
 80062ba:	bf00      	nop
 80062bc:	20004c30 	.word	0x20004c30

080062c0 <__ssputs_r>:
 80062c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c4:	688e      	ldr	r6, [r1, #8]
 80062c6:	461f      	mov	r7, r3
 80062c8:	42be      	cmp	r6, r7
 80062ca:	680b      	ldr	r3, [r1, #0]
 80062cc:	4682      	mov	sl, r0
 80062ce:	460c      	mov	r4, r1
 80062d0:	4690      	mov	r8, r2
 80062d2:	d82c      	bhi.n	800632e <__ssputs_r+0x6e>
 80062d4:	898a      	ldrh	r2, [r1, #12]
 80062d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80062da:	d026      	beq.n	800632a <__ssputs_r+0x6a>
 80062dc:	6965      	ldr	r5, [r4, #20]
 80062de:	6909      	ldr	r1, [r1, #16]
 80062e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062e4:	eba3 0901 	sub.w	r9, r3, r1
 80062e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062ec:	1c7b      	adds	r3, r7, #1
 80062ee:	444b      	add	r3, r9
 80062f0:	106d      	asrs	r5, r5, #1
 80062f2:	429d      	cmp	r5, r3
 80062f4:	bf38      	it	cc
 80062f6:	461d      	movcc	r5, r3
 80062f8:	0553      	lsls	r3, r2, #21
 80062fa:	d527      	bpl.n	800634c <__ssputs_r+0x8c>
 80062fc:	4629      	mov	r1, r5
 80062fe:	f7ff ff53 	bl	80061a8 <_malloc_r>
 8006302:	4606      	mov	r6, r0
 8006304:	b360      	cbz	r0, 8006360 <__ssputs_r+0xa0>
 8006306:	6921      	ldr	r1, [r4, #16]
 8006308:	464a      	mov	r2, r9
 800630a:	f7ff fed3 	bl	80060b4 <memcpy>
 800630e:	89a3      	ldrh	r3, [r4, #12]
 8006310:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006318:	81a3      	strh	r3, [r4, #12]
 800631a:	6126      	str	r6, [r4, #16]
 800631c:	6165      	str	r5, [r4, #20]
 800631e:	444e      	add	r6, r9
 8006320:	eba5 0509 	sub.w	r5, r5, r9
 8006324:	6026      	str	r6, [r4, #0]
 8006326:	60a5      	str	r5, [r4, #8]
 8006328:	463e      	mov	r6, r7
 800632a:	42be      	cmp	r6, r7
 800632c:	d900      	bls.n	8006330 <__ssputs_r+0x70>
 800632e:	463e      	mov	r6, r7
 8006330:	6820      	ldr	r0, [r4, #0]
 8006332:	4632      	mov	r2, r6
 8006334:	4641      	mov	r1, r8
 8006336:	f000 faab 	bl	8006890 <memmove>
 800633a:	68a3      	ldr	r3, [r4, #8]
 800633c:	1b9b      	subs	r3, r3, r6
 800633e:	60a3      	str	r3, [r4, #8]
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	4433      	add	r3, r6
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	2000      	movs	r0, #0
 8006348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634c:	462a      	mov	r2, r5
 800634e:	f000 fac9 	bl	80068e4 <_realloc_r>
 8006352:	4606      	mov	r6, r0
 8006354:	2800      	cmp	r0, #0
 8006356:	d1e0      	bne.n	800631a <__ssputs_r+0x5a>
 8006358:	6921      	ldr	r1, [r4, #16]
 800635a:	4650      	mov	r0, sl
 800635c:	f7ff feb8 	bl	80060d0 <_free_r>
 8006360:	230c      	movs	r3, #12
 8006362:	f8ca 3000 	str.w	r3, [sl]
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800636c:	81a3      	strh	r3, [r4, #12]
 800636e:	f04f 30ff 	mov.w	r0, #4294967295
 8006372:	e7e9      	b.n	8006348 <__ssputs_r+0x88>

08006374 <_svfiprintf_r>:
 8006374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006378:	4698      	mov	r8, r3
 800637a:	898b      	ldrh	r3, [r1, #12]
 800637c:	061b      	lsls	r3, r3, #24
 800637e:	b09d      	sub	sp, #116	; 0x74
 8006380:	4607      	mov	r7, r0
 8006382:	460d      	mov	r5, r1
 8006384:	4614      	mov	r4, r2
 8006386:	d50e      	bpl.n	80063a6 <_svfiprintf_r+0x32>
 8006388:	690b      	ldr	r3, [r1, #16]
 800638a:	b963      	cbnz	r3, 80063a6 <_svfiprintf_r+0x32>
 800638c:	2140      	movs	r1, #64	; 0x40
 800638e:	f7ff ff0b 	bl	80061a8 <_malloc_r>
 8006392:	6028      	str	r0, [r5, #0]
 8006394:	6128      	str	r0, [r5, #16]
 8006396:	b920      	cbnz	r0, 80063a2 <_svfiprintf_r+0x2e>
 8006398:	230c      	movs	r3, #12
 800639a:	603b      	str	r3, [r7, #0]
 800639c:	f04f 30ff 	mov.w	r0, #4294967295
 80063a0:	e0d0      	b.n	8006544 <_svfiprintf_r+0x1d0>
 80063a2:	2340      	movs	r3, #64	; 0x40
 80063a4:	616b      	str	r3, [r5, #20]
 80063a6:	2300      	movs	r3, #0
 80063a8:	9309      	str	r3, [sp, #36]	; 0x24
 80063aa:	2320      	movs	r3, #32
 80063ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80063b4:	2330      	movs	r3, #48	; 0x30
 80063b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800655c <_svfiprintf_r+0x1e8>
 80063ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063be:	f04f 0901 	mov.w	r9, #1
 80063c2:	4623      	mov	r3, r4
 80063c4:	469a      	mov	sl, r3
 80063c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063ca:	b10a      	cbz	r2, 80063d0 <_svfiprintf_r+0x5c>
 80063cc:	2a25      	cmp	r2, #37	; 0x25
 80063ce:	d1f9      	bne.n	80063c4 <_svfiprintf_r+0x50>
 80063d0:	ebba 0b04 	subs.w	fp, sl, r4
 80063d4:	d00b      	beq.n	80063ee <_svfiprintf_r+0x7a>
 80063d6:	465b      	mov	r3, fp
 80063d8:	4622      	mov	r2, r4
 80063da:	4629      	mov	r1, r5
 80063dc:	4638      	mov	r0, r7
 80063de:	f7ff ff6f 	bl	80062c0 <__ssputs_r>
 80063e2:	3001      	adds	r0, #1
 80063e4:	f000 80a9 	beq.w	800653a <_svfiprintf_r+0x1c6>
 80063e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063ea:	445a      	add	r2, fp
 80063ec:	9209      	str	r2, [sp, #36]	; 0x24
 80063ee:	f89a 3000 	ldrb.w	r3, [sl]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 80a1 	beq.w	800653a <_svfiprintf_r+0x1c6>
 80063f8:	2300      	movs	r3, #0
 80063fa:	f04f 32ff 	mov.w	r2, #4294967295
 80063fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006402:	f10a 0a01 	add.w	sl, sl, #1
 8006406:	9304      	str	r3, [sp, #16]
 8006408:	9307      	str	r3, [sp, #28]
 800640a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800640e:	931a      	str	r3, [sp, #104]	; 0x68
 8006410:	4654      	mov	r4, sl
 8006412:	2205      	movs	r2, #5
 8006414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006418:	4850      	ldr	r0, [pc, #320]	; (800655c <_svfiprintf_r+0x1e8>)
 800641a:	f7f9 ff01 	bl	8000220 <memchr>
 800641e:	9a04      	ldr	r2, [sp, #16]
 8006420:	b9d8      	cbnz	r0, 800645a <_svfiprintf_r+0xe6>
 8006422:	06d0      	lsls	r0, r2, #27
 8006424:	bf44      	itt	mi
 8006426:	2320      	movmi	r3, #32
 8006428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800642c:	0711      	lsls	r1, r2, #28
 800642e:	bf44      	itt	mi
 8006430:	232b      	movmi	r3, #43	; 0x2b
 8006432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006436:	f89a 3000 	ldrb.w	r3, [sl]
 800643a:	2b2a      	cmp	r3, #42	; 0x2a
 800643c:	d015      	beq.n	800646a <_svfiprintf_r+0xf6>
 800643e:	9a07      	ldr	r2, [sp, #28]
 8006440:	4654      	mov	r4, sl
 8006442:	2000      	movs	r0, #0
 8006444:	f04f 0c0a 	mov.w	ip, #10
 8006448:	4621      	mov	r1, r4
 800644a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800644e:	3b30      	subs	r3, #48	; 0x30
 8006450:	2b09      	cmp	r3, #9
 8006452:	d94d      	bls.n	80064f0 <_svfiprintf_r+0x17c>
 8006454:	b1b0      	cbz	r0, 8006484 <_svfiprintf_r+0x110>
 8006456:	9207      	str	r2, [sp, #28]
 8006458:	e014      	b.n	8006484 <_svfiprintf_r+0x110>
 800645a:	eba0 0308 	sub.w	r3, r0, r8
 800645e:	fa09 f303 	lsl.w	r3, r9, r3
 8006462:	4313      	orrs	r3, r2
 8006464:	9304      	str	r3, [sp, #16]
 8006466:	46a2      	mov	sl, r4
 8006468:	e7d2      	b.n	8006410 <_svfiprintf_r+0x9c>
 800646a:	9b03      	ldr	r3, [sp, #12]
 800646c:	1d19      	adds	r1, r3, #4
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	9103      	str	r1, [sp, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	bfbb      	ittet	lt
 8006476:	425b      	neglt	r3, r3
 8006478:	f042 0202 	orrlt.w	r2, r2, #2
 800647c:	9307      	strge	r3, [sp, #28]
 800647e:	9307      	strlt	r3, [sp, #28]
 8006480:	bfb8      	it	lt
 8006482:	9204      	strlt	r2, [sp, #16]
 8006484:	7823      	ldrb	r3, [r4, #0]
 8006486:	2b2e      	cmp	r3, #46	; 0x2e
 8006488:	d10c      	bne.n	80064a4 <_svfiprintf_r+0x130>
 800648a:	7863      	ldrb	r3, [r4, #1]
 800648c:	2b2a      	cmp	r3, #42	; 0x2a
 800648e:	d134      	bne.n	80064fa <_svfiprintf_r+0x186>
 8006490:	9b03      	ldr	r3, [sp, #12]
 8006492:	1d1a      	adds	r2, r3, #4
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	9203      	str	r2, [sp, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	bfb8      	it	lt
 800649c:	f04f 33ff 	movlt.w	r3, #4294967295
 80064a0:	3402      	adds	r4, #2
 80064a2:	9305      	str	r3, [sp, #20]
 80064a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800656c <_svfiprintf_r+0x1f8>
 80064a8:	7821      	ldrb	r1, [r4, #0]
 80064aa:	2203      	movs	r2, #3
 80064ac:	4650      	mov	r0, sl
 80064ae:	f7f9 feb7 	bl	8000220 <memchr>
 80064b2:	b138      	cbz	r0, 80064c4 <_svfiprintf_r+0x150>
 80064b4:	9b04      	ldr	r3, [sp, #16]
 80064b6:	eba0 000a 	sub.w	r0, r0, sl
 80064ba:	2240      	movs	r2, #64	; 0x40
 80064bc:	4082      	lsls	r2, r0
 80064be:	4313      	orrs	r3, r2
 80064c0:	3401      	adds	r4, #1
 80064c2:	9304      	str	r3, [sp, #16]
 80064c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c8:	4825      	ldr	r0, [pc, #148]	; (8006560 <_svfiprintf_r+0x1ec>)
 80064ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064ce:	2206      	movs	r2, #6
 80064d0:	f7f9 fea6 	bl	8000220 <memchr>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d038      	beq.n	800654a <_svfiprintf_r+0x1d6>
 80064d8:	4b22      	ldr	r3, [pc, #136]	; (8006564 <_svfiprintf_r+0x1f0>)
 80064da:	bb1b      	cbnz	r3, 8006524 <_svfiprintf_r+0x1b0>
 80064dc:	9b03      	ldr	r3, [sp, #12]
 80064de:	3307      	adds	r3, #7
 80064e0:	f023 0307 	bic.w	r3, r3, #7
 80064e4:	3308      	adds	r3, #8
 80064e6:	9303      	str	r3, [sp, #12]
 80064e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ea:	4433      	add	r3, r6
 80064ec:	9309      	str	r3, [sp, #36]	; 0x24
 80064ee:	e768      	b.n	80063c2 <_svfiprintf_r+0x4e>
 80064f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80064f4:	460c      	mov	r4, r1
 80064f6:	2001      	movs	r0, #1
 80064f8:	e7a6      	b.n	8006448 <_svfiprintf_r+0xd4>
 80064fa:	2300      	movs	r3, #0
 80064fc:	3401      	adds	r4, #1
 80064fe:	9305      	str	r3, [sp, #20]
 8006500:	4619      	mov	r1, r3
 8006502:	f04f 0c0a 	mov.w	ip, #10
 8006506:	4620      	mov	r0, r4
 8006508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800650c:	3a30      	subs	r2, #48	; 0x30
 800650e:	2a09      	cmp	r2, #9
 8006510:	d903      	bls.n	800651a <_svfiprintf_r+0x1a6>
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0c6      	beq.n	80064a4 <_svfiprintf_r+0x130>
 8006516:	9105      	str	r1, [sp, #20]
 8006518:	e7c4      	b.n	80064a4 <_svfiprintf_r+0x130>
 800651a:	fb0c 2101 	mla	r1, ip, r1, r2
 800651e:	4604      	mov	r4, r0
 8006520:	2301      	movs	r3, #1
 8006522:	e7f0      	b.n	8006506 <_svfiprintf_r+0x192>
 8006524:	ab03      	add	r3, sp, #12
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	462a      	mov	r2, r5
 800652a:	4b0f      	ldr	r3, [pc, #60]	; (8006568 <_svfiprintf_r+0x1f4>)
 800652c:	a904      	add	r1, sp, #16
 800652e:	4638      	mov	r0, r7
 8006530:	f3af 8000 	nop.w
 8006534:	1c42      	adds	r2, r0, #1
 8006536:	4606      	mov	r6, r0
 8006538:	d1d6      	bne.n	80064e8 <_svfiprintf_r+0x174>
 800653a:	89ab      	ldrh	r3, [r5, #12]
 800653c:	065b      	lsls	r3, r3, #25
 800653e:	f53f af2d 	bmi.w	800639c <_svfiprintf_r+0x28>
 8006542:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006544:	b01d      	add	sp, #116	; 0x74
 8006546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800654a:	ab03      	add	r3, sp, #12
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	462a      	mov	r2, r5
 8006550:	4b05      	ldr	r3, [pc, #20]	; (8006568 <_svfiprintf_r+0x1f4>)
 8006552:	a904      	add	r1, sp, #16
 8006554:	4638      	mov	r0, r7
 8006556:	f000 f879 	bl	800664c <_printf_i>
 800655a:	e7eb      	b.n	8006534 <_svfiprintf_r+0x1c0>
 800655c:	08006a9c 	.word	0x08006a9c
 8006560:	08006aa6 	.word	0x08006aa6
 8006564:	00000000 	.word	0x00000000
 8006568:	080062c1 	.word	0x080062c1
 800656c:	08006aa2 	.word	0x08006aa2

08006570 <_printf_common>:
 8006570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006574:	4616      	mov	r6, r2
 8006576:	4699      	mov	r9, r3
 8006578:	688a      	ldr	r2, [r1, #8]
 800657a:	690b      	ldr	r3, [r1, #16]
 800657c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006580:	4293      	cmp	r3, r2
 8006582:	bfb8      	it	lt
 8006584:	4613      	movlt	r3, r2
 8006586:	6033      	str	r3, [r6, #0]
 8006588:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800658c:	4607      	mov	r7, r0
 800658e:	460c      	mov	r4, r1
 8006590:	b10a      	cbz	r2, 8006596 <_printf_common+0x26>
 8006592:	3301      	adds	r3, #1
 8006594:	6033      	str	r3, [r6, #0]
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	0699      	lsls	r1, r3, #26
 800659a:	bf42      	ittt	mi
 800659c:	6833      	ldrmi	r3, [r6, #0]
 800659e:	3302      	addmi	r3, #2
 80065a0:	6033      	strmi	r3, [r6, #0]
 80065a2:	6825      	ldr	r5, [r4, #0]
 80065a4:	f015 0506 	ands.w	r5, r5, #6
 80065a8:	d106      	bne.n	80065b8 <_printf_common+0x48>
 80065aa:	f104 0a19 	add.w	sl, r4, #25
 80065ae:	68e3      	ldr	r3, [r4, #12]
 80065b0:	6832      	ldr	r2, [r6, #0]
 80065b2:	1a9b      	subs	r3, r3, r2
 80065b4:	42ab      	cmp	r3, r5
 80065b6:	dc26      	bgt.n	8006606 <_printf_common+0x96>
 80065b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065bc:	1e13      	subs	r3, r2, #0
 80065be:	6822      	ldr	r2, [r4, #0]
 80065c0:	bf18      	it	ne
 80065c2:	2301      	movne	r3, #1
 80065c4:	0692      	lsls	r2, r2, #26
 80065c6:	d42b      	bmi.n	8006620 <_printf_common+0xb0>
 80065c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065cc:	4649      	mov	r1, r9
 80065ce:	4638      	mov	r0, r7
 80065d0:	47c0      	blx	r8
 80065d2:	3001      	adds	r0, #1
 80065d4:	d01e      	beq.n	8006614 <_printf_common+0xa4>
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	6922      	ldr	r2, [r4, #16]
 80065da:	f003 0306 	and.w	r3, r3, #6
 80065de:	2b04      	cmp	r3, #4
 80065e0:	bf02      	ittt	eq
 80065e2:	68e5      	ldreq	r5, [r4, #12]
 80065e4:	6833      	ldreq	r3, [r6, #0]
 80065e6:	1aed      	subeq	r5, r5, r3
 80065e8:	68a3      	ldr	r3, [r4, #8]
 80065ea:	bf0c      	ite	eq
 80065ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065f0:	2500      	movne	r5, #0
 80065f2:	4293      	cmp	r3, r2
 80065f4:	bfc4      	itt	gt
 80065f6:	1a9b      	subgt	r3, r3, r2
 80065f8:	18ed      	addgt	r5, r5, r3
 80065fa:	2600      	movs	r6, #0
 80065fc:	341a      	adds	r4, #26
 80065fe:	42b5      	cmp	r5, r6
 8006600:	d11a      	bne.n	8006638 <_printf_common+0xc8>
 8006602:	2000      	movs	r0, #0
 8006604:	e008      	b.n	8006618 <_printf_common+0xa8>
 8006606:	2301      	movs	r3, #1
 8006608:	4652      	mov	r2, sl
 800660a:	4649      	mov	r1, r9
 800660c:	4638      	mov	r0, r7
 800660e:	47c0      	blx	r8
 8006610:	3001      	adds	r0, #1
 8006612:	d103      	bne.n	800661c <_printf_common+0xac>
 8006614:	f04f 30ff 	mov.w	r0, #4294967295
 8006618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800661c:	3501      	adds	r5, #1
 800661e:	e7c6      	b.n	80065ae <_printf_common+0x3e>
 8006620:	18e1      	adds	r1, r4, r3
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	2030      	movs	r0, #48	; 0x30
 8006626:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800662a:	4422      	add	r2, r4
 800662c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006630:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006634:	3302      	adds	r3, #2
 8006636:	e7c7      	b.n	80065c8 <_printf_common+0x58>
 8006638:	2301      	movs	r3, #1
 800663a:	4622      	mov	r2, r4
 800663c:	4649      	mov	r1, r9
 800663e:	4638      	mov	r0, r7
 8006640:	47c0      	blx	r8
 8006642:	3001      	adds	r0, #1
 8006644:	d0e6      	beq.n	8006614 <_printf_common+0xa4>
 8006646:	3601      	adds	r6, #1
 8006648:	e7d9      	b.n	80065fe <_printf_common+0x8e>
	...

0800664c <_printf_i>:
 800664c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006650:	7e0f      	ldrb	r7, [r1, #24]
 8006652:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006654:	2f78      	cmp	r7, #120	; 0x78
 8006656:	4691      	mov	r9, r2
 8006658:	4680      	mov	r8, r0
 800665a:	460c      	mov	r4, r1
 800665c:	469a      	mov	sl, r3
 800665e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006662:	d807      	bhi.n	8006674 <_printf_i+0x28>
 8006664:	2f62      	cmp	r7, #98	; 0x62
 8006666:	d80a      	bhi.n	800667e <_printf_i+0x32>
 8006668:	2f00      	cmp	r7, #0
 800666a:	f000 80d4 	beq.w	8006816 <_printf_i+0x1ca>
 800666e:	2f58      	cmp	r7, #88	; 0x58
 8006670:	f000 80c0 	beq.w	80067f4 <_printf_i+0x1a8>
 8006674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006678:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800667c:	e03a      	b.n	80066f4 <_printf_i+0xa8>
 800667e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006682:	2b15      	cmp	r3, #21
 8006684:	d8f6      	bhi.n	8006674 <_printf_i+0x28>
 8006686:	a101      	add	r1, pc, #4	; (adr r1, 800668c <_printf_i+0x40>)
 8006688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800668c:	080066e5 	.word	0x080066e5
 8006690:	080066f9 	.word	0x080066f9
 8006694:	08006675 	.word	0x08006675
 8006698:	08006675 	.word	0x08006675
 800669c:	08006675 	.word	0x08006675
 80066a0:	08006675 	.word	0x08006675
 80066a4:	080066f9 	.word	0x080066f9
 80066a8:	08006675 	.word	0x08006675
 80066ac:	08006675 	.word	0x08006675
 80066b0:	08006675 	.word	0x08006675
 80066b4:	08006675 	.word	0x08006675
 80066b8:	080067fd 	.word	0x080067fd
 80066bc:	08006725 	.word	0x08006725
 80066c0:	080067b7 	.word	0x080067b7
 80066c4:	08006675 	.word	0x08006675
 80066c8:	08006675 	.word	0x08006675
 80066cc:	0800681f 	.word	0x0800681f
 80066d0:	08006675 	.word	0x08006675
 80066d4:	08006725 	.word	0x08006725
 80066d8:	08006675 	.word	0x08006675
 80066dc:	08006675 	.word	0x08006675
 80066e0:	080067bf 	.word	0x080067bf
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	1d1a      	adds	r2, r3, #4
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	602a      	str	r2, [r5, #0]
 80066ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066f4:	2301      	movs	r3, #1
 80066f6:	e09f      	b.n	8006838 <_printf_i+0x1ec>
 80066f8:	6820      	ldr	r0, [r4, #0]
 80066fa:	682b      	ldr	r3, [r5, #0]
 80066fc:	0607      	lsls	r7, r0, #24
 80066fe:	f103 0104 	add.w	r1, r3, #4
 8006702:	6029      	str	r1, [r5, #0]
 8006704:	d501      	bpl.n	800670a <_printf_i+0xbe>
 8006706:	681e      	ldr	r6, [r3, #0]
 8006708:	e003      	b.n	8006712 <_printf_i+0xc6>
 800670a:	0646      	lsls	r6, r0, #25
 800670c:	d5fb      	bpl.n	8006706 <_printf_i+0xba>
 800670e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006712:	2e00      	cmp	r6, #0
 8006714:	da03      	bge.n	800671e <_printf_i+0xd2>
 8006716:	232d      	movs	r3, #45	; 0x2d
 8006718:	4276      	negs	r6, r6
 800671a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800671e:	485a      	ldr	r0, [pc, #360]	; (8006888 <_printf_i+0x23c>)
 8006720:	230a      	movs	r3, #10
 8006722:	e012      	b.n	800674a <_printf_i+0xfe>
 8006724:	682b      	ldr	r3, [r5, #0]
 8006726:	6820      	ldr	r0, [r4, #0]
 8006728:	1d19      	adds	r1, r3, #4
 800672a:	6029      	str	r1, [r5, #0]
 800672c:	0605      	lsls	r5, r0, #24
 800672e:	d501      	bpl.n	8006734 <_printf_i+0xe8>
 8006730:	681e      	ldr	r6, [r3, #0]
 8006732:	e002      	b.n	800673a <_printf_i+0xee>
 8006734:	0641      	lsls	r1, r0, #25
 8006736:	d5fb      	bpl.n	8006730 <_printf_i+0xe4>
 8006738:	881e      	ldrh	r6, [r3, #0]
 800673a:	4853      	ldr	r0, [pc, #332]	; (8006888 <_printf_i+0x23c>)
 800673c:	2f6f      	cmp	r7, #111	; 0x6f
 800673e:	bf0c      	ite	eq
 8006740:	2308      	moveq	r3, #8
 8006742:	230a      	movne	r3, #10
 8006744:	2100      	movs	r1, #0
 8006746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800674a:	6865      	ldr	r5, [r4, #4]
 800674c:	60a5      	str	r5, [r4, #8]
 800674e:	2d00      	cmp	r5, #0
 8006750:	bfa2      	ittt	ge
 8006752:	6821      	ldrge	r1, [r4, #0]
 8006754:	f021 0104 	bicge.w	r1, r1, #4
 8006758:	6021      	strge	r1, [r4, #0]
 800675a:	b90e      	cbnz	r6, 8006760 <_printf_i+0x114>
 800675c:	2d00      	cmp	r5, #0
 800675e:	d04b      	beq.n	80067f8 <_printf_i+0x1ac>
 8006760:	4615      	mov	r5, r2
 8006762:	fbb6 f1f3 	udiv	r1, r6, r3
 8006766:	fb03 6711 	mls	r7, r3, r1, r6
 800676a:	5dc7      	ldrb	r7, [r0, r7]
 800676c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006770:	4637      	mov	r7, r6
 8006772:	42bb      	cmp	r3, r7
 8006774:	460e      	mov	r6, r1
 8006776:	d9f4      	bls.n	8006762 <_printf_i+0x116>
 8006778:	2b08      	cmp	r3, #8
 800677a:	d10b      	bne.n	8006794 <_printf_i+0x148>
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	07de      	lsls	r6, r3, #31
 8006780:	d508      	bpl.n	8006794 <_printf_i+0x148>
 8006782:	6923      	ldr	r3, [r4, #16]
 8006784:	6861      	ldr	r1, [r4, #4]
 8006786:	4299      	cmp	r1, r3
 8006788:	bfde      	ittt	le
 800678a:	2330      	movle	r3, #48	; 0x30
 800678c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006790:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006794:	1b52      	subs	r2, r2, r5
 8006796:	6122      	str	r2, [r4, #16]
 8006798:	f8cd a000 	str.w	sl, [sp]
 800679c:	464b      	mov	r3, r9
 800679e:	aa03      	add	r2, sp, #12
 80067a0:	4621      	mov	r1, r4
 80067a2:	4640      	mov	r0, r8
 80067a4:	f7ff fee4 	bl	8006570 <_printf_common>
 80067a8:	3001      	adds	r0, #1
 80067aa:	d14a      	bne.n	8006842 <_printf_i+0x1f6>
 80067ac:	f04f 30ff 	mov.w	r0, #4294967295
 80067b0:	b004      	add	sp, #16
 80067b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	f043 0320 	orr.w	r3, r3, #32
 80067bc:	6023      	str	r3, [r4, #0]
 80067be:	4833      	ldr	r0, [pc, #204]	; (800688c <_printf_i+0x240>)
 80067c0:	2778      	movs	r7, #120	; 0x78
 80067c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	6829      	ldr	r1, [r5, #0]
 80067ca:	061f      	lsls	r7, r3, #24
 80067cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80067d0:	d402      	bmi.n	80067d8 <_printf_i+0x18c>
 80067d2:	065f      	lsls	r7, r3, #25
 80067d4:	bf48      	it	mi
 80067d6:	b2b6      	uxthmi	r6, r6
 80067d8:	07df      	lsls	r7, r3, #31
 80067da:	bf48      	it	mi
 80067dc:	f043 0320 	orrmi.w	r3, r3, #32
 80067e0:	6029      	str	r1, [r5, #0]
 80067e2:	bf48      	it	mi
 80067e4:	6023      	strmi	r3, [r4, #0]
 80067e6:	b91e      	cbnz	r6, 80067f0 <_printf_i+0x1a4>
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	f023 0320 	bic.w	r3, r3, #32
 80067ee:	6023      	str	r3, [r4, #0]
 80067f0:	2310      	movs	r3, #16
 80067f2:	e7a7      	b.n	8006744 <_printf_i+0xf8>
 80067f4:	4824      	ldr	r0, [pc, #144]	; (8006888 <_printf_i+0x23c>)
 80067f6:	e7e4      	b.n	80067c2 <_printf_i+0x176>
 80067f8:	4615      	mov	r5, r2
 80067fa:	e7bd      	b.n	8006778 <_printf_i+0x12c>
 80067fc:	682b      	ldr	r3, [r5, #0]
 80067fe:	6826      	ldr	r6, [r4, #0]
 8006800:	6961      	ldr	r1, [r4, #20]
 8006802:	1d18      	adds	r0, r3, #4
 8006804:	6028      	str	r0, [r5, #0]
 8006806:	0635      	lsls	r5, r6, #24
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	d501      	bpl.n	8006810 <_printf_i+0x1c4>
 800680c:	6019      	str	r1, [r3, #0]
 800680e:	e002      	b.n	8006816 <_printf_i+0x1ca>
 8006810:	0670      	lsls	r0, r6, #25
 8006812:	d5fb      	bpl.n	800680c <_printf_i+0x1c0>
 8006814:	8019      	strh	r1, [r3, #0]
 8006816:	2300      	movs	r3, #0
 8006818:	6123      	str	r3, [r4, #16]
 800681a:	4615      	mov	r5, r2
 800681c:	e7bc      	b.n	8006798 <_printf_i+0x14c>
 800681e:	682b      	ldr	r3, [r5, #0]
 8006820:	1d1a      	adds	r2, r3, #4
 8006822:	602a      	str	r2, [r5, #0]
 8006824:	681d      	ldr	r5, [r3, #0]
 8006826:	6862      	ldr	r2, [r4, #4]
 8006828:	2100      	movs	r1, #0
 800682a:	4628      	mov	r0, r5
 800682c:	f7f9 fcf8 	bl	8000220 <memchr>
 8006830:	b108      	cbz	r0, 8006836 <_printf_i+0x1ea>
 8006832:	1b40      	subs	r0, r0, r5
 8006834:	6060      	str	r0, [r4, #4]
 8006836:	6863      	ldr	r3, [r4, #4]
 8006838:	6123      	str	r3, [r4, #16]
 800683a:	2300      	movs	r3, #0
 800683c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006840:	e7aa      	b.n	8006798 <_printf_i+0x14c>
 8006842:	6923      	ldr	r3, [r4, #16]
 8006844:	462a      	mov	r2, r5
 8006846:	4649      	mov	r1, r9
 8006848:	4640      	mov	r0, r8
 800684a:	47d0      	blx	sl
 800684c:	3001      	adds	r0, #1
 800684e:	d0ad      	beq.n	80067ac <_printf_i+0x160>
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	079b      	lsls	r3, r3, #30
 8006854:	d413      	bmi.n	800687e <_printf_i+0x232>
 8006856:	68e0      	ldr	r0, [r4, #12]
 8006858:	9b03      	ldr	r3, [sp, #12]
 800685a:	4298      	cmp	r0, r3
 800685c:	bfb8      	it	lt
 800685e:	4618      	movlt	r0, r3
 8006860:	e7a6      	b.n	80067b0 <_printf_i+0x164>
 8006862:	2301      	movs	r3, #1
 8006864:	4632      	mov	r2, r6
 8006866:	4649      	mov	r1, r9
 8006868:	4640      	mov	r0, r8
 800686a:	47d0      	blx	sl
 800686c:	3001      	adds	r0, #1
 800686e:	d09d      	beq.n	80067ac <_printf_i+0x160>
 8006870:	3501      	adds	r5, #1
 8006872:	68e3      	ldr	r3, [r4, #12]
 8006874:	9903      	ldr	r1, [sp, #12]
 8006876:	1a5b      	subs	r3, r3, r1
 8006878:	42ab      	cmp	r3, r5
 800687a:	dcf2      	bgt.n	8006862 <_printf_i+0x216>
 800687c:	e7eb      	b.n	8006856 <_printf_i+0x20a>
 800687e:	2500      	movs	r5, #0
 8006880:	f104 0619 	add.w	r6, r4, #25
 8006884:	e7f5      	b.n	8006872 <_printf_i+0x226>
 8006886:	bf00      	nop
 8006888:	08006aad 	.word	0x08006aad
 800688c:	08006abe 	.word	0x08006abe

08006890 <memmove>:
 8006890:	4288      	cmp	r0, r1
 8006892:	b510      	push	{r4, lr}
 8006894:	eb01 0402 	add.w	r4, r1, r2
 8006898:	d902      	bls.n	80068a0 <memmove+0x10>
 800689a:	4284      	cmp	r4, r0
 800689c:	4623      	mov	r3, r4
 800689e:	d807      	bhi.n	80068b0 <memmove+0x20>
 80068a0:	1e43      	subs	r3, r0, #1
 80068a2:	42a1      	cmp	r1, r4
 80068a4:	d008      	beq.n	80068b8 <memmove+0x28>
 80068a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068ae:	e7f8      	b.n	80068a2 <memmove+0x12>
 80068b0:	4402      	add	r2, r0
 80068b2:	4601      	mov	r1, r0
 80068b4:	428a      	cmp	r2, r1
 80068b6:	d100      	bne.n	80068ba <memmove+0x2a>
 80068b8:	bd10      	pop	{r4, pc}
 80068ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068c2:	e7f7      	b.n	80068b4 <memmove+0x24>

080068c4 <_sbrk_r>:
 80068c4:	b538      	push	{r3, r4, r5, lr}
 80068c6:	4d06      	ldr	r5, [pc, #24]	; (80068e0 <_sbrk_r+0x1c>)
 80068c8:	2300      	movs	r3, #0
 80068ca:	4604      	mov	r4, r0
 80068cc:	4608      	mov	r0, r1
 80068ce:	602b      	str	r3, [r5, #0]
 80068d0:	f7fa f94a 	bl	8000b68 <_sbrk>
 80068d4:	1c43      	adds	r3, r0, #1
 80068d6:	d102      	bne.n	80068de <_sbrk_r+0x1a>
 80068d8:	682b      	ldr	r3, [r5, #0]
 80068da:	b103      	cbz	r3, 80068de <_sbrk_r+0x1a>
 80068dc:	6023      	str	r3, [r4, #0]
 80068de:	bd38      	pop	{r3, r4, r5, pc}
 80068e0:	20004c2c 	.word	0x20004c2c

080068e4 <_realloc_r>:
 80068e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e8:	4680      	mov	r8, r0
 80068ea:	4614      	mov	r4, r2
 80068ec:	460e      	mov	r6, r1
 80068ee:	b921      	cbnz	r1, 80068fa <_realloc_r+0x16>
 80068f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068f4:	4611      	mov	r1, r2
 80068f6:	f7ff bc57 	b.w	80061a8 <_malloc_r>
 80068fa:	b92a      	cbnz	r2, 8006908 <_realloc_r+0x24>
 80068fc:	f7ff fbe8 	bl	80060d0 <_free_r>
 8006900:	4625      	mov	r5, r4
 8006902:	4628      	mov	r0, r5
 8006904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006908:	f000 f81b 	bl	8006942 <_malloc_usable_size_r>
 800690c:	4284      	cmp	r4, r0
 800690e:	4607      	mov	r7, r0
 8006910:	d802      	bhi.n	8006918 <_realloc_r+0x34>
 8006912:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006916:	d812      	bhi.n	800693e <_realloc_r+0x5a>
 8006918:	4621      	mov	r1, r4
 800691a:	4640      	mov	r0, r8
 800691c:	f7ff fc44 	bl	80061a8 <_malloc_r>
 8006920:	4605      	mov	r5, r0
 8006922:	2800      	cmp	r0, #0
 8006924:	d0ed      	beq.n	8006902 <_realloc_r+0x1e>
 8006926:	42bc      	cmp	r4, r7
 8006928:	4622      	mov	r2, r4
 800692a:	4631      	mov	r1, r6
 800692c:	bf28      	it	cs
 800692e:	463a      	movcs	r2, r7
 8006930:	f7ff fbc0 	bl	80060b4 <memcpy>
 8006934:	4631      	mov	r1, r6
 8006936:	4640      	mov	r0, r8
 8006938:	f7ff fbca 	bl	80060d0 <_free_r>
 800693c:	e7e1      	b.n	8006902 <_realloc_r+0x1e>
 800693e:	4635      	mov	r5, r6
 8006940:	e7df      	b.n	8006902 <_realloc_r+0x1e>

08006942 <_malloc_usable_size_r>:
 8006942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006946:	1f18      	subs	r0, r3, #4
 8006948:	2b00      	cmp	r3, #0
 800694a:	bfbc      	itt	lt
 800694c:	580b      	ldrlt	r3, [r1, r0]
 800694e:	18c0      	addlt	r0, r0, r3
 8006950:	4770      	bx	lr
	...

08006954 <_init>:
 8006954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006956:	bf00      	nop
 8006958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800695a:	bc08      	pop	{r3}
 800695c:	469e      	mov	lr, r3
 800695e:	4770      	bx	lr

08006960 <_fini>:
 8006960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006962:	bf00      	nop
 8006964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006966:	bc08      	pop	{r3}
 8006968:	469e      	mov	lr, r3
 800696a:	4770      	bx	lr
