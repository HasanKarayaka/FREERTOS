
02_FreeRTOS_CAN_BUS_GTB6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c98  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004e68  08004e68  00014e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f20  08004f20  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004f20  08004f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f28  08004f28  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f28  08004f28  00014f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f2c  08004f2c  00014f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a0c  20000010  08004f40  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a1c  08004f40  00024a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000faba  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029b4  00000000  00000000  0002fb3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  000324f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a6e  00000000  00000000  000332c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000298a  00000000  00000000  00033d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f826  00000000  00000000  000366c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1f10  00000000  00000000  00045ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003898  00000000  00000000  00117df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0011b690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e50 	.word	0x08004e50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004e50 	.word	0x08004e50

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 faea 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f89e 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f93e 	bl	8000798 <MX_GPIO_Init>
  MX_CAN1_Init();
 800051c:	f000 f906 	bl	800072c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000520:	483e      	ldr	r0, [pc, #248]	; (800061c <main+0x110>)
 8000522:	f000 fd2f 	bl	8000f84 <HAL_CAN_Start>

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000526:	2102      	movs	r1, #2
 8000528:	483c      	ldr	r0, [pc, #240]	; (800061c <main+0x110>)
 800052a:	f000 fe4a 	bl	80011c2 <HAL_CAN_ActivateNotification>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <main+0x2c>
 	  {
 	    Error_Handler();
 8000534:	f000 f9fe 	bl	8000934 <Error_Handler>
 	  }
 	  sFilterConfig.FilterBank = 0;
 8000538:	4b39      	ldr	r3, [pc, #228]	; (8000620 <main+0x114>)
 800053a:	2200      	movs	r2, #0
 800053c:	615a      	str	r2, [r3, #20]
 	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800053e:	4b38      	ldr	r3, [pc, #224]	; (8000620 <main+0x114>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
 	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000544:	4b36      	ldr	r3, [pc, #216]	; (8000620 <main+0x114>)
 8000546:	2201      	movs	r2, #1
 8000548:	61da      	str	r2, [r3, #28]
 	  sFilterConfig.FilterIdHigh = 0x0000;
 800054a:	4b35      	ldr	r3, [pc, #212]	; (8000620 <main+0x114>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 	 sFilterConfig.FilterIdLow = 0x0000;
 8000550:	4b33      	ldr	r3, [pc, #204]	; (8000620 <main+0x114>)
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
 	  sFilterConfig.FilterMaskIdHigh =0x0000;
 8000556:	4b32      	ldr	r3, [pc, #200]	; (8000620 <main+0x114>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
 	  sFilterConfig.FilterMaskIdLow = 0x0000;
 800055c:	4b30      	ldr	r3, [pc, #192]	; (8000620 <main+0x114>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
 	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000562:	4b2f      	ldr	r3, [pc, #188]	; (8000620 <main+0x114>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
 	  sFilterConfig.FilterActivation = ENABLE;
 8000568:	4b2d      	ldr	r3, [pc, #180]	; (8000620 <main+0x114>)
 800056a:	2201      	movs	r2, #1
 800056c:	621a      	str	r2, [r3, #32]
 	  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800056e:	492c      	ldr	r1, [pc, #176]	; (8000620 <main+0x114>)
 8000570:	482a      	ldr	r0, [pc, #168]	; (800061c <main+0x110>)
 8000572:	f000 fc27 	bl	8000dc4 <HAL_CAN_ConfigFilter>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <main+0x74>
 	  {
 	    Error_Handler();
 800057c:	f000 f9da 	bl	8000934 <Error_Handler>
 	  }

 	TxTransmitter.StdId=0x000;
 8000580:	4b28      	ldr	r3, [pc, #160]	; (8000624 <main+0x118>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 	TxTransmitter.DLC=8;
 8000586:	4b27      	ldr	r3, [pc, #156]	; (8000624 <main+0x118>)
 8000588:	2208      	movs	r2, #8
 800058a:	611a      	str	r2, [r3, #16]
 	TxTransmitter.IDE=CAN_ID_STD;
 800058c:	4b25      	ldr	r3, [pc, #148]	; (8000624 <main+0x118>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
 	TxTransmitter.RTR = CAN_RTR_DATA;
 8000592:	4b24      	ldr	r3, [pc, #144]	; (8000624 <main+0x118>)
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]

 		TxData[0]=0x23;
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <main+0x11c>)
 800059a:	2223      	movs	r2, #35	; 0x23
 800059c:	701a      	strb	r2, [r3, #0]
 		TxData[1]=0x00;
 800059e:	4b22      	ldr	r3, [pc, #136]	; (8000628 <main+0x11c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	705a      	strb	r2, [r3, #1]
 		TxData[2]=0x20;
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <main+0x11c>)
 80005a6:	2220      	movs	r2, #32
 80005a8:	709a      	strb	r2, [r3, #2]
 		TxData[3]=0x01;
 80005aa:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <main+0x11c>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	70da      	strb	r2, [r3, #3]
 		TxData[4]=0x34;//0x34;
 80005b0:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <main+0x11c>)
 80005b2:	2234      	movs	r2, #52	; 0x34
 80005b4:	711a      	strb	r2, [r3, #4]
 		TxData[5]=0x00;//0xFE;
 80005b6:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <main+0x11c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	715a      	strb	r2, [r3, #5]
 		TxData[6]=0x00;
 80005bc:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <main+0x11c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	719a      	strb	r2, [r3, #6]
 		TxData[7]=0x00;
 80005c2:	4b19      	ldr	r3, [pc, #100]	; (8000628 <main+0x11c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	71da      	strb	r2, [r3, #7]

 		RxReceiver.StdId=0x000;
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <main+0x120>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 		RxReceiver.DLC=8;
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <main+0x120>)
 80005d0:	2208      	movs	r2, #8
 80005d2:	611a      	str	r2, [r3, #16]
 		RxReceiver.IDE=CAN_ID_STD;
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <main+0x120>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
 		RxReceiver.RTR=CAN_RTR_DATA;
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <main+0x120>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e0:	f001 feaa 	bl	8002338 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <main+0x124>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4812      	ldr	r0, [pc, #72]	; (8000634 <main+0x128>)
 80005ea:	f001 feef 	bl	80023cc <osThreadNew>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a11      	ldr	r2, [pc, #68]	; (8000638 <main+0x12c>)
 80005f2:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80005f4:	4a11      	ldr	r2, [pc, #68]	; (800063c <main+0x130>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	4811      	ldr	r0, [pc, #68]	; (8000640 <main+0x134>)
 80005fa:	f001 fee7 	bl	80023cc <osThreadNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a10      	ldr	r2, [pc, #64]	; (8000644 <main+0x138>)
 8000602:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000604:	4a10      	ldr	r2, [pc, #64]	; (8000648 <main+0x13c>)
 8000606:	2100      	movs	r1, #0
 8000608:	4810      	ldr	r0, [pc, #64]	; (800064c <main+0x140>)
 800060a:	f001 fedf 	bl	80023cc <osThreadNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a0f      	ldr	r2, [pc, #60]	; (8000650 <main+0x144>)
 8000612:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000614:	f001 feb4 	bl	8002380 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x10c>
 800061a:	bf00      	nop
 800061c:	20000054 	.word	0x20000054
 8000620:	2000002c 	.word	0x2000002c
 8000624:	20000088 	.word	0x20000088
 8000628:	200000bc 	.word	0x200000bc
 800062c:	200000a0 	.word	0x200000a0
 8000630:	08004ea4 	.word	0x08004ea4
 8000634:	08000871 	.word	0x08000871
 8000638:	2000007c 	.word	0x2000007c
 800063c:	08004ec8 	.word	0x08004ec8
 8000640:	0800089d 	.word	0x0800089d
 8000644:	20000080 	.word	0x20000080
 8000648:	08004eec 	.word	0x08004eec
 800064c:	080008e9 	.word	0x080008e9
 8000650:	20000084 	.word	0x20000084

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	2234      	movs	r2, #52	; 0x34
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f004 fbba 	bl	8004ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b29      	ldr	r3, [pc, #164]	; (8000724 <SystemClock_Config+0xd0>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a28      	ldr	r2, [pc, #160]	; (8000724 <SystemClock_Config+0xd0>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b26      	ldr	r3, [pc, #152]	; (8000724 <SystemClock_Config+0xd0>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	4b23      	ldr	r3, [pc, #140]	; (8000728 <SystemClock_Config+0xd4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <SystemClock_Config+0xd4>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <SystemClock_Config+0xd4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c8:	2308      	movs	r3, #8
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 80006cc:	2340      	movs	r3, #64	; 0x40
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fb57 	bl	8001d94 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006ec:	f000 f922 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80006f8:	2390      	movs	r3, #144	; 0x90
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f001 f82c 	bl	8001768 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000716:	f000 f90d 	bl	8000934 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	; 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_CAN1_Init+0x64>)
 8000732:	4a18      	ldr	r2, [pc, #96]	; (8000794 <MX_CAN1_Init+0x68>)
 8000734:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_CAN1_Init+0x64>)
 8000738:	2210      	movs	r2, #16
 800073a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_CAN1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_CAN1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_CAN1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_CAN1_Init+0x64>)
 8000750:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000754:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_CAN1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_CAN1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_CAN1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_CAN1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_CAN1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_CAN1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_CAN1_Init+0x64>)
 800077c:	f000 fa26 	bl	8000bcc <HAL_CAN_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000786:	f000 f8d5 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000054 	.word	0x20000054
 8000794:	40006400 	.word	0x40006400

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <MX_GPIO_Init+0xcc>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a2b      	ldr	r2, [pc, #172]	; (8000864 <MX_GPIO_Init+0xcc>)
 80007b8:	f043 0320 	orr.w	r3, r3, #32
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b29      	ldr	r3, [pc, #164]	; (8000864 <MX_GPIO_Init+0xcc>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0320 	and.w	r3, r3, #32
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b25      	ldr	r3, [pc, #148]	; (8000864 <MX_GPIO_Init+0xcc>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a24      	ldr	r2, [pc, #144]	; (8000864 <MX_GPIO_Init+0xcc>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <MX_GPIO_Init+0xcc>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MX_GPIO_Init+0xcc>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a1d      	ldr	r2, [pc, #116]	; (8000864 <MX_GPIO_Init+0xcc>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_GPIO_Init+0xcc>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_GPIO_Init+0xcc>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a16      	ldr	r2, [pc, #88]	; (8000864 <MX_GPIO_Init+0xcc>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_GPIO_Init+0xcc>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2107      	movs	r1, #7
 8000822:	4811      	ldr	r0, [pc, #68]	; (8000868 <MX_GPIO_Init+0xd0>)
 8000824:	f000 ff86 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000828:	2307      	movs	r3, #7
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	480a      	ldr	r0, [pc, #40]	; (8000868 <MX_GPIO_Init+0xd0>)
 8000840:	f000 fdcc 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000844:	230f      	movs	r3, #15
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_GPIO_Init+0xd4>)
 8000858:	f000 fdc0 	bl	80013dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	; 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40021400 	.word	0x40021400
 800086c:	40020000 	.word	0x40020000

08000870 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_CAN_AddTxMessage(&hcan1, &TxTransmitter, TxData, &TxMailbox);
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <StartDefaultTask+0x1c>)
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <StartDefaultTask+0x20>)
 800087c:	4905      	ldr	r1, [pc, #20]	; (8000894 <StartDefaultTask+0x24>)
 800087e:	4806      	ldr	r0, [pc, #24]	; (8000898 <StartDefaultTask+0x28>)
 8000880:	f000 fbc4 	bl	800100c <HAL_CAN_AddTxMessage>


    osDelay(1);
 8000884:	2001      	movs	r0, #1
 8000886:	f001 fe33 	bl	80024f0 <osDelay>
	HAL_CAN_AddTxMessage(&hcan1, &TxTransmitter, TxData, &TxMailbox);
 800088a:	e7f5      	b.n	8000878 <StartDefaultTask+0x8>
 800088c:	200000c4 	.word	0x200000c4
 8000890:	200000bc 	.word	0x200000bc
 8000894:	20000088 	.word	0x20000088
 8000898:	20000054 	.word	0x20000054

0800089c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET)
 80008a4:	2102      	movs	r1, #2
 80008a6:	480e      	ldr	r0, [pc, #56]	; (80008e0 <StartTask02+0x44>)
 80008a8:	f000 ff2c 	bl	8001704 <HAL_GPIO_ReadPin>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d105      	bne.n	80008be <StartTask02+0x22>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	2101      	movs	r1, #1
 80008b6:	480b      	ldr	r0, [pc, #44]	; (80008e4 <StartTask02+0x48>)
 80008b8:	f000 ff3c 	bl	8001734 <HAL_GPIO_WritePin>
 80008bc:	e00b      	b.n	80008d6 <StartTask02+0x3a>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)== GPIO_PIN_RESET)
 80008be:	2102      	movs	r1, #2
 80008c0:	4807      	ldr	r0, [pc, #28]	; (80008e0 <StartTask02+0x44>)
 80008c2:	f000 ff1f 	bl	8001704 <HAL_GPIO_ReadPin>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d104      	bne.n	80008d6 <StartTask02+0x3a>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2101      	movs	r1, #1
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <StartTask02+0x48>)
 80008d2:	f000 ff2f 	bl	8001734 <HAL_GPIO_WritePin>
	  }
    osDelay(1);
 80008d6:	2001      	movs	r0, #1
 80008d8:	f001 fe0a 	bl	80024f0 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET)
 80008dc:	e7e2      	b.n	80008a4 <StartTask02+0x8>
 80008de:	bf00      	nop
 80008e0:	40020000 	.word	0x40020000
 80008e4:	40021400 	.word	0x40021400

080008e8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 80008f0:	2102      	movs	r1, #2
 80008f2:	480e      	ldr	r0, [pc, #56]	; (800092c <StartTask03+0x44>)
 80008f4:	f000 ff06 	bl	8001704 <HAL_GPIO_ReadPin>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d105      	bne.n	800090a <StartTask03+0x22>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2102      	movs	r1, #2
 8000902:	480b      	ldr	r0, [pc, #44]	; (8000930 <StartTask03+0x48>)
 8000904:	f000 ff16 	bl	8001734 <HAL_GPIO_WritePin>
 8000908:	e00b      	b.n	8000922 <StartTask03+0x3a>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET)
 800090a:	2102      	movs	r1, #2
 800090c:	4807      	ldr	r0, [pc, #28]	; (800092c <StartTask03+0x44>)
 800090e:	f000 fef9 	bl	8001704 <HAL_GPIO_ReadPin>
 8000912:	4603      	mov	r3, r0
 8000914:	2b01      	cmp	r3, #1
 8000916:	d104      	bne.n	8000922 <StartTask03+0x3a>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2102      	movs	r1, #2
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <StartTask03+0x48>)
 800091e:	f000 ff09 	bl	8001734 <HAL_GPIO_WritePin>
	  }
    osDelay(1);
 8000922:	2001      	movs	r0, #1
 8000924:	f001 fde4 	bl	80024f0 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 8000928:	e7e2      	b.n	80008f0 <StartTask03+0x8>
 800092a:	bf00      	nop
 800092c:	40020000 	.word	0x40020000
 8000930:	40021400 	.word	0x40021400

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_MspInit+0x54>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a11      	ldr	r2, [pc, #68]	; (8000994 <HAL_MspInit+0x54>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <HAL_MspInit+0x54>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <HAL_MspInit+0x54>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <HAL_MspInit+0x54>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_MspInit+0x54>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	210f      	movs	r1, #15
 8000982:	f06f 0001 	mvn.w	r0, #1
 8000986:	f000 fd00 	bl	800138a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <HAL_CAN_MspInit+0x84>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d12c      	bne.n	8000a14 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_CAN_MspInit+0x88>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <HAL_CAN_MspInit+0x88>)
 80009c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_CAN_MspInit+0x88>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_CAN_MspInit+0x88>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <HAL_CAN_MspInit+0x88>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_CAN_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a04:	2309      	movs	r3, #9
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <HAL_CAN_MspInit+0x8c>)
 8000a10:	f000 fce4 	bl	80013dc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	; 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40006400 	.word	0x40006400
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020400 	.word	0x40020400

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <NMI_Handler+0x4>

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f898 	bl	8000b8c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a5c:	f003 f956 	bl	8003d0c <xTaskGetSchedulerState>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d001      	beq.n	8000a6a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a66:	f003 ff3f 	bl	80048e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <SystemInit+0x20>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <SystemInit+0x20>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000acc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a9a:	490e      	ldr	r1, [pc, #56]	; (8000ad4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ab0:	4c0b      	ldr	r4, [pc, #44]	; (8000ae0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000abe:	f7ff ffd7 	bl	8000a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f004 f993 	bl	8004dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f7ff fd21 	bl	800050c <main>
  bx  lr    
 8000aca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ad8:	08004f30 	.word	0x08004f30
  ldr r2, =_sbss
 8000adc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ae0:	20004a1c 	.word	0x20004a1c

08000ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <HAL_Init+0x40>)
 8000af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_Init+0x40>)
 8000afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_Init+0x40>)
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 fc2f 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	200f      	movs	r0, #15
 8000b18:	f000 f808 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff ff10 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023c00 	.word	0x40023c00

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 fc39 	bl	80013c2 <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f000 fc0f 	bl	800138a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	200000c8 	.word	0x200000c8

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	200000c8 	.word	0x200000c8

08000bcc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d101      	bne.n	8000bde <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e0ed      	b.n	8000dba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d102      	bne.n	8000bf0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fed4 	bl	8000998 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f042 0201 	orr.w	r2, r2, #1
 8000bfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c00:	f7ff ffd8 	bl	8000bb4 <HAL_GetTick>
 8000c04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c06:	e012      	b.n	8000c2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c08:	f7ff ffd4 	bl	8000bb4 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	2b0a      	cmp	r3, #10
 8000c14:	d90b      	bls.n	8000c2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2205      	movs	r2, #5
 8000c26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e0c5      	b.n	8000dba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0e5      	beq.n	8000c08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f022 0202 	bic.w	r2, r2, #2
 8000c4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c4c:	f7ff ffb2 	bl	8000bb4 <HAL_GetTick>
 8000c50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c52:	e012      	b.n	8000c7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c54:	f7ff ffae 	bl	8000bb4 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	2b0a      	cmp	r3, #10
 8000c60:	d90b      	bls.n	8000c7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2205      	movs	r2, #5
 8000c72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e09f      	b.n	8000dba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1e5      	bne.n	8000c54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7e1b      	ldrb	r3, [r3, #24]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d108      	bne.n	8000ca2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	e007      	b.n	8000cb2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7e5b      	ldrb	r3, [r3, #25]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d108      	bne.n	8000ccc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	e007      	b.n	8000cdc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	7e9b      	ldrb	r3, [r3, #26]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d108      	bne.n	8000cf6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f042 0220 	orr.w	r2, r2, #32
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	e007      	b.n	8000d06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f022 0220 	bic.w	r2, r2, #32
 8000d04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	7edb      	ldrb	r3, [r3, #27]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d108      	bne.n	8000d20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f022 0210 	bic.w	r2, r2, #16
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	e007      	b.n	8000d30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f042 0210 	orr.w	r2, r2, #16
 8000d2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	7f1b      	ldrb	r3, [r3, #28]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d108      	bne.n	8000d4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f042 0208 	orr.w	r2, r2, #8
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	e007      	b.n	8000d5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 0208 	bic.w	r2, r2, #8
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	7f5b      	ldrb	r3, [r3, #29]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d108      	bne.n	8000d74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f042 0204 	orr.w	r2, r2, #4
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	e007      	b.n	8000d84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f022 0204 	bic.w	r2, r2, #4
 8000d82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	431a      	orrs	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	ea42 0103 	orr.w	r1, r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	1e5a      	subs	r2, r3, #1
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	430a      	orrs	r2, r1
 8000da8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2201      	movs	r2, #1
 8000db4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dda:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ddc:	7cfb      	ldrb	r3, [r7, #19]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d003      	beq.n	8000dea <HAL_CAN_ConfigFilter+0x26>
 8000de2:	7cfb      	ldrb	r3, [r7, #19]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	f040 80be 	bne.w	8000f66 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000dea:	4b65      	ldr	r3, [pc, #404]	; (8000f80 <HAL_CAN_ConfigFilter+0x1bc>)
 8000dec:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000df4:	f043 0201 	orr.w	r2, r3, #1
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e04:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	f003 031f 	and.w	r3, r3, #31
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	401a      	ands	r2, r3
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d123      	bne.n	8000e94 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e6e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	3248      	adds	r2, #72	; 0x48
 8000e74:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e88:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e8a:	6979      	ldr	r1, [r7, #20]
 8000e8c:	3348      	adds	r3, #72	; 0x48
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	440b      	add	r3, r1
 8000e92:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d122      	bne.n	8000ee2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ebc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3248      	adds	r2, #72	; 0x48
 8000ec2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ed6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ed8:	6979      	ldr	r1, [r7, #20]
 8000eda:	3348      	adds	r3, #72	; 0x48
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	440b      	add	r3, r1
 8000ee0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d109      	bne.n	8000efe <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000efc:	e007      	b.n	8000f0e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	431a      	orrs	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d109      	bne.n	8000f2a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	401a      	ands	r2, r3
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000f28:	e007      	b.n	8000f3a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	431a      	orrs	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d107      	bne.n	8000f52 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f58:	f023 0201 	bic.w	r2, r3, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e006      	b.n	8000f74 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
  }
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	371c      	adds	r7, #28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	40006400 	.word	0x40006400

08000f84 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d12e      	bne.n	8000ff6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0201 	bic.w	r2, r2, #1
 8000fae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000fb0:	f7ff fe00 	bl	8000bb4 <HAL_GetTick>
 8000fb4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fb6:	e012      	b.n	8000fde <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fb8:	f7ff fdfc 	bl	8000bb4 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b0a      	cmp	r3, #10
 8000fc4:	d90b      	bls.n	8000fde <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2205      	movs	r2, #5
 8000fd6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e012      	b.n	8001004 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1e5      	bne.n	8000fb8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e006      	b.n	8001004 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
  }
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001020:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800102a:	7ffb      	ldrb	r3, [r7, #31]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d003      	beq.n	8001038 <HAL_CAN_AddTxMessage+0x2c>
 8001030:	7ffb      	ldrb	r3, [r7, #31]
 8001032:	2b02      	cmp	r3, #2
 8001034:	f040 80b8 	bne.w	80011a8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10a      	bne.n	8001058 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001048:	2b00      	cmp	r3, #0
 800104a:	d105      	bne.n	8001058 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 80a0 	beq.w	8001198 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	0e1b      	lsrs	r3, r3, #24
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d907      	bls.n	8001078 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e09e      	b.n	80011b6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001078:	2201      	movs	r2, #1
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	409a      	lsls	r2, r3
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10d      	bne.n	80010a6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001094:	68f9      	ldr	r1, [r7, #12]
 8001096:	6809      	ldr	r1, [r1, #0]
 8001098:	431a      	orrs	r2, r3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	3318      	adds	r3, #24
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	440b      	add	r3, r1
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	e00f      	b.n	80010c6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010b0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010b6:	68f9      	ldr	r1, [r7, #12]
 80010b8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80010ba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3318      	adds	r3, #24
 80010c0:	011b      	lsls	r3, r3, #4
 80010c2:	440b      	add	r3, r1
 80010c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6819      	ldr	r1, [r3, #0]
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	691a      	ldr	r2, [r3, #16]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3318      	adds	r3, #24
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	440b      	add	r3, r1
 80010d6:	3304      	adds	r3, #4
 80010d8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	7d1b      	ldrb	r3, [r3, #20]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d111      	bne.n	8001106 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3318      	adds	r3, #24
 80010ea:	011b      	lsls	r3, r3, #4
 80010ec:	4413      	add	r3, r2
 80010ee:	3304      	adds	r3, #4
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	6811      	ldr	r1, [r2, #0]
 80010f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3318      	adds	r3, #24
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	440b      	add	r3, r1
 8001102:	3304      	adds	r3, #4
 8001104:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3307      	adds	r3, #7
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	061a      	lsls	r2, r3, #24
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3306      	adds	r3, #6
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	041b      	lsls	r3, r3, #16
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3305      	adds	r3, #5
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	4313      	orrs	r3, r2
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	3204      	adds	r2, #4
 8001126:	7812      	ldrb	r2, [r2, #0]
 8001128:	4610      	mov	r0, r2
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	6811      	ldr	r1, [r2, #0]
 800112e:	ea43 0200 	orr.w	r2, r3, r0
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	011b      	lsls	r3, r3, #4
 8001136:	440b      	add	r3, r1
 8001138:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800113c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3303      	adds	r3, #3
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	061a      	lsls	r2, r3, #24
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3302      	adds	r3, #2
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	041b      	lsls	r3, r3, #16
 800114e:	431a      	orrs	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3301      	adds	r3, #1
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	4313      	orrs	r3, r2
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	7812      	ldrb	r2, [r2, #0]
 800115e:	4610      	mov	r0, r2
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	6811      	ldr	r1, [r2, #0]
 8001164:	ea43 0200 	orr.w	r2, r3, r0
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	440b      	add	r3, r1
 800116e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001172:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	3318      	adds	r3, #24
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	4413      	add	r3, r2
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	6811      	ldr	r1, [r2, #0]
 8001186:	f043 0201 	orr.w	r2, r3, #1
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	3318      	adds	r3, #24
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	440b      	add	r3, r1
 8001192:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	e00e      	b.n	80011b6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e006      	b.n	80011b6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
  }
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b085      	sub	sp, #20
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d002      	beq.n	80011e0 <HAL_CAN_ActivateNotification+0x1e>
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d109      	bne.n	80011f4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6959      	ldr	r1, [r3, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	430a      	orrs	r2, r1
 80011ee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e006      	b.n	8001202 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
  }
}
 8001202:	4618      	mov	r0, r3
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001242:	4a04      	ldr	r2, [pc, #16]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60d3      	str	r3, [r2, #12]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <__NVIC_GetPriorityGrouping+0x18>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 0307 	and.w	r3, r3, #7
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	; (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
         );
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001340:	d301      	bcc.n	8001346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001342:	2301      	movs	r3, #1
 8001344:	e00f      	b.n	8001366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <SysTick_Config+0x40>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134e:	210f      	movs	r1, #15
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f7ff ff8e 	bl	8001274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <SysTick_Config+0x40>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <SysTick_Config+0x40>)
 8001360:	2207      	movs	r2, #7
 8001362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	e000e010 	.word	0xe000e010

08001374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff47 	bl	8001210 <__NVIC_SetPriorityGrouping>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800139c:	f7ff ff5c 	bl	8001258 <__NVIC_GetPriorityGrouping>
 80013a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	6978      	ldr	r0, [r7, #20]
 80013a8:	f7ff ff8e 	bl	80012c8 <NVIC_EncodePriority>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff5d 	bl	8001274 <__NVIC_SetPriority>
}
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffb0 	bl	8001330 <SysTick_Config>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
 80013f6:	e165      	b.n	80016c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013f8:	2201      	movs	r2, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	429a      	cmp	r2, r3
 8001412:	f040 8154 	bne.w	80016be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	2b01      	cmp	r3, #1
 8001420:	d005      	beq.n	800142e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142a:	2b02      	cmp	r3, #2
 800142c:	d130      	bne.n	8001490 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	2203      	movs	r2, #3
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	68da      	ldr	r2, [r3, #12]
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001464:	2201      	movs	r2, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	091b      	lsrs	r3, r3, #4
 800147a:	f003 0201 	and.w	r2, r3, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b03      	cmp	r3, #3
 800149a:	d017      	beq.n	80014cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d123      	bne.n	8001520 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	08da      	lsrs	r2, r3, #3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3208      	adds	r2, #8
 80014e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	220f      	movs	r2, #15
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	691a      	ldr	r2, [r3, #16]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	08da      	lsrs	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3208      	adds	r2, #8
 800151a:	69b9      	ldr	r1, [r7, #24]
 800151c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0203 	and.w	r2, r3, #3
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 80ae 	beq.w	80016be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b5d      	ldr	r3, [pc, #372]	; (80016dc <HAL_GPIO_Init+0x300>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	4a5c      	ldr	r2, [pc, #368]	; (80016dc <HAL_GPIO_Init+0x300>)
 800156c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001570:	6453      	str	r3, [r2, #68]	; 0x44
 8001572:	4b5a      	ldr	r3, [pc, #360]	; (80016dc <HAL_GPIO_Init+0x300>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800157e:	4a58      	ldr	r2, [pc, #352]	; (80016e0 <HAL_GPIO_Init+0x304>)
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	3302      	adds	r3, #2
 8001586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	220f      	movs	r2, #15
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4f      	ldr	r2, [pc, #316]	; (80016e4 <HAL_GPIO_Init+0x308>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d025      	beq.n	80015f6 <HAL_GPIO_Init+0x21a>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4e      	ldr	r2, [pc, #312]	; (80016e8 <HAL_GPIO_Init+0x30c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d01f      	beq.n	80015f2 <HAL_GPIO_Init+0x216>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4d      	ldr	r2, [pc, #308]	; (80016ec <HAL_GPIO_Init+0x310>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d019      	beq.n	80015ee <HAL_GPIO_Init+0x212>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4c      	ldr	r2, [pc, #304]	; (80016f0 <HAL_GPIO_Init+0x314>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d013      	beq.n	80015ea <HAL_GPIO_Init+0x20e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4b      	ldr	r2, [pc, #300]	; (80016f4 <HAL_GPIO_Init+0x318>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d00d      	beq.n	80015e6 <HAL_GPIO_Init+0x20a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4a      	ldr	r2, [pc, #296]	; (80016f8 <HAL_GPIO_Init+0x31c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d007      	beq.n	80015e2 <HAL_GPIO_Init+0x206>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a49      	ldr	r2, [pc, #292]	; (80016fc <HAL_GPIO_Init+0x320>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d101      	bne.n	80015de <HAL_GPIO_Init+0x202>
 80015da:	2306      	movs	r3, #6
 80015dc:	e00c      	b.n	80015f8 <HAL_GPIO_Init+0x21c>
 80015de:	2307      	movs	r3, #7
 80015e0:	e00a      	b.n	80015f8 <HAL_GPIO_Init+0x21c>
 80015e2:	2305      	movs	r3, #5
 80015e4:	e008      	b.n	80015f8 <HAL_GPIO_Init+0x21c>
 80015e6:	2304      	movs	r3, #4
 80015e8:	e006      	b.n	80015f8 <HAL_GPIO_Init+0x21c>
 80015ea:	2303      	movs	r3, #3
 80015ec:	e004      	b.n	80015f8 <HAL_GPIO_Init+0x21c>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e002      	b.n	80015f8 <HAL_GPIO_Init+0x21c>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_GPIO_Init+0x21c>
 80015f6:	2300      	movs	r3, #0
 80015f8:	69fa      	ldr	r2, [r7, #28]
 80015fa:	f002 0203 	and.w	r2, r2, #3
 80015fe:	0092      	lsls	r2, r2, #2
 8001600:	4093      	lsls	r3, r2
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001608:	4935      	ldr	r1, [pc, #212]	; (80016e0 <HAL_GPIO_Init+0x304>)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	3302      	adds	r3, #2
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001616:	4b3a      	ldr	r3, [pc, #232]	; (8001700 <HAL_GPIO_Init+0x324>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800163a:	4a31      	ldr	r2, [pc, #196]	; (8001700 <HAL_GPIO_Init+0x324>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001640:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <HAL_GPIO_Init+0x324>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001664:	4a26      	ldr	r2, [pc, #152]	; (8001700 <HAL_GPIO_Init+0x324>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800166a:	4b25      	ldr	r3, [pc, #148]	; (8001700 <HAL_GPIO_Init+0x324>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800168e:	4a1c      	ldr	r2, [pc, #112]	; (8001700 <HAL_GPIO_Init+0x324>)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <HAL_GPIO_Init+0x324>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016b8:	4a11      	ldr	r2, [pc, #68]	; (8001700 <HAL_GPIO_Init+0x324>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3301      	adds	r3, #1
 80016c2:	61fb      	str	r3, [r7, #28]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	2b0f      	cmp	r3, #15
 80016c8:	f67f ae96 	bls.w	80013f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3724      	adds	r7, #36	; 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40013800 	.word	0x40013800
 80016e4:	40020000 	.word	0x40020000
 80016e8:	40020400 	.word	0x40020400
 80016ec:	40020800 	.word	0x40020800
 80016f0:	40020c00 	.word	0x40020c00
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40021400 	.word	0x40021400
 80016fc:	40021800 	.word	0x40021800
 8001700:	40013c00 	.word	0x40013c00

08001704 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691a      	ldr	r2, [r3, #16]
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	4013      	ands	r3, r2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
 8001720:	e001      	b.n	8001726 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001744:	787b      	ldrb	r3, [r7, #1]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800174a:	887a      	ldrh	r2, [r7, #2]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001750:	e003      	b.n	800175a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	041a      	lsls	r2, r3, #16
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	619a      	str	r2, [r3, #24]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0cc      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800177c:	4b68      	ldr	r3, [pc, #416]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d90c      	bls.n	80017a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b65      	ldr	r3, [pc, #404]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b63      	ldr	r3, [pc, #396]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0b8      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017bc:	4b59      	ldr	r3, [pc, #356]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a58      	ldr	r2, [pc, #352]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a52      	ldr	r2, [pc, #328]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	494d      	ldr	r1, [pc, #308]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d044      	beq.n	8001888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d119      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e07f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d003      	beq.n	8001826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001822:	2b03      	cmp	r3, #3
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e06f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001836:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e067      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f023 0203 	bic.w	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4934      	ldr	r1, [pc, #208]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	4313      	orrs	r3, r2
 8001856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001858:	f7ff f9ac 	bl	8000bb4 <HAL_GetTick>
 800185c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	e00a      	b.n	8001876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001860:	f7ff f9a8 	bl	8000bb4 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	; 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e04f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 020c 	and.w	r2, r3, #12
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	429a      	cmp	r2, r3
 8001886:	d1eb      	bne.n	8001860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d20c      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e032      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4916      	ldr	r1, [pc, #88]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	490e      	ldr	r1, [pc, #56]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ee:	f000 f821 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	490a      	ldr	r1, [pc, #40]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	5ccb      	ldrb	r3, [r1, r3]
 8001902:	fa22 f303 	lsr.w	r3, r2, r3
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f90c 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023c00 	.word	0x40023c00
 8001924:	40023800 	.word	0x40023800
 8001928:	08004f10 	.word	0x08004f10
 800192c:	20000000 	.word	0x20000000
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001938:	b0ae      	sub	sp, #184	; 0xb8
 800193a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800194e:	2300      	movs	r3, #0
 8001950:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800195a:	4bcb      	ldr	r3, [pc, #812]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x354>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b0c      	cmp	r3, #12
 8001964:	f200 8206 	bhi.w	8001d74 <HAL_RCC_GetSysClockFreq+0x440>
 8001968:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <HAL_RCC_GetSysClockFreq+0x3c>)
 800196a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196e:	bf00      	nop
 8001970:	080019a5 	.word	0x080019a5
 8001974:	08001d75 	.word	0x08001d75
 8001978:	08001d75 	.word	0x08001d75
 800197c:	08001d75 	.word	0x08001d75
 8001980:	080019ad 	.word	0x080019ad
 8001984:	08001d75 	.word	0x08001d75
 8001988:	08001d75 	.word	0x08001d75
 800198c:	08001d75 	.word	0x08001d75
 8001990:	080019b5 	.word	0x080019b5
 8001994:	08001d75 	.word	0x08001d75
 8001998:	08001d75 	.word	0x08001d75
 800199c:	08001d75 	.word	0x08001d75
 80019a0:	08001ba5 	.word	0x08001ba5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019a4:	4bb9      	ldr	r3, [pc, #740]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x358>)
 80019a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80019aa:	e1e7      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ac:	4bb8      	ldr	r3, [pc, #736]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x35c>)
 80019ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019b2:	e1e3      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b4:	4bb4      	ldr	r3, [pc, #720]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x354>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019c0:	4bb1      	ldr	r3, [pc, #708]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x354>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d071      	beq.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019cc:	4bae      	ldr	r3, [pc, #696]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	099b      	lsrs	r3, r3, #6
 80019d2:	2200      	movs	r2, #0
 80019d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80019d8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80019dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80019e8:	2300      	movs	r3, #0
 80019ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80019f2:	4622      	mov	r2, r4
 80019f4:	462b      	mov	r3, r5
 80019f6:	f04f 0000 	mov.w	r0, #0
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	0159      	lsls	r1, r3, #5
 8001a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a04:	0150      	lsls	r0, r2, #5
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	1a51      	subs	r1, r2, r1
 8001a0e:	6439      	str	r1, [r7, #64]	; 0x40
 8001a10:	4629      	mov	r1, r5
 8001a12:	eb63 0301 	sbc.w	r3, r3, r1
 8001a16:	647b      	str	r3, [r7, #68]	; 0x44
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001a24:	4649      	mov	r1, r9
 8001a26:	018b      	lsls	r3, r1, #6
 8001a28:	4641      	mov	r1, r8
 8001a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a2e:	4641      	mov	r1, r8
 8001a30:	018a      	lsls	r2, r1, #6
 8001a32:	4641      	mov	r1, r8
 8001a34:	1a51      	subs	r1, r2, r1
 8001a36:	63b9      	str	r1, [r7, #56]	; 0x38
 8001a38:	4649      	mov	r1, r9
 8001a3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001a4c:	4649      	mov	r1, r9
 8001a4e:	00cb      	lsls	r3, r1, #3
 8001a50:	4641      	mov	r1, r8
 8001a52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a56:	4641      	mov	r1, r8
 8001a58:	00ca      	lsls	r2, r1, #3
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4622      	mov	r2, r4
 8001a62:	189b      	adds	r3, r3, r2
 8001a64:	633b      	str	r3, [r7, #48]	; 0x30
 8001a66:	462b      	mov	r3, r5
 8001a68:	460a      	mov	r2, r1
 8001a6a:	eb42 0303 	adc.w	r3, r2, r3
 8001a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a7c:	4629      	mov	r1, r5
 8001a7e:	024b      	lsls	r3, r1, #9
 8001a80:	4621      	mov	r1, r4
 8001a82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a86:	4621      	mov	r1, r4
 8001a88:	024a      	lsls	r2, r1, #9
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a92:	2200      	movs	r2, #0
 8001a94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001a9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001aa0:	f7fe fbb6 	bl	8000210 <__aeabi_uldivmod>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001aae:	e067      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ab0:	4b75      	ldr	r3, [pc, #468]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	099b      	lsrs	r3, r3, #6
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001abc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001ac0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ac8:	67bb      	str	r3, [r7, #120]	; 0x78
 8001aca:	2300      	movs	r3, #0
 8001acc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ace:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001ad2:	4622      	mov	r2, r4
 8001ad4:	462b      	mov	r3, r5
 8001ad6:	f04f 0000 	mov.w	r0, #0
 8001ada:	f04f 0100 	mov.w	r1, #0
 8001ade:	0159      	lsls	r1, r3, #5
 8001ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ae4:	0150      	lsls	r0, r2, #5
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4621      	mov	r1, r4
 8001aec:	1a51      	subs	r1, r2, r1
 8001aee:	62b9      	str	r1, [r7, #40]	; 0x28
 8001af0:	4629      	mov	r1, r5
 8001af2:	eb63 0301 	sbc.w	r3, r3, r1
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001b04:	4649      	mov	r1, r9
 8001b06:	018b      	lsls	r3, r1, #6
 8001b08:	4641      	mov	r1, r8
 8001b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b0e:	4641      	mov	r1, r8
 8001b10:	018a      	lsls	r2, r1, #6
 8001b12:	4641      	mov	r1, r8
 8001b14:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b18:	4649      	mov	r1, r9
 8001b1a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b2a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b32:	4692      	mov	sl, r2
 8001b34:	469b      	mov	fp, r3
 8001b36:	4623      	mov	r3, r4
 8001b38:	eb1a 0303 	adds.w	r3, sl, r3
 8001b3c:	623b      	str	r3, [r7, #32]
 8001b3e:	462b      	mov	r3, r5
 8001b40:	eb4b 0303 	adc.w	r3, fp, r3
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b52:	4629      	mov	r1, r5
 8001b54:	028b      	lsls	r3, r1, #10
 8001b56:	4621      	mov	r1, r4
 8001b58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	028a      	lsls	r2, r1, #10
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b68:	2200      	movs	r2, #0
 8001b6a:	673b      	str	r3, [r7, #112]	; 0x70
 8001b6c:	677a      	str	r2, [r7, #116]	; 0x74
 8001b6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001b72:	f7fe fb4d 	bl	8000210 <__aeabi_uldivmod>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b80:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	0c1b      	lsrs	r3, r3, #16
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001b92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ba2:	e0eb      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ba4:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb0:	4b35      	ldr	r3, [pc, #212]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d06b      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bbc:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	099b      	lsrs	r3, r3, #6
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8001bc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001bc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bce:	663b      	str	r3, [r7, #96]	; 0x60
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	667b      	str	r3, [r7, #100]	; 0x64
 8001bd4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001bd8:	4622      	mov	r2, r4
 8001bda:	462b      	mov	r3, r5
 8001bdc:	f04f 0000 	mov.w	r0, #0
 8001be0:	f04f 0100 	mov.w	r1, #0
 8001be4:	0159      	lsls	r1, r3, #5
 8001be6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bea:	0150      	lsls	r0, r2, #5
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	1a51      	subs	r1, r2, r1
 8001bf4:	61b9      	str	r1, [r7, #24]
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	eb63 0301 	sbc.w	r3, r3, r1
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c0a:	4659      	mov	r1, fp
 8001c0c:	018b      	lsls	r3, r1, #6
 8001c0e:	4651      	mov	r1, sl
 8001c10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c14:	4651      	mov	r1, sl
 8001c16:	018a      	lsls	r2, r1, #6
 8001c18:	4651      	mov	r1, sl
 8001c1a:	ebb2 0801 	subs.w	r8, r2, r1
 8001c1e:	4659      	mov	r1, fp
 8001c20:	eb63 0901 	sbc.w	r9, r3, r1
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c38:	4690      	mov	r8, r2
 8001c3a:	4699      	mov	r9, r3
 8001c3c:	4623      	mov	r3, r4
 8001c3e:	eb18 0303 	adds.w	r3, r8, r3
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	462b      	mov	r3, r5
 8001c46:	eb49 0303 	adc.w	r3, r9, r3
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001c58:	4629      	mov	r1, r5
 8001c5a:	024b      	lsls	r3, r1, #9
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c62:	4621      	mov	r1, r4
 8001c64:	024a      	lsls	r2, r1, #9
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c6e:	2200      	movs	r2, #0
 8001c70:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c72:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001c74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c78:	f7fe faca 	bl	8000210 <__aeabi_uldivmod>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4613      	mov	r3, r2
 8001c82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c86:	e065      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0x420>
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	00f42400 	.word	0x00f42400
 8001c90:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c94:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x458>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	099b      	lsrs	r3, r3, #6
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ca4:	653b      	str	r3, [r7, #80]	; 0x50
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	657b      	str	r3, [r7, #84]	; 0x54
 8001caa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001cae:	4642      	mov	r2, r8
 8001cb0:	464b      	mov	r3, r9
 8001cb2:	f04f 0000 	mov.w	r0, #0
 8001cb6:	f04f 0100 	mov.w	r1, #0
 8001cba:	0159      	lsls	r1, r3, #5
 8001cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cc0:	0150      	lsls	r0, r2, #5
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4641      	mov	r1, r8
 8001cc8:	1a51      	subs	r1, r2, r1
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	4649      	mov	r1, r9
 8001cce:	eb63 0301 	sbc.w	r3, r3, r1
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	018b      	lsls	r3, r1, #6
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cea:	4651      	mov	r1, sl
 8001cec:	018a      	lsls	r2, r1, #6
 8001cee:	4651      	mov	r1, sl
 8001cf0:	1a54      	subs	r4, r2, r1
 8001cf2:	4659      	mov	r1, fp
 8001cf4:	eb63 0501 	sbc.w	r5, r3, r1
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	00eb      	lsls	r3, r5, #3
 8001d02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d06:	00e2      	lsls	r2, r4, #3
 8001d08:	4614      	mov	r4, r2
 8001d0a:	461d      	mov	r5, r3
 8001d0c:	4643      	mov	r3, r8
 8001d0e:	18e3      	adds	r3, r4, r3
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	464b      	mov	r3, r9
 8001d14:	eb45 0303 	adc.w	r3, r5, r3
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d26:	4629      	mov	r1, r5
 8001d28:	028b      	lsls	r3, r1, #10
 8001d2a:	4621      	mov	r1, r4
 8001d2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d30:	4621      	mov	r1, r4
 8001d32:	028a      	lsls	r2, r1, #10
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d40:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d42:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d46:	f7fe fa63 	bl	8000210 <__aeabi_uldivmod>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4613      	mov	r3, r2
 8001d50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d54:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x458>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	0f1b      	lsrs	r3, r3, #28
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001d62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d72:	e003      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001d76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	37b8      	adds	r7, #184	; 0xb8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	00f42400 	.word	0x00f42400

08001d94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e28d      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8083 	beq.w	8001eba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001db4:	4b94      	ldr	r3, [pc, #592]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d019      	beq.n	8001df4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dc0:	4b91      	ldr	r3, [pc, #580]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dcc:	4b8e      	ldr	r3, [pc, #568]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dd8:	d00c      	beq.n	8001df4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dda:	4b8b      	ldr	r3, [pc, #556]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001de2:	2b0c      	cmp	r3, #12
 8001de4:	d112      	bne.n	8001e0c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001de6:	4b88      	ldr	r3, [pc, #544]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001df2:	d10b      	bne.n	8001e0c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df4:	4b84      	ldr	r3, [pc, #528]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d05b      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x124>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d157      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e25a      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e14:	d106      	bne.n	8001e24 <HAL_RCC_OscConfig+0x90>
 8001e16:	4b7c      	ldr	r3, [pc, #496]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a7b      	ldr	r2, [pc, #492]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	e01d      	b.n	8001e60 <HAL_RCC_OscConfig+0xcc>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e2c:	d10c      	bne.n	8001e48 <HAL_RCC_OscConfig+0xb4>
 8001e2e:	4b76      	ldr	r3, [pc, #472]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a75      	ldr	r2, [pc, #468]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	4b73      	ldr	r3, [pc, #460]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a72      	ldr	r2, [pc, #456]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e00b      	b.n	8001e60 <HAL_RCC_OscConfig+0xcc>
 8001e48:	4b6f      	ldr	r3, [pc, #444]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a6e      	ldr	r2, [pc, #440]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	4b6c      	ldr	r3, [pc, #432]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a6b      	ldr	r2, [pc, #428]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d013      	beq.n	8001e90 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e68:	f7fe fea4 	bl	8000bb4 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e70:	f7fe fea0 	bl	8000bb4 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	; 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e21f      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	4b61      	ldr	r3, [pc, #388]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0xdc>
 8001e8e:	e014      	b.n	8001eba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7fe fe90 	bl	8000bb4 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e98:	f7fe fe8c 	bl	8000bb4 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e20b      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eaa:	4b57      	ldr	r3, [pc, #348]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x104>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d06f      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ec6:	4b50      	ldr	r3, [pc, #320]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d017      	beq.n	8001f02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ed2:	4b4d      	ldr	r3, [pc, #308]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d105      	bne.n	8001eea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ede:	4b4a      	ldr	r3, [pc, #296]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00b      	beq.n	8001f02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eea:	4b47      	ldr	r3, [pc, #284]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ef2:	2b0c      	cmp	r3, #12
 8001ef4:	d11c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ef6:	4b44      	ldr	r3, [pc, #272]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d116      	bne.n	8001f30 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	4b41      	ldr	r3, [pc, #260]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_RCC_OscConfig+0x186>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d001      	beq.n	8001f1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e1d3      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1a:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4937      	ldr	r1, [pc, #220]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2e:	e03a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d020      	beq.n	8001f7a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f38:	4b34      	ldr	r3, [pc, #208]	; (800200c <HAL_RCC_OscConfig+0x278>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7fe fe39 	bl	8000bb4 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f46:	f7fe fe35 	bl	8000bb4 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e1b4      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f58:	4b2b      	ldr	r3, [pc, #172]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f64:	4b28      	ldr	r3, [pc, #160]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4925      	ldr	r1, [pc, #148]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]
 8001f78:	e015      	b.n	8001fa6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7a:	4b24      	ldr	r3, [pc, #144]	; (800200c <HAL_RCC_OscConfig+0x278>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f80:	f7fe fe18 	bl	8000bb4 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f88:	f7fe fe14 	bl	8000bb4 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e193      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d036      	beq.n	8002020 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d016      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <HAL_RCC_OscConfig+0x27c>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7fe fdf8 	bl	8000bb4 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc8:	f7fe fdf4 	bl	8000bb4 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e173      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCC_OscConfig+0x274>)
 8001fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x234>
 8001fe6:	e01b      	b.n	8002020 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_RCC_OscConfig+0x27c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fee:	f7fe fde1 	bl	8000bb4 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff4:	e00e      	b.n	8002014 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff6:	f7fe fddd 	bl	8000bb4 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d907      	bls.n	8002014 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e15c      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
 8002008:	40023800 	.word	0x40023800
 800200c:	42470000 	.word	0x42470000
 8002010:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002014:	4b8a      	ldr	r3, [pc, #552]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1ea      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 8097 	beq.w	800215c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002032:	4b83      	ldr	r3, [pc, #524]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10f      	bne.n	800205e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	4b7f      	ldr	r3, [pc, #508]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	4a7e      	ldr	r2, [pc, #504]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204c:	6413      	str	r3, [r2, #64]	; 0x40
 800204e:	4b7c      	ldr	r3, [pc, #496]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205a:	2301      	movs	r3, #1
 800205c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205e:	4b79      	ldr	r3, [pc, #484]	; (8002244 <HAL_RCC_OscConfig+0x4b0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d118      	bne.n	800209c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206a:	4b76      	ldr	r3, [pc, #472]	; (8002244 <HAL_RCC_OscConfig+0x4b0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a75      	ldr	r2, [pc, #468]	; (8002244 <HAL_RCC_OscConfig+0x4b0>)
 8002070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002076:	f7fe fd9d 	bl	8000bb4 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207e:	f7fe fd99 	bl	8000bb4 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e118      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002090:	4b6c      	ldr	r3, [pc, #432]	; (8002244 <HAL_RCC_OscConfig+0x4b0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d106      	bne.n	80020b2 <HAL_RCC_OscConfig+0x31e>
 80020a4:	4b66      	ldr	r3, [pc, #408]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a8:	4a65      	ldr	r2, [pc, #404]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6713      	str	r3, [r2, #112]	; 0x70
 80020b0:	e01c      	b.n	80020ec <HAL_RCC_OscConfig+0x358>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b05      	cmp	r3, #5
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x340>
 80020ba:	4b61      	ldr	r3, [pc, #388]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020be:	4a60      	ldr	r2, [pc, #384]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	6713      	str	r3, [r2, #112]	; 0x70
 80020c6:	4b5e      	ldr	r3, [pc, #376]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ca:	4a5d      	ldr	r2, [pc, #372]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6713      	str	r3, [r2, #112]	; 0x70
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0x358>
 80020d4:	4b5a      	ldr	r3, [pc, #360]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d8:	4a59      	ldr	r2, [pc, #356]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	6713      	str	r3, [r2, #112]	; 0x70
 80020e0:	4b57      	ldr	r3, [pc, #348]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e4:	4a56      	ldr	r2, [pc, #344]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020e6:	f023 0304 	bic.w	r3, r3, #4
 80020ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d015      	beq.n	8002120 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f4:	f7fe fd5e 	bl	8000bb4 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020fc:	f7fe fd5a 	bl	8000bb4 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	; 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e0d7      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002112:	4b4b      	ldr	r3, [pc, #300]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0ee      	beq.n	80020fc <HAL_RCC_OscConfig+0x368>
 800211e:	e014      	b.n	800214a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002120:	f7fe fd48 	bl	8000bb4 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002126:	e00a      	b.n	800213e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7fe fd44 	bl	8000bb4 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	; 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e0c1      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213e:	4b40      	ldr	r3, [pc, #256]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1ee      	bne.n	8002128 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800214a:	7dfb      	ldrb	r3, [r7, #23]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d105      	bne.n	800215c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002150:	4b3b      	ldr	r3, [pc, #236]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	4a3a      	ldr	r2, [pc, #232]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800215a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80ad 	beq.w	80022c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002166:	4b36      	ldr	r3, [pc, #216]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b08      	cmp	r3, #8
 8002170:	d060      	beq.n	8002234 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d145      	bne.n	8002206 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217a:	4b33      	ldr	r3, [pc, #204]	; (8002248 <HAL_RCC_OscConfig+0x4b4>)
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7fe fd18 	bl	8000bb4 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002188:	f7fe fd14 	bl	8000bb4 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e093      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	4b29      	ldr	r3, [pc, #164]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69da      	ldr	r2, [r3, #28]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	019b      	lsls	r3, r3, #6
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	085b      	lsrs	r3, r3, #1
 80021be:	3b01      	subs	r3, #1
 80021c0:	041b      	lsls	r3, r3, #16
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	061b      	lsls	r3, r3, #24
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	071b      	lsls	r3, r3, #28
 80021d2:	491b      	ldr	r1, [pc, #108]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d8:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <HAL_RCC_OscConfig+0x4b4>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021de:	f7fe fce9 	bl	8000bb4 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e6:	f7fe fce5 	bl	8000bb4 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e064      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x452>
 8002204:	e05c      	b.n	80022c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <HAL_RCC_OscConfig+0x4b4>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7fe fcd2 	bl	8000bb4 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe fcce 	bl	8000bb4 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e04d      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x480>
 8002232:	e045      	b.n	80022c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d107      	bne.n	800224c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e040      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
 8002240:	40023800 	.word	0x40023800
 8002244:	40007000 	.word	0x40007000
 8002248:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800224c:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <HAL_RCC_OscConfig+0x538>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d030      	beq.n	80022bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d129      	bne.n	80022bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002272:	429a      	cmp	r2, r3
 8002274:	d122      	bne.n	80022bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800227c:	4013      	ands	r3, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002282:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002284:	4293      	cmp	r3, r2
 8002286:	d119      	bne.n	80022bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	085b      	lsrs	r3, r3, #1
 8002294:	3b01      	subs	r3, #1
 8002296:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002298:	429a      	cmp	r2, r3
 800229a:	d10f      	bne.n	80022bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800

080022d0 <__NVIC_SetPriority>:
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	db0a      	blt.n	80022fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	490c      	ldr	r1, [pc, #48]	; (800231c <__NVIC_SetPriority+0x4c>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	440b      	add	r3, r1
 80022f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022f8:	e00a      	b.n	8002310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4908      	ldr	r1, [pc, #32]	; (8002320 <__NVIC_SetPriority+0x50>)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	3b04      	subs	r3, #4
 8002308:	0112      	lsls	r2, r2, #4
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	440b      	add	r3, r1
 800230e:	761a      	strb	r2, [r3, #24]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000e100 	.word	0xe000e100
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002328:	2100      	movs	r1, #0
 800232a:	f06f 0004 	mvn.w	r0, #4
 800232e:	f7ff ffcf 	bl	80022d0 <__NVIC_SetPriority>
#endif
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800233e:	f3ef 8305 	mrs	r3, IPSR
 8002342:	603b      	str	r3, [r7, #0]
  return(result);
 8002344:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800234a:	f06f 0305 	mvn.w	r3, #5
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	e00c      	b.n	800236c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <osKernelInitialize+0x44>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <osKernelInitialize+0x44>)
 800235c:	2201      	movs	r2, #1
 800235e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002360:	2300      	movs	r3, #0
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	e002      	b.n	800236c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295
 800236a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800236c:	687b      	ldr	r3, [r7, #4]
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	200000cc 	.word	0x200000cc

08002380 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002386:	f3ef 8305 	mrs	r3, IPSR
 800238a:	603b      	str	r3, [r7, #0]
  return(result);
 800238c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002392:	f06f 0305 	mvn.w	r3, #5
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	e010      	b.n	80023bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <osKernelStart+0x48>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d109      	bne.n	80023b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80023a2:	f7ff ffbf 	bl	8002324 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <osKernelStart+0x48>)
 80023a8:	2202      	movs	r2, #2
 80023aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80023ac:	f001 f866 	bl	800347c <vTaskStartScheduler>
      stat = osOK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	e002      	b.n	80023bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80023bc:	687b      	ldr	r3, [r7, #4]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200000cc 	.word	0x200000cc

080023cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08e      	sub	sp, #56	; 0x38
 80023d0:	af04      	add	r7, sp, #16
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023dc:	f3ef 8305 	mrs	r3, IPSR
 80023e0:	617b      	str	r3, [r7, #20]
  return(result);
 80023e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d17e      	bne.n	80024e6 <osThreadNew+0x11a>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d07b      	beq.n	80024e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80023f2:	2318      	movs	r3, #24
 80023f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d045      	beq.n	8002492 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <osThreadNew+0x48>
        name = attr->name;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <osThreadNew+0x6e>
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2b38      	cmp	r3, #56	; 0x38
 800242c:	d805      	bhi.n	800243a <osThreadNew+0x6e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <osThreadNew+0x72>
        return (NULL);
 800243a:	2300      	movs	r3, #0
 800243c:	e054      	b.n	80024e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00e      	beq.n	8002474 <osThreadNew+0xa8>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b5b      	cmp	r3, #91	; 0x5b
 800245c:	d90a      	bls.n	8002474 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <osThreadNew+0xa8>
        mem = 1;
 800246e:	2301      	movs	r3, #1
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	e010      	b.n	8002496 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10c      	bne.n	8002496 <osThreadNew+0xca>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d108      	bne.n	8002496 <osThreadNew+0xca>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d104      	bne.n	8002496 <osThreadNew+0xca>
          mem = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]
 8002490:	e001      	b.n	8002496 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d110      	bne.n	80024be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024a4:	9202      	str	r2, [sp, #8]
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	6a3a      	ldr	r2, [r7, #32]
 80024b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 fe0c 	bl	80030d0 <xTaskCreateStatic>
 80024b8:	4603      	mov	r3, r0
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	e013      	b.n	80024e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d110      	bne.n	80024e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	f107 0310 	add.w	r3, r7, #16
 80024cc:	9301      	str	r3, [sp, #4]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fe57 	bl	800318a <xTaskCreate>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d001      	beq.n	80024e6 <osThreadNew+0x11a>
            hTask = NULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80024e6:	693b      	ldr	r3, [r7, #16]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024f8:	f3ef 8305 	mrs	r3, IPSR
 80024fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80024fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <osDelay+0x1c>
    stat = osErrorISR;
 8002504:	f06f 0305 	mvn.w	r3, #5
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	e007      	b.n	800251c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 ff7c 	bl	8003414 <vTaskDelay>
    }
  }

  return (stat);
 800251c:	68fb      	ldr	r3, [r7, #12]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4a07      	ldr	r2, [pc, #28]	; (8002554 <vApplicationGetIdleTaskMemory+0x2c>)
 8002538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	4a06      	ldr	r2, [pc, #24]	; (8002558 <vApplicationGetIdleTaskMemory+0x30>)
 800253e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2280      	movs	r2, #128	; 0x80
 8002544:	601a      	str	r2, [r3, #0]
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	200000d0 	.word	0x200000d0
 8002558:	2000012c 	.word	0x2000012c

0800255c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4a07      	ldr	r2, [pc, #28]	; (8002588 <vApplicationGetTimerTaskMemory+0x2c>)
 800256c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4a06      	ldr	r2, [pc, #24]	; (800258c <vApplicationGetTimerTaskMemory+0x30>)
 8002572:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257a:	601a      	str	r2, [r3, #0]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	2000032c 	.word	0x2000032c
 800258c:	20000388 	.word	0x20000388

08002590 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f103 0208 	add.w	r2, r3, #8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295
 80025a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f103 0208 	add.w	r2, r3, #8
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f103 0208 	add.w	r2, r3, #8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025ea:	b480      	push	{r7}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	601a      	str	r2, [r3, #0]
}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002632:	b480      	push	{r7}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d103      	bne.n	8002652 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	e00c      	b.n	800266c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3308      	adds	r3, #8
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	e002      	b.n	8002660 <vListInsert+0x2e>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	429a      	cmp	r2, r3
 800266a:	d2f6      	bcs.n	800265a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	601a      	str	r2, [r3, #0]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6892      	ldr	r2, [r2, #8]
 80026ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6852      	ldr	r2, [r2, #4]
 80026c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d103      	bne.n	80026d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	1e5a      	subs	r2, r3, #1
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10a      	bne.n	8002722 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800270c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002710:	f383 8811 	msr	BASEPRI, r3
 8002714:	f3bf 8f6f 	isb	sy
 8002718:	f3bf 8f4f 	dsb	sy
 800271c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800271e:	bf00      	nop
 8002720:	e7fe      	b.n	8002720 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002722:	f002 f84f 	bl	80047c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272e:	68f9      	ldr	r1, [r7, #12]
 8002730:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	441a      	add	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	3b01      	subs	r3, #1
 8002754:	68f9      	ldr	r1, [r7, #12]
 8002756:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	441a      	add	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	22ff      	movs	r2, #255	; 0xff
 8002766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	22ff      	movs	r2, #255	; 0xff
 800276e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d114      	bne.n	80027a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01a      	beq.n	80027b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3310      	adds	r3, #16
 8002784:	4618      	mov	r0, r3
 8002786:	f001 f903 	bl	8003990 <xTaskRemoveFromEventList>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d012      	beq.n	80027b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <xQueueGenericReset+0xcc>)
 8002792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	f3bf 8f6f 	isb	sy
 80027a0:	e009      	b.n	80027b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3310      	adds	r3, #16
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fef2 	bl	8002590 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	3324      	adds	r3, #36	; 0x24
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff feed 	bl	8002590 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027b6:	f002 f835 	bl	8004824 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027ba:	2301      	movs	r3, #1
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	e000ed04 	.word	0xe000ed04

080027c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08e      	sub	sp, #56	; 0x38
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027ee:	bf00      	nop
 80027f0:	e7fe      	b.n	80027f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80027f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fc:	f383 8811 	msr	BASEPRI, r3
 8002800:	f3bf 8f6f 	isb	sy
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
}
 800280a:	bf00      	nop
 800280c:	e7fe      	b.n	800280c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <xQueueGenericCreateStatic+0x52>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <xQueueGenericCreateStatic+0x56>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <xQueueGenericCreateStatic+0x58>
 800281e:	2300      	movs	r3, #0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10a      	bne.n	800283a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	623b      	str	r3, [r7, #32]
}
 8002836:	bf00      	nop
 8002838:	e7fe      	b.n	8002838 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <xQueueGenericCreateStatic+0x7e>
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <xQueueGenericCreateStatic+0x82>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <xQueueGenericCreateStatic+0x84>
 800284a:	2300      	movs	r3, #0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002854:	f383 8811 	msr	BASEPRI, r3
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	61fb      	str	r3, [r7, #28]
}
 8002862:	bf00      	nop
 8002864:	e7fe      	b.n	8002864 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002866:	2350      	movs	r3, #80	; 0x50
 8002868:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b50      	cmp	r3, #80	; 0x50
 800286e:	d00a      	beq.n	8002886 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	61bb      	str	r3, [r7, #24]
}
 8002882:	bf00      	nop
 8002884:	e7fe      	b.n	8002884 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002886:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00d      	beq.n	80028ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800289a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	4613      	mov	r3, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f805 	bl	80028b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3730      	adds	r7, #48	; 0x30
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d103      	bne.n	80028d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e002      	b.n	80028da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028e6:	2101      	movs	r1, #1
 80028e8:	69b8      	ldr	r0, [r7, #24]
 80028ea:	f7ff ff05 	bl	80026f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08e      	sub	sp, #56	; 0x38
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800290e:	2300      	movs	r3, #0
 8002910:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10a      	bne.n	8002932 <xQueueGenericSend+0x32>
	__asm volatile
 800291c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002920:	f383 8811 	msr	BASEPRI, r3
 8002924:	f3bf 8f6f 	isb	sy
 8002928:	f3bf 8f4f 	dsb	sy
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800292e:	bf00      	nop
 8002930:	e7fe      	b.n	8002930 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d103      	bne.n	8002940 <xQueueGenericSend+0x40>
 8002938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <xQueueGenericSend+0x44>
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <xQueueGenericSend+0x46>
 8002944:	2300      	movs	r3, #0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10a      	bne.n	8002960 <xQueueGenericSend+0x60>
	__asm volatile
 800294a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294e:	f383 8811 	msr	BASEPRI, r3
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800295c:	bf00      	nop
 800295e:	e7fe      	b.n	800295e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d103      	bne.n	800296e <xQueueGenericSend+0x6e>
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <xQueueGenericSend+0x72>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <xQueueGenericSend+0x74>
 8002972:	2300      	movs	r3, #0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <xQueueGenericSend+0x8e>
	__asm volatile
 8002978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297c:	f383 8811 	msr	BASEPRI, r3
 8002980:	f3bf 8f6f 	isb	sy
 8002984:	f3bf 8f4f 	dsb	sy
 8002988:	623b      	str	r3, [r7, #32]
}
 800298a:	bf00      	nop
 800298c:	e7fe      	b.n	800298c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800298e:	f001 f9bd 	bl	8003d0c <xTaskGetSchedulerState>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d102      	bne.n	800299e <xQueueGenericSend+0x9e>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <xQueueGenericSend+0xa2>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <xQueueGenericSend+0xa4>
 80029a2:	2300      	movs	r3, #0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10a      	bne.n	80029be <xQueueGenericSend+0xbe>
	__asm volatile
 80029a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ac:	f383 8811 	msr	BASEPRI, r3
 80029b0:	f3bf 8f6f 	isb	sy
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	61fb      	str	r3, [r7, #28]
}
 80029ba:	bf00      	nop
 80029bc:	e7fe      	b.n	80029bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029be:	f001 ff01 	bl	80047c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d302      	bcc.n	80029d4 <xQueueGenericSend+0xd4>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d129      	bne.n	8002a28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029da:	f000 fa0b 	bl	8002df4 <prvCopyDataToQueue>
 80029de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d010      	beq.n	8002a0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ea:	3324      	adds	r3, #36	; 0x24
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 ffcf 	bl	8003990 <xTaskRemoveFromEventList>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d013      	beq.n	8002a20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80029f8:	4b3f      	ldr	r3, [pc, #252]	; (8002af8 <xQueueGenericSend+0x1f8>)
 80029fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	e00a      	b.n	8002a20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a10:	4b39      	ldr	r3, [pc, #228]	; (8002af8 <xQueueGenericSend+0x1f8>)
 8002a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a20:	f001 ff00 	bl	8004824 <vPortExitCritical>
				return pdPASS;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e063      	b.n	8002af0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d103      	bne.n	8002a36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a2e:	f001 fef9 	bl	8004824 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e05c      	b.n	8002af0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d106      	bne.n	8002a4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	4618      	mov	r0, r3
 8002a42:	f001 f809 	bl	8003a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a46:	2301      	movs	r3, #1
 8002a48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a4a:	f001 feeb 	bl	8004824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a4e:	f000 fd7b 	bl	8003548 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a52:	f001 feb7 	bl	80047c4 <vPortEnterCritical>
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a5c:	b25b      	sxtb	r3, r3
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a62:	d103      	bne.n	8002a6c <xQueueGenericSend+0x16c>
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a72:	b25b      	sxtb	r3, r3
 8002a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a78:	d103      	bne.n	8002a82 <xQueueGenericSend+0x182>
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a82:	f001 fecf 	bl	8004824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a86:	1d3a      	adds	r2, r7, #4
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fff8 	bl	8003a84 <xTaskCheckForTimeOut>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d124      	bne.n	8002ae4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a9c:	f000 faa2 	bl	8002fe4 <prvIsQueueFull>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d018      	beq.n	8002ad8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	3310      	adds	r3, #16
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 ff1e 	bl	80038f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ab6:	f000 fa2d 	bl	8002f14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002aba:	f000 fd53 	bl	8003564 <xTaskResumeAll>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f47f af7c 	bne.w	80029be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002ac6:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <xQueueGenericSend+0x1f8>)
 8002ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	e772      	b.n	80029be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ada:	f000 fa1b 	bl	8002f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ade:	f000 fd41 	bl	8003564 <xTaskResumeAll>
 8002ae2:	e76c      	b.n	80029be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ae6:	f000 fa15 	bl	8002f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002aea:	f000 fd3b 	bl	8003564 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002aee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3738      	adds	r7, #56	; 0x38
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	e000ed04 	.word	0xe000ed04

08002afc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b090      	sub	sp, #64	; 0x40
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b26:	bf00      	nop
 8002b28:	e7fe      	b.n	8002b28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d103      	bne.n	8002b38 <xQueueGenericSendFromISR+0x3c>
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <xQueueGenericSendFromISR+0x40>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <xQueueGenericSendFromISR+0x42>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10a      	bne.n	8002b58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b46:	f383 8811 	msr	BASEPRI, r3
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b54:	bf00      	nop
 8002b56:	e7fe      	b.n	8002b56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d103      	bne.n	8002b66 <xQueueGenericSendFromISR+0x6a>
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <xQueueGenericSendFromISR+0x6e>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <xQueueGenericSendFromISR+0x70>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	623b      	str	r3, [r7, #32]
}
 8002b82:	bf00      	nop
 8002b84:	e7fe      	b.n	8002b84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b86:	f001 feff 	bl	8004988 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b8a:	f3ef 8211 	mrs	r2, BASEPRI
 8002b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b92:	f383 8811 	msr	BASEPRI, r3
 8002b96:	f3bf 8f6f 	isb	sy
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	61fa      	str	r2, [r7, #28]
 8002ba0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ba4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d302      	bcc.n	8002bb8 <xQueueGenericSendFromISR+0xbc>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d12f      	bne.n	8002c18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002bce:	f000 f911 	bl	8002df4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002bd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bda:	d112      	bne.n	8002c02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d016      	beq.n	8002c12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be6:	3324      	adds	r3, #36	; 0x24
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 fed1 	bl	8003990 <xTaskRemoveFromEventList>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00e      	beq.n	8002c12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00b      	beq.n	8002c12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	e007      	b.n	8002c12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c06:	3301      	adds	r3, #1
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	b25a      	sxtb	r2, r3
 8002c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c12:	2301      	movs	r3, #1
 8002c14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002c16:	e001      	b.n	8002c1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3740      	adds	r7, #64	; 0x40
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08c      	sub	sp, #48	; 0x30
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10a      	bne.n	8002c64 <xQueueReceive+0x30>
	__asm volatile
 8002c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c52:	f383 8811 	msr	BASEPRI, r3
 8002c56:	f3bf 8f6f 	isb	sy
 8002c5a:	f3bf 8f4f 	dsb	sy
 8002c5e:	623b      	str	r3, [r7, #32]
}
 8002c60:	bf00      	nop
 8002c62:	e7fe      	b.n	8002c62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d103      	bne.n	8002c72 <xQueueReceive+0x3e>
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <xQueueReceive+0x42>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <xQueueReceive+0x44>
 8002c76:	2300      	movs	r3, #0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10a      	bne.n	8002c92 <xQueueReceive+0x5e>
	__asm volatile
 8002c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c80:	f383 8811 	msr	BASEPRI, r3
 8002c84:	f3bf 8f6f 	isb	sy
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	61fb      	str	r3, [r7, #28]
}
 8002c8e:	bf00      	nop
 8002c90:	e7fe      	b.n	8002c90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c92:	f001 f83b 	bl	8003d0c <xTaskGetSchedulerState>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <xQueueReceive+0x6e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <xQueueReceive+0x72>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <xQueueReceive+0x74>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <xQueueReceive+0x8e>
	__asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	61bb      	str	r3, [r7, #24]
}
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cc2:	f001 fd7f 	bl	80047c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d01f      	beq.n	8002d12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cd2:	68b9      	ldr	r1, [r7, #8]
 8002cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cd6:	f000 f8f7 	bl	8002ec8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	1e5a      	subs	r2, r3, #1
 8002cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00f      	beq.n	8002d0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cec:	3310      	adds	r3, #16
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 fe4e 	bl	8003990 <xTaskRemoveFromEventList>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d007      	beq.n	8002d0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002cfa:	4b3d      	ldr	r3, [pc, #244]	; (8002df0 <xQueueReceive+0x1bc>)
 8002cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d0a:	f001 fd8b 	bl	8004824 <vPortExitCritical>
				return pdPASS;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e069      	b.n	8002de6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d103      	bne.n	8002d20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d18:	f001 fd84 	bl	8004824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e062      	b.n	8002de6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d26:	f107 0310 	add.w	r3, r7, #16
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fe94 	bl	8003a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d30:	2301      	movs	r3, #1
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d34:	f001 fd76 	bl	8004824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d38:	f000 fc06 	bl	8003548 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d3c:	f001 fd42 	bl	80047c4 <vPortEnterCritical>
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d46:	b25b      	sxtb	r3, r3
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4c:	d103      	bne.n	8002d56 <xQueueReceive+0x122>
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d5c:	b25b      	sxtb	r3, r3
 8002d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d62:	d103      	bne.n	8002d6c <xQueueReceive+0x138>
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d6c:	f001 fd5a 	bl	8004824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d70:	1d3a      	adds	r2, r7, #4
 8002d72:	f107 0310 	add.w	r3, r7, #16
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fe83 	bl	8003a84 <xTaskCheckForTimeOut>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d123      	bne.n	8002dcc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d86:	f000 f917 	bl	8002fb8 <prvIsQueueEmpty>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d017      	beq.n	8002dc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d92:	3324      	adds	r3, #36	; 0x24
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fda9 	bl	80038f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002da0:	f000 f8b8 	bl	8002f14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002da4:	f000 fbde 	bl	8003564 <xTaskResumeAll>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d189      	bne.n	8002cc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002dae:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <xQueueReceive+0x1bc>)
 8002db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	e780      	b.n	8002cc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dc2:	f000 f8a7 	bl	8002f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dc6:	f000 fbcd 	bl	8003564 <xTaskResumeAll>
 8002dca:	e77a      	b.n	8002cc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dce:	f000 f8a1 	bl	8002f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dd2:	f000 fbc7 	bl	8003564 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dd8:	f000 f8ee 	bl	8002fb8 <prvIsQueueEmpty>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f43f af6f 	beq.w	8002cc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002de4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3730      	adds	r7, #48	; 0x30
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	e000ed04 	.word	0xe000ed04

08002df4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10d      	bne.n	8002e2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d14d      	bne.n	8002eb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 ff92 	bl	8003d48 <xTaskPriorityDisinherit>
 8002e24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	e043      	b.n	8002eb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d119      	bne.n	8002e68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6858      	ldr	r0, [r3, #4]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	f001 fff8 	bl	8004e34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	441a      	add	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d32b      	bcc.n	8002eb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	e026      	b.n	8002eb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	68d8      	ldr	r0, [r3, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	461a      	mov	r2, r3
 8002e72:	68b9      	ldr	r1, [r7, #8]
 8002e74:	f001 ffde 	bl	8004e34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	425b      	negs	r3, r3
 8002e82:	441a      	add	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d207      	bcs.n	8002ea4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	425b      	negs	r3, r3
 8002e9e:	441a      	add	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d105      	bne.n	8002eb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002ebe:	697b      	ldr	r3, [r7, #20]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d018      	beq.n	8002f0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	441a      	add	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d303      	bcc.n	8002efc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68d9      	ldr	r1, [r3, #12]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	461a      	mov	r2, r3
 8002f06:	6838      	ldr	r0, [r7, #0]
 8002f08:	f001 ff94 	bl	8004e34 <memcpy>
	}
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f1c:	f001 fc52 	bl	80047c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f28:	e011      	b.n	8002f4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d012      	beq.n	8002f58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3324      	adds	r3, #36	; 0x24
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 fd2a 	bl	8003990 <xTaskRemoveFromEventList>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f42:	f000 fe01 	bl	8003b48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	dce9      	bgt.n	8002f2a <prvUnlockQueue+0x16>
 8002f56:	e000      	b.n	8002f5a <prvUnlockQueue+0x46>
					break;
 8002f58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	22ff      	movs	r2, #255	; 0xff
 8002f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f62:	f001 fc5f 	bl	8004824 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f66:	f001 fc2d 	bl	80047c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f72:	e011      	b.n	8002f98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d012      	beq.n	8002fa2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3310      	adds	r3, #16
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fd05 	bl	8003990 <xTaskRemoveFromEventList>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f8c:	f000 fddc 	bl	8003b48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f90:	7bbb      	ldrb	r3, [r7, #14]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	dce9      	bgt.n	8002f74 <prvUnlockQueue+0x60>
 8002fa0:	e000      	b.n	8002fa4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002fa2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	22ff      	movs	r2, #255	; 0xff
 8002fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002fac:	f001 fc3a 	bl	8004824 <vPortExitCritical>
}
 8002fb0:	bf00      	nop
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fc0:	f001 fc00 	bl	80047c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	e001      	b.n	8002fd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fd6:	f001 fc25 	bl	8004824 <vPortExitCritical>

	return xReturn;
 8002fda:	68fb      	ldr	r3, [r7, #12]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fec:	f001 fbea 	bl	80047c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d102      	bne.n	8003002 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	e001      	b.n	8003006 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003006:	f001 fc0d 	bl	8004824 <vPortExitCritical>

	return xReturn;
 800300a:	68fb      	ldr	r3, [r7, #12]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	e014      	b.n	800304e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003024:	4a0f      	ldr	r2, [pc, #60]	; (8003064 <vQueueAddToRegistry+0x50>)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10b      	bne.n	8003048 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003030:	490c      	ldr	r1, [pc, #48]	; (8003064 <vQueueAddToRegistry+0x50>)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800303a:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <vQueueAddToRegistry+0x50>)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003046:	e006      	b.n	8003056 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3301      	adds	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b07      	cmp	r3, #7
 8003052:	d9e7      	bls.n	8003024 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003054:	bf00      	nop
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	20000788 	.word	0x20000788

08003068 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003078:	f001 fba4 	bl	80047c4 <vPortEnterCritical>
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003082:	b25b      	sxtb	r3, r3
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d103      	bne.n	8003092 <vQueueWaitForMessageRestricted+0x2a>
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003098:	b25b      	sxtb	r3, r3
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309e:	d103      	bne.n	80030a8 <vQueueWaitForMessageRestricted+0x40>
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030a8:	f001 fbbc 	bl	8004824 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d106      	bne.n	80030c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	3324      	adds	r3, #36	; 0x24
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fc3b 	bl	8003938 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80030c2:	6978      	ldr	r0, [r7, #20]
 80030c4:	f7ff ff26 	bl	8002f14 <prvUnlockQueue>
	}
 80030c8:	bf00      	nop
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08e      	sub	sp, #56	; 0x38
 80030d4:	af04      	add	r7, sp, #16
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80030de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10a      	bne.n	80030fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	623b      	str	r3, [r7, #32]
}
 80030f6:	bf00      	nop
 80030f8:	e7fe      	b.n	80030f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80030fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <xTaskCreateStatic+0x46>
	__asm volatile
 8003100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	61fb      	str	r3, [r7, #28]
}
 8003112:	bf00      	nop
 8003114:	e7fe      	b.n	8003114 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003116:	235c      	movs	r3, #92	; 0x5c
 8003118:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	2b5c      	cmp	r3, #92	; 0x5c
 800311e:	d00a      	beq.n	8003136 <xTaskCreateStatic+0x66>
	__asm volatile
 8003120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003124:	f383 8811 	msr	BASEPRI, r3
 8003128:	f3bf 8f6f 	isb	sy
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	61bb      	str	r3, [r7, #24]
}
 8003132:	bf00      	nop
 8003134:	e7fe      	b.n	8003134 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003136:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01e      	beq.n	800317c <xTaskCreateStatic+0xac>
 800313e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003140:	2b00      	cmp	r3, #0
 8003142:	d01b      	beq.n	800317c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800314c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	2202      	movs	r2, #2
 8003152:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003156:	2300      	movs	r3, #0
 8003158:	9303      	str	r3, [sp, #12]
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	9302      	str	r3, [sp, #8]
 800315e:	f107 0314 	add.w	r3, r7, #20
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f850 	bl	8003214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003176:	f000 f8dd 	bl	8003334 <prvAddNewTaskToReadyList>
 800317a:	e001      	b.n	8003180 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003180:	697b      	ldr	r3, [r7, #20]
	}
 8003182:	4618      	mov	r0, r3
 8003184:	3728      	adds	r7, #40	; 0x28
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800318a:	b580      	push	{r7, lr}
 800318c:	b08c      	sub	sp, #48	; 0x30
 800318e:	af04      	add	r7, sp, #16
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	603b      	str	r3, [r7, #0]
 8003196:	4613      	mov	r3, r2
 8003198:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4618      	mov	r0, r3
 80031a0:	f001 fc32 	bl	8004a08 <pvPortMalloc>
 80031a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00e      	beq.n	80031ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80031ac:	205c      	movs	r0, #92	; 0x5c
 80031ae:	f001 fc2b 	bl	8004a08 <pvPortMalloc>
 80031b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
 80031c0:	e005      	b.n	80031ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f001 fcec 	bl	8004ba0 <vPortFree>
 80031c8:	e001      	b.n	80031ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d017      	beq.n	8003204 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031dc:	88fa      	ldrh	r2, [r7, #6]
 80031de:	2300      	movs	r3, #0
 80031e0:	9303      	str	r3, [sp, #12]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	9302      	str	r3, [sp, #8]
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f80e 	bl	8003214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031f8:	69f8      	ldr	r0, [r7, #28]
 80031fa:	f000 f89b 	bl	8003334 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031fe:	2301      	movs	r3, #1
 8003200:	61bb      	str	r3, [r7, #24]
 8003202:	e002      	b.n	800320a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003204:	f04f 33ff 	mov.w	r3, #4294967295
 8003208:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800320a:	69bb      	ldr	r3, [r7, #24]
	}
 800320c:	4618      	mov	r0, r3
 800320e:	3720      	adds	r7, #32
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	461a      	mov	r2, r3
 800322c:	21a5      	movs	r1, #165	; 0xa5
 800322e:	f001 fdd5 	bl	8004ddc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800323c:	3b01      	subs	r3, #1
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	f023 0307 	bic.w	r3, r3, #7
 800324a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	617b      	str	r3, [r7, #20]
}
 8003268:	bf00      	nop
 800326a:	e7fe      	b.n	800326a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d01f      	beq.n	80032b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
 8003276:	e012      	b.n	800329e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	4413      	add	r3, r2
 800327e:	7819      	ldrb	r1, [r3, #0]
 8003280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	4413      	add	r3, r2
 8003286:	3334      	adds	r3, #52	; 0x34
 8003288:	460a      	mov	r2, r1
 800328a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	4413      	add	r3, r2
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d006      	beq.n	80032a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	3301      	adds	r3, #1
 800329c:	61fb      	str	r3, [r7, #28]
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	2b0f      	cmp	r3, #15
 80032a2:	d9e9      	bls.n	8003278 <prvInitialiseNewTask+0x64>
 80032a4:	e000      	b.n	80032a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80032a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032b0:	e003      	b.n	80032ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032bc:	2b37      	cmp	r3, #55	; 0x37
 80032be:	d901      	bls.n	80032c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032c0:	2337      	movs	r3, #55	; 0x37
 80032c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d2:	2200      	movs	r2, #0
 80032d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	3304      	adds	r3, #4
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff f978 	bl	80025d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	3318      	adds	r3, #24
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff f973 	bl	80025d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003302:	2200      	movs	r2, #0
 8003304:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	68f9      	ldr	r1, [r7, #12]
 8003312:	69b8      	ldr	r0, [r7, #24]
 8003314:	f001 f928 	bl	8004568 <pxPortInitialiseStack>
 8003318:	4602      	mov	r2, r0
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003328:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800332a:	bf00      	nop
 800332c:	3720      	adds	r7, #32
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800333c:	f001 fa42 	bl	80047c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003340:	4b2d      	ldr	r3, [pc, #180]	; (80033f8 <prvAddNewTaskToReadyList+0xc4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	3301      	adds	r3, #1
 8003346:	4a2c      	ldr	r2, [pc, #176]	; (80033f8 <prvAddNewTaskToReadyList+0xc4>)
 8003348:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800334a:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <prvAddNewTaskToReadyList+0xc8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003352:	4a2a      	ldr	r2, [pc, #168]	; (80033fc <prvAddNewTaskToReadyList+0xc8>)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003358:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <prvAddNewTaskToReadyList+0xc4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d110      	bne.n	8003382 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003360:	f000 fc16 	bl	8003b90 <prvInitialiseTaskLists>
 8003364:	e00d      	b.n	8003382 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003366:	4b26      	ldr	r3, [pc, #152]	; (8003400 <prvAddNewTaskToReadyList+0xcc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d109      	bne.n	8003382 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800336e:	4b23      	ldr	r3, [pc, #140]	; (80033fc <prvAddNewTaskToReadyList+0xc8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	429a      	cmp	r2, r3
 800337a:	d802      	bhi.n	8003382 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800337c:	4a1f      	ldr	r2, [pc, #124]	; (80033fc <prvAddNewTaskToReadyList+0xc8>)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003382:	4b20      	ldr	r3, [pc, #128]	; (8003404 <prvAddNewTaskToReadyList+0xd0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3301      	adds	r3, #1
 8003388:	4a1e      	ldr	r2, [pc, #120]	; (8003404 <prvAddNewTaskToReadyList+0xd0>)
 800338a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800338c:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <prvAddNewTaskToReadyList+0xd0>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003398:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <prvAddNewTaskToReadyList+0xd4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d903      	bls.n	80033a8 <prvAddNewTaskToReadyList+0x74>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	4a18      	ldr	r2, [pc, #96]	; (8003408 <prvAddNewTaskToReadyList+0xd4>)
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4a15      	ldr	r2, [pc, #84]	; (800340c <prvAddNewTaskToReadyList+0xd8>)
 80033b6:	441a      	add	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f7ff f913 	bl	80025ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80033c4:	f001 fa2e 	bl	8004824 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80033c8:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <prvAddNewTaskToReadyList+0xcc>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00e      	beq.n	80033ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033d0:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <prvAddNewTaskToReadyList+0xc8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	429a      	cmp	r2, r3
 80033dc:	d207      	bcs.n	80033ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80033de:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <prvAddNewTaskToReadyList+0xdc>)
 80033e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000c9c 	.word	0x20000c9c
 80033fc:	200007c8 	.word	0x200007c8
 8003400:	20000ca8 	.word	0x20000ca8
 8003404:	20000cb8 	.word	0x20000cb8
 8003408:	20000ca4 	.word	0x20000ca4
 800340c:	200007cc 	.word	0x200007cc
 8003410:	e000ed04 	.word	0xe000ed04

08003414 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800341c:	2300      	movs	r3, #0
 800341e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d017      	beq.n	8003456 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003426:	4b13      	ldr	r3, [pc, #76]	; (8003474 <vTaskDelay+0x60>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <vTaskDelay+0x30>
	__asm volatile
 800342e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003432:	f383 8811 	msr	BASEPRI, r3
 8003436:	f3bf 8f6f 	isb	sy
 800343a:	f3bf 8f4f 	dsb	sy
 800343e:	60bb      	str	r3, [r7, #8]
}
 8003440:	bf00      	nop
 8003442:	e7fe      	b.n	8003442 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003444:	f000 f880 	bl	8003548 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003448:	2100      	movs	r1, #0
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fcea 	bl	8003e24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003450:	f000 f888 	bl	8003564 <xTaskResumeAll>
 8003454:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d107      	bne.n	800346c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <vTaskDelay+0x64>)
 800345e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800346c:	bf00      	nop
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000cc4 	.word	0x20000cc4
 8003478:	e000ed04 	.word	0xe000ed04

0800347c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08a      	sub	sp, #40	; 0x28
 8003480:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003486:	2300      	movs	r3, #0
 8003488:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800348a:	463a      	mov	r2, r7
 800348c:	1d39      	adds	r1, r7, #4
 800348e:	f107 0308 	add.w	r3, r7, #8
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff f848 	bl	8002528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003498:	6839      	ldr	r1, [r7, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	9202      	str	r2, [sp, #8]
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	2300      	movs	r3, #0
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	2300      	movs	r3, #0
 80034a8:	460a      	mov	r2, r1
 80034aa:	4921      	ldr	r1, [pc, #132]	; (8003530 <vTaskStartScheduler+0xb4>)
 80034ac:	4821      	ldr	r0, [pc, #132]	; (8003534 <vTaskStartScheduler+0xb8>)
 80034ae:	f7ff fe0f 	bl	80030d0 <xTaskCreateStatic>
 80034b2:	4603      	mov	r3, r0
 80034b4:	4a20      	ldr	r2, [pc, #128]	; (8003538 <vTaskStartScheduler+0xbc>)
 80034b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80034b8:	4b1f      	ldr	r3, [pc, #124]	; (8003538 <vTaskStartScheduler+0xbc>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034c0:	2301      	movs	r3, #1
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	e001      	b.n	80034ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d102      	bne.n	80034d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80034d0:	f000 fcfc 	bl	8003ecc <xTimerCreateTimerTask>
 80034d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d116      	bne.n	800350a <vTaskStartScheduler+0x8e>
	__asm volatile
 80034dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e0:	f383 8811 	msr	BASEPRI, r3
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	613b      	str	r3, [r7, #16]
}
 80034ee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034f0:	4b12      	ldr	r3, [pc, #72]	; (800353c <vTaskStartScheduler+0xc0>)
 80034f2:	f04f 32ff 	mov.w	r2, #4294967295
 80034f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <vTaskStartScheduler+0xc4>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034fe:	4b11      	ldr	r3, [pc, #68]	; (8003544 <vTaskStartScheduler+0xc8>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003504:	f001 f8bc 	bl	8004680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003508:	e00e      	b.n	8003528 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d10a      	bne.n	8003528 <vTaskStartScheduler+0xac>
	__asm volatile
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	60fb      	str	r3, [r7, #12]
}
 8003524:	bf00      	nop
 8003526:	e7fe      	b.n	8003526 <vTaskStartScheduler+0xaa>
}
 8003528:	bf00      	nop
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	08004e8c 	.word	0x08004e8c
 8003534:	08003b61 	.word	0x08003b61
 8003538:	20000cc0 	.word	0x20000cc0
 800353c:	20000cbc 	.word	0x20000cbc
 8003540:	20000ca8 	.word	0x20000ca8
 8003544:	20000ca0 	.word	0x20000ca0

08003548 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800354c:	4b04      	ldr	r3, [pc, #16]	; (8003560 <vTaskSuspendAll+0x18>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3301      	adds	r3, #1
 8003552:	4a03      	ldr	r2, [pc, #12]	; (8003560 <vTaskSuspendAll+0x18>)
 8003554:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003556:	bf00      	nop
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	20000cc4 	.word	0x20000cc4

08003564 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003572:	4b42      	ldr	r3, [pc, #264]	; (800367c <xTaskResumeAll+0x118>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10a      	bne.n	8003590 <xTaskResumeAll+0x2c>
	__asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	603b      	str	r3, [r7, #0]
}
 800358c:	bf00      	nop
 800358e:	e7fe      	b.n	800358e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003590:	f001 f918 	bl	80047c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003594:	4b39      	ldr	r3, [pc, #228]	; (800367c <xTaskResumeAll+0x118>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	3b01      	subs	r3, #1
 800359a:	4a38      	ldr	r2, [pc, #224]	; (800367c <xTaskResumeAll+0x118>)
 800359c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800359e:	4b37      	ldr	r3, [pc, #220]	; (800367c <xTaskResumeAll+0x118>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d162      	bne.n	800366c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035a6:	4b36      	ldr	r3, [pc, #216]	; (8003680 <xTaskResumeAll+0x11c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d05e      	beq.n	800366c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035ae:	e02f      	b.n	8003610 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035b0:	4b34      	ldr	r3, [pc, #208]	; (8003684 <xTaskResumeAll+0x120>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	3318      	adds	r3, #24
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff f871 	bl	80026a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	3304      	adds	r3, #4
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff f86c 	bl	80026a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d0:	4b2d      	ldr	r3, [pc, #180]	; (8003688 <xTaskResumeAll+0x124>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d903      	bls.n	80035e0 <xTaskResumeAll+0x7c>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	4a2a      	ldr	r2, [pc, #168]	; (8003688 <xTaskResumeAll+0x124>)
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4a27      	ldr	r2, [pc, #156]	; (800368c <xTaskResumeAll+0x128>)
 80035ee:	441a      	add	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	3304      	adds	r3, #4
 80035f4:	4619      	mov	r1, r3
 80035f6:	4610      	mov	r0, r2
 80035f8:	f7fe fff7 	bl	80025ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003600:	4b23      	ldr	r3, [pc, #140]	; (8003690 <xTaskResumeAll+0x12c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	429a      	cmp	r2, r3
 8003608:	d302      	bcc.n	8003610 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800360a:	4b22      	ldr	r3, [pc, #136]	; (8003694 <xTaskResumeAll+0x130>)
 800360c:	2201      	movs	r2, #1
 800360e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003610:	4b1c      	ldr	r3, [pc, #112]	; (8003684 <xTaskResumeAll+0x120>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1cb      	bne.n	80035b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800361e:	f000 fb55 	bl	8003ccc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003622:	4b1d      	ldr	r3, [pc, #116]	; (8003698 <xTaskResumeAll+0x134>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d010      	beq.n	8003650 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800362e:	f000 f847 	bl	80036c0 <xTaskIncrementTick>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003638:	4b16      	ldr	r3, [pc, #88]	; (8003694 <xTaskResumeAll+0x130>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3b01      	subs	r3, #1
 8003642:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f1      	bne.n	800362e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800364a:	4b13      	ldr	r3, [pc, #76]	; (8003698 <xTaskResumeAll+0x134>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003650:	4b10      	ldr	r3, [pc, #64]	; (8003694 <xTaskResumeAll+0x130>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d009      	beq.n	800366c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003658:	2301      	movs	r3, #1
 800365a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800365c:	4b0f      	ldr	r3, [pc, #60]	; (800369c <xTaskResumeAll+0x138>)
 800365e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800366c:	f001 f8da 	bl	8004824 <vPortExitCritical>

	return xAlreadyYielded;
 8003670:	68bb      	ldr	r3, [r7, #8]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000cc4 	.word	0x20000cc4
 8003680:	20000c9c 	.word	0x20000c9c
 8003684:	20000c5c 	.word	0x20000c5c
 8003688:	20000ca4 	.word	0x20000ca4
 800368c:	200007cc 	.word	0x200007cc
 8003690:	200007c8 	.word	0x200007c8
 8003694:	20000cb0 	.word	0x20000cb0
 8003698:	20000cac 	.word	0x20000cac
 800369c:	e000ed04 	.word	0xe000ed04

080036a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80036a6:	4b05      	ldr	r3, [pc, #20]	; (80036bc <xTaskGetTickCount+0x1c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80036ac:	687b      	ldr	r3, [r7, #4]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20000ca0 	.word	0x20000ca0

080036c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036ca:	4b4f      	ldr	r3, [pc, #316]	; (8003808 <xTaskIncrementTick+0x148>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f040 808f 	bne.w	80037f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036d4:	4b4d      	ldr	r3, [pc, #308]	; (800380c <xTaskIncrementTick+0x14c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3301      	adds	r3, #1
 80036da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036dc:	4a4b      	ldr	r2, [pc, #300]	; (800380c <xTaskIncrementTick+0x14c>)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d120      	bne.n	800372a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80036e8:	4b49      	ldr	r3, [pc, #292]	; (8003810 <xTaskIncrementTick+0x150>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <xTaskIncrementTick+0x48>
	__asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	603b      	str	r3, [r7, #0]
}
 8003704:	bf00      	nop
 8003706:	e7fe      	b.n	8003706 <xTaskIncrementTick+0x46>
 8003708:	4b41      	ldr	r3, [pc, #260]	; (8003810 <xTaskIncrementTick+0x150>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	4b41      	ldr	r3, [pc, #260]	; (8003814 <xTaskIncrementTick+0x154>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a3f      	ldr	r2, [pc, #252]	; (8003810 <xTaskIncrementTick+0x150>)
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	4a3f      	ldr	r2, [pc, #252]	; (8003814 <xTaskIncrementTick+0x154>)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	4b3e      	ldr	r3, [pc, #248]	; (8003818 <xTaskIncrementTick+0x158>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	4a3d      	ldr	r2, [pc, #244]	; (8003818 <xTaskIncrementTick+0x158>)
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	f000 fad1 	bl	8003ccc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800372a:	4b3c      	ldr	r3, [pc, #240]	; (800381c <xTaskIncrementTick+0x15c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	429a      	cmp	r2, r3
 8003732:	d349      	bcc.n	80037c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003734:	4b36      	ldr	r3, [pc, #216]	; (8003810 <xTaskIncrementTick+0x150>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d104      	bne.n	8003748 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800373e:	4b37      	ldr	r3, [pc, #220]	; (800381c <xTaskIncrementTick+0x15c>)
 8003740:	f04f 32ff 	mov.w	r2, #4294967295
 8003744:	601a      	str	r2, [r3, #0]
					break;
 8003746:	e03f      	b.n	80037c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003748:	4b31      	ldr	r3, [pc, #196]	; (8003810 <xTaskIncrementTick+0x150>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	429a      	cmp	r2, r3
 800375e:	d203      	bcs.n	8003768 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003760:	4a2e      	ldr	r2, [pc, #184]	; (800381c <xTaskIncrementTick+0x15c>)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003766:	e02f      	b.n	80037c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	3304      	adds	r3, #4
 800376c:	4618      	mov	r0, r3
 800376e:	f7fe ff99 	bl	80026a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	2b00      	cmp	r3, #0
 8003778:	d004      	beq.n	8003784 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	3318      	adds	r3, #24
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe ff90 	bl	80026a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003788:	4b25      	ldr	r3, [pc, #148]	; (8003820 <xTaskIncrementTick+0x160>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d903      	bls.n	8003798 <xTaskIncrementTick+0xd8>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <xTaskIncrementTick+0x160>)
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4a1f      	ldr	r2, [pc, #124]	; (8003824 <xTaskIncrementTick+0x164>)
 80037a6:	441a      	add	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	3304      	adds	r3, #4
 80037ac:	4619      	mov	r1, r3
 80037ae:	4610      	mov	r0, r2
 80037b0:	f7fe ff1b 	bl	80025ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b8:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <xTaskIncrementTick+0x168>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	429a      	cmp	r2, r3
 80037c0:	d3b8      	bcc.n	8003734 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80037c2:	2301      	movs	r3, #1
 80037c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037c6:	e7b5      	b.n	8003734 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037c8:	4b17      	ldr	r3, [pc, #92]	; (8003828 <xTaskIncrementTick+0x168>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ce:	4915      	ldr	r1, [pc, #84]	; (8003824 <xTaskIncrementTick+0x164>)
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d901      	bls.n	80037e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80037e0:	2301      	movs	r3, #1
 80037e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80037e4:	4b11      	ldr	r3, [pc, #68]	; (800382c <xTaskIncrementTick+0x16c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d007      	beq.n	80037fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80037ec:	2301      	movs	r3, #1
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	e004      	b.n	80037fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80037f2:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <xTaskIncrementTick+0x170>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3301      	adds	r3, #1
 80037f8:	4a0d      	ldr	r2, [pc, #52]	; (8003830 <xTaskIncrementTick+0x170>)
 80037fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80037fc:	697b      	ldr	r3, [r7, #20]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000cc4 	.word	0x20000cc4
 800380c:	20000ca0 	.word	0x20000ca0
 8003810:	20000c54 	.word	0x20000c54
 8003814:	20000c58 	.word	0x20000c58
 8003818:	20000cb4 	.word	0x20000cb4
 800381c:	20000cbc 	.word	0x20000cbc
 8003820:	20000ca4 	.word	0x20000ca4
 8003824:	200007cc 	.word	0x200007cc
 8003828:	200007c8 	.word	0x200007c8
 800382c:	20000cb0 	.word	0x20000cb0
 8003830:	20000cac 	.word	0x20000cac

08003834 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800383a:	4b28      	ldr	r3, [pc, #160]	; (80038dc <vTaskSwitchContext+0xa8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003842:	4b27      	ldr	r3, [pc, #156]	; (80038e0 <vTaskSwitchContext+0xac>)
 8003844:	2201      	movs	r2, #1
 8003846:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003848:	e041      	b.n	80038ce <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800384a:	4b25      	ldr	r3, [pc, #148]	; (80038e0 <vTaskSwitchContext+0xac>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003850:	4b24      	ldr	r3, [pc, #144]	; (80038e4 <vTaskSwitchContext+0xb0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e010      	b.n	800387a <vTaskSwitchContext+0x46>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <vTaskSwitchContext+0x40>
	__asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	607b      	str	r3, [r7, #4]
}
 8003870:	bf00      	nop
 8003872:	e7fe      	b.n	8003872 <vTaskSwitchContext+0x3e>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3b01      	subs	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	491b      	ldr	r1, [pc, #108]	; (80038e8 <vTaskSwitchContext+0xb4>)
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0e4      	beq.n	8003858 <vTaskSwitchContext+0x24>
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4a13      	ldr	r2, [pc, #76]	; (80038e8 <vTaskSwitchContext+0xb4>)
 800389a:	4413      	add	r3, r2
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	605a      	str	r2, [r3, #4]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	3308      	adds	r3, #8
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d104      	bne.n	80038be <vTaskSwitchContext+0x8a>
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	4a09      	ldr	r2, [pc, #36]	; (80038ec <vTaskSwitchContext+0xb8>)
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	4a06      	ldr	r2, [pc, #24]	; (80038e4 <vTaskSwitchContext+0xb0>)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6013      	str	r3, [r2, #0]
}
 80038ce:	bf00      	nop
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	20000cc4 	.word	0x20000cc4
 80038e0:	20000cb0 	.word	0x20000cb0
 80038e4:	20000ca4 	.word	0x20000ca4
 80038e8:	200007cc 	.word	0x200007cc
 80038ec:	200007c8 	.word	0x200007c8

080038f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10a      	bne.n	8003916 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	60fb      	str	r3, [r7, #12]
}
 8003912:	bf00      	nop
 8003914:	e7fe      	b.n	8003914 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003916:	4b07      	ldr	r3, [pc, #28]	; (8003934 <vTaskPlaceOnEventList+0x44>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3318      	adds	r3, #24
 800391c:	4619      	mov	r1, r3
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fe fe87 	bl	8002632 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003924:	2101      	movs	r1, #1
 8003926:	6838      	ldr	r0, [r7, #0]
 8003928:	f000 fa7c 	bl	8003e24 <prvAddCurrentTaskToDelayedList>
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	200007c8 	.word	0x200007c8

08003938 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10a      	bne.n	8003960 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800394a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	617b      	str	r3, [r7, #20]
}
 800395c:	bf00      	nop
 800395e:	e7fe      	b.n	800395e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003960:	4b0a      	ldr	r3, [pc, #40]	; (800398c <vTaskPlaceOnEventListRestricted+0x54>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3318      	adds	r3, #24
 8003966:	4619      	mov	r1, r3
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f7fe fe3e 	bl	80025ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003974:	f04f 33ff 	mov.w	r3, #4294967295
 8003978:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	68b8      	ldr	r0, [r7, #8]
 800397e:	f000 fa51 	bl	8003e24 <prvAddCurrentTaskToDelayedList>
	}
 8003982:	bf00      	nop
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	200007c8 	.word	0x200007c8

08003990 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	60fb      	str	r3, [r7, #12]
}
 80039b8:	bf00      	nop
 80039ba:	e7fe      	b.n	80039ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	3318      	adds	r3, #24
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fe fe6f 	bl	80026a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039c6:	4b1e      	ldr	r3, [pc, #120]	; (8003a40 <xTaskRemoveFromEventList+0xb0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d11d      	bne.n	8003a0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	3304      	adds	r3, #4
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fe fe66 	bl	80026a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039dc:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <xTaskRemoveFromEventList+0xb4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d903      	bls.n	80039ec <xTaskRemoveFromEventList+0x5c>
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <xTaskRemoveFromEventList+0xb4>)
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4a13      	ldr	r2, [pc, #76]	; (8003a48 <xTaskRemoveFromEventList+0xb8>)
 80039fa:	441a      	add	r2, r3
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	3304      	adds	r3, #4
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f7fe fdf1 	bl	80025ea <vListInsertEnd>
 8003a08:	e005      	b.n	8003a16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	3318      	adds	r3, #24
 8003a0e:	4619      	mov	r1, r3
 8003a10:	480e      	ldr	r0, [pc, #56]	; (8003a4c <xTaskRemoveFromEventList+0xbc>)
 8003a12:	f7fe fdea 	bl	80025ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <xTaskRemoveFromEventList+0xc0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d905      	bls.n	8003a30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a24:	2301      	movs	r3, #1
 8003a26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a28:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <xTaskRemoveFromEventList+0xc4>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	e001      	b.n	8003a34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a34:	697b      	ldr	r3, [r7, #20]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000cc4 	.word	0x20000cc4
 8003a44:	20000ca4 	.word	0x20000ca4
 8003a48:	200007cc 	.word	0x200007cc
 8003a4c:	20000c5c 	.word	0x20000c5c
 8003a50:	200007c8 	.word	0x200007c8
 8003a54:	20000cb0 	.word	0x20000cb0

08003a58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <vTaskInternalSetTimeOutState+0x24>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <vTaskInternalSetTimeOutState+0x28>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	605a      	str	r2, [r3, #4]
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	20000cb4 	.word	0x20000cb4
 8003a80:	20000ca0 	.word	0x20000ca0

08003a84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10a      	bne.n	8003aaa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	613b      	str	r3, [r7, #16]
}
 8003aa6:	bf00      	nop
 8003aa8:	e7fe      	b.n	8003aa8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10a      	bne.n	8003ac6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	60fb      	str	r3, [r7, #12]
}
 8003ac2:	bf00      	nop
 8003ac4:	e7fe      	b.n	8003ac4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003ac6:	f000 fe7d 	bl	80047c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003aca:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <xTaskCheckForTimeOut+0xbc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae2:	d102      	bne.n	8003aea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61fb      	str	r3, [r7, #28]
 8003ae8:	e023      	b.n	8003b32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <xTaskCheckForTimeOut+0xc0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d007      	beq.n	8003b06 <xTaskCheckForTimeOut+0x82>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d302      	bcc.n	8003b06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b00:	2301      	movs	r3, #1
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	e015      	b.n	8003b32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d20b      	bcs.n	8003b28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	1ad2      	subs	r2, r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff ff9b 	bl	8003a58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61fb      	str	r3, [r7, #28]
 8003b26:	e004      	b.n	8003b32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b32:	f000 fe77 	bl	8004824 <vPortExitCritical>

	return xReturn;
 8003b36:	69fb      	ldr	r3, [r7, #28]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3720      	adds	r7, #32
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20000ca0 	.word	0x20000ca0
 8003b44:	20000cb4 	.word	0x20000cb4

08003b48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b4c:	4b03      	ldr	r3, [pc, #12]	; (8003b5c <vTaskMissedYield+0x14>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
}
 8003b52:	bf00      	nop
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	20000cb0 	.word	0x20000cb0

08003b60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b68:	f000 f852 	bl	8003c10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b6c:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <prvIdleTask+0x28>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d9f9      	bls.n	8003b68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <prvIdleTask+0x2c>)
 8003b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b84:	e7f0      	b.n	8003b68 <prvIdleTask+0x8>
 8003b86:	bf00      	nop
 8003b88:	200007cc 	.word	0x200007cc
 8003b8c:	e000ed04 	.word	0xe000ed04

08003b90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	e00c      	b.n	8003bb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4a12      	ldr	r2, [pc, #72]	; (8003bf0 <prvInitialiseTaskLists+0x60>)
 8003ba8:	4413      	add	r3, r2
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fe fcf0 	bl	8002590 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b37      	cmp	r3, #55	; 0x37
 8003bba:	d9ef      	bls.n	8003b9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bbc:	480d      	ldr	r0, [pc, #52]	; (8003bf4 <prvInitialiseTaskLists+0x64>)
 8003bbe:	f7fe fce7 	bl	8002590 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bc2:	480d      	ldr	r0, [pc, #52]	; (8003bf8 <prvInitialiseTaskLists+0x68>)
 8003bc4:	f7fe fce4 	bl	8002590 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bc8:	480c      	ldr	r0, [pc, #48]	; (8003bfc <prvInitialiseTaskLists+0x6c>)
 8003bca:	f7fe fce1 	bl	8002590 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003bce:	480c      	ldr	r0, [pc, #48]	; (8003c00 <prvInitialiseTaskLists+0x70>)
 8003bd0:	f7fe fcde 	bl	8002590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bd4:	480b      	ldr	r0, [pc, #44]	; (8003c04 <prvInitialiseTaskLists+0x74>)
 8003bd6:	f7fe fcdb 	bl	8002590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bda:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <prvInitialiseTaskLists+0x78>)
 8003bdc:	4a05      	ldr	r2, [pc, #20]	; (8003bf4 <prvInitialiseTaskLists+0x64>)
 8003bde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003be0:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <prvInitialiseTaskLists+0x7c>)
 8003be2:	4a05      	ldr	r2, [pc, #20]	; (8003bf8 <prvInitialiseTaskLists+0x68>)
 8003be4:	601a      	str	r2, [r3, #0]
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	200007cc 	.word	0x200007cc
 8003bf4:	20000c2c 	.word	0x20000c2c
 8003bf8:	20000c40 	.word	0x20000c40
 8003bfc:	20000c5c 	.word	0x20000c5c
 8003c00:	20000c70 	.word	0x20000c70
 8003c04:	20000c88 	.word	0x20000c88
 8003c08:	20000c54 	.word	0x20000c54
 8003c0c:	20000c58 	.word	0x20000c58

08003c10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c16:	e019      	b.n	8003c4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c18:	f000 fdd4 	bl	80047c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c1c:	4b10      	ldr	r3, [pc, #64]	; (8003c60 <prvCheckTasksWaitingTermination+0x50>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3304      	adds	r3, #4
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fe fd3b 	bl	80026a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c2e:	4b0d      	ldr	r3, [pc, #52]	; (8003c64 <prvCheckTasksWaitingTermination+0x54>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	4a0b      	ldr	r2, [pc, #44]	; (8003c64 <prvCheckTasksWaitingTermination+0x54>)
 8003c36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <prvCheckTasksWaitingTermination+0x58>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	4a0a      	ldr	r2, [pc, #40]	; (8003c68 <prvCheckTasksWaitingTermination+0x58>)
 8003c40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c42:	f000 fdef 	bl	8004824 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f810 	bl	8003c6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c4c:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <prvCheckTasksWaitingTermination+0x58>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e1      	bne.n	8003c18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000c70 	.word	0x20000c70
 8003c64:	20000c9c 	.word	0x20000c9c
 8003c68:	20000c84 	.word	0x20000c84

08003c6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d108      	bne.n	8003c90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 ff8c 	bl	8004ba0 <vPortFree>
				vPortFree( pxTCB );
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 ff89 	bl	8004ba0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c8e:	e018      	b.n	8003cc2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d103      	bne.n	8003ca2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 ff80 	bl	8004ba0 <vPortFree>
	}
 8003ca0:	e00f      	b.n	8003cc2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d00a      	beq.n	8003cc2 <prvDeleteTCB+0x56>
	__asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	60fb      	str	r3, [r7, #12]
}
 8003cbe:	bf00      	nop
 8003cc0:	e7fe      	b.n	8003cc0 <prvDeleteTCB+0x54>
	}
 8003cc2:	bf00      	nop
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <prvResetNextTaskUnblockTime+0x38>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d104      	bne.n	8003ce6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <prvResetNextTaskUnblockTime+0x3c>)
 8003cde:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ce4:	e008      	b.n	8003cf8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce6:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <prvResetNextTaskUnblockTime+0x38>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <prvResetNextTaskUnblockTime+0x3c>)
 8003cf6:	6013      	str	r3, [r2, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	20000c54 	.word	0x20000c54
 8003d08:	20000cbc 	.word	0x20000cbc

08003d0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d12:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <xTaskGetSchedulerState+0x34>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d102      	bne.n	8003d20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	e008      	b.n	8003d32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d20:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <xTaskGetSchedulerState+0x38>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d102      	bne.n	8003d2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	607b      	str	r3, [r7, #4]
 8003d2c:	e001      	b.n	8003d32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d32:	687b      	ldr	r3, [r7, #4]
	}
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	20000ca8 	.word	0x20000ca8
 8003d44:	20000cc4 	.word	0x20000cc4

08003d48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d54:	2300      	movs	r3, #0
 8003d56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d056      	beq.n	8003e0c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d5e:	4b2e      	ldr	r3, [pc, #184]	; (8003e18 <xTaskPriorityDisinherit+0xd0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d00a      	beq.n	8003d7e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	60fb      	str	r3, [r7, #12]
}
 8003d7a:	bf00      	nop
 8003d7c:	e7fe      	b.n	8003d7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10a      	bne.n	8003d9c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	60bb      	str	r3, [r7, #8]
}
 8003d98:	bf00      	nop
 8003d9a:	e7fe      	b.n	8003d9a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da0:	1e5a      	subs	r2, r3, #1
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d02c      	beq.n	8003e0c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d128      	bne.n	8003e0c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fe fc70 	bl	80026a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ddc:	4b0f      	ldr	r3, [pc, #60]	; (8003e1c <xTaskPriorityDisinherit+0xd4>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d903      	bls.n	8003dec <xTaskPriorityDisinherit+0xa4>
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	4a0c      	ldr	r2, [pc, #48]	; (8003e1c <xTaskPriorityDisinherit+0xd4>)
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4a09      	ldr	r2, [pc, #36]	; (8003e20 <xTaskPriorityDisinherit+0xd8>)
 8003dfa:	441a      	add	r2, r3
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	3304      	adds	r3, #4
 8003e00:	4619      	mov	r1, r3
 8003e02:	4610      	mov	r0, r2
 8003e04:	f7fe fbf1 	bl	80025ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e0c:	697b      	ldr	r3, [r7, #20]
	}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	200007c8 	.word	0x200007c8
 8003e1c:	20000ca4 	.word	0x20000ca4
 8003e20:	200007cc 	.word	0x200007cc

08003e24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e2e:	4b21      	ldr	r3, [pc, #132]	; (8003eb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e34:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe fc32 	bl	80026a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e46:	d10a      	bne.n	8003e5e <prvAddCurrentTaskToDelayedList+0x3a>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d007      	beq.n	8003e5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e4e:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3304      	adds	r3, #4
 8003e54:	4619      	mov	r1, r3
 8003e56:	4819      	ldr	r0, [pc, #100]	; (8003ebc <prvAddCurrentTaskToDelayedList+0x98>)
 8003e58:	f7fe fbc7 	bl	80025ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e5c:	e026      	b.n	8003eac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4413      	add	r3, r2
 8003e64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e66:	4b14      	ldr	r3, [pc, #80]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d209      	bcs.n	8003e8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e76:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	4619      	mov	r1, r3
 8003e82:	4610      	mov	r0, r2
 8003e84:	f7fe fbd5 	bl	8002632 <vListInsert>
}
 8003e88:	e010      	b.n	8003eac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e8a:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4619      	mov	r1, r3
 8003e96:	4610      	mov	r0, r2
 8003e98:	f7fe fbcb 	bl	8002632 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d202      	bcs.n	8003eac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003ea6:	4a08      	ldr	r2, [pc, #32]	; (8003ec8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	6013      	str	r3, [r2, #0]
}
 8003eac:	bf00      	nop
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20000ca0 	.word	0x20000ca0
 8003eb8:	200007c8 	.word	0x200007c8
 8003ebc:	20000c88 	.word	0x20000c88
 8003ec0:	20000c58 	.word	0x20000c58
 8003ec4:	20000c54 	.word	0x20000c54
 8003ec8:	20000cbc 	.word	0x20000cbc

08003ecc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08a      	sub	sp, #40	; 0x28
 8003ed0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003ed6:	f000 fb07 	bl	80044e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003eda:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <xTimerCreateTimerTask+0x80>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d021      	beq.n	8003f26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003eea:	1d3a      	adds	r2, r7, #4
 8003eec:	f107 0108 	add.w	r1, r7, #8
 8003ef0:	f107 030c 	add.w	r3, r7, #12
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fe fb31 	bl	800255c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	9202      	str	r2, [sp, #8]
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	2302      	movs	r3, #2
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	460a      	mov	r2, r1
 8003f0c:	4910      	ldr	r1, [pc, #64]	; (8003f50 <xTimerCreateTimerTask+0x84>)
 8003f0e:	4811      	ldr	r0, [pc, #68]	; (8003f54 <xTimerCreateTimerTask+0x88>)
 8003f10:	f7ff f8de 	bl	80030d0 <xTaskCreateStatic>
 8003f14:	4603      	mov	r3, r0
 8003f16:	4a10      	ldr	r2, [pc, #64]	; (8003f58 <xTimerCreateTimerTask+0x8c>)
 8003f18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003f1a:	4b0f      	ldr	r3, [pc, #60]	; (8003f58 <xTimerCreateTimerTask+0x8c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003f22:	2301      	movs	r3, #1
 8003f24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10a      	bne.n	8003f42 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	613b      	str	r3, [r7, #16]
}
 8003f3e:	bf00      	nop
 8003f40:	e7fe      	b.n	8003f40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f42:	697b      	ldr	r3, [r7, #20]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20000cf8 	.word	0x20000cf8
 8003f50:	08004e94 	.word	0x08004e94
 8003f54:	08004091 	.word	0x08004091
 8003f58:	20000cfc 	.word	0x20000cfc

08003f5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	; 0x28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10a      	bne.n	8003f8a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	623b      	str	r3, [r7, #32]
}
 8003f86:	bf00      	nop
 8003f88:	e7fe      	b.n	8003f88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f8a:	4b1a      	ldr	r3, [pc, #104]	; (8003ff4 <xTimerGenericCommand+0x98>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d02a      	beq.n	8003fe8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b05      	cmp	r3, #5
 8003fa2:	dc18      	bgt.n	8003fd6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003fa4:	f7ff feb2 	bl	8003d0c <xTaskGetSchedulerState>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d109      	bne.n	8003fc2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003fae:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <xTimerGenericCommand+0x98>)
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	f107 0110 	add.w	r1, r7, #16
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fba:	f7fe fca1 	bl	8002900 <xQueueGenericSend>
 8003fbe:	6278      	str	r0, [r7, #36]	; 0x24
 8003fc0:	e012      	b.n	8003fe8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003fc2:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <xTimerGenericCommand+0x98>)
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	f107 0110 	add.w	r1, r7, #16
 8003fca:	2300      	movs	r3, #0
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f7fe fc97 	bl	8002900 <xQueueGenericSend>
 8003fd2:	6278      	str	r0, [r7, #36]	; 0x24
 8003fd4:	e008      	b.n	8003fe8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003fd6:	4b07      	ldr	r3, [pc, #28]	; (8003ff4 <xTimerGenericCommand+0x98>)
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	f107 0110 	add.w	r1, r7, #16
 8003fde:	2300      	movs	r3, #0
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	f7fe fd8b 	bl	8002afc <xQueueGenericSendFromISR>
 8003fe6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3728      	adds	r7, #40	; 0x28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000cf8 	.word	0x20000cf8

08003ff8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004002:	4b22      	ldr	r3, [pc, #136]	; (800408c <prvProcessExpiredTimer+0x94>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	3304      	adds	r3, #4
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe fb47 	bl	80026a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d022      	beq.n	800406a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	699a      	ldr	r2, [r3, #24]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	18d1      	adds	r1, r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	6978      	ldr	r0, [r7, #20]
 8004032:	f000 f8d1 	bl	80041d8 <prvInsertTimerInActiveList>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d01f      	beq.n	800407c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800403c:	2300      	movs	r3, #0
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	2300      	movs	r3, #0
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	2100      	movs	r1, #0
 8004046:	6978      	ldr	r0, [r7, #20]
 8004048:	f7ff ff88 	bl	8003f5c <xTimerGenericCommand>
 800404c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d113      	bne.n	800407c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	60fb      	str	r3, [r7, #12]
}
 8004066:	bf00      	nop
 8004068:	e7fe      	b.n	8004068 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004070:	f023 0301 	bic.w	r3, r3, #1
 8004074:	b2da      	uxtb	r2, r3
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	6978      	ldr	r0, [r7, #20]
 8004082:	4798      	blx	r3
}
 8004084:	bf00      	nop
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20000cf0 	.word	0x20000cf0

08004090 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004098:	f107 0308 	add.w	r3, r7, #8
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f857 	bl	8004150 <prvGetNextExpireTime>
 80040a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4619      	mov	r1, r3
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f803 	bl	80040b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80040ae:	f000 f8d5 	bl	800425c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040b2:	e7f1      	b.n	8004098 <prvTimerTask+0x8>

080040b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80040be:	f7ff fa43 	bl	8003548 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040c2:	f107 0308 	add.w	r3, r7, #8
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 f866 	bl	8004198 <prvSampleTimeNow>
 80040cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d130      	bne.n	8004136 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <prvProcessTimerOrBlockTask+0x3c>
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d806      	bhi.n	80040f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80040e2:	f7ff fa3f 	bl	8003564 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040e6:	68f9      	ldr	r1, [r7, #12]
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff ff85 	bl	8003ff8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80040ee:	e024      	b.n	800413a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040f6:	4b13      	ldr	r3, [pc, #76]	; (8004144 <prvProcessTimerOrBlockTask+0x90>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <prvProcessTimerOrBlockTask+0x50>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <prvProcessTimerOrBlockTask+0x52>
 8004104:	2300      	movs	r3, #0
 8004106:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004108:	4b0f      	ldr	r3, [pc, #60]	; (8004148 <prvProcessTimerOrBlockTask+0x94>)
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	4619      	mov	r1, r3
 8004116:	f7fe ffa7 	bl	8003068 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800411a:	f7ff fa23 	bl	8003564 <xTaskResumeAll>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10a      	bne.n	800413a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004124:	4b09      	ldr	r3, [pc, #36]	; (800414c <prvProcessTimerOrBlockTask+0x98>)
 8004126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	f3bf 8f6f 	isb	sy
}
 8004134:	e001      	b.n	800413a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004136:	f7ff fa15 	bl	8003564 <xTaskResumeAll>
}
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20000cf4 	.word	0x20000cf4
 8004148:	20000cf8 	.word	0x20000cf8
 800414c:	e000ed04 	.word	0xe000ed04

08004150 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004158:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <prvGetNextExpireTime+0x44>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <prvGetNextExpireTime+0x16>
 8004162:	2201      	movs	r2, #1
 8004164:	e000      	b.n	8004168 <prvGetNextExpireTime+0x18>
 8004166:	2200      	movs	r2, #0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d105      	bne.n	8004180 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004174:	4b07      	ldr	r3, [pc, #28]	; (8004194 <prvGetNextExpireTime+0x44>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	e001      	b.n	8004184 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004184:	68fb      	ldr	r3, [r7, #12]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000cf0 	.word	0x20000cf0

08004198 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80041a0:	f7ff fa7e 	bl	80036a0 <xTaskGetTickCount>
 80041a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80041a6:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <prvSampleTimeNow+0x3c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d205      	bcs.n	80041bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80041b0:	f000 f936 	bl	8004420 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	e002      	b.n	80041c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80041c2:	4a04      	ldr	r2, [pc, #16]	; (80041d4 <prvSampleTimeNow+0x3c>)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80041c8:	68fb      	ldr	r3, [r7, #12]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000d00 	.word	0x20000d00

080041d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d812      	bhi.n	8004224 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	1ad2      	subs	r2, r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	429a      	cmp	r2, r3
 800420a:	d302      	bcc.n	8004212 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800420c:	2301      	movs	r3, #1
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	e01b      	b.n	800424a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <prvInsertTimerInActiveList+0x7c>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3304      	adds	r3, #4
 800421a:	4619      	mov	r1, r3
 800421c:	4610      	mov	r0, r2
 800421e:	f7fe fa08 	bl	8002632 <vListInsert>
 8004222:	e012      	b.n	800424a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d206      	bcs.n	800423a <prvInsertTimerInActiveList+0x62>
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d302      	bcc.n	800423a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004234:	2301      	movs	r3, #1
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	e007      	b.n	800424a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800423a:	4b07      	ldr	r3, [pc, #28]	; (8004258 <prvInsertTimerInActiveList+0x80>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	3304      	adds	r3, #4
 8004242:	4619      	mov	r1, r3
 8004244:	4610      	mov	r0, r2
 8004246:	f7fe f9f4 	bl	8002632 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800424a:	697b      	ldr	r3, [r7, #20]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20000cf4 	.word	0x20000cf4
 8004258:	20000cf0 	.word	0x20000cf0

0800425c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08e      	sub	sp, #56	; 0x38
 8004260:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004262:	e0ca      	b.n	80043fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	da18      	bge.n	800429c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800426a:	1d3b      	adds	r3, r7, #4
 800426c:	3304      	adds	r3, #4
 800426e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	61fb      	str	r3, [r7, #28]
}
 8004288:	bf00      	nop
 800428a:	e7fe      	b.n	800428a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004292:	6850      	ldr	r0, [r2, #4]
 8004294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004296:	6892      	ldr	r2, [r2, #8]
 8004298:	4611      	mov	r1, r2
 800429a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f2c0 80ab 	blt.w	80043fa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d004      	beq.n	80042ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b2:	3304      	adds	r3, #4
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fe f9f5 	bl	80026a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042ba:	463b      	mov	r3, r7
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff ff6b 	bl	8004198 <prvSampleTimeNow>
 80042c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b09      	cmp	r3, #9
 80042c8:	f200 8096 	bhi.w	80043f8 <prvProcessReceivedCommands+0x19c>
 80042cc:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <prvProcessReceivedCommands+0x78>)
 80042ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d2:	bf00      	nop
 80042d4:	080042fd 	.word	0x080042fd
 80042d8:	080042fd 	.word	0x080042fd
 80042dc:	080042fd 	.word	0x080042fd
 80042e0:	08004371 	.word	0x08004371
 80042e4:	08004385 	.word	0x08004385
 80042e8:	080043cf 	.word	0x080043cf
 80042ec:	080042fd 	.word	0x080042fd
 80042f0:	080042fd 	.word	0x080042fd
 80042f4:	08004371 	.word	0x08004371
 80042f8:	08004385 	.word	0x08004385
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	b2da      	uxtb	r2, r3
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	18d1      	adds	r1, r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800431c:	f7ff ff5c 	bl	80041d8 <prvInsertTimerInActiveList>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d069      	beq.n	80043fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800432c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d05e      	beq.n	80043fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	441a      	add	r2, r3
 8004344:	2300      	movs	r3, #0
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	2300      	movs	r3, #0
 800434a:	2100      	movs	r1, #0
 800434c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800434e:	f7ff fe05 	bl	8003f5c <xTimerGenericCommand>
 8004352:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d14f      	bne.n	80043fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	61bb      	str	r3, [r7, #24]
}
 800436c:	bf00      	nop
 800436e:	e7fe      	b.n	800436e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004376:	f023 0301 	bic.w	r3, r3, #1
 800437a:	b2da      	uxtb	r2, r3
 800437c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004382:	e03a      	b.n	80043fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004386:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	b2da      	uxtb	r2, r3
 8004390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10a      	bne.n	80043ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	617b      	str	r3, [r7, #20]
}
 80043b6:	bf00      	nop
 80043b8:	e7fe      	b.n	80043b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	18d1      	adds	r1, r2, r3
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043c8:	f7ff ff06 	bl	80041d8 <prvInsertTimerInActiveList>
					break;
 80043cc:	e015      	b.n	80043fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d103      	bne.n	80043e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80043dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043de:	f000 fbdf 	bl	8004ba0 <vPortFree>
 80043e2:	e00a      	b.n	80043fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ea:	f023 0301 	bic.w	r3, r3, #1
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80043f6:	e000      	b.n	80043fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80043f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043fa:	4b08      	ldr	r3, [pc, #32]	; (800441c <prvProcessReceivedCommands+0x1c0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	1d39      	adds	r1, r7, #4
 8004400:	2200      	movs	r2, #0
 8004402:	4618      	mov	r0, r3
 8004404:	f7fe fc16 	bl	8002c34 <xQueueReceive>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	f47f af2a 	bne.w	8004264 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004410:	bf00      	nop
 8004412:	bf00      	nop
 8004414:	3730      	adds	r7, #48	; 0x30
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000cf8 	.word	0x20000cf8

08004420 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004426:	e048      	b.n	80044ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004428:	4b2d      	ldr	r3, [pc, #180]	; (80044e0 <prvSwitchTimerLists+0xc0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004432:	4b2b      	ldr	r3, [pc, #172]	; (80044e0 <prvSwitchTimerLists+0xc0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3304      	adds	r3, #4
 8004440:	4618      	mov	r0, r3
 8004442:	f7fe f92f 	bl	80026a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d02e      	beq.n	80044ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4413      	add	r3, r2
 8004464:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	429a      	cmp	r2, r3
 800446c:	d90e      	bls.n	800448c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800447a:	4b19      	ldr	r3, [pc, #100]	; (80044e0 <prvSwitchTimerLists+0xc0>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	3304      	adds	r3, #4
 8004482:	4619      	mov	r1, r3
 8004484:	4610      	mov	r0, r2
 8004486:	f7fe f8d4 	bl	8002632 <vListInsert>
 800448a:	e016      	b.n	80044ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800448c:	2300      	movs	r3, #0
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	2300      	movs	r3, #0
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	2100      	movs	r1, #0
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f7ff fd60 	bl	8003f5c <xTimerGenericCommand>
 800449c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	603b      	str	r3, [r7, #0]
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044ba:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <prvSwitchTimerLists+0xc0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1b1      	bne.n	8004428 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <prvSwitchTimerLists+0xc0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <prvSwitchTimerLists+0xc4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <prvSwitchTimerLists+0xc0>)
 80044d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80044d2:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <prvSwitchTimerLists+0xc4>)
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	6013      	str	r3, [r2, #0]
}
 80044d8:	bf00      	nop
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20000cf0 	.word	0x20000cf0
 80044e4:	20000cf4 	.word	0x20000cf4

080044e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80044ee:	f000 f969 	bl	80047c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80044f2:	4b15      	ldr	r3, [pc, #84]	; (8004548 <prvCheckForValidListAndQueue+0x60>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d120      	bne.n	800453c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80044fa:	4814      	ldr	r0, [pc, #80]	; (800454c <prvCheckForValidListAndQueue+0x64>)
 80044fc:	f7fe f848 	bl	8002590 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004500:	4813      	ldr	r0, [pc, #76]	; (8004550 <prvCheckForValidListAndQueue+0x68>)
 8004502:	f7fe f845 	bl	8002590 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004506:	4b13      	ldr	r3, [pc, #76]	; (8004554 <prvCheckForValidListAndQueue+0x6c>)
 8004508:	4a10      	ldr	r2, [pc, #64]	; (800454c <prvCheckForValidListAndQueue+0x64>)
 800450a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800450c:	4b12      	ldr	r3, [pc, #72]	; (8004558 <prvCheckForValidListAndQueue+0x70>)
 800450e:	4a10      	ldr	r2, [pc, #64]	; (8004550 <prvCheckForValidListAndQueue+0x68>)
 8004510:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004512:	2300      	movs	r3, #0
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	4b11      	ldr	r3, [pc, #68]	; (800455c <prvCheckForValidListAndQueue+0x74>)
 8004518:	4a11      	ldr	r2, [pc, #68]	; (8004560 <prvCheckForValidListAndQueue+0x78>)
 800451a:	2110      	movs	r1, #16
 800451c:	200a      	movs	r0, #10
 800451e:	f7fe f953 	bl	80027c8 <xQueueGenericCreateStatic>
 8004522:	4603      	mov	r3, r0
 8004524:	4a08      	ldr	r2, [pc, #32]	; (8004548 <prvCheckForValidListAndQueue+0x60>)
 8004526:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004528:	4b07      	ldr	r3, [pc, #28]	; (8004548 <prvCheckForValidListAndQueue+0x60>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <prvCheckForValidListAndQueue+0x60>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	490b      	ldr	r1, [pc, #44]	; (8004564 <prvCheckForValidListAndQueue+0x7c>)
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe fd6c 	bl	8003014 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800453c:	f000 f972 	bl	8004824 <vPortExitCritical>
}
 8004540:	bf00      	nop
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20000cf8 	.word	0x20000cf8
 800454c:	20000cc8 	.word	0x20000cc8
 8004550:	20000cdc 	.word	0x20000cdc
 8004554:	20000cf0 	.word	0x20000cf0
 8004558:	20000cf4 	.word	0x20000cf4
 800455c:	20000da4 	.word	0x20000da4
 8004560:	20000d04 	.word	0x20000d04
 8004564:	08004e9c 	.word	0x08004e9c

08004568 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3b04      	subs	r3, #4
 8004578:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004580:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3b04      	subs	r3, #4
 8004586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f023 0201 	bic.w	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	3b04      	subs	r3, #4
 8004596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004598:	4a0c      	ldr	r2, [pc, #48]	; (80045cc <pxPortInitialiseStack+0x64>)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3b14      	subs	r3, #20
 80045a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3b04      	subs	r3, #4
 80045ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f06f 0202 	mvn.w	r2, #2
 80045b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	3b20      	subs	r3, #32
 80045bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045be:	68fb      	ldr	r3, [r7, #12]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	080045d1 	.word	0x080045d1

080045d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <prvTaskExitError+0x54>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e2:	d00a      	beq.n	80045fa <prvTaskExitError+0x2a>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	60fb      	str	r3, [r7, #12]
}
 80045f6:	bf00      	nop
 80045f8:	e7fe      	b.n	80045f8 <prvTaskExitError+0x28>
	__asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	60bb      	str	r3, [r7, #8]
}
 800460c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800460e:	bf00      	nop
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0fc      	beq.n	8004610 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004616:	bf00      	nop
 8004618:	bf00      	nop
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	2000000c 	.word	0x2000000c
	...

08004630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004630:	4b07      	ldr	r3, [pc, #28]	; (8004650 <pxCurrentTCBConst2>)
 8004632:	6819      	ldr	r1, [r3, #0]
 8004634:	6808      	ldr	r0, [r1, #0]
 8004636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800463a:	f380 8809 	msr	PSP, r0
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f04f 0000 	mov.w	r0, #0
 8004646:	f380 8811 	msr	BASEPRI, r0
 800464a:	4770      	bx	lr
 800464c:	f3af 8000 	nop.w

08004650 <pxCurrentTCBConst2>:
 8004650:	200007c8 	.word	0x200007c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop

08004658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004658:	4808      	ldr	r0, [pc, #32]	; (800467c <prvPortStartFirstTask+0x24>)
 800465a:	6800      	ldr	r0, [r0, #0]
 800465c:	6800      	ldr	r0, [r0, #0]
 800465e:	f380 8808 	msr	MSP, r0
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f380 8814 	msr	CONTROL, r0
 800466a:	b662      	cpsie	i
 800466c:	b661      	cpsie	f
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	df00      	svc	0
 8004678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800467a:	bf00      	nop
 800467c:	e000ed08 	.word	0xe000ed08

08004680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004686:	4b46      	ldr	r3, [pc, #280]	; (80047a0 <xPortStartScheduler+0x120>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a46      	ldr	r2, [pc, #280]	; (80047a4 <xPortStartScheduler+0x124>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d10a      	bne.n	80046a6 <xPortStartScheduler+0x26>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	613b      	str	r3, [r7, #16]
}
 80046a2:	bf00      	nop
 80046a4:	e7fe      	b.n	80046a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046a6:	4b3e      	ldr	r3, [pc, #248]	; (80047a0 <xPortStartScheduler+0x120>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a3f      	ldr	r2, [pc, #252]	; (80047a8 <xPortStartScheduler+0x128>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d10a      	bne.n	80046c6 <xPortStartScheduler+0x46>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	60fb      	str	r3, [r7, #12]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046c6:	4b39      	ldr	r3, [pc, #228]	; (80047ac <xPortStartScheduler+0x12c>)
 80046c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	22ff      	movs	r2, #255	; 0xff
 80046d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	4b31      	ldr	r3, [pc, #196]	; (80047b0 <xPortStartScheduler+0x130>)
 80046ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046ee:	4b31      	ldr	r3, [pc, #196]	; (80047b4 <xPortStartScheduler+0x134>)
 80046f0:	2207      	movs	r2, #7
 80046f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046f4:	e009      	b.n	800470a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80046f6:	4b2f      	ldr	r3, [pc, #188]	; (80047b4 <xPortStartScheduler+0x134>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	4a2d      	ldr	r2, [pc, #180]	; (80047b4 <xPortStartScheduler+0x134>)
 80046fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	b2db      	uxtb	r3, r3
 8004708:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800470a:	78fb      	ldrb	r3, [r7, #3]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	2b80      	cmp	r3, #128	; 0x80
 8004714:	d0ef      	beq.n	80046f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004716:	4b27      	ldr	r3, [pc, #156]	; (80047b4 <xPortStartScheduler+0x134>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f1c3 0307 	rsb	r3, r3, #7
 800471e:	2b04      	cmp	r3, #4
 8004720:	d00a      	beq.n	8004738 <xPortStartScheduler+0xb8>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	60bb      	str	r3, [r7, #8]
}
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004738:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <xPortStartScheduler+0x134>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <xPortStartScheduler+0x134>)
 8004740:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004742:	4b1c      	ldr	r3, [pc, #112]	; (80047b4 <xPortStartScheduler+0x134>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800474a:	4a1a      	ldr	r2, [pc, #104]	; (80047b4 <xPortStartScheduler+0x134>)
 800474c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	b2da      	uxtb	r2, r3
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004756:	4b18      	ldr	r3, [pc, #96]	; (80047b8 <xPortStartScheduler+0x138>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a17      	ldr	r2, [pc, #92]	; (80047b8 <xPortStartScheduler+0x138>)
 800475c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004760:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004762:	4b15      	ldr	r3, [pc, #84]	; (80047b8 <xPortStartScheduler+0x138>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a14      	ldr	r2, [pc, #80]	; (80047b8 <xPortStartScheduler+0x138>)
 8004768:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800476c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800476e:	f000 f8dd 	bl	800492c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004772:	4b12      	ldr	r3, [pc, #72]	; (80047bc <xPortStartScheduler+0x13c>)
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004778:	f000 f8fc 	bl	8004974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800477c:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <xPortStartScheduler+0x140>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a0f      	ldr	r2, [pc, #60]	; (80047c0 <xPortStartScheduler+0x140>)
 8004782:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004786:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004788:	f7ff ff66 	bl	8004658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800478c:	f7ff f852 	bl	8003834 <vTaskSwitchContext>
	prvTaskExitError();
 8004790:	f7ff ff1e 	bl	80045d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	e000ed00 	.word	0xe000ed00
 80047a4:	410fc271 	.word	0x410fc271
 80047a8:	410fc270 	.word	0x410fc270
 80047ac:	e000e400 	.word	0xe000e400
 80047b0:	20000df4 	.word	0x20000df4
 80047b4:	20000df8 	.word	0x20000df8
 80047b8:	e000ed20 	.word	0xe000ed20
 80047bc:	2000000c 	.word	0x2000000c
 80047c0:	e000ef34 	.word	0xe000ef34

080047c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	607b      	str	r3, [r7, #4]
}
 80047dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047de:	4b0f      	ldr	r3, [pc, #60]	; (800481c <vPortEnterCritical+0x58>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3301      	adds	r3, #1
 80047e4:	4a0d      	ldr	r2, [pc, #52]	; (800481c <vPortEnterCritical+0x58>)
 80047e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047e8:	4b0c      	ldr	r3, [pc, #48]	; (800481c <vPortEnterCritical+0x58>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d10f      	bne.n	8004810 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047f0:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <vPortEnterCritical+0x5c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <vPortEnterCritical+0x4c>
	__asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	603b      	str	r3, [r7, #0]
}
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <vPortEnterCritical+0x4a>
	}
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	2000000c 	.word	0x2000000c
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800482a:	4b12      	ldr	r3, [pc, #72]	; (8004874 <vPortExitCritical+0x50>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <vPortExitCritical+0x24>
	__asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	607b      	str	r3, [r7, #4]
}
 8004844:	bf00      	nop
 8004846:	e7fe      	b.n	8004846 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <vPortExitCritical+0x50>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3b01      	subs	r3, #1
 800484e:	4a09      	ldr	r2, [pc, #36]	; (8004874 <vPortExitCritical+0x50>)
 8004850:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004852:	4b08      	ldr	r3, [pc, #32]	; (8004874 <vPortExitCritical+0x50>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d105      	bne.n	8004866 <vPortExitCritical+0x42>
 800485a:	2300      	movs	r3, #0
 800485c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	f383 8811 	msr	BASEPRI, r3
}
 8004864:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	2000000c 	.word	0x2000000c
	...

08004880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004880:	f3ef 8009 	mrs	r0, PSP
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <pxCurrentTCBConst>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	f01e 0f10 	tst.w	lr, #16
 8004890:	bf08      	it	eq
 8004892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	6010      	str	r0, [r2, #0]
 800489c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048a4:	f380 8811 	msr	BASEPRI, r0
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f7fe ffc0 	bl	8003834 <vTaskSwitchContext>
 80048b4:	f04f 0000 	mov.w	r0, #0
 80048b8:	f380 8811 	msr	BASEPRI, r0
 80048bc:	bc09      	pop	{r0, r3}
 80048be:	6819      	ldr	r1, [r3, #0]
 80048c0:	6808      	ldr	r0, [r1, #0]
 80048c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c6:	f01e 0f10 	tst.w	lr, #16
 80048ca:	bf08      	it	eq
 80048cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048d0:	f380 8809 	msr	PSP, r0
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	f3af 8000 	nop.w

080048e0 <pxCurrentTCBConst>:
 80048e0:	200007c8 	.word	0x200007c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop

080048e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	607b      	str	r3, [r7, #4]
}
 8004900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004902:	f7fe fedd 	bl	80036c0 <xTaskIncrementTick>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800490c:	4b06      	ldr	r3, [pc, #24]	; (8004928 <xPortSysTickHandler+0x40>)
 800490e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	2300      	movs	r3, #0
 8004916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	f383 8811 	msr	BASEPRI, r3
}
 800491e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <vPortSetupTimerInterrupt+0x34>)
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004936:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <vPortSetupTimerInterrupt+0x38>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <vPortSetupTimerInterrupt+0x3c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a0a      	ldr	r2, [pc, #40]	; (800496c <vPortSetupTimerInterrupt+0x40>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	099b      	lsrs	r3, r3, #6
 8004948:	4a09      	ldr	r2, [pc, #36]	; (8004970 <vPortSetupTimerInterrupt+0x44>)
 800494a:	3b01      	subs	r3, #1
 800494c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800494e:	4b04      	ldr	r3, [pc, #16]	; (8004960 <vPortSetupTimerInterrupt+0x34>)
 8004950:	2207      	movs	r2, #7
 8004952:	601a      	str	r2, [r3, #0]
}
 8004954:	bf00      	nop
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	e000e010 	.word	0xe000e010
 8004964:	e000e018 	.word	0xe000e018
 8004968:	20000000 	.word	0x20000000
 800496c:	10624dd3 	.word	0x10624dd3
 8004970:	e000e014 	.word	0xe000e014

08004974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004974:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004984 <vPortEnableVFP+0x10>
 8004978:	6801      	ldr	r1, [r0, #0]
 800497a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800497e:	6001      	str	r1, [r0, #0]
 8004980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004982:	bf00      	nop
 8004984:	e000ed88 	.word	0xe000ed88

08004988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800498e:	f3ef 8305 	mrs	r3, IPSR
 8004992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b0f      	cmp	r3, #15
 8004998:	d914      	bls.n	80049c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800499a:	4a17      	ldr	r2, [pc, #92]	; (80049f8 <vPortValidateInterruptPriority+0x70>)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049a4:	4b15      	ldr	r3, [pc, #84]	; (80049fc <vPortValidateInterruptPriority+0x74>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	7afa      	ldrb	r2, [r7, #11]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d20a      	bcs.n	80049c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	607b      	str	r3, [r7, #4]
}
 80049c0:	bf00      	nop
 80049c2:	e7fe      	b.n	80049c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049c4:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <vPortValidateInterruptPriority+0x78>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049cc:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <vPortValidateInterruptPriority+0x7c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d90a      	bls.n	80049ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	603b      	str	r3, [r7, #0]
}
 80049e6:	bf00      	nop
 80049e8:	e7fe      	b.n	80049e8 <vPortValidateInterruptPriority+0x60>
	}
 80049ea:	bf00      	nop
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	e000e3f0 	.word	0xe000e3f0
 80049fc:	20000df4 	.word	0x20000df4
 8004a00:	e000ed0c 	.word	0xe000ed0c
 8004a04:	20000df8 	.word	0x20000df8

08004a08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	; 0x28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a14:	f7fe fd98 	bl	8003548 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a18:	4b5b      	ldr	r3, [pc, #364]	; (8004b88 <pvPortMalloc+0x180>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a20:	f000 f920 	bl	8004c64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a24:	4b59      	ldr	r3, [pc, #356]	; (8004b8c <pvPortMalloc+0x184>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f040 8093 	bne.w	8004b58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01d      	beq.n	8004a74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a38:	2208      	movs	r2, #8
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d014      	beq.n	8004a74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f023 0307 	bic.w	r3, r3, #7
 8004a50:	3308      	adds	r3, #8
 8004a52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <pvPortMalloc+0x6c>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	617b      	str	r3, [r7, #20]
}
 8004a70:	bf00      	nop
 8004a72:	e7fe      	b.n	8004a72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d06e      	beq.n	8004b58 <pvPortMalloc+0x150>
 8004a7a:	4b45      	ldr	r3, [pc, #276]	; (8004b90 <pvPortMalloc+0x188>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d869      	bhi.n	8004b58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a84:	4b43      	ldr	r3, [pc, #268]	; (8004b94 <pvPortMalloc+0x18c>)
 8004a86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a88:	4b42      	ldr	r3, [pc, #264]	; (8004b94 <pvPortMalloc+0x18c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a8e:	e004      	b.n	8004a9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d903      	bls.n	8004aac <pvPortMalloc+0xa4>
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1f1      	bne.n	8004a90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004aac:	4b36      	ldr	r3, [pc, #216]	; (8004b88 <pvPortMalloc+0x180>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d050      	beq.n	8004b58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2208      	movs	r2, #8
 8004abc:	4413      	add	r3, r2
 8004abe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	1ad2      	subs	r2, r2, r3
 8004ad0:	2308      	movs	r3, #8
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d91f      	bls.n	8004b18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4413      	add	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <pvPortMalloc+0xf8>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	613b      	str	r3, [r7, #16]
}
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	1ad2      	subs	r2, r2, r3
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b12:	69b8      	ldr	r0, [r7, #24]
 8004b14:	f000 f908 	bl	8004d28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b18:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <pvPortMalloc+0x188>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	4a1b      	ldr	r2, [pc, #108]	; (8004b90 <pvPortMalloc+0x188>)
 8004b24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b26:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <pvPortMalloc+0x188>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	4b1b      	ldr	r3, [pc, #108]	; (8004b98 <pvPortMalloc+0x190>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d203      	bcs.n	8004b3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b32:	4b17      	ldr	r3, [pc, #92]	; (8004b90 <pvPortMalloc+0x188>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <pvPortMalloc+0x190>)
 8004b38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <pvPortMalloc+0x184>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b4e:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <pvPortMalloc+0x194>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3301      	adds	r3, #1
 8004b54:	4a11      	ldr	r2, [pc, #68]	; (8004b9c <pvPortMalloc+0x194>)
 8004b56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b58:	f7fe fd04 	bl	8003564 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <pvPortMalloc+0x174>
	__asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	60fb      	str	r3, [r7, #12]
}
 8004b78:	bf00      	nop
 8004b7a:	e7fe      	b.n	8004b7a <pvPortMalloc+0x172>
	return pvReturn;
 8004b7c:	69fb      	ldr	r3, [r7, #28]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3728      	adds	r7, #40	; 0x28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20004a04 	.word	0x20004a04
 8004b8c:	20004a18 	.word	0x20004a18
 8004b90:	20004a08 	.word	0x20004a08
 8004b94:	200049fc 	.word	0x200049fc
 8004b98:	20004a0c 	.word	0x20004a0c
 8004b9c:	20004a10 	.word	0x20004a10

08004ba0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d04d      	beq.n	8004c4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	425b      	negs	r3, r3
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4413      	add	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	4b24      	ldr	r3, [pc, #144]	; (8004c58 <vPortFree+0xb8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10a      	bne.n	8004be4 <vPortFree+0x44>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	60fb      	str	r3, [r7, #12]
}
 8004be0:	bf00      	nop
 8004be2:	e7fe      	b.n	8004be2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <vPortFree+0x62>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	60bb      	str	r3, [r7, #8]
}
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <vPortFree+0xb8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d01e      	beq.n	8004c4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d11a      	bne.n	8004c4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	4b0e      	ldr	r3, [pc, #56]	; (8004c58 <vPortFree+0xb8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	43db      	mvns	r3, r3
 8004c22:	401a      	ands	r2, r3
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c28:	f7fe fc8e 	bl	8003548 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <vPortFree+0xbc>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4413      	add	r3, r2
 8004c36:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <vPortFree+0xbc>)
 8004c38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c3a:	6938      	ldr	r0, [r7, #16]
 8004c3c:	f000 f874 	bl	8004d28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <vPortFree+0xc0>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3301      	adds	r3, #1
 8004c46:	4a06      	ldr	r2, [pc, #24]	; (8004c60 <vPortFree+0xc0>)
 8004c48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c4a:	f7fe fc8b 	bl	8003564 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c4e:	bf00      	nop
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20004a18 	.word	0x20004a18
 8004c5c:	20004a08 	.word	0x20004a08
 8004c60:	20004a14 	.word	0x20004a14

08004c64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c70:	4b27      	ldr	r3, [pc, #156]	; (8004d10 <prvHeapInit+0xac>)
 8004c72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00c      	beq.n	8004c98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3307      	adds	r3, #7
 8004c82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0307 	bic.w	r3, r3, #7
 8004c8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	4a1f      	ldr	r2, [pc, #124]	; (8004d10 <prvHeapInit+0xac>)
 8004c94:	4413      	add	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c9c:	4a1d      	ldr	r2, [pc, #116]	; (8004d14 <prvHeapInit+0xb0>)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ca2:	4b1c      	ldr	r3, [pc, #112]	; (8004d14 <prvHeapInit+0xb0>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	4413      	add	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	1a9b      	subs	r3, r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0307 	bic.w	r3, r3, #7
 8004cbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4a15      	ldr	r2, [pc, #84]	; (8004d18 <prvHeapInit+0xb4>)
 8004cc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cc6:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <prvHeapInit+0xb4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cce:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <prvHeapInit+0xb4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	1ad2      	subs	r2, r2, r3
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <prvHeapInit+0xb4>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <prvHeapInit+0xb8>)
 8004cf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <prvHeapInit+0xbc>)
 8004cfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cfc:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <prvHeapInit+0xc0>)
 8004cfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d02:	601a      	str	r2, [r3, #0]
}
 8004d04:	bf00      	nop
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	20000dfc 	.word	0x20000dfc
 8004d14:	200049fc 	.word	0x200049fc
 8004d18:	20004a04 	.word	0x20004a04
 8004d1c:	20004a0c 	.word	0x20004a0c
 8004d20:	20004a08 	.word	0x20004a08
 8004d24:	20004a18 	.word	0x20004a18

08004d28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d30:	4b28      	ldr	r3, [pc, #160]	; (8004dd4 <prvInsertBlockIntoFreeList+0xac>)
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	e002      	b.n	8004d3c <prvInsertBlockIntoFreeList+0x14>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d8f7      	bhi.n	8004d36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	4413      	add	r3, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d108      	bne.n	8004d6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	441a      	add	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	441a      	add	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d118      	bne.n	8004db0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d00d      	beq.n	8004da6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	441a      	add	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	e008      	b.n	8004db8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004da6:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	e003      	b.n	8004db8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d002      	beq.n	8004dc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	200049fc 	.word	0x200049fc
 8004dd8:	20004a04 	.word	0x20004a04

08004ddc <memset>:
 8004ddc:	4402      	add	r2, r0
 8004dde:	4603      	mov	r3, r0
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d100      	bne.n	8004de6 <memset+0xa>
 8004de4:	4770      	bx	lr
 8004de6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dea:	e7f9      	b.n	8004de0 <memset+0x4>

08004dec <__libc_init_array>:
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	4d0d      	ldr	r5, [pc, #52]	; (8004e24 <__libc_init_array+0x38>)
 8004df0:	4c0d      	ldr	r4, [pc, #52]	; (8004e28 <__libc_init_array+0x3c>)
 8004df2:	1b64      	subs	r4, r4, r5
 8004df4:	10a4      	asrs	r4, r4, #2
 8004df6:	2600      	movs	r6, #0
 8004df8:	42a6      	cmp	r6, r4
 8004dfa:	d109      	bne.n	8004e10 <__libc_init_array+0x24>
 8004dfc:	4d0b      	ldr	r5, [pc, #44]	; (8004e2c <__libc_init_array+0x40>)
 8004dfe:	4c0c      	ldr	r4, [pc, #48]	; (8004e30 <__libc_init_array+0x44>)
 8004e00:	f000 f826 	bl	8004e50 <_init>
 8004e04:	1b64      	subs	r4, r4, r5
 8004e06:	10a4      	asrs	r4, r4, #2
 8004e08:	2600      	movs	r6, #0
 8004e0a:	42a6      	cmp	r6, r4
 8004e0c:	d105      	bne.n	8004e1a <__libc_init_array+0x2e>
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}
 8004e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e14:	4798      	blx	r3
 8004e16:	3601      	adds	r6, #1
 8004e18:	e7ee      	b.n	8004df8 <__libc_init_array+0xc>
 8004e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e1e:	4798      	blx	r3
 8004e20:	3601      	adds	r6, #1
 8004e22:	e7f2      	b.n	8004e0a <__libc_init_array+0x1e>
 8004e24:	08004f28 	.word	0x08004f28
 8004e28:	08004f28 	.word	0x08004f28
 8004e2c:	08004f28 	.word	0x08004f28
 8004e30:	08004f2c 	.word	0x08004f2c

08004e34 <memcpy>:
 8004e34:	440a      	add	r2, r1
 8004e36:	4291      	cmp	r1, r2
 8004e38:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e3c:	d100      	bne.n	8004e40 <memcpy+0xc>
 8004e3e:	4770      	bx	lr
 8004e40:	b510      	push	{r4, lr}
 8004e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e4a:	4291      	cmp	r1, r2
 8004e4c:	d1f9      	bne.n	8004e42 <memcpy+0xe>
 8004e4e:	bd10      	pop	{r4, pc}

08004e50 <_init>:
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e52:	bf00      	nop
 8004e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e56:	bc08      	pop	{r3}
 8004e58:	469e      	mov	lr, r3
 8004e5a:	4770      	bx	lr

08004e5c <_fini>:
 8004e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5e:	bf00      	nop
 8004e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e62:	bc08      	pop	{r3}
 8004e64:	469e      	mov	lr, r3
 8004e66:	4770      	bx	lr
