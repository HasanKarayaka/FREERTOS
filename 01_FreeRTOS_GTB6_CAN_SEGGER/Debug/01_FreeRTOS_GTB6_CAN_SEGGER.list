
01_FreeRTOS_GTB6_CAN_SEGGER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007538  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08007708  08007708  00017708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078b4  080078b4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080078b4  080078b4  000178b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078bc  080078bc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078bc  080078bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078c0  080078c0  000178c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080078c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007104  20000010  080078d4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007114  080078d4  00027114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e8e3  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d5b  00000000  00000000  0003e966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a30  00000000  00000000  000426c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001455  00000000  00000000  000440f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000048c1  00000000  00000000  0004554d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d9ec  00000000  00000000  00049e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e34b4  00000000  00000000  000677fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006fd4  00000000  00000000  0014acb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ba  00000000  00000000  00151c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080076f0 	.word	0x080076f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	080076f0 	.word	0x080076f0

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20004b40 	.word	0x20004b40

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b970 	b.w	800059c <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9e08      	ldr	r6, [sp, #32]
 80002da:	460d      	mov	r5, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	460f      	mov	r7, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4694      	mov	ip, r2
 80002e8:	d965      	bls.n	80003b6 <__udivmoddi4+0xe2>
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	b143      	cbz	r3, 8000302 <__udivmoddi4+0x2e>
 80002f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f4:	f1c3 0220 	rsb	r2, r3, #32
 80002f8:	409f      	lsls	r7, r3
 80002fa:	fa20 f202 	lsr.w	r2, r0, r2
 80002fe:	4317      	orrs	r7, r2
 8000300:	409c      	lsls	r4, r3
 8000302:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000306:	fa1f f58c 	uxth.w	r5, ip
 800030a:	fbb7 f1fe 	udiv	r1, r7, lr
 800030e:	0c22      	lsrs	r2, r4, #16
 8000310:	fb0e 7711 	mls	r7, lr, r1, r7
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	fb01 f005 	mul.w	r0, r1, r5
 800031c:	4290      	cmp	r0, r2
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x62>
 8000320:	eb1c 0202 	adds.w	r2, ip, r2
 8000324:	f101 37ff 	add.w	r7, r1, #4294967295
 8000328:	f080 811c 	bcs.w	8000564 <__udivmoddi4+0x290>
 800032c:	4290      	cmp	r0, r2
 800032e:	f240 8119 	bls.w	8000564 <__udivmoddi4+0x290>
 8000332:	3902      	subs	r1, #2
 8000334:	4462      	add	r2, ip
 8000336:	1a12      	subs	r2, r2, r0
 8000338:	b2a4      	uxth	r4, r4
 800033a:	fbb2 f0fe 	udiv	r0, r2, lr
 800033e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000342:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000346:	fb00 f505 	mul.w	r5, r0, r5
 800034a:	42a5      	cmp	r5, r4
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x90>
 800034e:	eb1c 0404 	adds.w	r4, ip, r4
 8000352:	f100 32ff 	add.w	r2, r0, #4294967295
 8000356:	f080 8107 	bcs.w	8000568 <__udivmoddi4+0x294>
 800035a:	42a5      	cmp	r5, r4
 800035c:	f240 8104 	bls.w	8000568 <__udivmoddi4+0x294>
 8000360:	4464      	add	r4, ip
 8000362:	3802      	subs	r0, #2
 8000364:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	2100      	movs	r1, #0
 800036c:	b11e      	cbz	r6, 8000376 <__udivmoddi4+0xa2>
 800036e:	40dc      	lsrs	r4, r3
 8000370:	2300      	movs	r3, #0
 8000372:	e9c6 4300 	strd	r4, r3, [r6]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0xbc>
 800037e:	2e00      	cmp	r6, #0
 8000380:	f000 80ed 	beq.w	800055e <__udivmoddi4+0x28a>
 8000384:	2100      	movs	r1, #0
 8000386:	e9c6 0500 	strd	r0, r5, [r6]
 800038a:	4608      	mov	r0, r1
 800038c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000390:	fab3 f183 	clz	r1, r3
 8000394:	2900      	cmp	r1, #0
 8000396:	d149      	bne.n	800042c <__udivmoddi4+0x158>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d302      	bcc.n	80003a2 <__udivmoddi4+0xce>
 800039c:	4282      	cmp	r2, r0
 800039e:	f200 80f8 	bhi.w	8000592 <__udivmoddi4+0x2be>
 80003a2:	1a84      	subs	r4, r0, r2
 80003a4:	eb65 0203 	sbc.w	r2, r5, r3
 80003a8:	2001      	movs	r0, #1
 80003aa:	4617      	mov	r7, r2
 80003ac:	2e00      	cmp	r6, #0
 80003ae:	d0e2      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003b0:	e9c6 4700 	strd	r4, r7, [r6]
 80003b4:	e7df      	b.n	8000376 <__udivmoddi4+0xa2>
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xe6>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f382 	clz	r3, r2
 80003be:	2b00      	cmp	r3, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x210>
 80003c4:	1a8a      	subs	r2, r1, r2
 80003c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	2101      	movs	r1, #1
 80003d0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d4:	fb07 2015 	mls	r0, r7, r5, r2
 80003d8:	0c22      	lsrs	r2, r4, #16
 80003da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003de:	fb0e f005 	mul.w	r0, lr, r5
 80003e2:	4290      	cmp	r0, r2
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003e6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ea:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x122>
 80003f0:	4290      	cmp	r0, r2
 80003f2:	f200 80cb 	bhi.w	800058c <__udivmoddi4+0x2b8>
 80003f6:	4645      	mov	r5, r8
 80003f8:	1a12      	subs	r2, r2, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000400:	fb07 2210 	mls	r2, r7, r0, r2
 8000404:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000408:	fb0e fe00 	mul.w	lr, lr, r0
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x14e>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f100 32ff 	add.w	r2, r0, #4294967295
 8000418:	d202      	bcs.n	8000420 <__udivmoddi4+0x14c>
 800041a:	45a6      	cmp	lr, r4
 800041c:	f200 80bb 	bhi.w	8000596 <__udivmoddi4+0x2c2>
 8000420:	4610      	mov	r0, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800042a:	e79f      	b.n	800036c <__udivmoddi4+0x98>
 800042c:	f1c1 0720 	rsb	r7, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 fc07 	lsr.w	ip, r2, r7
 8000436:	ea4c 0c03 	orr.w	ip, ip, r3
 800043a:	fa05 f401 	lsl.w	r4, r5, r1
 800043e:	fa20 f307 	lsr.w	r3, r0, r7
 8000442:	40fd      	lsrs	r5, r7
 8000444:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fbb5 f8f9 	udiv	r8, r5, r9
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	fb09 5518 	mls	r5, r9, r8, r5
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800045c:	fb08 f50e 	mul.w	r5, r8, lr
 8000460:	42a5      	cmp	r5, r4
 8000462:	fa02 f201 	lsl.w	r2, r2, r1
 8000466:	fa00 f001 	lsl.w	r0, r0, r1
 800046a:	d90b      	bls.n	8000484 <__udivmoddi4+0x1b0>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f108 3aff 	add.w	sl, r8, #4294967295
 8000474:	f080 8088 	bcs.w	8000588 <__udivmoddi4+0x2b4>
 8000478:	42a5      	cmp	r5, r4
 800047a:	f240 8085 	bls.w	8000588 <__udivmoddi4+0x2b4>
 800047e:	f1a8 0802 	sub.w	r8, r8, #2
 8000482:	4464      	add	r4, ip
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	b29d      	uxth	r5, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000494:	fb03 fe0e 	mul.w	lr, r3, lr
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1da>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a4:	d26c      	bcs.n	8000580 <__udivmoddi4+0x2ac>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	d96a      	bls.n	8000580 <__udivmoddi4+0x2ac>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004b2:	fba3 9502 	umull	r9, r5, r3, r2
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	42ac      	cmp	r4, r5
 80004bc:	46c8      	mov	r8, r9
 80004be:	46ae      	mov	lr, r5
 80004c0:	d356      	bcc.n	8000570 <__udivmoddi4+0x29c>
 80004c2:	d053      	beq.n	800056c <__udivmoddi4+0x298>
 80004c4:	b156      	cbz	r6, 80004dc <__udivmoddi4+0x208>
 80004c6:	ebb0 0208 	subs.w	r2, r0, r8
 80004ca:	eb64 040e 	sbc.w	r4, r4, lr
 80004ce:	fa04 f707 	lsl.w	r7, r4, r7
 80004d2:	40ca      	lsrs	r2, r1
 80004d4:	40cc      	lsrs	r4, r1
 80004d6:	4317      	orrs	r7, r2
 80004d8:	e9c6 7400 	strd	r7, r4, [r6]
 80004dc:	4618      	mov	r0, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e4:	f1c3 0120 	rsb	r1, r3, #32
 80004e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ec:	fa20 f201 	lsr.w	r2, r0, r1
 80004f0:	fa25 f101 	lsr.w	r1, r5, r1
 80004f4:	409d      	lsls	r5, r3
 80004f6:	432a      	orrs	r2, r5
 80004f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004fc:	fa1f fe8c 	uxth.w	lr, ip
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1510 	mls	r5, r7, r0, r1
 8000508:	0c11      	lsrs	r1, r2, #16
 800050a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050e:	fb00 f50e 	mul.w	r5, r0, lr
 8000512:	428d      	cmp	r5, r1
 8000514:	fa04 f403 	lsl.w	r4, r4, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x258>
 800051a:	eb1c 0101 	adds.w	r1, ip, r1
 800051e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000522:	d22f      	bcs.n	8000584 <__udivmoddi4+0x2b0>
 8000524:	428d      	cmp	r5, r1
 8000526:	d92d      	bls.n	8000584 <__udivmoddi4+0x2b0>
 8000528:	3802      	subs	r0, #2
 800052a:	4461      	add	r1, ip
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5f7 	udiv	r5, r1, r7
 8000534:	fb07 1115 	mls	r1, r7, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f10e 	mul.w	r1, r5, lr
 8000540:	4291      	cmp	r1, r2
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x282>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295
 800054c:	d216      	bcs.n	800057c <__udivmoddi4+0x2a8>
 800054e:	4291      	cmp	r1, r2
 8000550:	d914      	bls.n	800057c <__udivmoddi4+0x2a8>
 8000552:	3d02      	subs	r5, #2
 8000554:	4462      	add	r2, ip
 8000556:	1a52      	subs	r2, r2, r1
 8000558:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055c:	e738      	b.n	80003d0 <__udivmoddi4+0xfc>
 800055e:	4631      	mov	r1, r6
 8000560:	4630      	mov	r0, r6
 8000562:	e708      	b.n	8000376 <__udivmoddi4+0xa2>
 8000564:	4639      	mov	r1, r7
 8000566:	e6e6      	b.n	8000336 <__udivmoddi4+0x62>
 8000568:	4610      	mov	r0, r2
 800056a:	e6fb      	b.n	8000364 <__udivmoddi4+0x90>
 800056c:	4548      	cmp	r0, r9
 800056e:	d2a9      	bcs.n	80004c4 <__udivmoddi4+0x1f0>
 8000570:	ebb9 0802 	subs.w	r8, r9, r2
 8000574:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000578:	3b01      	subs	r3, #1
 800057a:	e7a3      	b.n	80004c4 <__udivmoddi4+0x1f0>
 800057c:	4645      	mov	r5, r8
 800057e:	e7ea      	b.n	8000556 <__udivmoddi4+0x282>
 8000580:	462b      	mov	r3, r5
 8000582:	e794      	b.n	80004ae <__udivmoddi4+0x1da>
 8000584:	4640      	mov	r0, r8
 8000586:	e7d1      	b.n	800052c <__udivmoddi4+0x258>
 8000588:	46d0      	mov	r8, sl
 800058a:	e77b      	b.n	8000484 <__udivmoddi4+0x1b0>
 800058c:	3d02      	subs	r5, #2
 800058e:	4462      	add	r2, ip
 8000590:	e732      	b.n	80003f8 <__udivmoddi4+0x124>
 8000592:	4608      	mov	r0, r1
 8000594:	e70a      	b.n	80003ac <__udivmoddi4+0xd8>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e742      	b.n	8000422 <__udivmoddi4+0x14e>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fbf8 	bl	8000d98 <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 80005a8:	f005 fbc6 	bl	8005d38 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005ac:	f006 fb5a 	bl	8006c64 <SEGGER_SYSVIEW_Start>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f878 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 f942 	bl	800083c <MX_GPIO_Init>
  MX_CAN1_Init();
 80005b8:	f000 f8e0 	bl	800077c <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80005bc:	f000 f914 	bl	80007e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80005c0:	482c      	ldr	r0, [pc, #176]	; (8000674 <main+0xd4>)
 80005c2:	f000 fe07 	bl	80011d4 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80005c6:	2102      	movs	r1, #2
 80005c8:	482a      	ldr	r0, [pc, #168]	; (8000674 <main+0xd4>)
 80005ca:	f000 ff22 	bl	8001412 <HAL_CAN_ActivateNotification>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <main+0x38>
 	  {
 	    Error_Handler();
 80005d4:	f000 fa46 	bl	8000a64 <Error_Handler>
 	  }
 	  sFilterConfig.FilterBank = 0;
 80005d8:	4b27      	ldr	r3, [pc, #156]	; (8000678 <main+0xd8>)
 80005da:	2200      	movs	r2, #0
 80005dc:	615a      	str	r2, [r3, #20]
 	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <main+0xd8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
 	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005e4:	4b24      	ldr	r3, [pc, #144]	; (8000678 <main+0xd8>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	61da      	str	r2, [r3, #28]
 	  sFilterConfig.FilterIdHigh = 0x0000;
 80005ea:	4b23      	ldr	r3, [pc, #140]	; (8000678 <main+0xd8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 	 sFilterConfig.FilterIdLow = 0x0000;
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <main+0xd8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]
 	  sFilterConfig.FilterMaskIdHigh =0x0000;
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <main+0xd8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
 	  sFilterConfig.FilterMaskIdLow = 0x0000;
 80005fc:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <main+0xd8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
 	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000602:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <main+0xd8>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
 	  sFilterConfig.FilterActivation = ENABLE;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <main+0xd8>)
 800060a:	2201      	movs	r2, #1
 800060c:	621a      	str	r2, [r3, #32]
 	  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800060e:	491a      	ldr	r1, [pc, #104]	; (8000678 <main+0xd8>)
 8000610:	4818      	ldr	r0, [pc, #96]	; (8000674 <main+0xd4>)
 8000612:	f000 fcff 	bl	8001014 <HAL_CAN_ConfigFilter>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <main+0x80>
 	  {
 	    Error_Handler();
 800061c:	f000 fa22 	bl	8000a64 <Error_Handler>
 	  }
 		RxReceiver.StdId=0x000;
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <main+0xdc>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 		RxReceiver.DLC=8;
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <main+0xdc>)
 8000628:	2208      	movs	r2, #8
 800062a:	611a      	str	r2, [r3, #16]
 		RxReceiver.IDE=CAN_ID_STD;
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <main+0xdc>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
 		RxReceiver.RTR=CAN_RTR_DATA;
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <main+0xdc>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000638:	f002 fd02 	bl	8003040 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800063c:	4a10      	ldr	r2, [pc, #64]	; (8000680 <main+0xe0>)
 800063e:	2100      	movs	r1, #0
 8000640:	4810      	ldr	r0, [pc, #64]	; (8000684 <main+0xe4>)
 8000642:	f002 fd47 	bl	80030d4 <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <main+0xe8>)
 800064a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800064c:	4a0f      	ldr	r2, [pc, #60]	; (800068c <main+0xec>)
 800064e:	2100      	movs	r1, #0
 8000650:	480f      	ldr	r0, [pc, #60]	; (8000690 <main+0xf0>)
 8000652:	f002 fd3f 	bl	80030d4 <osThreadNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <main+0xf4>)
 800065a:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 800065c:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <main+0xf8>)
 800065e:	2100      	movs	r1, #0
 8000660:	480e      	ldr	r0, [pc, #56]	; (800069c <main+0xfc>)
 8000662:	f002 fd37 	bl	80030d4 <osThreadNew>
 8000666:	4603      	mov	r3, r0
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <main+0x100>)
 800066a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800066c:	f002 fd0c 	bl	8003088 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000670:	e7fe      	b.n	8000670 <main+0xd0>
 8000672:	bf00      	nop
 8000674:	20000054 	.word	0x20000054
 8000678:	2000002c 	.word	0x2000002c
 800067c:	200000e4 	.word	0x200000e4
 8000680:	08007808 	.word	0x08007808
 8000684:	08000961 	.word	0x08000961
 8000688:	200000c0 	.word	0x200000c0
 800068c:	0800782c 	.word	0x0800782c
 8000690:	080009ad 	.word	0x080009ad
 8000694:	200000c4 	.word	0x200000c4
 8000698:	08007850 	.word	0x08007850
 800069c:	080009f5 	.word	0x080009f5
 80006a0:	200000c8 	.word	0x200000c8

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2234      	movs	r2, #52	; 0x34
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f006 ffe2 	bl	800767c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b29      	ldr	r3, [pc, #164]	; (8000774 <SystemClock_Config+0xd0>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a28      	ldr	r2, [pc, #160]	; (8000774 <SystemClock_Config+0xd0>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b26      	ldr	r3, [pc, #152]	; (8000774 <SystemClock_Config+0xd0>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <SystemClock_Config+0xd4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a22      	ldr	r2, [pc, #136]	; (8000778 <SystemClock_Config+0xd4>)
 80006ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <SystemClock_Config+0xd4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000718:	23a8      	movs	r3, #168	; 0xa8
 800071a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000720:	2302      	movs	r3, #2
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000724:	2302      	movs	r3, #2
 8000726:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fc35 	bl	8001f9c <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000738:	f000 f994 	bl	8000a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2302      	movs	r3, #2
 8000742:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000748:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800074c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2105      	movs	r1, #5
 800075a:	4618      	mov	r0, r3
 800075c:	f001 f928 	bl	80019b0 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000766:	f000 f97d 	bl	8000a64 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	; 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_CAN1_Init+0x64>)
 8000782:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <MX_CAN1_Init+0x68>)
 8000784:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_CAN1_Init+0x64>)
 8000788:	2210      	movs	r2, #16
 800078a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_CAN1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_CAN1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_CAN1_Init+0x64>)
 800079a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800079e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_CAN1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_CAN1_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_CAN1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_CAN1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_CAN1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_CAN1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_CAN1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_CAN1_Init+0x64>)
 80007cc:	f000 fb26 	bl	8000e1c <HAL_CAN_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80007d6:	f000 f945 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000054 	.word	0x20000054
 80007e4:	40006400 	.word	0x40006400

080007e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_USART1_UART_Init+0x50>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000820:	f002 f908 	bl	8002a34 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800082a:	f000 f91b 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000007c 	.word	0x2000007c
 8000838:	40011000 	.word	0x40011000

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b3e      	ldr	r3, [pc, #248]	; (8000950 <MX_GPIO_Init+0x114>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a3d      	ldr	r2, [pc, #244]	; (8000950 <MX_GPIO_Init+0x114>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <MX_GPIO_Init+0x114>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b37      	ldr	r3, [pc, #220]	; (8000950 <MX_GPIO_Init+0x114>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a36      	ldr	r2, [pc, #216]	; (8000950 <MX_GPIO_Init+0x114>)
 8000878:	f043 0320 	orr.w	r3, r3, #32
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b34      	ldr	r3, [pc, #208]	; (8000950 <MX_GPIO_Init+0x114>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0320 	and.w	r3, r3, #32
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	4b30      	ldr	r3, [pc, #192]	; (8000950 <MX_GPIO_Init+0x114>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a2f      	ldr	r2, [pc, #188]	; (8000950 <MX_GPIO_Init+0x114>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <MX_GPIO_Init+0x114>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b29      	ldr	r3, [pc, #164]	; (8000950 <MX_GPIO_Init+0x114>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a28      	ldr	r2, [pc, #160]	; (8000950 <MX_GPIO_Init+0x114>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b26      	ldr	r3, [pc, #152]	; (8000950 <MX_GPIO_Init+0x114>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b22      	ldr	r3, [pc, #136]	; (8000950 <MX_GPIO_Init+0x114>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a21      	ldr	r2, [pc, #132]	; (8000950 <MX_GPIO_Init+0x114>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_GPIO_Init+0x114>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e4:	481b      	ldr	r0, [pc, #108]	; (8000954 <MX_GPIO_Init+0x118>)
 80008e6:	f001 f849 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2107      	movs	r1, #7
 80008ee:	481a      	ldr	r0, [pc, #104]	; (8000958 <MX_GPIO_Init+0x11c>)
 80008f0:	f001 f844 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4811      	ldr	r0, [pc, #68]	; (8000954 <MX_GPIO_Init+0x118>)
 800090e:	f000 fe89 	bl	8001624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000912:	2307      	movs	r3, #7
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	480b      	ldr	r0, [pc, #44]	; (8000958 <MX_GPIO_Init+0x11c>)
 800092a:	f000 fe7b 	bl	8001624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 800092e:	230b      	movs	r3, #11
 8000930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4806      	ldr	r0, [pc, #24]	; (800095c <MX_GPIO_Init+0x120>)
 8000942:	f000 fe6f 	bl	8001624 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40020800 	.word	0x40020800
 8000958:	40021400 	.word	0x40021400
 800095c:	40020000 	.word	0x40020000

08000960 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b092      	sub	sp, #72	; 0x48
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxReceiver;
    unsigned char TxData[8];


    uint32_t TxMailbox;
	TxTransmitter.StdId=0x000;
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <StartDefaultTask+0x44>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
	TxTransmitter.DLC=8;
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <StartDefaultTask+0x44>)
 8000970:	2208      	movs	r2, #8
 8000972:	611a      	str	r2, [r3, #16]
	TxTransmitter.IDE=CAN_ID_STD;
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <StartDefaultTask+0x44>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
	TxTransmitter.RTR = CAN_RTR_DATA;
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <StartDefaultTask+0x44>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  /* Infinite loop */
  for(;;)
  {
      TxData[0] = 0x01;
 8000980:	2301      	movs	r3, #1
 8000982:	733b      	strb	r3, [r7, #12]
      TxData[1] = 0x02;
 8000984:	2302      	movs	r3, #2
 8000986:	737b      	strb	r3, [r7, #13]
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	f107 020c 	add.w	r2, r7, #12
 8000990:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <StartDefaultTask+0x48>)
 8000996:	f000 fc61 	bl	800125c <HAL_CAN_AddTxMessage>


	osDelay(1000);
 800099a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800099e:	f002 fc2b 	bl	80031f8 <osDelay>
      TxData[0] = 0x01;
 80009a2:	e7ed      	b.n	8000980 <StartDefaultTask+0x20>
 80009a4:	200000cc 	.word	0x200000cc
 80009a8:	20000054 	.word	0x20000054

080009ac <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET)
 80009b4:	2102      	movs	r1, #2
 80009b6:	480d      	ldr	r0, [pc, #52]	; (80009ec <StartTask02+0x40>)
 80009b8:	f000 ffc8 	bl	800194c <HAL_GPIO_ReadPin>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d109      	bne.n	80009d6 <StartTask02+0x2a>
      {

          // LED'i yak
          HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET); // LED'i yak
 80009c2:	2201      	movs	r2, #1
 80009c4:	2101      	movs	r1, #1
 80009c6:	480a      	ldr	r0, [pc, #40]	; (80009f0 <StartTask02+0x44>)
 80009c8:	f000 ffd8 	bl	800197c <HAL_GPIO_WritePin>
          osDelay(1000); // 1 saniye bekle
 80009cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d0:	f002 fc12 	bl	80031f8 <osDelay>
 80009d4:	e004      	b.n	80009e0 <StartTask02+0x34>
      }
      else
      {
          // PA0 pininde bir değişiklik yoksa LED'i söndür
    	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET); // LED'i söndür
 80009d6:	2200      	movs	r2, #0
 80009d8:	2101      	movs	r1, #1
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <StartTask02+0x44>)
 80009dc:	f000 ffce 	bl	800197c <HAL_GPIO_WritePin>

      }
    osDelay(1000);
 80009e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e4:	f002 fc08 	bl	80031f8 <osDelay>
      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET)
 80009e8:	e7e4      	b.n	80009b4 <StartTask02+0x8>
 80009ea:	bf00      	nop
 80009ec:	40020000 	.word	0x40020000
 80009f0:	40021400 	.word	0x40021400

080009f4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	; 0x30
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	  /* USER CODE BEGIN 5 */
	    CAN_TxHeaderTypeDef TxHeader;
	    uint8_t TxData[8];
	    uint32_t TxMailbox;
		TxTransmitter.StdId=0x000;
 80009fc:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <StartTask03+0x44>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
		TxTransmitter.DLC=8;
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <StartTask03+0x44>)
 8000a04:	2208      	movs	r2, #8
 8000a06:	611a      	str	r2, [r3, #16]
		TxTransmitter.IDE=CAN_ID_STD;
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <StartTask03+0x44>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
		TxTransmitter.RTR = CAN_RTR_DATA;
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <StartTask03+0x44>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
	  /* Infinite loop */
	  for(;;)
	  {
	      TxData[0] = 0x01;
 8000a14:	2301      	movs	r3, #1
 8000a16:	743b      	strb	r3, [r7, #16]
	      TxData[1] = 0x02;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	747b      	strb	r3, [r7, #17]
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	f107 0210 	add.w	r2, r7, #16
 8000a24:	f107 0118 	add.w	r1, r7, #24
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <StartTask03+0x48>)
 8000a2a:	f000 fc17 	bl	800125c <HAL_CAN_AddTxMessage>


		osDelay(1000);
 8000a2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a32:	f002 fbe1 	bl	80031f8 <osDelay>
	      TxData[0] = 0x01;
 8000a36:	e7ed      	b.n	8000a14 <StartTask03+0x20>
 8000a38:	200000cc 	.word	0x200000cc
 8000a3c:	20000054 	.word	0x20000054

08000a40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d101      	bne.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a52:	f000 f9c3 	bl	8000ddc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40001000 	.word	0x40001000

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <Error_Handler+0x8>
	...

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	4a11      	ldr	r2, [pc, #68]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a84:	6453      	str	r3, [r2, #68]	; 0x44
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <HAL_MspInit+0x54>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	210f      	movs	r1, #15
 8000ab2:	f06f 0001 	mvn.w	r0, #1
 8000ab6:	f000 fd8b 	bl	80015d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <HAL_CAN_MspInit+0x84>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d12c      	bne.n	8000b44 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_CAN_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <HAL_CAN_MspInit+0x88>)
 8000af4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_CAN_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_CAN_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <HAL_CAN_MspInit+0x88>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_CAN_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b34:	2309      	movs	r3, #9
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_CAN_MspInit+0x8c>)
 8000b40:	f000 fd70 	bl	8001624 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40006400 	.word	0x40006400
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020400 	.word	0x40020400

08000b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a19      	ldr	r2, [pc, #100]	; (8000bdc <HAL_UART_MspInit+0x84>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d12c      	bne.n	8000bd4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <HAL_UART_MspInit+0x88>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a17      	ldr	r2, [pc, #92]	; (8000be0 <HAL_UART_MspInit+0x88>)
 8000b84:	f043 0310 	orr.w	r3, r3, #16
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <HAL_UART_MspInit+0x88>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f003 0310 	and.w	r3, r3, #16
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <HAL_UART_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a10      	ldr	r2, [pc, #64]	; (8000be0 <HAL_UART_MspInit+0x88>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_UART_MspInit+0x88>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bc4:	2307      	movs	r3, #7
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <HAL_UART_MspInit+0x8c>)
 8000bd0:	f000 fd28 	bl	8001624 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	; 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40011000 	.word	0x40011000
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020000 	.word	0x40020000

08000be8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08e      	sub	sp, #56	; 0x38
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <HAL_InitTick+0xe4>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	4a32      	ldr	r2, [pc, #200]	; (8000ccc <HAL_InitTick+0xe4>)
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6413      	str	r3, [r2, #64]	; 0x40
 8000c08:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <HAL_InitTick+0xe4>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	f003 0310 	and.w	r3, r3, #16
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c14:	f107 0210 	add.w	r2, r7, #16
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 ffe0 	bl	8001be4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c24:	6a3b      	ldr	r3, [r7, #32]
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d103      	bne.n	8000c36 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c2e:	f000 ffb1 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 8000c32:	6378      	str	r0, [r7, #52]	; 0x34
 8000c34:	e004      	b.n	8000c40 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c36:	f000 ffad 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c42:	4a23      	ldr	r2, [pc, #140]	; (8000cd0 <HAL_InitTick+0xe8>)
 8000c44:	fba2 2303 	umull	r2, r3, r2, r3
 8000c48:	0c9b      	lsrs	r3, r3, #18
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <HAL_InitTick+0xec>)
 8000c50:	4a21      	ldr	r2, [pc, #132]	; (8000cd8 <HAL_InitTick+0xf0>)
 8000c52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <HAL_InitTick+0xec>)
 8000c56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c5a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c5c:	4a1d      	ldr	r2, [pc, #116]	; (8000cd4 <HAL_InitTick+0xec>)
 8000c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c60:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <HAL_InitTick+0xec>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <HAL_InitTick+0xec>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <HAL_InitTick+0xec>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c74:	4817      	ldr	r0, [pc, #92]	; (8000cd4 <HAL_InitTick+0xec>)
 8000c76:	f001 fc2f 	bl	80024d8 <HAL_TIM_Base_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d11b      	bne.n	8000cc0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c88:	4812      	ldr	r0, [pc, #72]	; (8000cd4 <HAL_InitTick+0xec>)
 8000c8a:	f001 fc7f 	bl	800258c <HAL_TIM_Base_Start_IT>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d111      	bne.n	8000cc0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c9c:	2036      	movs	r0, #54	; 0x36
 8000c9e:	f000 fcb3 	bl	8001608 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d808      	bhi.n	8000cba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	2036      	movs	r0, #54	; 0x36
 8000cae:	f000 fc8f 	bl	80015d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <HAL_InitTick+0xf4>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	e002      	b.n	8000cc0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3738      	adds	r7, #56	; 0x38
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	431bde83 	.word	0x431bde83
 8000cd4:	20000100 	.word	0x20000100
 8000cd8:	40001000 	.word	0x40001000
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <UsageFault_Handler+0x4>

08000cfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <TIM6_DAC_IRQHandler+0x10>)
 8000d12:	f001 fcab 	bl	800266c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000100 	.word	0x20000100

08000d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <SystemInit+0x20>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <SystemInit+0x20>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d4a:	490e      	ldr	r1, [pc, #56]	; (8000d84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d60:	4c0b      	ldr	r4, [pc, #44]	; (8000d90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d6e:	f7ff ffd7 	bl	8000d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d72:	f006 fc8b 	bl	800768c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fc13 	bl	80005a0 <main>
  bx  lr    
 8000d7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d88:	080078c4 	.word	0x080078c4
  ldr r2, =_sbss
 8000d8c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d90:	20007114 	.word	0x20007114

08000d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <HAL_Init+0x40>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_Init+0x40>)
 8000dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_Init+0x40>)
 8000dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 fbfa 	bl	80015ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f7ff ff0e 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dcc:	f7ff fe50 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023c00 	.word	0x40023c00

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000148 	.word	0x20000148

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000148 	.word	0x20000148

08000e1c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e0ed      	b.n	800100a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d102      	bne.n	8000e40 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff fe44 	bl	8000ac8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f042 0201 	orr.w	r2, r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e50:	f7ff ffd8 	bl	8000e04 <HAL_GetTick>
 8000e54:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e56:	e012      	b.n	8000e7e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e58:	f7ff ffd4 	bl	8000e04 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b0a      	cmp	r3, #10
 8000e64:	d90b      	bls.n	8000e7e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2205      	movs	r2, #5
 8000e76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e0c5      	b.n	800100a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0e5      	beq.n	8000e58 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 0202 	bic.w	r2, r2, #2
 8000e9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e9c:	f7ff ffb2 	bl	8000e04 <HAL_GetTick>
 8000ea0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ea2:	e012      	b.n	8000eca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ea4:	f7ff ffae 	bl	8000e04 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b0a      	cmp	r3, #10
 8000eb0:	d90b      	bls.n	8000eca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2205      	movs	r2, #5
 8000ec2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e09f      	b.n	800100a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1e5      	bne.n	8000ea4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7e1b      	ldrb	r3, [r3, #24]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d108      	bne.n	8000ef2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	e007      	b.n	8000f02 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7e5b      	ldrb	r3, [r3, #25]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d108      	bne.n	8000f1c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	e007      	b.n	8000f2c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7e9b      	ldrb	r3, [r3, #26]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d108      	bne.n	8000f46 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0220 	orr.w	r2, r2, #32
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	e007      	b.n	8000f56 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 0220 	bic.w	r2, r2, #32
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	7edb      	ldrb	r3, [r3, #27]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d108      	bne.n	8000f70 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0210 	bic.w	r2, r2, #16
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e007      	b.n	8000f80 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f042 0210 	orr.w	r2, r2, #16
 8000f7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	7f1b      	ldrb	r3, [r3, #28]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d108      	bne.n	8000f9a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f042 0208 	orr.w	r2, r2, #8
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	e007      	b.n	8000faa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0208 	bic.w	r2, r2, #8
 8000fa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	7f5b      	ldrb	r3, [r3, #29]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d108      	bne.n	8000fc4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f042 0204 	orr.w	r2, r2, #4
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	e007      	b.n	8000fd4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0204 	bic.w	r2, r2, #4
 8000fd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	ea42 0103 	orr.w	r1, r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	1e5a      	subs	r2, r3, #1
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f893 3020 	ldrb.w	r3, [r3, #32]
 800102a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800102c:	7cfb      	ldrb	r3, [r7, #19]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d003      	beq.n	800103a <HAL_CAN_ConfigFilter+0x26>
 8001032:	7cfb      	ldrb	r3, [r7, #19]
 8001034:	2b02      	cmp	r3, #2
 8001036:	f040 80be 	bne.w	80011b6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800103a:	4b65      	ldr	r3, [pc, #404]	; (80011d0 <HAL_CAN_ConfigFilter+0x1bc>)
 800103c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001044:	f043 0201 	orr.w	r2, r3, #1
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001054:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	431a      	orrs	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f003 031f 	and.w	r3, r3, #31
 800107a:	2201      	movs	r2, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43db      	mvns	r3, r3
 800108c:	401a      	ands	r2, r3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	69db      	ldr	r3, [r3, #28]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d123      	bne.n	80010e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	3248      	adds	r2, #72	; 0x48
 80010c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010da:	6979      	ldr	r1, [r7, #20]
 80010dc:	3348      	adds	r3, #72	; 0x48
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	440b      	add	r3, r1
 80010e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	69db      	ldr	r3, [r3, #28]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d122      	bne.n	8001132 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	431a      	orrs	r2, r3
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800110c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	3248      	adds	r2, #72	; 0x48
 8001112:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001126:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001128:	6979      	ldr	r1, [r7, #20]
 800112a:	3348      	adds	r3, #72	; 0x48
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	440b      	add	r3, r1
 8001130:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d109      	bne.n	800114e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	43db      	mvns	r3, r3
 8001144:	401a      	ands	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800114c:	e007      	b.n	800115e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	431a      	orrs	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d109      	bne.n	800117a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	43db      	mvns	r3, r3
 8001170:	401a      	ands	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001178:	e007      	b.n	800118a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	431a      	orrs	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d107      	bne.n	80011a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	431a      	orrs	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011a8:	f023 0201 	bic.w	r2, r3, #1
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e006      	b.n	80011c4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
  }
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	371c      	adds	r7, #28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40006400 	.word	0x40006400

080011d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d12e      	bne.n	8001246 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2202      	movs	r2, #2
 80011ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0201 	bic.w	r2, r2, #1
 80011fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001200:	f7ff fe00 	bl	8000e04 <HAL_GetTick>
 8001204:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001206:	e012      	b.n	800122e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001208:	f7ff fdfc 	bl	8000e04 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b0a      	cmp	r3, #10
 8001214:	d90b      	bls.n	800122e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2205      	movs	r2, #5
 8001226:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e012      	b.n	8001254 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1e5      	bne.n	8001208 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	e006      	b.n	8001254 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
  }
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001270:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800127a:	7ffb      	ldrb	r3, [r7, #31]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d003      	beq.n	8001288 <HAL_CAN_AddTxMessage+0x2c>
 8001280:	7ffb      	ldrb	r3, [r7, #31]
 8001282:	2b02      	cmp	r3, #2
 8001284:	f040 80b8 	bne.w	80013f8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10a      	bne.n	80012a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001298:	2b00      	cmp	r3, #0
 800129a:	d105      	bne.n	80012a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 80a0 	beq.w	80013e8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	0e1b      	lsrs	r3, r3, #24
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d907      	bls.n	80012c8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e09e      	b.n	8001406 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012c8:	2201      	movs	r2, #1
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	409a      	lsls	r2, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10d      	bne.n	80012f6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012e4:	68f9      	ldr	r1, [r7, #12]
 80012e6:	6809      	ldr	r1, [r1, #0]
 80012e8:	431a      	orrs	r2, r3
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3318      	adds	r3, #24
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	440b      	add	r3, r1
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	e00f      	b.n	8001316 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001300:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001306:	68f9      	ldr	r1, [r7, #12]
 8001308:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800130a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	3318      	adds	r3, #24
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	440b      	add	r3, r1
 8001314:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6819      	ldr	r1, [r3, #0]
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	691a      	ldr	r2, [r3, #16]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3318      	adds	r3, #24
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	440b      	add	r3, r1
 8001326:	3304      	adds	r3, #4
 8001328:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	7d1b      	ldrb	r3, [r3, #20]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d111      	bne.n	8001356 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3318      	adds	r3, #24
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	4413      	add	r3, r2
 800133e:	3304      	adds	r3, #4
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	6811      	ldr	r1, [r2, #0]
 8001346:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3318      	adds	r3, #24
 800134e:	011b      	lsls	r3, r3, #4
 8001350:	440b      	add	r3, r1
 8001352:	3304      	adds	r3, #4
 8001354:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3307      	adds	r3, #7
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	061a      	lsls	r2, r3, #24
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3306      	adds	r3, #6
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	041b      	lsls	r3, r3, #16
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3305      	adds	r3, #5
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	4313      	orrs	r3, r2
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	3204      	adds	r2, #4
 8001376:	7812      	ldrb	r2, [r2, #0]
 8001378:	4610      	mov	r0, r2
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	6811      	ldr	r1, [r2, #0]
 800137e:	ea43 0200 	orr.w	r2, r3, r0
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	440b      	add	r3, r1
 8001388:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800138c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3303      	adds	r3, #3
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	061a      	lsls	r2, r3, #24
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3302      	adds	r3, #2
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	041b      	lsls	r3, r3, #16
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3301      	adds	r3, #1
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	4313      	orrs	r3, r2
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	7812      	ldrb	r2, [r2, #0]
 80013ae:	4610      	mov	r0, r2
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	6811      	ldr	r1, [r2, #0]
 80013b4:	ea43 0200 	orr.w	r2, r3, r0
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	440b      	add	r3, r1
 80013be:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80013c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	3318      	adds	r3, #24
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	4413      	add	r3, r2
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	6811      	ldr	r1, [r2, #0]
 80013d6:	f043 0201 	orr.w	r2, r3, #1
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3318      	adds	r3, #24
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	440b      	add	r3, r1
 80013e2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	e00e      	b.n	8001406 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e006      	b.n	8001406 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
  }
}
 8001406:	4618      	mov	r0, r3
 8001408:	3724      	adds	r7, #36	; 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001412:	b480      	push	{r7}
 8001414:	b085      	sub	sp, #20
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001422:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d002      	beq.n	8001430 <HAL_CAN_ActivateNotification+0x1e>
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d109      	bne.n	8001444 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6959      	ldr	r1, [r3, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	e006      	b.n	8001452 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
  }
}
 8001452:	4618      	mov	r0, r3
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800148c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001492:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	60d3      	str	r3, [r2, #12]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	db0b      	blt.n	80014ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	4907      	ldr	r1, [pc, #28]	; (80014fc <__NVIC_EnableIRQ+0x38>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	2001      	movs	r0, #1
 80014e6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100

08001500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	db0a      	blt.n	800152a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	490c      	ldr	r1, [pc, #48]	; (800154c <__NVIC_SetPriority+0x4c>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	0112      	lsls	r2, r2, #4
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	440b      	add	r3, r1
 8001524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001528:	e00a      	b.n	8001540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4908      	ldr	r1, [pc, #32]	; (8001550 <__NVIC_SetPriority+0x50>)
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	3b04      	subs	r3, #4
 8001538:	0112      	lsls	r2, r2, #4
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	440b      	add	r3, r1
 800153e:	761a      	strb	r2, [r3, #24]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000e100 	.word	0xe000e100
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	; 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f1c3 0307 	rsb	r3, r3, #7
 800156e:	2b04      	cmp	r3, #4
 8001570:	bf28      	it	cs
 8001572:	2304      	movcs	r3, #4
 8001574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3304      	adds	r3, #4
 800157a:	2b06      	cmp	r3, #6
 800157c:	d902      	bls.n	8001584 <NVIC_EncodePriority+0x30>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3b03      	subs	r3, #3
 8001582:	e000      	b.n	8001586 <NVIC_EncodePriority+0x32>
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	f04f 32ff 	mov.w	r2, #4294967295
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43da      	mvns	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	401a      	ands	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800159c:	f04f 31ff 	mov.w	r1, #4294967295
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	43d9      	mvns	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	4313      	orrs	r3, r2
         );
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3724      	adds	r7, #36	; 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ff4c 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e2:	f7ff ff61 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 80015e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	6978      	ldr	r0, [r7, #20]
 80015ee:	f7ff ffb1 	bl	8001554 <NVIC_EncodePriority>
 80015f2:	4602      	mov	r2, r0
 80015f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff80 	bl	8001500 <__NVIC_SetPriority>
}
 8001600:	bf00      	nop
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff54 	bl	80014c4 <__NVIC_EnableIRQ>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	e165      	b.n	800190c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001640:	2201      	movs	r2, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	429a      	cmp	r2, r3
 800165a:	f040 8154 	bne.w	8001906 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	2b01      	cmp	r3, #1
 8001668:	d005      	beq.n	8001676 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001672:	2b02      	cmp	r3, #2
 8001674:	d130      	bne.n	80016d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	2203      	movs	r2, #3
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ac:	2201      	movs	r2, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 0201 	and.w	r2, r3, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d017      	beq.n	8001714 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d123      	bne.n	8001768 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	08da      	lsrs	r2, r3, #3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3208      	adds	r2, #8
 8001728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	220f      	movs	r2, #15
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	08da      	lsrs	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3208      	adds	r2, #8
 8001762:	69b9      	ldr	r1, [r7, #24]
 8001764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0203 	and.w	r2, r3, #3
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80ae 	beq.w	8001906 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b5d      	ldr	r3, [pc, #372]	; (8001924 <HAL_GPIO_Init+0x300>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a5c      	ldr	r2, [pc, #368]	; (8001924 <HAL_GPIO_Init+0x300>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b5a      	ldr	r3, [pc, #360]	; (8001924 <HAL_GPIO_Init+0x300>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c6:	4a58      	ldr	r2, [pc, #352]	; (8001928 <HAL_GPIO_Init+0x304>)
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	3302      	adds	r3, #2
 80017ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4f      	ldr	r2, [pc, #316]	; (800192c <HAL_GPIO_Init+0x308>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d025      	beq.n	800183e <HAL_GPIO_Init+0x21a>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4e      	ldr	r2, [pc, #312]	; (8001930 <HAL_GPIO_Init+0x30c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d01f      	beq.n	800183a <HAL_GPIO_Init+0x216>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4d      	ldr	r2, [pc, #308]	; (8001934 <HAL_GPIO_Init+0x310>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d019      	beq.n	8001836 <HAL_GPIO_Init+0x212>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4c      	ldr	r2, [pc, #304]	; (8001938 <HAL_GPIO_Init+0x314>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d013      	beq.n	8001832 <HAL_GPIO_Init+0x20e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4b      	ldr	r2, [pc, #300]	; (800193c <HAL_GPIO_Init+0x318>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d00d      	beq.n	800182e <HAL_GPIO_Init+0x20a>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4a      	ldr	r2, [pc, #296]	; (8001940 <HAL_GPIO_Init+0x31c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d007      	beq.n	800182a <HAL_GPIO_Init+0x206>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a49      	ldr	r2, [pc, #292]	; (8001944 <HAL_GPIO_Init+0x320>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d101      	bne.n	8001826 <HAL_GPIO_Init+0x202>
 8001822:	2306      	movs	r3, #6
 8001824:	e00c      	b.n	8001840 <HAL_GPIO_Init+0x21c>
 8001826:	2307      	movs	r3, #7
 8001828:	e00a      	b.n	8001840 <HAL_GPIO_Init+0x21c>
 800182a:	2305      	movs	r3, #5
 800182c:	e008      	b.n	8001840 <HAL_GPIO_Init+0x21c>
 800182e:	2304      	movs	r3, #4
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x21c>
 8001832:	2303      	movs	r3, #3
 8001834:	e004      	b.n	8001840 <HAL_GPIO_Init+0x21c>
 8001836:	2302      	movs	r3, #2
 8001838:	e002      	b.n	8001840 <HAL_GPIO_Init+0x21c>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_GPIO_Init+0x21c>
 800183e:	2300      	movs	r3, #0
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	f002 0203 	and.w	r2, r2, #3
 8001846:	0092      	lsls	r2, r2, #2
 8001848:	4093      	lsls	r3, r2
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001850:	4935      	ldr	r1, [pc, #212]	; (8001928 <HAL_GPIO_Init+0x304>)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800185e:	4b3a      	ldr	r3, [pc, #232]	; (8001948 <HAL_GPIO_Init+0x324>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001882:	4a31      	ldr	r2, [pc, #196]	; (8001948 <HAL_GPIO_Init+0x324>)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001888:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <HAL_GPIO_Init+0x324>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018ac:	4a26      	ldr	r2, [pc, #152]	; (8001948 <HAL_GPIO_Init+0x324>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018b2:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_GPIO_Init+0x324>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018d6:	4a1c      	ldr	r2, [pc, #112]	; (8001948 <HAL_GPIO_Init+0x324>)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018dc:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <HAL_GPIO_Init+0x324>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001900:	4a11      	ldr	r2, [pc, #68]	; (8001948 <HAL_GPIO_Init+0x324>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3301      	adds	r3, #1
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	2b0f      	cmp	r3, #15
 8001910:	f67f ae96 	bls.w	8001640 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	40013800 	.word	0x40013800
 800192c:	40020000 	.word	0x40020000
 8001930:	40020400 	.word	0x40020400
 8001934:	40020800 	.word	0x40020800
 8001938:	40020c00 	.word	0x40020c00
 800193c:	40021000 	.word	0x40021000
 8001940:	40021400 	.word	0x40021400
 8001944:	40021800 	.word	0x40021800
 8001948:	40013c00 	.word	0x40013c00

0800194c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	887b      	ldrh	r3, [r7, #2]
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	e001      	b.n	800196e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800196e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
 8001988:	4613      	mov	r3, r2
 800198a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001998:	e003      	b.n	80019a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800199a:	887b      	ldrh	r3, [r7, #2]
 800199c:	041a      	lsls	r2, r3, #16
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	619a      	str	r2, [r3, #24]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0cc      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4b68      	ldr	r3, [pc, #416]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d90c      	bls.n	80019ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b65      	ldr	r3, [pc, #404]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b63      	ldr	r3, [pc, #396]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0b8      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a04:	4b59      	ldr	r3, [pc, #356]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	4a58      	ldr	r2, [pc, #352]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a1c:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	494d      	ldr	r1, [pc, #308]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d044      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b47      	ldr	r3, [pc, #284]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d119      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e07f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d003      	beq.n	8001a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e06f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7e:	4b3b      	ldr	r3, [pc, #236]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e067      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8e:	4b37      	ldr	r3, [pc, #220]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f023 0203 	bic.w	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4934      	ldr	r1, [pc, #208]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa0:	f7ff f9b0 	bl	8000e04 <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa8:	f7ff f9ac 	bl	8000e04 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e04f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 020c 	and.w	r2, r3, #12
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1eb      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d20c      	bcs.n	8001af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e032      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4916      	ldr	r1, [pc, #88]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d009      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	490e      	ldr	r1, [pc, #56]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b36:	f000 f887 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	490a      	ldr	r1, [pc, #40]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	5ccb      	ldrb	r3, [r1, r3]
 8001b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f846 	bl	8000be8 <HAL_InitTick>

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023c00 	.word	0x40023c00
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	08007874 	.word	0x08007874
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000004 	.word	0x20000004

08001b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000000 	.word	0x20000000

08001b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b98:	f7ff fff0 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	0a9b      	lsrs	r3, r3, #10
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	4903      	ldr	r1, [pc, #12]	; (8001bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001baa:	5ccb      	ldrb	r3, [r1, r3]
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	08007884 	.word	0x08007884

08001bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bc0:	f7ff ffdc 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	0b5b      	lsrs	r3, r3, #13
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	4903      	ldr	r1, [pc, #12]	; (8001be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bd2:	5ccb      	ldrb	r3, [r1, r3]
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	08007884 	.word	0x08007884

08001be4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_RCC_GetClockConfig+0x5c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 0203 	and.w	r2, r3, #3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_RCC_GetClockConfig+0x5c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_RCC_GetClockConfig+0x5c>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	08db      	lsrs	r3, r3, #3
 8001c1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <HAL_RCC_GetClockConfig+0x60>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 020f 	and.w	r2, r3, #15
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	601a      	str	r2, [r3, #0]
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40023c00 	.word	0x40023c00

08001c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c4c:	b0a6      	sub	sp, #152	; 0x98
 8001c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c6e:	4bc8      	ldr	r3, [pc, #800]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	f200 817e 	bhi.w	8001f78 <HAL_RCC_GetSysClockFreq+0x330>
 8001c7c:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c82:	bf00      	nop
 8001c84:	08001cb9 	.word	0x08001cb9
 8001c88:	08001f79 	.word	0x08001f79
 8001c8c:	08001f79 	.word	0x08001f79
 8001c90:	08001f79 	.word	0x08001f79
 8001c94:	08001cc1 	.word	0x08001cc1
 8001c98:	08001f79 	.word	0x08001f79
 8001c9c:	08001f79 	.word	0x08001f79
 8001ca0:	08001f79 	.word	0x08001f79
 8001ca4:	08001cc9 	.word	0x08001cc9
 8001ca8:	08001f79 	.word	0x08001f79
 8001cac:	08001f79 	.word	0x08001f79
 8001cb0:	08001f79 	.word	0x08001f79
 8001cb4:	08001e33 	.word	0x08001e33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cb8:	4bb6      	ldr	r3, [pc, #728]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001cba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001cbe:	e15f      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cc0:	4bb5      	ldr	r3, [pc, #724]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x350>)
 8001cc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001cc6:	e15b      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cc8:	4bb1      	ldr	r3, [pc, #708]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cd4:	4bae      	ldr	r3, [pc, #696]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d031      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce0:	4bab      	ldr	r3, [pc, #684]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	099b      	lsrs	r3, r3, #6
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	66bb      	str	r3, [r7, #104]	; 0x68
 8001cea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001cec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cf2:	663b      	str	r3, [r7, #96]	; 0x60
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	667b      	str	r3, [r7, #100]	; 0x64
 8001cf8:	4ba7      	ldr	r3, [pc, #668]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x350>)
 8001cfa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001cfe:	462a      	mov	r2, r5
 8001d00:	fb03 f202 	mul.w	r2, r3, r2
 8001d04:	2300      	movs	r3, #0
 8001d06:	4621      	mov	r1, r4
 8001d08:	fb01 f303 	mul.w	r3, r1, r3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	4aa2      	ldr	r2, [pc, #648]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x350>)
 8001d10:	4621      	mov	r1, r4
 8001d12:	fba1 1202 	umull	r1, r2, r1, r2
 8001d16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001d18:	460a      	mov	r2, r1
 8001d1a:	67ba      	str	r2, [r7, #120]	; 0x78
 8001d1c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001d1e:	4413      	add	r3, r2
 8001d20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d26:	2200      	movs	r2, #0
 8001d28:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d2a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001d2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d30:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001d34:	f7fe fab6 	bl	80002a4 <__aeabi_uldivmod>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d42:	e064      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d44:	4b92      	ldr	r3, [pc, #584]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	099b      	lsrs	r3, r3, #6
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	653b      	str	r3, [r7, #80]	; 0x50
 8001d4e:	657a      	str	r2, [r7, #84]	; 0x54
 8001d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d56:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d58:	2300      	movs	r3, #0
 8001d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d5c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001d60:	4622      	mov	r2, r4
 8001d62:	462b      	mov	r3, r5
 8001d64:	f04f 0000 	mov.w	r0, #0
 8001d68:	f04f 0100 	mov.w	r1, #0
 8001d6c:	0159      	lsls	r1, r3, #5
 8001d6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d72:	0150      	lsls	r0, r2, #5
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4621      	mov	r1, r4
 8001d7a:	1a51      	subs	r1, r2, r1
 8001d7c:	6139      	str	r1, [r7, #16]
 8001d7e:	4629      	mov	r1, r5
 8001d80:	eb63 0301 	sbc.w	r3, r3, r1
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d92:	4659      	mov	r1, fp
 8001d94:	018b      	lsls	r3, r1, #6
 8001d96:	4651      	mov	r1, sl
 8001d98:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d9c:	4651      	mov	r1, sl
 8001d9e:	018a      	lsls	r2, r1, #6
 8001da0:	4651      	mov	r1, sl
 8001da2:	ebb2 0801 	subs.w	r8, r2, r1
 8001da6:	4659      	mov	r1, fp
 8001da8:	eb63 0901 	sbc.w	r9, r3, r1
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001db8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dbc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dc0:	4690      	mov	r8, r2
 8001dc2:	4699      	mov	r9, r3
 8001dc4:	4623      	mov	r3, r4
 8001dc6:	eb18 0303 	adds.w	r3, r8, r3
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	462b      	mov	r3, r5
 8001dce:	eb49 0303 	adc.w	r3, r9, r3
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001de0:	4629      	mov	r1, r5
 8001de2:	028b      	lsls	r3, r1, #10
 8001de4:	4621      	mov	r1, r4
 8001de6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dea:	4621      	mov	r1, r4
 8001dec:	028a      	lsls	r2, r1, #10
 8001dee:	4610      	mov	r0, r2
 8001df0:	4619      	mov	r1, r3
 8001df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001df6:	2200      	movs	r2, #0
 8001df8:	643b      	str	r3, [r7, #64]	; 0x40
 8001dfa:	647a      	str	r2, [r7, #68]	; 0x44
 8001dfc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e00:	f7fe fa50 	bl	80002a4 <__aeabi_uldivmod>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4613      	mov	r3, r2
 8001e0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e0e:	4b60      	ldr	r3, [pc, #384]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	0c1b      	lsrs	r3, r3, #16
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	3301      	adds	r3, #1
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001e20:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001e30:	e0a6      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e32:	4b57      	ldr	r3, [pc, #348]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e3e:	4b54      	ldr	r3, [pc, #336]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d02a      	beq.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e4a:	4b51      	ldr	r3, [pc, #324]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	099b      	lsrs	r3, r3, #6
 8001e50:	2200      	movs	r2, #0
 8001e52:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4b4e      	ldr	r3, [pc, #312]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x350>)
 8001e60:	fb03 f201 	mul.w	r2, r3, r1
 8001e64:	2300      	movs	r3, #0
 8001e66:	fb00 f303 	mul.w	r3, r0, r3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	4a4a      	ldr	r2, [pc, #296]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x350>)
 8001e6e:	fba0 1202 	umull	r1, r2, r0, r2
 8001e72:	677a      	str	r2, [r7, #116]	; 0x74
 8001e74:	460a      	mov	r2, r1
 8001e76:	673a      	str	r2, [r7, #112]	; 0x70
 8001e78:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001e7a:	4413      	add	r3, r2
 8001e7c:	677b      	str	r3, [r7, #116]	; 0x74
 8001e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e82:	2200      	movs	r2, #0
 8001e84:	633b      	str	r3, [r7, #48]	; 0x30
 8001e86:	637a      	str	r2, [r7, #52]	; 0x34
 8001e88:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e8c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001e90:	f7fe fa08 	bl	80002a4 <__aeabi_uldivmod>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4613      	mov	r3, r2
 8001e9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e9e:	e05b      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea0:	4b3b      	ldr	r3, [pc, #236]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	099b      	lsrs	r3, r3, #6
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb2:	623b      	str	r3, [r7, #32]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ebc:	4642      	mov	r2, r8
 8001ebe:	464b      	mov	r3, r9
 8001ec0:	f04f 0000 	mov.w	r0, #0
 8001ec4:	f04f 0100 	mov.w	r1, #0
 8001ec8:	0159      	lsls	r1, r3, #5
 8001eca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ece:	0150      	lsls	r0, r2, #5
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4641      	mov	r1, r8
 8001ed6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001eda:	4649      	mov	r1, r9
 8001edc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001eec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ef0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ef4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ef8:	eb63 050b 	sbc.w	r5, r3, fp
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	00eb      	lsls	r3, r5, #3
 8001f06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f0a:	00e2      	lsls	r2, r4, #3
 8001f0c:	4614      	mov	r4, r2
 8001f0e:	461d      	mov	r5, r3
 8001f10:	4643      	mov	r3, r8
 8001f12:	18e3      	adds	r3, r4, r3
 8001f14:	603b      	str	r3, [r7, #0]
 8001f16:	464b      	mov	r3, r9
 8001f18:	eb45 0303 	adc.w	r3, r5, r3
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f2a:	4629      	mov	r1, r5
 8001f2c:	028b      	lsls	r3, r1, #10
 8001f2e:	4621      	mov	r1, r4
 8001f30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f34:	4621      	mov	r1, r4
 8001f36:	028a      	lsls	r2, r1, #10
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f40:	2200      	movs	r2, #0
 8001f42:	61bb      	str	r3, [r7, #24]
 8001f44:	61fa      	str	r2, [r7, #28]
 8001f46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f4a:	f7fe f9ab 	bl	80002a4 <__aeabi_uldivmod>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4613      	mov	r3, r2
 8001f54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f58:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	0f1b      	lsrs	r3, r3, #28
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001f66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001f76:	e003      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001f7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3798      	adds	r7, #152	; 0x98
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	00f42400 	.word	0x00f42400
 8001f98:	017d7840 	.word	0x017d7840

08001f9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e28d      	b.n	80024ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8083 	beq.w	80020c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fbc:	4b94      	ldr	r3, [pc, #592]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d019      	beq.n	8001ffc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fc8:	4b91      	ldr	r3, [pc, #580]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fd4:	4b8e      	ldr	r3, [pc, #568]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe0:	d00c      	beq.n	8001ffc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe2:	4b8b      	ldr	r3, [pc, #556]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d112      	bne.n	8002014 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fee:	4b88      	ldr	r3, [pc, #544]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ffa:	d10b      	bne.n	8002014 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffc:	4b84      	ldr	r3, [pc, #528]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d05b      	beq.n	80020c0 <HAL_RCC_OscConfig+0x124>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d157      	bne.n	80020c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e25a      	b.n	80024ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201c:	d106      	bne.n	800202c <HAL_RCC_OscConfig+0x90>
 800201e:	4b7c      	ldr	r3, [pc, #496]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a7b      	ldr	r2, [pc, #492]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e01d      	b.n	8002068 <HAL_RCC_OscConfig+0xcc>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0xb4>
 8002036:	4b76      	ldr	r3, [pc, #472]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a75      	ldr	r2, [pc, #468]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 800203c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b73      	ldr	r3, [pc, #460]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a72      	ldr	r2, [pc, #456]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0xcc>
 8002050:	4b6f      	ldr	r3, [pc, #444]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a6e      	ldr	r2, [pc, #440]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 8002056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b6c      	ldr	r3, [pc, #432]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a6b      	ldr	r2, [pc, #428]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 8002062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d013      	beq.n	8002098 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7fe fec8 	bl	8000e04 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002078:	f7fe fec4 	bl	8000e04 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e21f      	b.n	80024ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4b61      	ldr	r3, [pc, #388]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0xdc>
 8002096:	e014      	b.n	80020c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7fe feb4 	bl	8000e04 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a0:	f7fe feb0 	bl	8000e04 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e20b      	b.n	80024ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	4b57      	ldr	r3, [pc, #348]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x104>
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d06f      	beq.n	80021ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020ce:	4b50      	ldr	r3, [pc, #320]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d017      	beq.n	800210a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020da:	4b4d      	ldr	r3, [pc, #308]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d105      	bne.n	80020f2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020e6:	4b4a      	ldr	r3, [pc, #296]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00b      	beq.n	800210a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020f2:	4b47      	ldr	r3, [pc, #284]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020fa:	2b0c      	cmp	r3, #12
 80020fc:	d11c      	bne.n	8002138 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020fe:	4b44      	ldr	r3, [pc, #272]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d116      	bne.n	8002138 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210a:	4b41      	ldr	r3, [pc, #260]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <HAL_RCC_OscConfig+0x186>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d001      	beq.n	8002122 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e1d3      	b.n	80024ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002122:	4b3b      	ldr	r3, [pc, #236]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4937      	ldr	r1, [pc, #220]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002136:	e03a      	b.n	80021ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d020      	beq.n	8002182 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002140:	4b34      	ldr	r3, [pc, #208]	; (8002214 <HAL_RCC_OscConfig+0x278>)
 8002142:	2201      	movs	r2, #1
 8002144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002146:	f7fe fe5d 	bl	8000e04 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800214e:	f7fe fe59 	bl	8000e04 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e1b4      	b.n	80024ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002160:	4b2b      	ldr	r3, [pc, #172]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216c:	4b28      	ldr	r3, [pc, #160]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4925      	ldr	r1, [pc, #148]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 800217c:	4313      	orrs	r3, r2
 800217e:	600b      	str	r3, [r1, #0]
 8002180:	e015      	b.n	80021ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_RCC_OscConfig+0x278>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7fe fe3c 	bl	8000e04 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002190:	f7fe fe38 	bl	8000e04 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e193      	b.n	80024ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d036      	beq.n	8002228 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d016      	beq.n	80021f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c8:	f7fe fe1c 	bl	8000e04 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d0:	f7fe fe18 	bl	8000e04 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e173      	b.n	80024ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e2:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <HAL_RCC_OscConfig+0x274>)
 80021e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0x234>
 80021ee:	e01b      	b.n	8002228 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f0:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_RCC_OscConfig+0x27c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f6:	f7fe fe05 	bl	8000e04 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fc:	e00e      	b.n	800221c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021fe:	f7fe fe01 	bl	8000e04 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d907      	bls.n	800221c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e15c      	b.n	80024ca <HAL_RCC_OscConfig+0x52e>
 8002210:	40023800 	.word	0x40023800
 8002214:	42470000 	.word	0x42470000
 8002218:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221c:	4b8a      	ldr	r3, [pc, #552]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 800221e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1ea      	bne.n	80021fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 8097 	beq.w	8002364 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223a:	4b83      	ldr	r3, [pc, #524]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10f      	bne.n	8002266 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	4b7f      	ldr	r3, [pc, #508]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	4a7e      	ldr	r2, [pc, #504]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 8002250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002254:	6413      	str	r3, [r2, #64]	; 0x40
 8002256:	4b7c      	ldr	r3, [pc, #496]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002262:	2301      	movs	r3, #1
 8002264:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002266:	4b79      	ldr	r3, [pc, #484]	; (800244c <HAL_RCC_OscConfig+0x4b0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226e:	2b00      	cmp	r3, #0
 8002270:	d118      	bne.n	80022a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002272:	4b76      	ldr	r3, [pc, #472]	; (800244c <HAL_RCC_OscConfig+0x4b0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a75      	ldr	r2, [pc, #468]	; (800244c <HAL_RCC_OscConfig+0x4b0>)
 8002278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800227e:	f7fe fdc1 	bl	8000e04 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002286:	f7fe fdbd 	bl	8000e04 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e118      	b.n	80024ca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002298:	4b6c      	ldr	r3, [pc, #432]	; (800244c <HAL_RCC_OscConfig+0x4b0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x31e>
 80022ac:	4b66      	ldr	r3, [pc, #408]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 80022ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b0:	4a65      	ldr	r2, [pc, #404]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6713      	str	r3, [r2, #112]	; 0x70
 80022b8:	e01c      	b.n	80022f4 <HAL_RCC_OscConfig+0x358>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b05      	cmp	r3, #5
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0x340>
 80022c2:	4b61      	ldr	r3, [pc, #388]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 80022c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c6:	4a60      	ldr	r2, [pc, #384]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 80022c8:	f043 0304 	orr.w	r3, r3, #4
 80022cc:	6713      	str	r3, [r2, #112]	; 0x70
 80022ce:	4b5e      	ldr	r3, [pc, #376]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 80022d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d2:	4a5d      	ldr	r2, [pc, #372]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6713      	str	r3, [r2, #112]	; 0x70
 80022da:	e00b      	b.n	80022f4 <HAL_RCC_OscConfig+0x358>
 80022dc:	4b5a      	ldr	r3, [pc, #360]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	4a59      	ldr	r2, [pc, #356]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 80022e2:	f023 0301 	bic.w	r3, r3, #1
 80022e6:	6713      	str	r3, [r2, #112]	; 0x70
 80022e8:	4b57      	ldr	r3, [pc, #348]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	4a56      	ldr	r2, [pc, #344]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 80022ee:	f023 0304 	bic.w	r3, r3, #4
 80022f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d015      	beq.n	8002328 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fc:	f7fe fd82 	bl	8000e04 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002302:	e00a      	b.n	800231a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002304:	f7fe fd7e 	bl	8000e04 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e0d7      	b.n	80024ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231a:	4b4b      	ldr	r3, [pc, #300]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0ee      	beq.n	8002304 <HAL_RCC_OscConfig+0x368>
 8002326:	e014      	b.n	8002352 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002328:	f7fe fd6c 	bl	8000e04 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232e:	e00a      	b.n	8002346 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002330:	f7fe fd68 	bl	8000e04 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f241 3288 	movw	r2, #5000	; 0x1388
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e0c1      	b.n	80024ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002346:	4b40      	ldr	r3, [pc, #256]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1ee      	bne.n	8002330 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002352:	7dfb      	ldrb	r3, [r7, #23]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d105      	bne.n	8002364 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002358:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	4a3a      	ldr	r2, [pc, #232]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 800235e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002362:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80ad 	beq.w	80024c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800236e:	4b36      	ldr	r3, [pc, #216]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b08      	cmp	r3, #8
 8002378:	d060      	beq.n	800243c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d145      	bne.n	800240e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002382:	4b33      	ldr	r3, [pc, #204]	; (8002450 <HAL_RCC_OscConfig+0x4b4>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7fe fd3c 	bl	8000e04 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe fd38 	bl	8000e04 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e093      	b.n	80024ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a2:	4b29      	ldr	r3, [pc, #164]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69da      	ldr	r2, [r3, #28]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	019b      	lsls	r3, r3, #6
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c4:	085b      	lsrs	r3, r3, #1
 80023c6:	3b01      	subs	r3, #1
 80023c8:	041b      	lsls	r3, r3, #16
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	061b      	lsls	r3, r3, #24
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	071b      	lsls	r3, r3, #28
 80023da:	491b      	ldr	r1, [pc, #108]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e0:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <HAL_RCC_OscConfig+0x4b4>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e6:	f7fe fd0d 	bl	8000e04 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ee:	f7fe fd09 	bl	8000e04 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e064      	b.n	80024ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x452>
 800240c:	e05c      	b.n	80024c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <HAL_RCC_OscConfig+0x4b4>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe fcf6 	bl	8000e04 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241c:	f7fe fcf2 	bl	8000e04 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e04d      	b.n	80024ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_RCC_OscConfig+0x4ac>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x480>
 800243a:	e045      	b.n	80024c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d107      	bne.n	8002454 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e040      	b.n	80024ca <HAL_RCC_OscConfig+0x52e>
 8002448:	40023800 	.word	0x40023800
 800244c:	40007000 	.word	0x40007000
 8002450:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002454:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <HAL_RCC_OscConfig+0x538>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d030      	beq.n	80024c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d129      	bne.n	80024c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247a:	429a      	cmp	r2, r3
 800247c:	d122      	bne.n	80024c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002484:	4013      	ands	r3, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800248a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800248c:	4293      	cmp	r3, r2
 800248e:	d119      	bne.n	80024c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	085b      	lsrs	r3, r3, #1
 800249c:	3b01      	subs	r3, #1
 800249e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d10f      	bne.n	80024c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d107      	bne.n	80024c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800

080024d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e041      	b.n	800256e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f839 	bl	8002576 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3304      	adds	r3, #4
 8002514:	4619      	mov	r1, r3
 8002516:	4610      	mov	r0, r2
 8002518:	f000 f9d8 	bl	80028cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b01      	cmp	r3, #1
 800259e:	d001      	beq.n	80025a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e04e      	b.n	8002642 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a23      	ldr	r2, [pc, #140]	; (8002650 <HAL_TIM_Base_Start_IT+0xc4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d022      	beq.n	800260c <HAL_TIM_Base_Start_IT+0x80>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ce:	d01d      	beq.n	800260c <HAL_TIM_Base_Start_IT+0x80>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a1f      	ldr	r2, [pc, #124]	; (8002654 <HAL_TIM_Base_Start_IT+0xc8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d018      	beq.n	800260c <HAL_TIM_Base_Start_IT+0x80>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1e      	ldr	r2, [pc, #120]	; (8002658 <HAL_TIM_Base_Start_IT+0xcc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d013      	beq.n	800260c <HAL_TIM_Base_Start_IT+0x80>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a1c      	ldr	r2, [pc, #112]	; (800265c <HAL_TIM_Base_Start_IT+0xd0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00e      	beq.n	800260c <HAL_TIM_Base_Start_IT+0x80>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a1b      	ldr	r2, [pc, #108]	; (8002660 <HAL_TIM_Base_Start_IT+0xd4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d009      	beq.n	800260c <HAL_TIM_Base_Start_IT+0x80>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a19      	ldr	r2, [pc, #100]	; (8002664 <HAL_TIM_Base_Start_IT+0xd8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d004      	beq.n	800260c <HAL_TIM_Base_Start_IT+0x80>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a18      	ldr	r2, [pc, #96]	; (8002668 <HAL_TIM_Base_Start_IT+0xdc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d111      	bne.n	8002630 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b06      	cmp	r3, #6
 800261c:	d010      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0201 	orr.w	r2, r2, #1
 800262c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800262e:	e007      	b.n	8002640 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40010000 	.word	0x40010000
 8002654:	40000400 	.word	0x40000400
 8002658:	40000800 	.word	0x40000800
 800265c:	40000c00 	.word	0x40000c00
 8002660:	40010400 	.word	0x40010400
 8002664:	40014000 	.word	0x40014000
 8002668:	40001800 	.word	0x40001800

0800266c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b02      	cmp	r3, #2
 8002680:	d122      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b02      	cmp	r3, #2
 800268e:	d11b      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0202 	mvn.w	r2, #2
 8002698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f8ee 	bl	8002890 <HAL_TIM_IC_CaptureCallback>
 80026b4:	e005      	b.n	80026c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f8e0 	bl	800287c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f8f1 	bl	80028a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d122      	bne.n	800271c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d11b      	bne.n	800271c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0204 	mvn.w	r2, #4
 80026ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2202      	movs	r2, #2
 80026f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f8c4 	bl	8002890 <HAL_TIM_IC_CaptureCallback>
 8002708:	e005      	b.n	8002716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f8b6 	bl	800287c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f8c7 	bl	80028a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b08      	cmp	r3, #8
 8002728:	d122      	bne.n	8002770 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b08      	cmp	r3, #8
 8002736:	d11b      	bne.n	8002770 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0208 	mvn.w	r2, #8
 8002740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2204      	movs	r2, #4
 8002746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f89a 	bl	8002890 <HAL_TIM_IC_CaptureCallback>
 800275c:	e005      	b.n	800276a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f88c 	bl	800287c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f89d 	bl	80028a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b10      	cmp	r3, #16
 800277c:	d122      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b10      	cmp	r3, #16
 800278a:	d11b      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f06f 0210 	mvn.w	r2, #16
 8002794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2208      	movs	r2, #8
 800279a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f870 	bl	8002890 <HAL_TIM_IC_CaptureCallback>
 80027b0:	e005      	b.n	80027be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f862 	bl	800287c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f873 	bl	80028a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d10e      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d107      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0201 	mvn.w	r2, #1
 80027e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe f928 	bl	8000a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fa:	2b80      	cmp	r3, #128	; 0x80
 80027fc:	d10e      	bne.n	800281c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002808:	2b80      	cmp	r3, #128	; 0x80
 800280a:	d107      	bne.n	800281c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f902 	bl	8002a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002826:	2b40      	cmp	r3, #64	; 0x40
 8002828:	d10e      	bne.n	8002848 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002834:	2b40      	cmp	r3, #64	; 0x40
 8002836:	d107      	bne.n	8002848 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f838 	bl	80028b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b20      	cmp	r3, #32
 8002854:	d10e      	bne.n	8002874 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b20      	cmp	r3, #32
 8002862:	d107      	bne.n	8002874 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0220 	mvn.w	r2, #32
 800286c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f8cc 	bl	8002a0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a40      	ldr	r2, [pc, #256]	; (80029e0 <TIM_Base_SetConfig+0x114>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d013      	beq.n	800290c <TIM_Base_SetConfig+0x40>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ea:	d00f      	beq.n	800290c <TIM_Base_SetConfig+0x40>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a3d      	ldr	r2, [pc, #244]	; (80029e4 <TIM_Base_SetConfig+0x118>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00b      	beq.n	800290c <TIM_Base_SetConfig+0x40>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a3c      	ldr	r2, [pc, #240]	; (80029e8 <TIM_Base_SetConfig+0x11c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d007      	beq.n	800290c <TIM_Base_SetConfig+0x40>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a3b      	ldr	r2, [pc, #236]	; (80029ec <TIM_Base_SetConfig+0x120>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d003      	beq.n	800290c <TIM_Base_SetConfig+0x40>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a3a      	ldr	r2, [pc, #232]	; (80029f0 <TIM_Base_SetConfig+0x124>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d108      	bne.n	800291e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a2f      	ldr	r2, [pc, #188]	; (80029e0 <TIM_Base_SetConfig+0x114>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d02b      	beq.n	800297e <TIM_Base_SetConfig+0xb2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292c:	d027      	beq.n	800297e <TIM_Base_SetConfig+0xb2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a2c      	ldr	r2, [pc, #176]	; (80029e4 <TIM_Base_SetConfig+0x118>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d023      	beq.n	800297e <TIM_Base_SetConfig+0xb2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a2b      	ldr	r2, [pc, #172]	; (80029e8 <TIM_Base_SetConfig+0x11c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d01f      	beq.n	800297e <TIM_Base_SetConfig+0xb2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a2a      	ldr	r2, [pc, #168]	; (80029ec <TIM_Base_SetConfig+0x120>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d01b      	beq.n	800297e <TIM_Base_SetConfig+0xb2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a29      	ldr	r2, [pc, #164]	; (80029f0 <TIM_Base_SetConfig+0x124>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d017      	beq.n	800297e <TIM_Base_SetConfig+0xb2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a28      	ldr	r2, [pc, #160]	; (80029f4 <TIM_Base_SetConfig+0x128>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d013      	beq.n	800297e <TIM_Base_SetConfig+0xb2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a27      	ldr	r2, [pc, #156]	; (80029f8 <TIM_Base_SetConfig+0x12c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00f      	beq.n	800297e <TIM_Base_SetConfig+0xb2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a26      	ldr	r2, [pc, #152]	; (80029fc <TIM_Base_SetConfig+0x130>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00b      	beq.n	800297e <TIM_Base_SetConfig+0xb2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a25      	ldr	r2, [pc, #148]	; (8002a00 <TIM_Base_SetConfig+0x134>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d007      	beq.n	800297e <TIM_Base_SetConfig+0xb2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a24      	ldr	r2, [pc, #144]	; (8002a04 <TIM_Base_SetConfig+0x138>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d003      	beq.n	800297e <TIM_Base_SetConfig+0xb2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a23      	ldr	r2, [pc, #140]	; (8002a08 <TIM_Base_SetConfig+0x13c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d108      	bne.n	8002990 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <TIM_Base_SetConfig+0x114>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <TIM_Base_SetConfig+0xf8>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a0c      	ldr	r2, [pc, #48]	; (80029f0 <TIM_Base_SetConfig+0x124>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d103      	bne.n	80029cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	615a      	str	r2, [r3, #20]
}
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40010000 	.word	0x40010000
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40000800 	.word	0x40000800
 80029ec:	40000c00 	.word	0x40000c00
 80029f0:	40010400 	.word	0x40010400
 80029f4:	40014000 	.word	0x40014000
 80029f8:	40014400 	.word	0x40014400
 80029fc:	40014800 	.word	0x40014800
 8002a00:	40001800 	.word	0x40001800
 8002a04:	40001c00 	.word	0x40001c00
 8002a08:	40002000 	.word	0x40002000

08002a0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e03f      	b.n	8002ac6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe f87c 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2224      	movs	r2, #36	; 0x24
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f829 	bl	8002ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad4:	b0c0      	sub	sp, #256	; 0x100
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aec:	68d9      	ldr	r1, [r3, #12]
 8002aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	ea40 0301 	orr.w	r3, r0, r1
 8002af8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b28:	f021 010c 	bic.w	r1, r1, #12
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b36:	430b      	orrs	r3, r1
 8002b38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4a:	6999      	ldr	r1, [r3, #24]
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	ea40 0301 	orr.w	r3, r0, r1
 8002b56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4b8f      	ldr	r3, [pc, #572]	; (8002d9c <UART_SetConfig+0x2cc>)
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d005      	beq.n	8002b70 <UART_SetConfig+0xa0>
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4b8d      	ldr	r3, [pc, #564]	; (8002da0 <UART_SetConfig+0x2d0>)
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d104      	bne.n	8002b7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b70:	f7ff f824 	bl	8001bbc <HAL_RCC_GetPCLK2Freq>
 8002b74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b78:	e003      	b.n	8002b82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b7a:	f7ff f80b 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 8002b7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b8c:	f040 810c 	bne.w	8002da8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	462b      	mov	r3, r5
 8002ba6:	1891      	adds	r1, r2, r2
 8002ba8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002baa:	415b      	adcs	r3, r3
 8002bac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	eb12 0801 	adds.w	r8, r2, r1
 8002bb8:	4629      	mov	r1, r5
 8002bba:	eb43 0901 	adc.w	r9, r3, r1
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bd2:	4690      	mov	r8, r2
 8002bd4:	4699      	mov	r9, r3
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	eb18 0303 	adds.w	r3, r8, r3
 8002bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002be0:	462b      	mov	r3, r5
 8002be2:	eb49 0303 	adc.w	r3, r9, r3
 8002be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002bf6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002bfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002bfe:	460b      	mov	r3, r1
 8002c00:	18db      	adds	r3, r3, r3
 8002c02:	653b      	str	r3, [r7, #80]	; 0x50
 8002c04:	4613      	mov	r3, r2
 8002c06:	eb42 0303 	adc.w	r3, r2, r3
 8002c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c14:	f7fd fb46 	bl	80002a4 <__aeabi_uldivmod>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4b61      	ldr	r3, [pc, #388]	; (8002da4 <UART_SetConfig+0x2d4>)
 8002c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	011c      	lsls	r4, r3, #4
 8002c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c38:	4642      	mov	r2, r8
 8002c3a:	464b      	mov	r3, r9
 8002c3c:	1891      	adds	r1, r2, r2
 8002c3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c40:	415b      	adcs	r3, r3
 8002c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c48:	4641      	mov	r1, r8
 8002c4a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c4e:	4649      	mov	r1, r9
 8002c50:	eb43 0b01 	adc.w	fp, r3, r1
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c68:	4692      	mov	sl, r2
 8002c6a:	469b      	mov	fp, r3
 8002c6c:	4643      	mov	r3, r8
 8002c6e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c76:	464b      	mov	r3, r9
 8002c78:	eb4b 0303 	adc.w	r3, fp, r3
 8002c7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c94:	460b      	mov	r3, r1
 8002c96:	18db      	adds	r3, r3, r3
 8002c98:	643b      	str	r3, [r7, #64]	; 0x40
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ca6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002caa:	f7fd fafb 	bl	80002a4 <__aeabi_uldivmod>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <UART_SetConfig+0x2d4>)
 8002cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	2264      	movs	r2, #100	; 0x64
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	1acb      	subs	r3, r1, r3
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cca:	4b36      	ldr	r3, [pc, #216]	; (8002da4 <UART_SetConfig+0x2d4>)
 8002ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cd8:	441c      	add	r4, r3
 8002cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ce4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ce8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002cec:	4642      	mov	r2, r8
 8002cee:	464b      	mov	r3, r9
 8002cf0:	1891      	adds	r1, r2, r2
 8002cf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cf4:	415b      	adcs	r3, r3
 8002cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002cfc:	4641      	mov	r1, r8
 8002cfe:	1851      	adds	r1, r2, r1
 8002d00:	6339      	str	r1, [r7, #48]	; 0x30
 8002d02:	4649      	mov	r1, r9
 8002d04:	414b      	adcs	r3, r1
 8002d06:	637b      	str	r3, [r7, #52]	; 0x34
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d14:	4659      	mov	r1, fp
 8002d16:	00cb      	lsls	r3, r1, #3
 8002d18:	4651      	mov	r1, sl
 8002d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d1e:	4651      	mov	r1, sl
 8002d20:	00ca      	lsls	r2, r1, #3
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	4642      	mov	r2, r8
 8002d2a:	189b      	adds	r3, r3, r2
 8002d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d30:	464b      	mov	r3, r9
 8002d32:	460a      	mov	r2, r1
 8002d34:	eb42 0303 	adc.w	r3, r2, r3
 8002d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d50:	460b      	mov	r3, r1
 8002d52:	18db      	adds	r3, r3, r3
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d56:	4613      	mov	r3, r2
 8002d58:	eb42 0303 	adc.w	r3, r2, r3
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d66:	f7fd fa9d 	bl	80002a4 <__aeabi_uldivmod>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <UART_SetConfig+0x2d4>)
 8002d70:	fba3 1302 	umull	r1, r3, r3, r2
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	2164      	movs	r1, #100	; 0x64
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	3332      	adds	r3, #50	; 0x32
 8002d82:	4a08      	ldr	r2, [pc, #32]	; (8002da4 <UART_SetConfig+0x2d4>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	f003 0207 	and.w	r2, r3, #7
 8002d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4422      	add	r2, r4
 8002d96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d98:	e106      	b.n	8002fa8 <UART_SetConfig+0x4d8>
 8002d9a:	bf00      	nop
 8002d9c:	40011000 	.word	0x40011000
 8002da0:	40011400 	.word	0x40011400
 8002da4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dac:	2200      	movs	r2, #0
 8002dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002db2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002db6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002dba:	4642      	mov	r2, r8
 8002dbc:	464b      	mov	r3, r9
 8002dbe:	1891      	adds	r1, r2, r2
 8002dc0:	6239      	str	r1, [r7, #32]
 8002dc2:	415b      	adcs	r3, r3
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dca:	4641      	mov	r1, r8
 8002dcc:	1854      	adds	r4, r2, r1
 8002dce:	4649      	mov	r1, r9
 8002dd0:	eb43 0501 	adc.w	r5, r3, r1
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	00eb      	lsls	r3, r5, #3
 8002dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002de2:	00e2      	lsls	r2, r4, #3
 8002de4:	4614      	mov	r4, r2
 8002de6:	461d      	mov	r5, r3
 8002de8:	4643      	mov	r3, r8
 8002dea:	18e3      	adds	r3, r4, r3
 8002dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002df0:	464b      	mov	r3, r9
 8002df2:	eb45 0303 	adc.w	r3, r5, r3
 8002df6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e16:	4629      	mov	r1, r5
 8002e18:	008b      	lsls	r3, r1, #2
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e20:	4621      	mov	r1, r4
 8002e22:	008a      	lsls	r2, r1, #2
 8002e24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e28:	f7fd fa3c 	bl	80002a4 <__aeabi_uldivmod>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4b60      	ldr	r3, [pc, #384]	; (8002fb4 <UART_SetConfig+0x4e4>)
 8002e32:	fba3 2302 	umull	r2, r3, r3, r2
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	011c      	lsls	r4, r3, #4
 8002e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e4c:	4642      	mov	r2, r8
 8002e4e:	464b      	mov	r3, r9
 8002e50:	1891      	adds	r1, r2, r2
 8002e52:	61b9      	str	r1, [r7, #24]
 8002e54:	415b      	adcs	r3, r3
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	1851      	adds	r1, r2, r1
 8002e60:	6139      	str	r1, [r7, #16]
 8002e62:	4649      	mov	r1, r9
 8002e64:	414b      	adcs	r3, r1
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e74:	4659      	mov	r1, fp
 8002e76:	00cb      	lsls	r3, r1, #3
 8002e78:	4651      	mov	r1, sl
 8002e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e7e:	4651      	mov	r1, sl
 8002e80:	00ca      	lsls	r2, r1, #3
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	4642      	mov	r2, r8
 8002e8a:	189b      	adds	r3, r3, r2
 8002e8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e90:	464b      	mov	r3, r9
 8002e92:	460a      	mov	r2, r1
 8002e94:	eb42 0303 	adc.w	r3, r2, r3
 8002e98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ea6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	008b      	lsls	r3, r1, #2
 8002eb8:	4641      	mov	r1, r8
 8002eba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	008a      	lsls	r2, r1, #2
 8002ec2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ec6:	f7fd f9ed 	bl	80002a4 <__aeabi_uldivmod>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4b38      	ldr	r3, [pc, #224]	; (8002fb4 <UART_SetConfig+0x4e4>)
 8002ed2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	2264      	movs	r2, #100	; 0x64
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	1acb      	subs	r3, r1, r3
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	3332      	adds	r3, #50	; 0x32
 8002ee4:	4a33      	ldr	r2, [pc, #204]	; (8002fb4 <UART_SetConfig+0x4e4>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ef0:	441c      	add	r4, r3
 8002ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	673b      	str	r3, [r7, #112]	; 0x70
 8002efa:	677a      	str	r2, [r7, #116]	; 0x74
 8002efc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f00:	4642      	mov	r2, r8
 8002f02:	464b      	mov	r3, r9
 8002f04:	1891      	adds	r1, r2, r2
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	415b      	adcs	r3, r3
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f10:	4641      	mov	r1, r8
 8002f12:	1851      	adds	r1, r2, r1
 8002f14:	6039      	str	r1, [r7, #0]
 8002f16:	4649      	mov	r1, r9
 8002f18:	414b      	adcs	r3, r1
 8002f1a:	607b      	str	r3, [r7, #4]
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f28:	4659      	mov	r1, fp
 8002f2a:	00cb      	lsls	r3, r1, #3
 8002f2c:	4651      	mov	r1, sl
 8002f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f32:	4651      	mov	r1, sl
 8002f34:	00ca      	lsls	r2, r1, #3
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4642      	mov	r2, r8
 8002f3e:	189b      	adds	r3, r3, r2
 8002f40:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f42:	464b      	mov	r3, r9
 8002f44:	460a      	mov	r2, r1
 8002f46:	eb42 0303 	adc.w	r3, r2, r3
 8002f4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	663b      	str	r3, [r7, #96]	; 0x60
 8002f56:	667a      	str	r2, [r7, #100]	; 0x64
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f64:	4649      	mov	r1, r9
 8002f66:	008b      	lsls	r3, r1, #2
 8002f68:	4641      	mov	r1, r8
 8002f6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f6e:	4641      	mov	r1, r8
 8002f70:	008a      	lsls	r2, r1, #2
 8002f72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f76:	f7fd f995 	bl	80002a4 <__aeabi_uldivmod>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <UART_SetConfig+0x4e4>)
 8002f80:	fba3 1302 	umull	r1, r3, r3, r2
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	2164      	movs	r1, #100	; 0x64
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	3332      	adds	r3, #50	; 0x32
 8002f92:	4a08      	ldr	r2, [pc, #32]	; (8002fb4 <UART_SetConfig+0x4e4>)
 8002f94:	fba2 2303 	umull	r2, r3, r2, r3
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	f003 020f 	and.w	r2, r3, #15
 8002f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4422      	add	r2, r4
 8002fa6:	609a      	str	r2, [r3, #8]
}
 8002fa8:	bf00      	nop
 8002faa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb4:	51eb851f 	.word	0x51eb851f

08002fb8 <__NVIC_SetPriority>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	6039      	str	r1, [r7, #0]
 8002fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	db0a      	blt.n	8002fe2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	490c      	ldr	r1, [pc, #48]	; (8003004 <__NVIC_SetPriority+0x4c>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	440b      	add	r3, r1
 8002fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002fe0:	e00a      	b.n	8002ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4908      	ldr	r1, [pc, #32]	; (8003008 <__NVIC_SetPriority+0x50>)
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	3b04      	subs	r3, #4
 8002ff0:	0112      	lsls	r2, r2, #4
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	761a      	strb	r2, [r3, #24]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	e000e100 	.word	0xe000e100
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <SysTick_Handler+0x1c>)
 8003012:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003014:	f001 fe10 	bl	8004c38 <xTaskGetSchedulerState>
 8003018:	4603      	mov	r3, r0
 800301a:	2b01      	cmp	r3, #1
 800301c:	d001      	beq.n	8003022 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800301e:	f002 fc03 	bl	8005828 <xPortSysTickHandler>
  }
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	e000e010 	.word	0xe000e010

0800302c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003030:	2100      	movs	r1, #0
 8003032:	f06f 0004 	mvn.w	r0, #4
 8003036:	f7ff ffbf 	bl	8002fb8 <__NVIC_SetPriority>
#endif
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003046:	f3ef 8305 	mrs	r3, IPSR
 800304a:	603b      	str	r3, [r7, #0]
  return(result);
 800304c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003052:	f06f 0305 	mvn.w	r3, #5
 8003056:	607b      	str	r3, [r7, #4]
 8003058:	e00c      	b.n	8003074 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <osKernelInitialize+0x44>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d105      	bne.n	800306e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003062:	4b08      	ldr	r3, [pc, #32]	; (8003084 <osKernelInitialize+0x44>)
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003068:	2300      	movs	r3, #0
 800306a:	607b      	str	r3, [r7, #4]
 800306c:	e002      	b.n	8003074 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800306e:	f04f 33ff 	mov.w	r3, #4294967295
 8003072:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003074:	687b      	ldr	r3, [r7, #4]
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	2000014c 	.word	0x2000014c

08003088 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800308e:	f3ef 8305 	mrs	r3, IPSR
 8003092:	603b      	str	r3, [r7, #0]
  return(result);
 8003094:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800309a:	f06f 0305 	mvn.w	r3, #5
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	e010      	b.n	80030c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80030a2:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <osKernelStart+0x48>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d109      	bne.n	80030be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80030aa:	f7ff ffbf 	bl	800302c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80030ae:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <osKernelStart+0x48>)
 80030b0:	2202      	movs	r2, #2
 80030b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80030b4:	f001 f902 	bl	80042bc <vTaskStartScheduler>
      stat = osOK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	607b      	str	r3, [r7, #4]
 80030bc:	e002      	b.n	80030c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80030be:	f04f 33ff 	mov.w	r3, #4294967295
 80030c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030c4:	687b      	ldr	r3, [r7, #4]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	2000014c 	.word	0x2000014c

080030d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08e      	sub	sp, #56	; 0x38
 80030d8:	af04      	add	r7, sp, #16
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030e4:	f3ef 8305 	mrs	r3, IPSR
 80030e8:	617b      	str	r3, [r7, #20]
  return(result);
 80030ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d17e      	bne.n	80031ee <osThreadNew+0x11a>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d07b      	beq.n	80031ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80030fa:	2318      	movs	r3, #24
 80030fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
 8003106:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d045      	beq.n	800319a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <osThreadNew+0x48>
        name = attr->name;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <osThreadNew+0x6e>
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	2b38      	cmp	r3, #56	; 0x38
 8003134:	d805      	bhi.n	8003142 <osThreadNew+0x6e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <osThreadNew+0x72>
        return (NULL);
 8003142:	2300      	movs	r3, #0
 8003144:	e054      	b.n	80031f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	089b      	lsrs	r3, r3, #2
 8003154:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00e      	beq.n	800317c <osThreadNew+0xa8>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b5b      	cmp	r3, #91	; 0x5b
 8003164:	d90a      	bls.n	800317c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <osThreadNew+0xa8>
        mem = 1;
 8003176:	2301      	movs	r3, #1
 8003178:	61bb      	str	r3, [r7, #24]
 800317a:	e010      	b.n	800319e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10c      	bne.n	800319e <osThreadNew+0xca>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d108      	bne.n	800319e <osThreadNew+0xca>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d104      	bne.n	800319e <osThreadNew+0xca>
          mem = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	61bb      	str	r3, [r7, #24]
 8003198:	e001      	b.n	800319e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d110      	bne.n	80031c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031ac:	9202      	str	r2, [sp, #8]
 80031ae:	9301      	str	r3, [sp, #4]
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	6a3a      	ldr	r2, [r7, #32]
 80031b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fe86 	bl	8003ecc <xTaskCreateStatic>
 80031c0:	4603      	mov	r3, r0
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	e013      	b.n	80031ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d110      	bne.n	80031ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	f107 0310 	add.w	r3, r7, #16
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 fed1 	bl	8003f86 <xTaskCreate>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d001      	beq.n	80031ee <osThreadNew+0x11a>
            hTask = NULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80031ee:	693b      	ldr	r3, [r7, #16]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3728      	adds	r7, #40	; 0x28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003200:	f3ef 8305 	mrs	r3, IPSR
 8003204:	60bb      	str	r3, [r7, #8]
  return(result);
 8003206:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <osDelay+0x1c>
    stat = osErrorISR;
 800320c:	f06f 0305 	mvn.w	r3, #5
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	e007      	b.n	8003224 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <osDelay+0x2c>
      vTaskDelay(ticks);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f001 f814 	bl	800424c <vTaskDelay>
    }
  }

  return (stat);
 8003224:	68fb      	ldr	r3, [r7, #12]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4a07      	ldr	r2, [pc, #28]	; (800325c <vApplicationGetIdleTaskMemory+0x2c>)
 8003240:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	4a06      	ldr	r2, [pc, #24]	; (8003260 <vApplicationGetIdleTaskMemory+0x30>)
 8003246:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2280      	movs	r2, #128	; 0x80
 800324c:	601a      	str	r2, [r3, #0]
}
 800324e:	bf00      	nop
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000150 	.word	0x20000150
 8003260:	200001ac 	.word	0x200001ac

08003264 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4a07      	ldr	r2, [pc, #28]	; (8003290 <vApplicationGetTimerTaskMemory+0x2c>)
 8003274:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	4a06      	ldr	r2, [pc, #24]	; (8003294 <vApplicationGetTimerTaskMemory+0x30>)
 800327a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003282:	601a      	str	r2, [r3, #0]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	200003ac 	.word	0x200003ac
 8003294:	20000408 	.word	0x20000408

08003298 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f103 0208 	add.w	r2, r3, #8
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f04f 32ff 	mov.w	r2, #4294967295
 80032b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f103 0208 	add.w	r2, r3, #8
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f103 0208 	add.w	r2, r3, #8
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032f2:	b480      	push	{r7}
 80032f4:	b085      	sub	sp, #20
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	601a      	str	r2, [r3, #0]
}
 800332e:	bf00      	nop
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800333a:	b480      	push	{r7}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003350:	d103      	bne.n	800335a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	e00c      	b.n	8003374 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3308      	adds	r3, #8
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	e002      	b.n	8003368 <vListInsert+0x2e>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	429a      	cmp	r2, r3
 8003372:	d2f6      	bcs.n	8003362 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	601a      	str	r2, [r3, #0]
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6892      	ldr	r2, [r2, #8]
 80033c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6852      	ldr	r2, [r2, #4]
 80033cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d103      	bne.n	80033e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	1e5a      	subs	r2, r3, #1
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10a      	bne.n	800342a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003426:	bf00      	nop
 8003428:	e7fe      	b.n	8003428 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800342a:	f002 f96b 	bl	8005704 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003436:	68f9      	ldr	r1, [r7, #12]
 8003438:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800343a:	fb01 f303 	mul.w	r3, r1, r3
 800343e:	441a      	add	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345a:	3b01      	subs	r3, #1
 800345c:	68f9      	ldr	r1, [r7, #12]
 800345e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	441a      	add	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	22ff      	movs	r2, #255	; 0xff
 800346e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	22ff      	movs	r2, #255	; 0xff
 8003476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d114      	bne.n	80034aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01a      	beq.n	80034be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	3310      	adds	r3, #16
 800348c:	4618      	mov	r0, r3
 800348e:	f001 f9d9 	bl	8004844 <xTaskRemoveFromEventList>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d012      	beq.n	80034be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <xQueueGenericReset+0xcc>)
 800349a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	e009      	b.n	80034be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	3310      	adds	r3, #16
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fef2 	bl	8003298 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3324      	adds	r3, #36	; 0x24
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff feed 	bl	8003298 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034be:	f002 f951 	bl	8005764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80034c2:	2301      	movs	r3, #1
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	e000ed04 	.word	0xe000ed04

080034d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08e      	sub	sp, #56	; 0x38
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10a      	bne.n	80034fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80034f6:	bf00      	nop
 80034f8:	e7fe      	b.n	80034f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003504:	f383 8811 	msr	BASEPRI, r3
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003512:	bf00      	nop
 8003514:	e7fe      	b.n	8003514 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <xQueueGenericCreateStatic+0x52>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <xQueueGenericCreateStatic+0x56>
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <xQueueGenericCreateStatic+0x58>
 8003526:	2300      	movs	r3, #0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10a      	bne.n	8003542 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800352c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	623b      	str	r3, [r7, #32]
}
 800353e:	bf00      	nop
 8003540:	e7fe      	b.n	8003540 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d102      	bne.n	800354e <xQueueGenericCreateStatic+0x7e>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <xQueueGenericCreateStatic+0x82>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <xQueueGenericCreateStatic+0x84>
 8003552:	2300      	movs	r3, #0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10a      	bne.n	800356e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	61fb      	str	r3, [r7, #28]
}
 800356a:	bf00      	nop
 800356c:	e7fe      	b.n	800356c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800356e:	2350      	movs	r3, #80	; 0x50
 8003570:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b50      	cmp	r3, #80	; 0x50
 8003576:	d00a      	beq.n	800358e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	61bb      	str	r3, [r7, #24]
}
 800358a:	bf00      	nop
 800358c:	e7fe      	b.n	800358c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800358e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00d      	beq.n	80035b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	4613      	mov	r3, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	68b9      	ldr	r1, [r7, #8]
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f805 	bl	80035c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3730      	adds	r7, #48	; 0x30
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d103      	bne.n	80035dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	e002      	b.n	80035e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035ee:	2101      	movs	r1, #1
 80035f0:	69b8      	ldr	r0, [r7, #24]
 80035f2:	f7ff ff05 	bl	8003400 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	78fa      	ldrb	r2, [r7, #3]
 80035fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	68f9      	ldr	r1, [r7, #12]
 8003604:	2073      	movs	r0, #115	; 0x73
 8003606:	f003 fa25 	bl	8006a54 <SEGGER_SYSVIEW_RecordU32x3>
}
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b090      	sub	sp, #64	; 0x40
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003622:	2300      	movs	r3, #0
 8003624:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <xQueueGenericSend+0x32>
	__asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003642:	bf00      	nop
 8003644:	e7fe      	b.n	8003644 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d103      	bne.n	8003654 <xQueueGenericSend+0x40>
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <xQueueGenericSend+0x44>
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <xQueueGenericSend+0x46>
 8003658:	2300      	movs	r3, #0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <xQueueGenericSend+0x60>
	__asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003670:	bf00      	nop
 8003672:	e7fe      	b.n	8003672 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d103      	bne.n	8003682 <xQueueGenericSend+0x6e>
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <xQueueGenericSend+0x72>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <xQueueGenericSend+0x74>
 8003686:	2300      	movs	r3, #0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10a      	bne.n	80036a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800368c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	623b      	str	r3, [r7, #32]
}
 800369e:	bf00      	nop
 80036a0:	e7fe      	b.n	80036a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036a2:	f001 fac9 	bl	8004c38 <xTaskGetSchedulerState>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <xQueueGenericSend+0x9e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <xQueueGenericSend+0xa2>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <xQueueGenericSend+0xa4>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	61fb      	str	r3, [r7, #28]
}
 80036ce:	bf00      	nop
 80036d0:	e7fe      	b.n	80036d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036d2:	f002 f817 	bl	8005704 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036de:	429a      	cmp	r2, r3
 80036e0:	d302      	bcc.n	80036e8 <xQueueGenericSend+0xd4>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d136      	bne.n	8003756 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 80036e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ea:	4618      	mov	r0, r3
 80036ec:	f003 fe64 	bl	80073b8 <SEGGER_SYSVIEW_ShrinkId>
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	460b      	mov	r3, r1
 80036fa:	4601      	mov	r1, r0
 80036fc:	205a      	movs	r0, #90	; 0x5a
 80036fe:	f003 fa1f 	bl	8006b40 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003708:	f000 fa6a 	bl	8003be0 <prvCopyDataToQueue>
 800370c:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	2b00      	cmp	r3, #0
 8003714:	d010      	beq.n	8003738 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	3324      	adds	r3, #36	; 0x24
 800371a:	4618      	mov	r0, r3
 800371c:	f001 f892 	bl	8004844 <xTaskRemoveFromEventList>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d013      	beq.n	800374e <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003726:	4b4d      	ldr	r3, [pc, #308]	; (800385c <xQueueGenericSend+0x248>)
 8003728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	f3bf 8f6f 	isb	sy
 8003736:	e00a      	b.n	800374e <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d007      	beq.n	800374e <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800373e:	4b47      	ldr	r3, [pc, #284]	; (800385c <xQueueGenericSend+0x248>)
 8003740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800374e:	f002 f809 	bl	8005764 <vPortExitCritical>
				return pdPASS;
 8003752:	2301      	movs	r3, #1
 8003754:	e07d      	b.n	8003852 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d110      	bne.n	800377e <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800375c:	f002 f802 	bl	8005764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	4618      	mov	r0, r3
 8003764:	f003 fe28 	bl	80073b8 <SEGGER_SYSVIEW_ShrinkId>
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	460b      	mov	r3, r1
 8003772:	4601      	mov	r1, r0
 8003774:	205a      	movs	r0, #90	; 0x5a
 8003776:	f003 f9e3 	bl	8006b40 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 800377a:	2300      	movs	r3, #0
 800377c:	e069      	b.n	8003852 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800377e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003784:	f107 0314 	add.w	r3, r7, #20
 8003788:	4618      	mov	r0, r3
 800378a:	f001 f8c3 	bl	8004914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800378e:	2301      	movs	r3, #1
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003792:	f001 ffe7 	bl	8005764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003796:	f000 fe07 	bl	80043a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800379a:	f001 ffb3 	bl	8005704 <vPortEnterCritical>
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037a4:	b25b      	sxtb	r3, r3
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037aa:	d103      	bne.n	80037b4 <xQueueGenericSend+0x1a0>
 80037ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ba:	b25b      	sxtb	r3, r3
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d103      	bne.n	80037ca <xQueueGenericSend+0x1b6>
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037ca:	f001 ffcb 	bl	8005764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037ce:	1d3a      	adds	r2, r7, #4
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	4611      	mov	r1, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f001 f8b2 	bl	8004940 <xTaskCheckForTimeOut>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d124      	bne.n	800382c <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037e4:	f000 faf4 	bl	8003dd0 <prvIsQueueFull>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d018      	beq.n	8003820 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	3310      	adds	r3, #16
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	4611      	mov	r1, r2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 ffd2 	bl	80047a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037fe:	f000 fa7f 	bl	8003d00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003802:	f000 fddf 	bl	80043c4 <xTaskResumeAll>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	f47f af62 	bne.w	80036d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800380e:	4b13      	ldr	r3, [pc, #76]	; (800385c <xQueueGenericSend+0x248>)
 8003810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	e758      	b.n	80036d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003822:	f000 fa6d 	bl	8003d00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003826:	f000 fdcd 	bl	80043c4 <xTaskResumeAll>
 800382a:	e752      	b.n	80036d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800382c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800382e:	f000 fa67 	bl	8003d00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003832:	f000 fdc7 	bl	80043c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8003836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003838:	4618      	mov	r0, r3
 800383a:	f003 fdbd 	bl	80073b8 <SEGGER_SYSVIEW_ShrinkId>
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	460b      	mov	r3, r1
 8003848:	4601      	mov	r1, r0
 800384a:	205a      	movs	r0, #90	; 0x5a
 800384c:	f003 f978 	bl	8006b40 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8003850:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003852:	4618      	mov	r0, r3
 8003854:	3738      	adds	r7, #56	; 0x38
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	e000ed04 	.word	0xe000ed04

08003860 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b090      	sub	sp, #64	; 0x40
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10a      	bne.n	800388e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800388a:	bf00      	nop
 800388c:	e7fe      	b.n	800388c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d103      	bne.n	800389c <xQueueGenericSendFromISR+0x3c>
 8003894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <xQueueGenericSendFromISR+0x40>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <xQueueGenericSendFromISR+0x42>
 80038a0:	2300      	movs	r3, #0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10a      	bne.n	80038bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80038a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038b8:	bf00      	nop
 80038ba:	e7fe      	b.n	80038ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d103      	bne.n	80038ca <xQueueGenericSendFromISR+0x6a>
 80038c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <xQueueGenericSendFromISR+0x6e>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <xQueueGenericSendFromISR+0x70>
 80038ce:	2300      	movs	r3, #0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10a      	bne.n	80038ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80038d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	623b      	str	r3, [r7, #32]
}
 80038e6:	bf00      	nop
 80038e8:	e7fe      	b.n	80038e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038ea:	f001 ffed 	bl	80058c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80038ee:	f3ef 8211 	mrs	r2, BASEPRI
 80038f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	61fa      	str	r2, [r7, #28]
 8003904:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003906:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003908:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800390a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	429a      	cmp	r2, r3
 8003914:	d302      	bcc.n	800391c <xQueueGenericSendFromISR+0xbc>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d139      	bne.n	8003990 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800391c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800392c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392e:	4618      	mov	r0, r3
 8003930:	f003 fd42 	bl	80073b8 <SEGGER_SYSVIEW_ShrinkId>
 8003934:	4601      	mov	r1, r0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	461a      	mov	r2, r3
 800393a:	2060      	movs	r0, #96	; 0x60
 800393c:	f003 f830 	bl	80069a0 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003946:	f000 f94b 	bl	8003be0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800394a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800394e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003952:	d112      	bne.n	800397a <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	2b00      	cmp	r3, #0
 800395a:	d016      	beq.n	800398a <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800395c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395e:	3324      	adds	r3, #36	; 0x24
 8003960:	4618      	mov	r0, r3
 8003962:	f000 ff6f 	bl	8004844 <xTaskRemoveFromEventList>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00e      	beq.n	800398a <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00b      	beq.n	800398a <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	e007      	b.n	800398a <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800397a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800397e:	3301      	adds	r3, #1
 8003980:	b2db      	uxtb	r3, r3
 8003982:	b25a      	sxtb	r2, r3
 8003984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800398a:	2301      	movs	r3, #1
 800398c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800398e:	e00b      	b.n	80039a8 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003992:	4618      	mov	r0, r3
 8003994:	f003 fd10 	bl	80073b8 <SEGGER_SYSVIEW_ShrinkId>
 8003998:	4601      	mov	r1, r0
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	461a      	mov	r2, r3
 800399e:	2060      	movs	r0, #96	; 0x60
 80039a0:	f002 fffe 	bl	80069a0 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80039b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3740      	adds	r7, #64	; 0x40
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80039c0:	b590      	push	{r4, r7, lr}
 80039c2:	b08f      	sub	sp, #60	; 0x3c
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80039cc:	2300      	movs	r3, #0
 80039ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <xQueueReceive+0x30>
	__asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	623b      	str	r3, [r7, #32]
}
 80039ec:	bf00      	nop
 80039ee:	e7fe      	b.n	80039ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d103      	bne.n	80039fe <xQueueReceive+0x3e>
 80039f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <xQueueReceive+0x42>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <xQueueReceive+0x44>
 8003a02:	2300      	movs	r3, #0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <xQueueReceive+0x5e>
	__asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	61fb      	str	r3, [r7, #28]
}
 8003a1a:	bf00      	nop
 8003a1c:	e7fe      	b.n	8003a1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a1e:	f001 f90b 	bl	8004c38 <xTaskGetSchedulerState>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d102      	bne.n	8003a2e <xQueueReceive+0x6e>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <xQueueReceive+0x72>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <xQueueReceive+0x74>
 8003a32:	2300      	movs	r3, #0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10a      	bne.n	8003a4e <xQueueReceive+0x8e>
	__asm volatile
 8003a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	61bb      	str	r3, [r7, #24]
}
 8003a4a:	bf00      	nop
 8003a4c:	e7fe      	b.n	8003a4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a4e:	f001 fe59 	bl	8005704 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d02f      	beq.n	8003abe <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a62:	f000 f927 	bl	8003cb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8003a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f003 fca5 	bl	80073b8 <SEGGER_SYSVIEW_ShrinkId>
 8003a6e:	4604      	mov	r4, r0
 8003a70:	2000      	movs	r0, #0
 8003a72:	f003 fca1 	bl	80073b8 <SEGGER_SYSVIEW_ShrinkId>
 8003a76:	4602      	mov	r2, r0
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	9100      	str	r1, [sp, #0]
 8003a7e:	4621      	mov	r1, r4
 8003a80:	205c      	movs	r0, #92	; 0x5c
 8003a82:	f003 f85d 	bl	8006b40 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	1e5a      	subs	r2, r3, #1
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00f      	beq.n	8003ab6 <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a98:	3310      	adds	r3, #16
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fed2 	bl	8004844 <xTaskRemoveFromEventList>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d007      	beq.n	8003ab6 <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003aa6:	4b4d      	ldr	r3, [pc, #308]	; (8003bdc <xQueueReceive+0x21c>)
 8003aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ab6:	f001 fe55 	bl	8005764 <vPortExitCritical>
				return pdPASS;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e08a      	b.n	8003bd4 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d113      	bne.n	8003aec <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ac4:	f001 fe4e 	bl	8005764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aca:	4618      	mov	r0, r3
 8003acc:	f003 fc74 	bl	80073b8 <SEGGER_SYSVIEW_ShrinkId>
 8003ad0:	4604      	mov	r4, r0
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	f003 fc70 	bl	80073b8 <SEGGER_SYSVIEW_ShrinkId>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2101      	movs	r1, #1
 8003ade:	9100      	str	r1, [sp, #0]
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	205c      	movs	r0, #92	; 0x5c
 8003ae4:	f003 f82c 	bl	8006b40 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e073      	b.n	8003bd4 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003af2:	f107 0310 	add.w	r3, r7, #16
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 ff0c 	bl	8004914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003afc:	2301      	movs	r3, #1
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b00:	f001 fe30 	bl	8005764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b04:	f000 fc50 	bl	80043a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b08:	f001 fdfc 	bl	8005704 <vPortEnterCritical>
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b12:	b25b      	sxtb	r3, r3
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b18:	d103      	bne.n	8003b22 <xQueueReceive+0x162>
 8003b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b28:	b25b      	sxtb	r3, r3
 8003b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2e:	d103      	bne.n	8003b38 <xQueueReceive+0x178>
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b38:	f001 fe14 	bl	8005764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b3c:	1d3a      	adds	r2, r7, #4
 8003b3e:	f107 0310 	add.w	r3, r7, #16
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fefb 	bl	8004940 <xTaskCheckForTimeOut>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d124      	bne.n	8003b9a <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b52:	f000 f927 	bl	8003da4 <prvIsQueueEmpty>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d018      	beq.n	8003b8e <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5e:	3324      	adds	r3, #36	; 0x24
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	4611      	mov	r1, r2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fe1b 	bl	80047a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b6c:	f000 f8c8 	bl	8003d00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b70:	f000 fc28 	bl	80043c4 <xTaskResumeAll>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f47f af69 	bne.w	8003a4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003b7c:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <xQueueReceive+0x21c>)
 8003b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	e75f      	b.n	8003a4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b90:	f000 f8b6 	bl	8003d00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b94:	f000 fc16 	bl	80043c4 <xTaskResumeAll>
 8003b98:	e759      	b.n	8003a4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b9c:	f000 f8b0 	bl	8003d00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ba0:	f000 fc10 	bl	80043c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ba6:	f000 f8fd 	bl	8003da4 <prvIsQueueEmpty>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f43f af4e 	beq.w	8003a4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f003 fbff 	bl	80073b8 <SEGGER_SYSVIEW_ShrinkId>
 8003bba:	4604      	mov	r4, r0
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	f003 fbfb 	bl	80073b8 <SEGGER_SYSVIEW_ShrinkId>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	9100      	str	r1, [sp, #0]
 8003bca:	4621      	mov	r1, r4
 8003bcc:	205c      	movs	r0, #92	; 0x5c
 8003bce:	f002 ffb7 	bl	8006b40 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8003bd2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3734      	adds	r7, #52	; 0x34
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd90      	pop	{r4, r7, pc}
 8003bdc:	e000ed04 	.word	0xe000ed04

08003be0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10d      	bne.n	8003c1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d14d      	bne.n	8003ca2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f001 f832 	bl	8004c74 <xTaskPriorityDisinherit>
 8003c10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	e043      	b.n	8003ca2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d119      	bne.n	8003c54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6858      	ldr	r0, [r3, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68b9      	ldr	r1, [r7, #8]
 8003c2c:	f003 fd52 	bl	80076d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	441a      	add	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d32b      	bcc.n	8003ca2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	605a      	str	r2, [r3, #4]
 8003c52:	e026      	b.n	8003ca2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	68d8      	ldr	r0, [r3, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	f003 fd38 	bl	80076d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	425b      	negs	r3, r3
 8003c6e:	441a      	add	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d207      	bcs.n	8003c90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	425b      	negs	r3, r3
 8003c8a:	441a      	add	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d105      	bne.n	8003ca2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003caa:	697b      	ldr	r3, [r7, #20]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d018      	beq.n	8003cf8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	441a      	add	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d303      	bcc.n	8003ce8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68d9      	ldr	r1, [r3, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	6838      	ldr	r0, [r7, #0]
 8003cf4:	f003 fcee 	bl	80076d4 <memcpy>
	}
}
 8003cf8:	bf00      	nop
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d08:	f001 fcfc 	bl	8005704 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d14:	e011      	b.n	8003d3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d012      	beq.n	8003d44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3324      	adds	r3, #36	; 0x24
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fd8e 	bl	8004844 <xTaskRemoveFromEventList>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d2e:	f000 fe69 	bl	8004a04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	dce9      	bgt.n	8003d16 <prvUnlockQueue+0x16>
 8003d42:	e000      	b.n	8003d46 <prvUnlockQueue+0x46>
					break;
 8003d44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	22ff      	movs	r2, #255	; 0xff
 8003d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d4e:	f001 fd09 	bl	8005764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d52:	f001 fcd7 	bl	8005704 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d5e:	e011      	b.n	8003d84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d012      	beq.n	8003d8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3310      	adds	r3, #16
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fd69 	bl	8004844 <xTaskRemoveFromEventList>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d78:	f000 fe44 	bl	8004a04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d7c:	7bbb      	ldrb	r3, [r7, #14]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	dce9      	bgt.n	8003d60 <prvUnlockQueue+0x60>
 8003d8c:	e000      	b.n	8003d90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	22ff      	movs	r2, #255	; 0xff
 8003d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d98:	f001 fce4 	bl	8005764 <vPortExitCritical>
}
 8003d9c:	bf00      	nop
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dac:	f001 fcaa 	bl	8005704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003db8:	2301      	movs	r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e001      	b.n	8003dc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003dc2:	f001 fccf 	bl	8005764 <vPortExitCritical>

	return xReturn;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dd8:	f001 fc94 	bl	8005704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d102      	bne.n	8003dee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	e001      	b.n	8003df2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003df2:	f001 fcb7 	bl	8005764 <vPortExitCritical>

	return xReturn;
 8003df6:	68fb      	ldr	r3, [r7, #12]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	e01e      	b.n	8003e4e <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e10:	4a13      	ldr	r2, [pc, #76]	; (8003e60 <vQueueAddToRegistry+0x60>)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d115      	bne.n	8003e48 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e1c:	4910      	ldr	r1, [pc, #64]	; (8003e60 <vQueueAddToRegistry+0x60>)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e26:	4a0e      	ldr	r2, [pc, #56]	; (8003e60 <vQueueAddToRegistry+0x60>)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f003 fabf 	bl	80073b8 <SEGGER_SYSVIEW_ShrinkId>
 8003e3a:	4601      	mov	r1, r0
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	2071      	movs	r0, #113	; 0x71
 8003e42:	f002 fdad 	bl	80069a0 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8003e46:	e006      	b.n	8003e56 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b07      	cmp	r3, #7
 8003e52:	d9dd      	bls.n	8003e10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000808 	.word	0x20000808

08003e64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e74:	f001 fc46 	bl	8005704 <vPortEnterCritical>
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e7e:	b25b      	sxtb	r3, r3
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d103      	bne.n	8003e8e <vQueueWaitForMessageRestricted+0x2a>
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e94:	b25b      	sxtb	r3, r3
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9a:	d103      	bne.n	8003ea4 <vQueueWaitForMessageRestricted+0x40>
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ea4:	f001 fc5e 	bl	8005764 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d106      	bne.n	8003ebe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	3324      	adds	r3, #36	; 0x24
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	68b9      	ldr	r1, [r7, #8]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fc95 	bl	80047e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ebe:	6978      	ldr	r0, [r7, #20]
 8003ec0:	f7ff ff1e 	bl	8003d00 <prvUnlockQueue>
	}
 8003ec4:	bf00      	nop
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08e      	sub	sp, #56	; 0x38
 8003ed0:	af04      	add	r7, sp, #16
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10a      	bne.n	8003ef6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	623b      	str	r3, [r7, #32]
}
 8003ef2:	bf00      	nop
 8003ef4:	e7fe      	b.n	8003ef4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10a      	bne.n	8003f12 <xTaskCreateStatic+0x46>
	__asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	61fb      	str	r3, [r7, #28]
}
 8003f0e:	bf00      	nop
 8003f10:	e7fe      	b.n	8003f10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f12:	235c      	movs	r3, #92	; 0x5c
 8003f14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	2b5c      	cmp	r3, #92	; 0x5c
 8003f1a:	d00a      	beq.n	8003f32 <xTaskCreateStatic+0x66>
	__asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	61bb      	str	r3, [r7, #24]
}
 8003f2e:	bf00      	nop
 8003f30:	e7fe      	b.n	8003f30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01e      	beq.n	8003f78 <xTaskCreateStatic+0xac>
 8003f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01b      	beq.n	8003f78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f52:	2300      	movs	r3, #0
 8003f54:	9303      	str	r3, [sp, #12]
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	9302      	str	r3, [sp, #8]
 8003f5a:	f107 0314 	add.w	r3, r7, #20
 8003f5e:	9301      	str	r3, [sp, #4]
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f850 	bl	8004010 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f72:	f000 f8dd 	bl	8004130 <prvAddNewTaskToReadyList>
 8003f76:	e001      	b.n	8003f7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f7c:	697b      	ldr	r3, [r7, #20]
	}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3728      	adds	r7, #40	; 0x28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b08c      	sub	sp, #48	; 0x30
 8003f8a:	af04      	add	r7, sp, #16
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	603b      	str	r3, [r7, #0]
 8003f92:	4613      	mov	r3, r2
 8003f94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f001 fcd4 	bl	8005948 <pvPortMalloc>
 8003fa0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00e      	beq.n	8003fc6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fa8:	205c      	movs	r0, #92	; 0x5c
 8003faa:	f001 fccd 	bl	8005948 <pvPortMalloc>
 8003fae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
 8003fbc:	e005      	b.n	8003fca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fbe:	6978      	ldr	r0, [r7, #20]
 8003fc0:	f001 fd8e 	bl	8005ae0 <vPortFree>
 8003fc4:	e001      	b.n	8003fca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d017      	beq.n	8004000 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fd8:	88fa      	ldrh	r2, [r7, #6]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	9303      	str	r3, [sp, #12]
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	9302      	str	r3, [sp, #8]
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	9301      	str	r3, [sp, #4]
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68b9      	ldr	r1, [r7, #8]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f80e 	bl	8004010 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ff4:	69f8      	ldr	r0, [r7, #28]
 8003ff6:	f000 f89b 	bl	8004130 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	e002      	b.n	8004006 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004000:	f04f 33ff 	mov.w	r3, #4294967295
 8004004:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004006:	69bb      	ldr	r3, [r7, #24]
	}
 8004008:	4618      	mov	r0, r3
 800400a:	3720      	adds	r7, #32
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	461a      	mov	r2, r3
 8004028:	21a5      	movs	r1, #165	; 0xa5
 800402a:	f003 fb27 	bl	800767c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004038:	3b01      	subs	r3, #1
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	f023 0307 	bic.w	r3, r3, #7
 8004046:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	617b      	str	r3, [r7, #20]
}
 8004064:	bf00      	nop
 8004066:	e7fe      	b.n	8004066 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d01f      	beq.n	80040ae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]
 8004072:	e012      	b.n	800409a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	4413      	add	r3, r2
 800407a:	7819      	ldrb	r1, [r3, #0]
 800407c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	4413      	add	r3, r2
 8004082:	3334      	adds	r3, #52	; 0x34
 8004084:	460a      	mov	r2, r1
 8004086:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	4413      	add	r3, r2
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d006      	beq.n	80040a2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	3301      	adds	r3, #1
 8004098:	61fb      	str	r3, [r7, #28]
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	2b0f      	cmp	r3, #15
 800409e:	d9e9      	bls.n	8004074 <prvInitialiseNewTask+0x64>
 80040a0:	e000      	b.n	80040a4 <prvInitialiseNewTask+0x94>
			{
				break;
 80040a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040ac:	e003      	b.n	80040b6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b8:	2b37      	cmp	r3, #55	; 0x37
 80040ba:	d901      	bls.n	80040c0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040bc:	2337      	movs	r3, #55	; 0x37
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	2200      	movs	r2, #0
 80040d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	3304      	adds	r3, #4
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff f8fe 	bl	80032d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040de:	3318      	adds	r3, #24
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff f8f9 	bl	80032d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fe:	2200      	movs	r2, #0
 8004100:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	68f9      	ldr	r1, [r7, #12]
 800410e:	69b8      	ldr	r0, [r7, #24]
 8004110:	f001 f9c8 	bl	80054a4 <pxPortInitialiseStack>
 8004114:	4602      	mov	r2, r0
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004126:	bf00      	nop
 8004128:	3720      	adds	r7, #32
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004130:	b5b0      	push	{r4, r5, r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af02      	add	r7, sp, #8
 8004136:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004138:	f001 fae4 	bl	8005704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800413c:	4b3c      	ldr	r3, [pc, #240]	; (8004230 <prvAddNewTaskToReadyList+0x100>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3301      	adds	r3, #1
 8004142:	4a3b      	ldr	r2, [pc, #236]	; (8004230 <prvAddNewTaskToReadyList+0x100>)
 8004144:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004146:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <prvAddNewTaskToReadyList+0x104>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800414e:	4a39      	ldr	r2, [pc, #228]	; (8004234 <prvAddNewTaskToReadyList+0x104>)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004154:	4b36      	ldr	r3, [pc, #216]	; (8004230 <prvAddNewTaskToReadyList+0x100>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d110      	bne.n	800417e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800415c:	f000 fc76 	bl	8004a4c <prvInitialiseTaskLists>
 8004160:	e00d      	b.n	800417e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004162:	4b35      	ldr	r3, [pc, #212]	; (8004238 <prvAddNewTaskToReadyList+0x108>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800416a:	4b32      	ldr	r3, [pc, #200]	; (8004234 <prvAddNewTaskToReadyList+0x104>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	429a      	cmp	r2, r3
 8004176:	d802      	bhi.n	800417e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004178:	4a2e      	ldr	r2, [pc, #184]	; (8004234 <prvAddNewTaskToReadyList+0x104>)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800417e:	4b2f      	ldr	r3, [pc, #188]	; (800423c <prvAddNewTaskToReadyList+0x10c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3301      	adds	r3, #1
 8004184:	4a2d      	ldr	r2, [pc, #180]	; (800423c <prvAddNewTaskToReadyList+0x10c>)
 8004186:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004188:	4b2c      	ldr	r3, [pc, #176]	; (800423c <prvAddNewTaskToReadyList+0x10c>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d016      	beq.n	80041c4 <prvAddNewTaskToReadyList+0x94>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4618      	mov	r0, r3
 800419a:	f003 f847 	bl	800722c <SEGGER_SYSVIEW_OnTaskCreate>
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	461d      	mov	r5, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	461c      	mov	r4, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	1ae3      	subs	r3, r4, r3
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	462b      	mov	r3, r5
 80041c0:	f001 fe72 	bl	8005ea8 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f003 f8b4 	bl	8007334 <SEGGER_SYSVIEW_OnTaskStartReady>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d0:	4b1b      	ldr	r3, [pc, #108]	; (8004240 <prvAddNewTaskToReadyList+0x110>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d903      	bls.n	80041e0 <prvAddNewTaskToReadyList+0xb0>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	4a18      	ldr	r2, [pc, #96]	; (8004240 <prvAddNewTaskToReadyList+0x110>)
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4a15      	ldr	r2, [pc, #84]	; (8004244 <prvAddNewTaskToReadyList+0x114>)
 80041ee:	441a      	add	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	4619      	mov	r1, r3
 80041f6:	4610      	mov	r0, r2
 80041f8:	f7ff f87b 	bl	80032f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041fc:	f001 fab2 	bl	8005764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004200:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <prvAddNewTaskToReadyList+0x108>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00e      	beq.n	8004226 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004208:	4b0a      	ldr	r3, [pc, #40]	; (8004234 <prvAddNewTaskToReadyList+0x104>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	429a      	cmp	r2, r3
 8004214:	d207      	bcs.n	8004226 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004216:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <prvAddNewTaskToReadyList+0x118>)
 8004218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bdb0      	pop	{r4, r5, r7, pc}
 800422e:	bf00      	nop
 8004230:	20000d1c 	.word	0x20000d1c
 8004234:	20000848 	.word	0x20000848
 8004238:	20000d28 	.word	0x20000d28
 800423c:	20000d38 	.word	0x20000d38
 8004240:	20000d24 	.word	0x20000d24
 8004244:	2000084c 	.word	0x2000084c
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d01b      	beq.n	8004296 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800425e:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <vTaskDelay+0x68>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <vTaskDelay+0x30>
	__asm volatile
 8004266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	60bb      	str	r3, [r7, #8]
}
 8004278:	bf00      	nop
 800427a:	e7fe      	b.n	800427a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800427c:	f000 f894 	bl	80043a8 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	2023      	movs	r0, #35	; 0x23
 8004284:	f002 fb50 	bl	8006928 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004288:	2100      	movs	r1, #0
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fd68 	bl	8004d60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004290:	f000 f898 	bl	80043c4 <xTaskResumeAll>
 8004294:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d107      	bne.n	80042ac <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <vTaskDelay+0x6c>)
 800429e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000d44 	.word	0x20000d44
 80042b8:	e000ed04 	.word	0xe000ed04

080042bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08a      	sub	sp, #40	; 0x28
 80042c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042ca:	463a      	mov	r2, r7
 80042cc:	1d39      	adds	r1, r7, #4
 80042ce:	f107 0308 	add.w	r3, r7, #8
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe ffac 	bl	8003230 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042d8:	6839      	ldr	r1, [r7, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	9202      	str	r2, [sp, #8]
 80042e0:	9301      	str	r3, [sp, #4]
 80042e2:	2300      	movs	r3, #0
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	2300      	movs	r3, #0
 80042e8:	460a      	mov	r2, r1
 80042ea:	4928      	ldr	r1, [pc, #160]	; (800438c <vTaskStartScheduler+0xd0>)
 80042ec:	4828      	ldr	r0, [pc, #160]	; (8004390 <vTaskStartScheduler+0xd4>)
 80042ee:	f7ff fded 	bl	8003ecc <xTaskCreateStatic>
 80042f2:	4603      	mov	r3, r0
 80042f4:	4a27      	ldr	r2, [pc, #156]	; (8004394 <vTaskStartScheduler+0xd8>)
 80042f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042f8:	4b26      	ldr	r3, [pc, #152]	; (8004394 <vTaskStartScheduler+0xd8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004300:	2301      	movs	r3, #1
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	e001      	b.n	800430a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d102      	bne.n	8004316 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004310:	f000 fd7a 	bl	8004e08 <xTimerCreateTimerTask>
 8004314:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d124      	bne.n	8004366 <vTaskStartScheduler+0xaa>
	__asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	613b      	str	r3, [r7, #16]
}
 800432e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004330:	4b19      	ldr	r3, [pc, #100]	; (8004398 <vTaskStartScheduler+0xdc>)
 8004332:	f04f 32ff 	mov.w	r2, #4294967295
 8004336:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004338:	4b18      	ldr	r3, [pc, #96]	; (800439c <vTaskStartScheduler+0xe0>)
 800433a:	2201      	movs	r2, #1
 800433c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800433e:	4b18      	ldr	r3, [pc, #96]	; (80043a0 <vTaskStartScheduler+0xe4>)
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8004344:	4b17      	ldr	r3, [pc, #92]	; (80043a4 <vTaskStartScheduler+0xe8>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	4b12      	ldr	r3, [pc, #72]	; (8004394 <vTaskStartScheduler+0xd8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d102      	bne.n	8004356 <vTaskStartScheduler+0x9a>
 8004350:	f002 ff50 	bl	80071f4 <SEGGER_SYSVIEW_OnIdle>
 8004354:	e004      	b.n	8004360 <vTaskStartScheduler+0xa4>
 8004356:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <vTaskStartScheduler+0xe8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f002 ffa8 	bl	80072b0 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004360:	f001 f92e 	bl	80055c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004364:	e00e      	b.n	8004384 <vTaskStartScheduler+0xc8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436c:	d10a      	bne.n	8004384 <vTaskStartScheduler+0xc8>
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	60fb      	str	r3, [r7, #12]
}
 8004380:	bf00      	nop
 8004382:	e7fe      	b.n	8004382 <vTaskStartScheduler+0xc6>
}
 8004384:	bf00      	nop
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	0800772c 	.word	0x0800772c
 8004390:	08004a1d 	.word	0x08004a1d
 8004394:	20000d40 	.word	0x20000d40
 8004398:	20000d3c 	.word	0x20000d3c
 800439c:	20000d28 	.word	0x20000d28
 80043a0:	20000d20 	.word	0x20000d20
 80043a4:	20000848 	.word	0x20000848

080043a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80043ac:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <vTaskSuspendAll+0x18>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3301      	adds	r3, #1
 80043b2:	4a03      	ldr	r2, [pc, #12]	; (80043c0 <vTaskSuspendAll+0x18>)
 80043b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80043b6:	bf00      	nop
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	20000d44 	.word	0x20000d44

080043c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043d2:	4b44      	ldr	r3, [pc, #272]	; (80044e4 <xTaskResumeAll+0x120>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10a      	bne.n	80043f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80043da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	603b      	str	r3, [r7, #0]
}
 80043ec:	bf00      	nop
 80043ee:	e7fe      	b.n	80043ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043f0:	f001 f988 	bl	8005704 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043f4:	4b3b      	ldr	r3, [pc, #236]	; (80044e4 <xTaskResumeAll+0x120>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	4a3a      	ldr	r2, [pc, #232]	; (80044e4 <xTaskResumeAll+0x120>)
 80043fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043fe:	4b39      	ldr	r3, [pc, #228]	; (80044e4 <xTaskResumeAll+0x120>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d166      	bne.n	80044d4 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004406:	4b38      	ldr	r3, [pc, #224]	; (80044e8 <xTaskResumeAll+0x124>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d062      	beq.n	80044d4 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800440e:	e033      	b.n	8004478 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004410:	4b36      	ldr	r3, [pc, #216]	; (80044ec <xTaskResumeAll+0x128>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3318      	adds	r3, #24
 800441c:	4618      	mov	r0, r3
 800441e:	f7fe ffc5 	bl	80033ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3304      	adds	r3, #4
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe ffc0 	bl	80033ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4618      	mov	r0, r3
 8004430:	f002 ff80 	bl	8007334 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004438:	4b2d      	ldr	r3, [pc, #180]	; (80044f0 <xTaskResumeAll+0x12c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d903      	bls.n	8004448 <xTaskResumeAll+0x84>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	4a2a      	ldr	r2, [pc, #168]	; (80044f0 <xTaskResumeAll+0x12c>)
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4a27      	ldr	r2, [pc, #156]	; (80044f4 <xTaskResumeAll+0x130>)
 8004456:	441a      	add	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3304      	adds	r3, #4
 800445c:	4619      	mov	r1, r3
 800445e:	4610      	mov	r0, r2
 8004460:	f7fe ff47 	bl	80032f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004468:	4b23      	ldr	r3, [pc, #140]	; (80044f8 <xTaskResumeAll+0x134>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	429a      	cmp	r2, r3
 8004470:	d302      	bcc.n	8004478 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8004472:	4b22      	ldr	r3, [pc, #136]	; (80044fc <xTaskResumeAll+0x138>)
 8004474:	2201      	movs	r2, #1
 8004476:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004478:	4b1c      	ldr	r3, [pc, #112]	; (80044ec <xTaskResumeAll+0x128>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1c7      	bne.n	8004410 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004486:	f000 fbb7 	bl	8004bf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800448a:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <xTaskResumeAll+0x13c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d010      	beq.n	80044b8 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004496:	f000 f859 	bl	800454c <xTaskIncrementTick>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 80044a0:	4b16      	ldr	r3, [pc, #88]	; (80044fc <xTaskResumeAll+0x138>)
 80044a2:	2201      	movs	r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f1      	bne.n	8004496 <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 80044b2:	4b13      	ldr	r3, [pc, #76]	; (8004500 <xTaskResumeAll+0x13c>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044b8:	4b10      	ldr	r3, [pc, #64]	; (80044fc <xTaskResumeAll+0x138>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d009      	beq.n	80044d4 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044c0:	2301      	movs	r3, #1
 80044c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044c4:	4b0f      	ldr	r3, [pc, #60]	; (8004504 <xTaskResumeAll+0x140>)
 80044c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044d4:	f001 f946 	bl	8005764 <vPortExitCritical>

	return xAlreadyYielded;
 80044d8:	68bb      	ldr	r3, [r7, #8]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20000d44 	.word	0x20000d44
 80044e8:	20000d1c 	.word	0x20000d1c
 80044ec:	20000cdc 	.word	0x20000cdc
 80044f0:	20000d24 	.word	0x20000d24
 80044f4:	2000084c 	.word	0x2000084c
 80044f8:	20000848 	.word	0x20000848
 80044fc:	20000d30 	.word	0x20000d30
 8004500:	20000d2c 	.word	0x20000d2c
 8004504:	e000ed04 	.word	0xe000ed04

08004508 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800450e:	4b05      	ldr	r3, [pc, #20]	; (8004524 <xTaskGetTickCount+0x1c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004514:	687b      	ldr	r3, [r7, #4]
}
 8004516:	4618      	mov	r0, r3
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000d20 	.word	0x20000d20

08004528 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800452e:	f001 f9cb 	bl	80058c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004532:	2300      	movs	r3, #0
 8004534:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004536:	4b04      	ldr	r3, [pc, #16]	; (8004548 <xTaskGetTickCountFromISR+0x20>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800453c:	683b      	ldr	r3, [r7, #0]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20000d20 	.word	0x20000d20

0800454c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004556:	4b51      	ldr	r3, [pc, #324]	; (800469c <xTaskIncrementTick+0x150>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	f040 8093 	bne.w	8004686 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004560:	4b4f      	ldr	r3, [pc, #316]	; (80046a0 <xTaskIncrementTick+0x154>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3301      	adds	r3, #1
 8004566:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004568:	4a4d      	ldr	r2, [pc, #308]	; (80046a0 <xTaskIncrementTick+0x154>)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d120      	bne.n	80045b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004574:	4b4b      	ldr	r3, [pc, #300]	; (80046a4 <xTaskIncrementTick+0x158>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <xTaskIncrementTick+0x48>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	603b      	str	r3, [r7, #0]
}
 8004590:	bf00      	nop
 8004592:	e7fe      	b.n	8004592 <xTaskIncrementTick+0x46>
 8004594:	4b43      	ldr	r3, [pc, #268]	; (80046a4 <xTaskIncrementTick+0x158>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	4b43      	ldr	r3, [pc, #268]	; (80046a8 <xTaskIncrementTick+0x15c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a41      	ldr	r2, [pc, #260]	; (80046a4 <xTaskIncrementTick+0x158>)
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	4a41      	ldr	r2, [pc, #260]	; (80046a8 <xTaskIncrementTick+0x15c>)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	4b40      	ldr	r3, [pc, #256]	; (80046ac <xTaskIncrementTick+0x160>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3301      	adds	r3, #1
 80045ae:	4a3f      	ldr	r2, [pc, #252]	; (80046ac <xTaskIncrementTick+0x160>)
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	f000 fb21 	bl	8004bf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045b6:	4b3e      	ldr	r3, [pc, #248]	; (80046b0 <xTaskIncrementTick+0x164>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d34d      	bcc.n	800465c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045c0:	4b38      	ldr	r3, [pc, #224]	; (80046a4 <xTaskIncrementTick+0x158>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d104      	bne.n	80045d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045ca:	4b39      	ldr	r3, [pc, #228]	; (80046b0 <xTaskIncrementTick+0x164>)
 80045cc:	f04f 32ff 	mov.w	r2, #4294967295
 80045d0:	601a      	str	r2, [r3, #0]
					break;
 80045d2:	e043      	b.n	800465c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d4:	4b33      	ldr	r3, [pc, #204]	; (80046a4 <xTaskIncrementTick+0x158>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d203      	bcs.n	80045f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045ec:	4a30      	ldr	r2, [pc, #192]	; (80046b0 <xTaskIncrementTick+0x164>)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045f2:	e033      	b.n	800465c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	3304      	adds	r3, #4
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe fed7 	bl	80033ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004602:	2b00      	cmp	r3, #0
 8004604:	d004      	beq.n	8004610 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	3318      	adds	r3, #24
 800460a:	4618      	mov	r0, r3
 800460c:	f7fe fece 	bl	80033ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4618      	mov	r0, r3
 8004614:	f002 fe8e 	bl	8007334 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461c:	4b25      	ldr	r3, [pc, #148]	; (80046b4 <xTaskIncrementTick+0x168>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d903      	bls.n	800462c <xTaskIncrementTick+0xe0>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	4a22      	ldr	r2, [pc, #136]	; (80046b4 <xTaskIncrementTick+0x168>)
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4a1f      	ldr	r2, [pc, #124]	; (80046b8 <xTaskIncrementTick+0x16c>)
 800463a:	441a      	add	r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	3304      	adds	r3, #4
 8004640:	4619      	mov	r1, r3
 8004642:	4610      	mov	r0, r2
 8004644:	f7fe fe55 	bl	80032f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464c:	4b1b      	ldr	r3, [pc, #108]	; (80046bc <xTaskIncrementTick+0x170>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004652:	429a      	cmp	r2, r3
 8004654:	d3b4      	bcc.n	80045c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004656:	2301      	movs	r3, #1
 8004658:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800465a:	e7b1      	b.n	80045c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800465c:	4b17      	ldr	r3, [pc, #92]	; (80046bc <xTaskIncrementTick+0x170>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004662:	4915      	ldr	r1, [pc, #84]	; (80046b8 <xTaskIncrementTick+0x16c>)
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d901      	bls.n	8004678 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004674:	2301      	movs	r3, #1
 8004676:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004678:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <xTaskIncrementTick+0x174>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d007      	beq.n	8004690 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8004680:	2301      	movs	r3, #1
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	e004      	b.n	8004690 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004686:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <xTaskIncrementTick+0x178>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3301      	adds	r3, #1
 800468c:	4a0d      	ldr	r2, [pc, #52]	; (80046c4 <xTaskIncrementTick+0x178>)
 800468e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004690:	697b      	ldr	r3, [r7, #20]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20000d44 	.word	0x20000d44
 80046a0:	20000d20 	.word	0x20000d20
 80046a4:	20000cd4 	.word	0x20000cd4
 80046a8:	20000cd8 	.word	0x20000cd8
 80046ac:	20000d34 	.word	0x20000d34
 80046b0:	20000d3c 	.word	0x20000d3c
 80046b4:	20000d24 	.word	0x20000d24
 80046b8:	2000084c 	.word	0x2000084c
 80046bc:	20000848 	.word	0x20000848
 80046c0:	20000d30 	.word	0x20000d30
 80046c4:	20000d2c 	.word	0x20000d2c

080046c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046ce:	4b2e      	ldr	r3, [pc, #184]	; (8004788 <vTaskSwitchContext+0xc0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046d6:	4b2d      	ldr	r3, [pc, #180]	; (800478c <vTaskSwitchContext+0xc4>)
 80046d8:	2201      	movs	r2, #1
 80046da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046dc:	e04f      	b.n	800477e <vTaskSwitchContext+0xb6>
		xYieldPending = pdFALSE;
 80046de:	4b2b      	ldr	r3, [pc, #172]	; (800478c <vTaskSwitchContext+0xc4>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046e4:	4b2a      	ldr	r3, [pc, #168]	; (8004790 <vTaskSwitchContext+0xc8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	e010      	b.n	800470e <vTaskSwitchContext+0x46>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10a      	bne.n	8004708 <vTaskSwitchContext+0x40>
	__asm volatile
 80046f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	607b      	str	r3, [r7, #4]
}
 8004704:	bf00      	nop
 8004706:	e7fe      	b.n	8004706 <vTaskSwitchContext+0x3e>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	3b01      	subs	r3, #1
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	4921      	ldr	r1, [pc, #132]	; (8004794 <vTaskSwitchContext+0xcc>)
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0e4      	beq.n	80046ec <vTaskSwitchContext+0x24>
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4a19      	ldr	r2, [pc, #100]	; (8004794 <vTaskSwitchContext+0xcc>)
 800472e:	4413      	add	r3, r2
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	605a      	str	r2, [r3, #4]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	3308      	adds	r3, #8
 8004744:	429a      	cmp	r2, r3
 8004746:	d104      	bne.n	8004752 <vTaskSwitchContext+0x8a>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	605a      	str	r2, [r3, #4]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	4a0f      	ldr	r2, [pc, #60]	; (8004798 <vTaskSwitchContext+0xd0>)
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	4a0c      	ldr	r2, [pc, #48]	; (8004790 <vTaskSwitchContext+0xc8>)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8004762:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <vTaskSwitchContext+0xd0>)
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b0d      	ldr	r3, [pc, #52]	; (800479c <vTaskSwitchContext+0xd4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d102      	bne.n	8004774 <vTaskSwitchContext+0xac>
 800476e:	f002 fd41 	bl	80071f4 <SEGGER_SYSVIEW_OnIdle>
}
 8004772:	e004      	b.n	800477e <vTaskSwitchContext+0xb6>
		traceTASK_SWITCHED_IN();
 8004774:	4b08      	ldr	r3, [pc, #32]	; (8004798 <vTaskSwitchContext+0xd0>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f002 fd99 	bl	80072b0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800477e:	bf00      	nop
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20000d44 	.word	0x20000d44
 800478c:	20000d30 	.word	0x20000d30
 8004790:	20000d24 	.word	0x20000d24
 8004794:	2000084c 	.word	0x2000084c
 8004798:	20000848 	.word	0x20000848
 800479c:	20000d40 	.word	0x20000d40

080047a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10a      	bne.n	80047c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	60fb      	str	r3, [r7, #12]
}
 80047c2:	bf00      	nop
 80047c4:	e7fe      	b.n	80047c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047c6:	4b07      	ldr	r3, [pc, #28]	; (80047e4 <vTaskPlaceOnEventList+0x44>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3318      	adds	r3, #24
 80047cc:	4619      	mov	r1, r3
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fe fdb3 	bl	800333a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047d4:	2101      	movs	r1, #1
 80047d6:	6838      	ldr	r0, [r7, #0]
 80047d8:	f000 fac2 	bl	8004d60 <prvAddCurrentTaskToDelayedList>
}
 80047dc:	bf00      	nop
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	20000848 	.word	0x20000848

080047e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10a      	bne.n	8004810 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	617b      	str	r3, [r7, #20]
}
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <vTaskPlaceOnEventListRestricted+0x58>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3318      	adds	r3, #24
 8004816:	4619      	mov	r1, r3
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f7fe fd6a 	bl	80032f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004824:	f04f 33ff 	mov.w	r3, #4294967295
 8004828:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800482a:	2024      	movs	r0, #36	; 0x24
 800482c:	f002 f85e 	bl	80068ec <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	68b8      	ldr	r0, [r7, #8]
 8004834:	f000 fa94 	bl	8004d60 <prvAddCurrentTaskToDelayedList>
	}
 8004838:	bf00      	nop
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000848 	.word	0x20000848

08004844 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10a      	bne.n	8004870 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	60fb      	str	r3, [r7, #12]
}
 800486c:	bf00      	nop
 800486e:	e7fe      	b.n	800486e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	3318      	adds	r3, #24
 8004874:	4618      	mov	r0, r3
 8004876:	f7fe fd99 	bl	80033ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800487a:	4b20      	ldr	r3, [pc, #128]	; (80048fc <xTaskRemoveFromEventList+0xb8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d121      	bne.n	80048c6 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	3304      	adds	r3, #4
 8004886:	4618      	mov	r0, r3
 8004888:	f7fe fd90 	bl	80033ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4618      	mov	r0, r3
 8004890:	f002 fd50 	bl	8007334 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004898:	4b19      	ldr	r3, [pc, #100]	; (8004900 <xTaskRemoveFromEventList+0xbc>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d903      	bls.n	80048a8 <xTaskRemoveFromEventList+0x64>
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	4a16      	ldr	r2, [pc, #88]	; (8004900 <xTaskRemoveFromEventList+0xbc>)
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4a13      	ldr	r2, [pc, #76]	; (8004904 <xTaskRemoveFromEventList+0xc0>)
 80048b6:	441a      	add	r2, r3
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4619      	mov	r1, r3
 80048be:	4610      	mov	r0, r2
 80048c0:	f7fe fd17 	bl	80032f2 <vListInsertEnd>
 80048c4:	e005      	b.n	80048d2 <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	3318      	adds	r3, #24
 80048ca:	4619      	mov	r1, r3
 80048cc:	480e      	ldr	r0, [pc, #56]	; (8004908 <xTaskRemoveFromEventList+0xc4>)
 80048ce:	f7fe fd10 	bl	80032f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d6:	4b0d      	ldr	r3, [pc, #52]	; (800490c <xTaskRemoveFromEventList+0xc8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	429a      	cmp	r2, r3
 80048de:	d905      	bls.n	80048ec <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048e0:	2301      	movs	r3, #1
 80048e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048e4:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <xTaskRemoveFromEventList+0xcc>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e001      	b.n	80048f0 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 80048ec:	2300      	movs	r3, #0
 80048ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80048f0:	697b      	ldr	r3, [r7, #20]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20000d44 	.word	0x20000d44
 8004900:	20000d24 	.word	0x20000d24
 8004904:	2000084c 	.word	0x2000084c
 8004908:	20000cdc 	.word	0x20000cdc
 800490c:	20000848 	.word	0x20000848
 8004910:	20000d30 	.word	0x20000d30

08004914 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800491c:	4b06      	ldr	r3, [pc, #24]	; (8004938 <vTaskInternalSetTimeOutState+0x24>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004924:	4b05      	ldr	r3, [pc, #20]	; (800493c <vTaskInternalSetTimeOutState+0x28>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	605a      	str	r2, [r3, #4]
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	20000d34 	.word	0x20000d34
 800493c:	20000d20 	.word	0x20000d20

08004940 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10a      	bne.n	8004966 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	613b      	str	r3, [r7, #16]
}
 8004962:	bf00      	nop
 8004964:	e7fe      	b.n	8004964 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	60fb      	str	r3, [r7, #12]
}
 800497e:	bf00      	nop
 8004980:	e7fe      	b.n	8004980 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004982:	f000 febf 	bl	8005704 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004986:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <xTaskCheckForTimeOut+0xbc>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499e:	d102      	bne.n	80049a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049a0:	2300      	movs	r3, #0
 80049a2:	61fb      	str	r3, [r7, #28]
 80049a4:	e023      	b.n	80049ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <xTaskCheckForTimeOut+0xc0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d007      	beq.n	80049c2 <xTaskCheckForTimeOut+0x82>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d302      	bcc.n	80049c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049bc:	2301      	movs	r3, #1
 80049be:	61fb      	str	r3, [r7, #28]
 80049c0:	e015      	b.n	80049ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d20b      	bcs.n	80049e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	1ad2      	subs	r2, r2, r3
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff ff9b 	bl	8004914 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049de:	2300      	movs	r3, #0
 80049e0:	61fb      	str	r3, [r7, #28]
 80049e2:	e004      	b.n	80049ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049ea:	2301      	movs	r3, #1
 80049ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80049ee:	f000 feb9 	bl	8005764 <vPortExitCritical>

	return xReturn;
 80049f2:	69fb      	ldr	r3, [r7, #28]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20000d20 	.word	0x20000d20
 8004a00:	20000d34 	.word	0x20000d34

08004a04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <vTaskMissedYield+0x14>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
}
 8004a0e:	bf00      	nop
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	20000d30 	.word	0x20000d30

08004a1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a24:	f000 f852 	bl	8004acc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a28:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <prvIdleTask+0x28>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d9f9      	bls.n	8004a24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a30:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <prvIdleTask+0x2c>)
 8004a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a40:	e7f0      	b.n	8004a24 <prvIdleTask+0x8>
 8004a42:	bf00      	nop
 8004a44:	2000084c 	.word	0x2000084c
 8004a48:	e000ed04 	.word	0xe000ed04

08004a4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a52:	2300      	movs	r3, #0
 8004a54:	607b      	str	r3, [r7, #4]
 8004a56:	e00c      	b.n	8004a72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4a12      	ldr	r2, [pc, #72]	; (8004aac <prvInitialiseTaskLists+0x60>)
 8004a64:	4413      	add	r3, r2
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fe fc16 	bl	8003298 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	607b      	str	r3, [r7, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b37      	cmp	r3, #55	; 0x37
 8004a76:	d9ef      	bls.n	8004a58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a78:	480d      	ldr	r0, [pc, #52]	; (8004ab0 <prvInitialiseTaskLists+0x64>)
 8004a7a:	f7fe fc0d 	bl	8003298 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a7e:	480d      	ldr	r0, [pc, #52]	; (8004ab4 <prvInitialiseTaskLists+0x68>)
 8004a80:	f7fe fc0a 	bl	8003298 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a84:	480c      	ldr	r0, [pc, #48]	; (8004ab8 <prvInitialiseTaskLists+0x6c>)
 8004a86:	f7fe fc07 	bl	8003298 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a8a:	480c      	ldr	r0, [pc, #48]	; (8004abc <prvInitialiseTaskLists+0x70>)
 8004a8c:	f7fe fc04 	bl	8003298 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a90:	480b      	ldr	r0, [pc, #44]	; (8004ac0 <prvInitialiseTaskLists+0x74>)
 8004a92:	f7fe fc01 	bl	8003298 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a96:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <prvInitialiseTaskLists+0x78>)
 8004a98:	4a05      	ldr	r2, [pc, #20]	; (8004ab0 <prvInitialiseTaskLists+0x64>)
 8004a9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <prvInitialiseTaskLists+0x7c>)
 8004a9e:	4a05      	ldr	r2, [pc, #20]	; (8004ab4 <prvInitialiseTaskLists+0x68>)
 8004aa0:	601a      	str	r2, [r3, #0]
}
 8004aa2:	bf00      	nop
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	2000084c 	.word	0x2000084c
 8004ab0:	20000cac 	.word	0x20000cac
 8004ab4:	20000cc0 	.word	0x20000cc0
 8004ab8:	20000cdc 	.word	0x20000cdc
 8004abc:	20000cf0 	.word	0x20000cf0
 8004ac0:	20000d08 	.word	0x20000d08
 8004ac4:	20000cd4 	.word	0x20000cd4
 8004ac8:	20000cd8 	.word	0x20000cd8

08004acc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ad2:	e019      	b.n	8004b08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ad4:	f000 fe16 	bl	8005704 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ad8:	4b10      	ldr	r3, [pc, #64]	; (8004b1c <prvCheckTasksWaitingTermination+0x50>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fe fc61 	bl	80033ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004aea:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <prvCheckTasksWaitingTermination+0x54>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	4a0b      	ldr	r2, [pc, #44]	; (8004b20 <prvCheckTasksWaitingTermination+0x54>)
 8004af2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004af4:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <prvCheckTasksWaitingTermination+0x58>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	4a0a      	ldr	r2, [pc, #40]	; (8004b24 <prvCheckTasksWaitingTermination+0x58>)
 8004afc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004afe:	f000 fe31 	bl	8005764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f848 	bl	8004b98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <prvCheckTasksWaitingTermination+0x58>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e1      	bne.n	8004ad4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b10:	bf00      	nop
 8004b12:	bf00      	nop
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000cf0 	.word	0x20000cf0
 8004b20:	20000d1c 	.word	0x20000d1c
 8004b24:	20000d04 	.word	0x20000d04

08004b28 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004b34:	e005      	b.n	8004b42 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2ba5      	cmp	r3, #165	; 0xa5
 8004b48:	d0f5      	beq.n	8004b36 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	089b      	lsrs	r3, r3, #2
 8004b4e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	b29b      	uxth	r3, r3
	}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d102      	bne.n	8004b74 <uxTaskGetStackHighWaterMark+0x14>
 8004b6e:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <uxTaskGetStackHighWaterMark+0x34>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	e000      	b.n	8004b76 <uxTaskGetStackHighWaterMark+0x16>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8004b7e:	6938      	ldr	r0, [r7, #16]
 8004b80:	f7ff ffd2 	bl	8004b28 <prvTaskCheckFreeStackSpace>
 8004b84:	4603      	mov	r3, r0
 8004b86:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8004b88:	68fb      	ldr	r3, [r7, #12]
	}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000848 	.word	0x20000848

08004b98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d108      	bne.n	8004bbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 ff96 	bl	8005ae0 <vPortFree>
				vPortFree( pxTCB );
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 ff93 	bl	8005ae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004bba:	e018      	b.n	8004bee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d103      	bne.n	8004bce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 ff8a 	bl	8005ae0 <vPortFree>
	}
 8004bcc:	e00f      	b.n	8004bee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d00a      	beq.n	8004bee <prvDeleteTCB+0x56>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	60fb      	str	r3, [r7, #12]
}
 8004bea:	bf00      	nop
 8004bec:	e7fe      	b.n	8004bec <prvDeleteTCB+0x54>
	}
 8004bee:	bf00      	nop
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bfe:	4b0c      	ldr	r3, [pc, #48]	; (8004c30 <prvResetNextTaskUnblockTime+0x38>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <prvResetNextTaskUnblockTime+0x3c>)
 8004c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c10:	e008      	b.n	8004c24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c12:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <prvResetNextTaskUnblockTime+0x38>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4a04      	ldr	r2, [pc, #16]	; (8004c34 <prvResetNextTaskUnblockTime+0x3c>)
 8004c22:	6013      	str	r3, [r2, #0]
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	20000cd4 	.word	0x20000cd4
 8004c34:	20000d3c 	.word	0x20000d3c

08004c38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c3e:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <xTaskGetSchedulerState+0x34>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d102      	bne.n	8004c4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c46:	2301      	movs	r3, #1
 8004c48:	607b      	str	r3, [r7, #4]
 8004c4a:	e008      	b.n	8004c5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c4c:	4b08      	ldr	r3, [pc, #32]	; (8004c70 <xTaskGetSchedulerState+0x38>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c54:	2302      	movs	r3, #2
 8004c56:	607b      	str	r3, [r7, #4]
 8004c58:	e001      	b.n	8004c5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c5e:	687b      	ldr	r3, [r7, #4]
	}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	20000d28 	.word	0x20000d28
 8004c70:	20000d44 	.word	0x20000d44

08004c74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d05f      	beq.n	8004d4a <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c8a:	4b32      	ldr	r3, [pc, #200]	; (8004d54 <xTaskPriorityDisinherit+0xe0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d00a      	beq.n	8004caa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	60fb      	str	r3, [r7, #12]
}
 8004ca6:	bf00      	nop
 8004ca8:	e7fe      	b.n	8004ca8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10a      	bne.n	8004cc8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	60bb      	str	r3, [r7, #8]
}
 8004cc4:	bf00      	nop
 8004cc6:	e7fe      	b.n	8004cc6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ccc:	1e5a      	subs	r2, r3, #1
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d035      	beq.n	8004d4a <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d131      	bne.n	8004d4a <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fe fb5e 	bl	80033ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	204a      	movs	r0, #74	; 0x4a
 8004cf6:	f001 fe17 	bl	8006928 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f002 fb0f 	bl	8007334 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1a:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <xTaskPriorityDisinherit+0xe4>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d903      	bls.n	8004d2a <xTaskPriorityDisinherit+0xb6>
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d26:	4a0c      	ldr	r2, [pc, #48]	; (8004d58 <xTaskPriorityDisinherit+0xe4>)
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4a09      	ldr	r2, [pc, #36]	; (8004d5c <xTaskPriorityDisinherit+0xe8>)
 8004d38:	441a      	add	r2, r3
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4610      	mov	r0, r2
 8004d42:	f7fe fad6 	bl	80032f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d46:	2301      	movs	r3, #1
 8004d48:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d4a:	697b      	ldr	r3, [r7, #20]
	}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20000848 	.word	0x20000848
 8004d58:	20000d24 	.word	0x20000d24
 8004d5c:	2000084c 	.word	0x2000084c

08004d60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d6a:	4b21      	ldr	r3, [pc, #132]	; (8004df0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d70:	4b20      	ldr	r3, [pc, #128]	; (8004df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3304      	adds	r3, #4
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fe fb18 	bl	80033ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d82:	d10a      	bne.n	8004d9a <prvAddCurrentTaskToDelayedList+0x3a>
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d007      	beq.n	8004d9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d8a:	4b1a      	ldr	r3, [pc, #104]	; (8004df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	4619      	mov	r1, r3
 8004d92:	4819      	ldr	r0, [pc, #100]	; (8004df8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004d94:	f7fe faad 	bl	80032f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d98:	e026      	b.n	8004de8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4413      	add	r3, r2
 8004da0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004da2:	4b14      	ldr	r3, [pc, #80]	; (8004df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d209      	bcs.n	8004dc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004db2:	4b12      	ldr	r3, [pc, #72]	; (8004dfc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	4b0f      	ldr	r3, [pc, #60]	; (8004df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f7fe fabb 	bl	800333a <vListInsert>
}
 8004dc4:	e010      	b.n	8004de8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dc6:	4b0e      	ldr	r3, [pc, #56]	; (8004e00 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	f7fe fab1 	bl	800333a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004dd8:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d202      	bcs.n	8004de8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004de2:	4a08      	ldr	r2, [pc, #32]	; (8004e04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6013      	str	r3, [r2, #0]
}
 8004de8:	bf00      	nop
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20000d20 	.word	0x20000d20
 8004df4:	20000848 	.word	0x20000848
 8004df8:	20000d08 	.word	0x20000d08
 8004dfc:	20000cd8 	.word	0x20000cd8
 8004e00:	20000cd4 	.word	0x20000cd4
 8004e04:	20000d3c 	.word	0x20000d3c

08004e08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	; 0x28
 8004e0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004e12:	f000 fb07 	bl	8005424 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004e16:	4b1c      	ldr	r3, [pc, #112]	; (8004e88 <xTimerCreateTimerTask+0x80>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d021      	beq.n	8004e62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e26:	1d3a      	adds	r2, r7, #4
 8004e28:	f107 0108 	add.w	r1, r7, #8
 8004e2c:	f107 030c 	add.w	r3, r7, #12
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7fe fa17 	bl	8003264 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	9202      	str	r2, [sp, #8]
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	2302      	movs	r3, #2
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	2300      	movs	r3, #0
 8004e46:	460a      	mov	r2, r1
 8004e48:	4910      	ldr	r1, [pc, #64]	; (8004e8c <xTimerCreateTimerTask+0x84>)
 8004e4a:	4811      	ldr	r0, [pc, #68]	; (8004e90 <xTimerCreateTimerTask+0x88>)
 8004e4c:	f7ff f83e 	bl	8003ecc <xTaskCreateStatic>
 8004e50:	4603      	mov	r3, r0
 8004e52:	4a10      	ldr	r2, [pc, #64]	; (8004e94 <xTimerCreateTimerTask+0x8c>)
 8004e54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004e56:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <xTimerCreateTimerTask+0x8c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10a      	bne.n	8004e7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	613b      	str	r3, [r7, #16]
}
 8004e7a:	bf00      	nop
 8004e7c:	e7fe      	b.n	8004e7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004e7e:	697b      	ldr	r3, [r7, #20]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	20000d78 	.word	0x20000d78
 8004e8c:	08007734 	.word	0x08007734
 8004e90:	08004fcd 	.word	0x08004fcd
 8004e94:	20000d7c 	.word	0x20000d7c

08004e98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	; 0x28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10a      	bne.n	8004ec6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	623b      	str	r3, [r7, #32]
}
 8004ec2:	bf00      	nop
 8004ec4:	e7fe      	b.n	8004ec4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004ec6:	4b1a      	ldr	r3, [pc, #104]	; (8004f30 <xTimerGenericCommand+0x98>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d02a      	beq.n	8004f24 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b05      	cmp	r3, #5
 8004ede:	dc18      	bgt.n	8004f12 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ee0:	f7ff feaa 	bl	8004c38 <xTaskGetSchedulerState>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d109      	bne.n	8004efe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004eea:	4b11      	ldr	r3, [pc, #68]	; (8004f30 <xTimerGenericCommand+0x98>)
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	f107 0110 	add.w	r1, r7, #16
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef6:	f7fe fb8d 	bl	8003614 <xQueueGenericSend>
 8004efa:	6278      	str	r0, [r7, #36]	; 0x24
 8004efc:	e012      	b.n	8004f24 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004efe:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <xTimerGenericCommand+0x98>)
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	f107 0110 	add.w	r1, r7, #16
 8004f06:	2300      	movs	r3, #0
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f7fe fb83 	bl	8003614 <xQueueGenericSend>
 8004f0e:	6278      	str	r0, [r7, #36]	; 0x24
 8004f10:	e008      	b.n	8004f24 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004f12:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <xTimerGenericCommand+0x98>)
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	f107 0110 	add.w	r1, r7, #16
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	f7fe fc9f 	bl	8003860 <xQueueGenericSendFromISR>
 8004f22:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3728      	adds	r7, #40	; 0x28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	20000d78 	.word	0x20000d78

08004f34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f3e:	4b22      	ldr	r3, [pc, #136]	; (8004fc8 <prvProcessExpiredTimer+0x94>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7fe fa2d 	bl	80033ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d022      	beq.n	8004fa6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	699a      	ldr	r2, [r3, #24]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	18d1      	adds	r1, r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	6978      	ldr	r0, [r7, #20]
 8004f6e:	f000 f8d1 	bl	8005114 <prvInsertTimerInActiveList>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01f      	beq.n	8004fb8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f78:	2300      	movs	r3, #0
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	2100      	movs	r1, #0
 8004f82:	6978      	ldr	r0, [r7, #20]
 8004f84:	f7ff ff88 	bl	8004e98 <xTimerGenericCommand>
 8004f88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d113      	bne.n	8004fb8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	60fb      	str	r3, [r7, #12]
}
 8004fa2:	bf00      	nop
 8004fa4:	e7fe      	b.n	8004fa4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fac:	f023 0301 	bic.w	r3, r3, #1
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	6978      	ldr	r0, [r7, #20]
 8004fbe:	4798      	blx	r3
}
 8004fc0:	bf00      	nop
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20000d70 	.word	0x20000d70

08004fcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fd4:	f107 0308 	add.w	r3, r7, #8
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 f857 	bl	800508c <prvGetNextExpireTime>
 8004fde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 f803 	bl	8004ff0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004fea:	f000 f8d5 	bl	8005198 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fee:	e7f1      	b.n	8004fd4 <prvTimerTask+0x8>

08004ff0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ffa:	f7ff f9d5 	bl	80043a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ffe:	f107 0308 	add.w	r3, r7, #8
 8005002:	4618      	mov	r0, r3
 8005004:	f000 f866 	bl	80050d4 <prvSampleTimeNow>
 8005008:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d130      	bne.n	8005072 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10a      	bne.n	800502c <prvProcessTimerOrBlockTask+0x3c>
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	429a      	cmp	r2, r3
 800501c:	d806      	bhi.n	800502c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800501e:	f7ff f9d1 	bl	80043c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005022:	68f9      	ldr	r1, [r7, #12]
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff ff85 	bl	8004f34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800502a:	e024      	b.n	8005076 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d008      	beq.n	8005044 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005032:	4b13      	ldr	r3, [pc, #76]	; (8005080 <prvProcessTimerOrBlockTask+0x90>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <prvProcessTimerOrBlockTask+0x50>
 800503c:	2301      	movs	r3, #1
 800503e:	e000      	b.n	8005042 <prvProcessTimerOrBlockTask+0x52>
 8005040:	2300      	movs	r3, #0
 8005042:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005044:	4b0f      	ldr	r3, [pc, #60]	; (8005084 <prvProcessTimerOrBlockTask+0x94>)
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	4619      	mov	r1, r3
 8005052:	f7fe ff07 	bl	8003e64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005056:	f7ff f9b5 	bl	80043c4 <xTaskResumeAll>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10a      	bne.n	8005076 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005060:	4b09      	ldr	r3, [pc, #36]	; (8005088 <prvProcessTimerOrBlockTask+0x98>)
 8005062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	f3bf 8f6f 	isb	sy
}
 8005070:	e001      	b.n	8005076 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005072:	f7ff f9a7 	bl	80043c4 <xTaskResumeAll>
}
 8005076:	bf00      	nop
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20000d74 	.word	0x20000d74
 8005084:	20000d78 	.word	0x20000d78
 8005088:	e000ed04 	.word	0xe000ed04

0800508c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005094:	4b0e      	ldr	r3, [pc, #56]	; (80050d0 <prvGetNextExpireTime+0x44>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <prvGetNextExpireTime+0x16>
 800509e:	2201      	movs	r2, #1
 80050a0:	e000      	b.n	80050a4 <prvGetNextExpireTime+0x18>
 80050a2:	2200      	movs	r2, #0
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d105      	bne.n	80050bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050b0:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <prvGetNextExpireTime+0x44>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	e001      	b.n	80050c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80050c0:	68fb      	ldr	r3, [r7, #12]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20000d70 	.word	0x20000d70

080050d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80050dc:	f7ff fa14 	bl	8004508 <xTaskGetTickCount>
 80050e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80050e2:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <prvSampleTimeNow+0x3c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d205      	bcs.n	80050f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80050ec:	f000 f936 	bl	800535c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e002      	b.n	80050fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80050fe:	4a04      	ldr	r2, [pc, #16]	; (8005110 <prvSampleTimeNow+0x3c>)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005104:	68fb      	ldr	r3, [r7, #12]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000d80 	.word	0x20000d80

08005114 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	429a      	cmp	r2, r3
 8005138:	d812      	bhi.n	8005160 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	1ad2      	subs	r2, r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	429a      	cmp	r2, r3
 8005146:	d302      	bcc.n	800514e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005148:	2301      	movs	r3, #1
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	e01b      	b.n	8005186 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800514e:	4b10      	ldr	r3, [pc, #64]	; (8005190 <prvInsertTimerInActiveList+0x7c>)
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3304      	adds	r3, #4
 8005156:	4619      	mov	r1, r3
 8005158:	4610      	mov	r0, r2
 800515a:	f7fe f8ee 	bl	800333a <vListInsert>
 800515e:	e012      	b.n	8005186 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	429a      	cmp	r2, r3
 8005166:	d206      	bcs.n	8005176 <prvInsertTimerInActiveList+0x62>
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d302      	bcc.n	8005176 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005170:	2301      	movs	r3, #1
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	e007      	b.n	8005186 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005176:	4b07      	ldr	r3, [pc, #28]	; (8005194 <prvInsertTimerInActiveList+0x80>)
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	3304      	adds	r3, #4
 800517e:	4619      	mov	r1, r3
 8005180:	4610      	mov	r0, r2
 8005182:	f7fe f8da 	bl	800333a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005186:	697b      	ldr	r3, [r7, #20]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	20000d74 	.word	0x20000d74
 8005194:	20000d70 	.word	0x20000d70

08005198 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08e      	sub	sp, #56	; 0x38
 800519c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800519e:	e0ca      	b.n	8005336 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	da18      	bge.n	80051d8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80051a6:	1d3b      	adds	r3, r7, #4
 80051a8:	3304      	adds	r3, #4
 80051aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80051ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	61fb      	str	r3, [r7, #28]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80051c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ce:	6850      	ldr	r0, [r2, #4]
 80051d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051d2:	6892      	ldr	r2, [r2, #8]
 80051d4:	4611      	mov	r1, r2
 80051d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f2c0 80ab 	blt.w	8005336 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d004      	beq.n	80051f6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	3304      	adds	r3, #4
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fe f8db 	bl	80033ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051f6:	463b      	mov	r3, r7
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff ff6b 	bl	80050d4 <prvSampleTimeNow>
 80051fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b09      	cmp	r3, #9
 8005204:	f200 8096 	bhi.w	8005334 <prvProcessReceivedCommands+0x19c>
 8005208:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <prvProcessReceivedCommands+0x78>)
 800520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520e:	bf00      	nop
 8005210:	08005239 	.word	0x08005239
 8005214:	08005239 	.word	0x08005239
 8005218:	08005239 	.word	0x08005239
 800521c:	080052ad 	.word	0x080052ad
 8005220:	080052c1 	.word	0x080052c1
 8005224:	0800530b 	.word	0x0800530b
 8005228:	08005239 	.word	0x08005239
 800522c:	08005239 	.word	0x08005239
 8005230:	080052ad 	.word	0x080052ad
 8005234:	080052c1 	.word	0x080052c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	b2da      	uxtb	r2, r3
 8005244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	18d1      	adds	r1, r2, r3
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005258:	f7ff ff5c 	bl	8005114 <prvInsertTimerInActiveList>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d069      	beq.n	8005336 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005268:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	d05e      	beq.n	8005336 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	441a      	add	r2, r3
 8005280:	2300      	movs	r3, #0
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	2300      	movs	r3, #0
 8005286:	2100      	movs	r1, #0
 8005288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800528a:	f7ff fe05 	bl	8004e98 <xTimerGenericCommand>
 800528e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d14f      	bne.n	8005336 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	61bb      	str	r3, [r7, #24]
}
 80052a8:	bf00      	nop
 80052aa:	e7fe      	b.n	80052aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052b2:	f023 0301 	bic.w	r3, r3, #1
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80052be:	e03a      	b.n	8005336 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052c6:	f043 0301 	orr.w	r3, r3, #1
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10a      	bne.n	80052f6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	617b      	str	r3, [r7, #20]
}
 80052f2:	bf00      	nop
 80052f4:	e7fe      	b.n	80052f4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80052f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	18d1      	adds	r1, r2, r3
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005304:	f7ff ff06 	bl	8005114 <prvInsertTimerInActiveList>
					break;
 8005308:	e015      	b.n	8005336 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d103      	bne.n	8005320 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800531a:	f000 fbe1 	bl	8005ae0 <vPortFree>
 800531e:	e00a      	b.n	8005336 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005326:	f023 0301 	bic.w	r3, r3, #1
 800532a:	b2da      	uxtb	r2, r3
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005332:	e000      	b.n	8005336 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005334:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005336:	4b08      	ldr	r3, [pc, #32]	; (8005358 <prvProcessReceivedCommands+0x1c0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	1d39      	adds	r1, r7, #4
 800533c:	2200      	movs	r2, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f7fe fb3e 	bl	80039c0 <xQueueReceive>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	f47f af2a 	bne.w	80051a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800534c:	bf00      	nop
 800534e:	bf00      	nop
 8005350:	3730      	adds	r7, #48	; 0x30
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	20000d78 	.word	0x20000d78

0800535c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005362:	e048      	b.n	80053f6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005364:	4b2d      	ldr	r3, [pc, #180]	; (800541c <prvSwitchTimerLists+0xc0>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800536e:	4b2b      	ldr	r3, [pc, #172]	; (800541c <prvSwitchTimerLists+0xc0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3304      	adds	r3, #4
 800537c:	4618      	mov	r0, r3
 800537e:	f7fe f815 	bl	80033ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d02e      	beq.n	80053f6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4413      	add	r3, r2
 80053a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d90e      	bls.n	80053c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053b6:	4b19      	ldr	r3, [pc, #100]	; (800541c <prvSwitchTimerLists+0xc0>)
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3304      	adds	r3, #4
 80053be:	4619      	mov	r1, r3
 80053c0:	4610      	mov	r0, r2
 80053c2:	f7fd ffba 	bl	800333a <vListInsert>
 80053c6:	e016      	b.n	80053f6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053c8:	2300      	movs	r3, #0
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	2300      	movs	r3, #0
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	2100      	movs	r1, #0
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f7ff fd60 	bl	8004e98 <xTimerGenericCommand>
 80053d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	603b      	str	r3, [r7, #0]
}
 80053f2:	bf00      	nop
 80053f4:	e7fe      	b.n	80053f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053f6:	4b09      	ldr	r3, [pc, #36]	; (800541c <prvSwitchTimerLists+0xc0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1b1      	bne.n	8005364 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005400:	4b06      	ldr	r3, [pc, #24]	; (800541c <prvSwitchTimerLists+0xc0>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005406:	4b06      	ldr	r3, [pc, #24]	; (8005420 <prvSwitchTimerLists+0xc4>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a04      	ldr	r2, [pc, #16]	; (800541c <prvSwitchTimerLists+0xc0>)
 800540c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800540e:	4a04      	ldr	r2, [pc, #16]	; (8005420 <prvSwitchTimerLists+0xc4>)
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	6013      	str	r3, [r2, #0]
}
 8005414:	bf00      	nop
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20000d70 	.word	0x20000d70
 8005420:	20000d74 	.word	0x20000d74

08005424 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800542a:	f000 f96b 	bl	8005704 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800542e:	4b15      	ldr	r3, [pc, #84]	; (8005484 <prvCheckForValidListAndQueue+0x60>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d120      	bne.n	8005478 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005436:	4814      	ldr	r0, [pc, #80]	; (8005488 <prvCheckForValidListAndQueue+0x64>)
 8005438:	f7fd ff2e 	bl	8003298 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800543c:	4813      	ldr	r0, [pc, #76]	; (800548c <prvCheckForValidListAndQueue+0x68>)
 800543e:	f7fd ff2b 	bl	8003298 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005442:	4b13      	ldr	r3, [pc, #76]	; (8005490 <prvCheckForValidListAndQueue+0x6c>)
 8005444:	4a10      	ldr	r2, [pc, #64]	; (8005488 <prvCheckForValidListAndQueue+0x64>)
 8005446:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005448:	4b12      	ldr	r3, [pc, #72]	; (8005494 <prvCheckForValidListAndQueue+0x70>)
 800544a:	4a10      	ldr	r2, [pc, #64]	; (800548c <prvCheckForValidListAndQueue+0x68>)
 800544c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800544e:	2300      	movs	r3, #0
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	4b11      	ldr	r3, [pc, #68]	; (8005498 <prvCheckForValidListAndQueue+0x74>)
 8005454:	4a11      	ldr	r2, [pc, #68]	; (800549c <prvCheckForValidListAndQueue+0x78>)
 8005456:	2110      	movs	r1, #16
 8005458:	200a      	movs	r0, #10
 800545a:	f7fe f839 	bl	80034d0 <xQueueGenericCreateStatic>
 800545e:	4603      	mov	r3, r0
 8005460:	4a08      	ldr	r2, [pc, #32]	; (8005484 <prvCheckForValidListAndQueue+0x60>)
 8005462:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005464:	4b07      	ldr	r3, [pc, #28]	; (8005484 <prvCheckForValidListAndQueue+0x60>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800546c:	4b05      	ldr	r3, [pc, #20]	; (8005484 <prvCheckForValidListAndQueue+0x60>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	490b      	ldr	r1, [pc, #44]	; (80054a0 <prvCheckForValidListAndQueue+0x7c>)
 8005472:	4618      	mov	r0, r3
 8005474:	f7fe fcc4 	bl	8003e00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005478:	f000 f974 	bl	8005764 <vPortExitCritical>
}
 800547c:	bf00      	nop
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000d78 	.word	0x20000d78
 8005488:	20000d48 	.word	0x20000d48
 800548c:	20000d5c 	.word	0x20000d5c
 8005490:	20000d70 	.word	0x20000d70
 8005494:	20000d74 	.word	0x20000d74
 8005498:	20000e24 	.word	0x20000e24
 800549c:	20000d84 	.word	0x20000d84
 80054a0:	0800773c 	.word	0x0800773c

080054a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	3b04      	subs	r3, #4
 80054b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3b04      	subs	r3, #4
 80054c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f023 0201 	bic.w	r2, r3, #1
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3b04      	subs	r3, #4
 80054d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054d4:	4a0c      	ldr	r2, [pc, #48]	; (8005508 <pxPortInitialiseStack+0x64>)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	3b14      	subs	r3, #20
 80054de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3b04      	subs	r3, #4
 80054ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f06f 0202 	mvn.w	r2, #2
 80054f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3b20      	subs	r3, #32
 80054f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80054fa:	68fb      	ldr	r3, [r7, #12]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	0800550d 	.word	0x0800550d

0800550c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005512:	2300      	movs	r3, #0
 8005514:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005516:	4b12      	ldr	r3, [pc, #72]	; (8005560 <prvTaskExitError+0x54>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551e:	d00a      	beq.n	8005536 <prvTaskExitError+0x2a>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	60fb      	str	r3, [r7, #12]
}
 8005532:	bf00      	nop
 8005534:	e7fe      	b.n	8005534 <prvTaskExitError+0x28>
	__asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	60bb      	str	r3, [r7, #8]
}
 8005548:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800554a:	bf00      	nop
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0fc      	beq.n	800554c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005552:	bf00      	nop
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	2000000c 	.word	0x2000000c
	...

08005570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005570:	4b07      	ldr	r3, [pc, #28]	; (8005590 <pxCurrentTCBConst2>)
 8005572:	6819      	ldr	r1, [r3, #0]
 8005574:	6808      	ldr	r0, [r1, #0]
 8005576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557a:	f380 8809 	msr	PSP, r0
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f04f 0000 	mov.w	r0, #0
 8005586:	f380 8811 	msr	BASEPRI, r0
 800558a:	4770      	bx	lr
 800558c:	f3af 8000 	nop.w

08005590 <pxCurrentTCBConst2>:
 8005590:	20000848 	.word	0x20000848
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop

08005598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005598:	4808      	ldr	r0, [pc, #32]	; (80055bc <prvPortStartFirstTask+0x24>)
 800559a:	6800      	ldr	r0, [r0, #0]
 800559c:	6800      	ldr	r0, [r0, #0]
 800559e:	f380 8808 	msr	MSP, r0
 80055a2:	f04f 0000 	mov.w	r0, #0
 80055a6:	f380 8814 	msr	CONTROL, r0
 80055aa:	b662      	cpsie	i
 80055ac:	b661      	cpsie	f
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	df00      	svc	0
 80055b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055ba:	bf00      	nop
 80055bc:	e000ed08 	.word	0xe000ed08

080055c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055c6:	4b46      	ldr	r3, [pc, #280]	; (80056e0 <xPortStartScheduler+0x120>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a46      	ldr	r2, [pc, #280]	; (80056e4 <xPortStartScheduler+0x124>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d10a      	bne.n	80055e6 <xPortStartScheduler+0x26>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	613b      	str	r3, [r7, #16]
}
 80055e2:	bf00      	nop
 80055e4:	e7fe      	b.n	80055e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80055e6:	4b3e      	ldr	r3, [pc, #248]	; (80056e0 <xPortStartScheduler+0x120>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a3f      	ldr	r2, [pc, #252]	; (80056e8 <xPortStartScheduler+0x128>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d10a      	bne.n	8005606 <xPortStartScheduler+0x46>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	60fb      	str	r3, [r7, #12]
}
 8005602:	bf00      	nop
 8005604:	e7fe      	b.n	8005604 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005606:	4b39      	ldr	r3, [pc, #228]	; (80056ec <xPortStartScheduler+0x12c>)
 8005608:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	b2db      	uxtb	r3, r3
 8005610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	22ff      	movs	r2, #255	; 0xff
 8005616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	b2db      	uxtb	r3, r3
 800561e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	b2db      	uxtb	r3, r3
 8005624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005628:	b2da      	uxtb	r2, r3
 800562a:	4b31      	ldr	r3, [pc, #196]	; (80056f0 <xPortStartScheduler+0x130>)
 800562c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800562e:	4b31      	ldr	r3, [pc, #196]	; (80056f4 <xPortStartScheduler+0x134>)
 8005630:	2207      	movs	r2, #7
 8005632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005634:	e009      	b.n	800564a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005636:	4b2f      	ldr	r3, [pc, #188]	; (80056f4 <xPortStartScheduler+0x134>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3b01      	subs	r3, #1
 800563c:	4a2d      	ldr	r2, [pc, #180]	; (80056f4 <xPortStartScheduler+0x134>)
 800563e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005640:	78fb      	ldrb	r3, [r7, #3]
 8005642:	b2db      	uxtb	r3, r3
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	b2db      	uxtb	r3, r3
 8005648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005652:	2b80      	cmp	r3, #128	; 0x80
 8005654:	d0ef      	beq.n	8005636 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005656:	4b27      	ldr	r3, [pc, #156]	; (80056f4 <xPortStartScheduler+0x134>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f1c3 0307 	rsb	r3, r3, #7
 800565e:	2b04      	cmp	r3, #4
 8005660:	d00a      	beq.n	8005678 <xPortStartScheduler+0xb8>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	60bb      	str	r3, [r7, #8]
}
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005678:	4b1e      	ldr	r3, [pc, #120]	; (80056f4 <xPortStartScheduler+0x134>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	021b      	lsls	r3, r3, #8
 800567e:	4a1d      	ldr	r2, [pc, #116]	; (80056f4 <xPortStartScheduler+0x134>)
 8005680:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005682:	4b1c      	ldr	r3, [pc, #112]	; (80056f4 <xPortStartScheduler+0x134>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800568a:	4a1a      	ldr	r2, [pc, #104]	; (80056f4 <xPortStartScheduler+0x134>)
 800568c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	b2da      	uxtb	r2, r3
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005696:	4b18      	ldr	r3, [pc, #96]	; (80056f8 <xPortStartScheduler+0x138>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a17      	ldr	r2, [pc, #92]	; (80056f8 <xPortStartScheduler+0x138>)
 800569c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056a2:	4b15      	ldr	r3, [pc, #84]	; (80056f8 <xPortStartScheduler+0x138>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a14      	ldr	r2, [pc, #80]	; (80056f8 <xPortStartScheduler+0x138>)
 80056a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80056ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056ae:	f000 f8dd 	bl	800586c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056b2:	4b12      	ldr	r3, [pc, #72]	; (80056fc <xPortStartScheduler+0x13c>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80056b8:	f000 f8fc 	bl	80058b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80056bc:	4b10      	ldr	r3, [pc, #64]	; (8005700 <xPortStartScheduler+0x140>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a0f      	ldr	r2, [pc, #60]	; (8005700 <xPortStartScheduler+0x140>)
 80056c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80056c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056c8:	f7ff ff66 	bl	8005598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056cc:	f7fe fffc 	bl	80046c8 <vTaskSwitchContext>
	prvTaskExitError();
 80056d0:	f7ff ff1c 	bl	800550c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	e000ed00 	.word	0xe000ed00
 80056e4:	410fc271 	.word	0x410fc271
 80056e8:	410fc270 	.word	0x410fc270
 80056ec:	e000e400 	.word	0xe000e400
 80056f0:	20000e74 	.word	0x20000e74
 80056f4:	20000e78 	.word	0x20000e78
 80056f8:	e000ed20 	.word	0xe000ed20
 80056fc:	2000000c 	.word	0x2000000c
 8005700:	e000ef34 	.word	0xe000ef34

08005704 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	607b      	str	r3, [r7, #4]
}
 800571c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800571e:	4b0f      	ldr	r3, [pc, #60]	; (800575c <vPortEnterCritical+0x58>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3301      	adds	r3, #1
 8005724:	4a0d      	ldr	r2, [pc, #52]	; (800575c <vPortEnterCritical+0x58>)
 8005726:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005728:	4b0c      	ldr	r3, [pc, #48]	; (800575c <vPortEnterCritical+0x58>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d10f      	bne.n	8005750 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005730:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <vPortEnterCritical+0x5c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <vPortEnterCritical+0x4c>
	__asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	603b      	str	r3, [r7, #0]
}
 800574c:	bf00      	nop
 800574e:	e7fe      	b.n	800574e <vPortEnterCritical+0x4a>
	}
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	2000000c 	.word	0x2000000c
 8005760:	e000ed04 	.word	0xe000ed04

08005764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800576a:	4b12      	ldr	r3, [pc, #72]	; (80057b4 <vPortExitCritical+0x50>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10a      	bne.n	8005788 <vPortExitCritical+0x24>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	607b      	str	r3, [r7, #4]
}
 8005784:	bf00      	nop
 8005786:	e7fe      	b.n	8005786 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005788:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <vPortExitCritical+0x50>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3b01      	subs	r3, #1
 800578e:	4a09      	ldr	r2, [pc, #36]	; (80057b4 <vPortExitCritical+0x50>)
 8005790:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005792:	4b08      	ldr	r3, [pc, #32]	; (80057b4 <vPortExitCritical+0x50>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d105      	bne.n	80057a6 <vPortExitCritical+0x42>
 800579a:	2300      	movs	r3, #0
 800579c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	f383 8811 	msr	BASEPRI, r3
}
 80057a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057a6:	bf00      	nop
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	2000000c 	.word	0x2000000c
	...

080057c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057c0:	f3ef 8009 	mrs	r0, PSP
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	4b15      	ldr	r3, [pc, #84]	; (8005820 <pxCurrentTCBConst>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	f01e 0f10 	tst.w	lr, #16
 80057d0:	bf08      	it	eq
 80057d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80057d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057da:	6010      	str	r0, [r2, #0]
 80057dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80057e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80057e4:	f380 8811 	msr	BASEPRI, r0
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f7fe ff6a 	bl	80046c8 <vTaskSwitchContext>
 80057f4:	f04f 0000 	mov.w	r0, #0
 80057f8:	f380 8811 	msr	BASEPRI, r0
 80057fc:	bc09      	pop	{r0, r3}
 80057fe:	6819      	ldr	r1, [r3, #0]
 8005800:	6808      	ldr	r0, [r1, #0]
 8005802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005806:	f01e 0f10 	tst.w	lr, #16
 800580a:	bf08      	it	eq
 800580c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005810:	f380 8809 	msr	PSP, r0
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	f3af 8000 	nop.w

08005820 <pxCurrentTCBConst>:
 8005820:	20000848 	.word	0x20000848
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005824:	bf00      	nop
 8005826:	bf00      	nop

08005828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	607b      	str	r3, [r7, #4]
}
 8005840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005842:	f7fe fe83 	bl	800454c <xTaskIncrementTick>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800584c:	4b06      	ldr	r3, [pc, #24]	; (8005868 <xPortSysTickHandler+0x40>)
 800584e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	2300      	movs	r3, #0
 8005856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f383 8811 	msr	BASEPRI, r3
}
 800585e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	e000ed04 	.word	0xe000ed04

0800586c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005870:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <vPortSetupTimerInterrupt+0x34>)
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005876:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <vPortSetupTimerInterrupt+0x38>)
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800587c:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <vPortSetupTimerInterrupt+0x3c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a0a      	ldr	r2, [pc, #40]	; (80058ac <vPortSetupTimerInterrupt+0x40>)
 8005882:	fba2 2303 	umull	r2, r3, r2, r3
 8005886:	099b      	lsrs	r3, r3, #6
 8005888:	4a09      	ldr	r2, [pc, #36]	; (80058b0 <vPortSetupTimerInterrupt+0x44>)
 800588a:	3b01      	subs	r3, #1
 800588c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800588e:	4b04      	ldr	r3, [pc, #16]	; (80058a0 <vPortSetupTimerInterrupt+0x34>)
 8005890:	2207      	movs	r2, #7
 8005892:	601a      	str	r2, [r3, #0]
}
 8005894:	bf00      	nop
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	e000e010 	.word	0xe000e010
 80058a4:	e000e018 	.word	0xe000e018
 80058a8:	20000000 	.word	0x20000000
 80058ac:	10624dd3 	.word	0x10624dd3
 80058b0:	e000e014 	.word	0xe000e014

080058b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80058b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80058c4 <vPortEnableVFP+0x10>
 80058b8:	6801      	ldr	r1, [r0, #0]
 80058ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80058be:	6001      	str	r1, [r0, #0]
 80058c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80058c2:	bf00      	nop
 80058c4:	e000ed88 	.word	0xe000ed88

080058c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80058ce:	f3ef 8305 	mrs	r3, IPSR
 80058d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b0f      	cmp	r3, #15
 80058d8:	d914      	bls.n	8005904 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80058da:	4a17      	ldr	r2, [pc, #92]	; (8005938 <vPortValidateInterruptPriority+0x70>)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80058e4:	4b15      	ldr	r3, [pc, #84]	; (800593c <vPortValidateInterruptPriority+0x74>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	7afa      	ldrb	r2, [r7, #11]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d20a      	bcs.n	8005904 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	607b      	str	r3, [r7, #4]
}
 8005900:	bf00      	nop
 8005902:	e7fe      	b.n	8005902 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005904:	4b0e      	ldr	r3, [pc, #56]	; (8005940 <vPortValidateInterruptPriority+0x78>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800590c:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <vPortValidateInterruptPriority+0x7c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d90a      	bls.n	800592a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	603b      	str	r3, [r7, #0]
}
 8005926:	bf00      	nop
 8005928:	e7fe      	b.n	8005928 <vPortValidateInterruptPriority+0x60>
	}
 800592a:	bf00      	nop
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	e000e3f0 	.word	0xe000e3f0
 800593c:	20000e74 	.word	0x20000e74
 8005940:	e000ed0c 	.word	0xe000ed0c
 8005944:	20000e78 	.word	0x20000e78

08005948 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08a      	sub	sp, #40	; 0x28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005950:	2300      	movs	r3, #0
 8005952:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005954:	f7fe fd28 	bl	80043a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005958:	4b5b      	ldr	r3, [pc, #364]	; (8005ac8 <pvPortMalloc+0x180>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005960:	f000 f920 	bl	8005ba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005964:	4b59      	ldr	r3, [pc, #356]	; (8005acc <pvPortMalloc+0x184>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4013      	ands	r3, r2
 800596c:	2b00      	cmp	r3, #0
 800596e:	f040 8093 	bne.w	8005a98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01d      	beq.n	80059b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005978:	2208      	movs	r2, #8
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4413      	add	r3, r2
 800597e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	2b00      	cmp	r3, #0
 8005988:	d014      	beq.n	80059b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f023 0307 	bic.w	r3, r3, #7
 8005990:	3308      	adds	r3, #8
 8005992:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <pvPortMalloc+0x6c>
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	617b      	str	r3, [r7, #20]
}
 80059b0:	bf00      	nop
 80059b2:	e7fe      	b.n	80059b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d06e      	beq.n	8005a98 <pvPortMalloc+0x150>
 80059ba:	4b45      	ldr	r3, [pc, #276]	; (8005ad0 <pvPortMalloc+0x188>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d869      	bhi.n	8005a98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80059c4:	4b43      	ldr	r3, [pc, #268]	; (8005ad4 <pvPortMalloc+0x18c>)
 80059c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80059c8:	4b42      	ldr	r3, [pc, #264]	; (8005ad4 <pvPortMalloc+0x18c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059ce:	e004      	b.n	80059da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d903      	bls.n	80059ec <pvPortMalloc+0xa4>
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1f1      	bne.n	80059d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80059ec:	4b36      	ldr	r3, [pc, #216]	; (8005ac8 <pvPortMalloc+0x180>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d050      	beq.n	8005a98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2208      	movs	r2, #8
 80059fc:	4413      	add	r3, r2
 80059fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	1ad2      	subs	r2, r2, r3
 8005a10:	2308      	movs	r3, #8
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d91f      	bls.n	8005a58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <pvPortMalloc+0xf8>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	613b      	str	r3, [r7, #16]
}
 8005a3c:	bf00      	nop
 8005a3e:	e7fe      	b.n	8005a3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	1ad2      	subs	r2, r2, r3
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a52:	69b8      	ldr	r0, [r7, #24]
 8005a54:	f000 f908 	bl	8005c68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a58:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <pvPortMalloc+0x188>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	4a1b      	ldr	r2, [pc, #108]	; (8005ad0 <pvPortMalloc+0x188>)
 8005a64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a66:	4b1a      	ldr	r3, [pc, #104]	; (8005ad0 <pvPortMalloc+0x188>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4b1b      	ldr	r3, [pc, #108]	; (8005ad8 <pvPortMalloc+0x190>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d203      	bcs.n	8005a7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a72:	4b17      	ldr	r3, [pc, #92]	; (8005ad0 <pvPortMalloc+0x188>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a18      	ldr	r2, [pc, #96]	; (8005ad8 <pvPortMalloc+0x190>)
 8005a78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	4b13      	ldr	r3, [pc, #76]	; (8005acc <pvPortMalloc+0x184>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	431a      	orrs	r2, r3
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005a8e:	4b13      	ldr	r3, [pc, #76]	; (8005adc <pvPortMalloc+0x194>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3301      	adds	r3, #1
 8005a94:	4a11      	ldr	r2, [pc, #68]	; (8005adc <pvPortMalloc+0x194>)
 8005a96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a98:	f7fe fc94 	bl	80043c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <pvPortMalloc+0x174>
	__asm volatile
 8005aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	60fb      	str	r3, [r7, #12]
}
 8005ab8:	bf00      	nop
 8005aba:	e7fe      	b.n	8005aba <pvPortMalloc+0x172>
	return pvReturn;
 8005abc:	69fb      	ldr	r3, [r7, #28]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3728      	adds	r7, #40	; 0x28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20004a84 	.word	0x20004a84
 8005acc:	20004a98 	.word	0x20004a98
 8005ad0:	20004a88 	.word	0x20004a88
 8005ad4:	20004a7c 	.word	0x20004a7c
 8005ad8:	20004a8c 	.word	0x20004a8c
 8005adc:	20004a90 	.word	0x20004a90

08005ae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d04d      	beq.n	8005b8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005af2:	2308      	movs	r3, #8
 8005af4:	425b      	negs	r3, r3
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4413      	add	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	4b24      	ldr	r3, [pc, #144]	; (8005b98 <vPortFree+0xb8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <vPortFree+0x44>
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	60fb      	str	r3, [r7, #12]
}
 8005b20:	bf00      	nop
 8005b22:	e7fe      	b.n	8005b22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00a      	beq.n	8005b42 <vPortFree+0x62>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	60bb      	str	r3, [r7, #8]
}
 8005b3e:	bf00      	nop
 8005b40:	e7fe      	b.n	8005b40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	4b14      	ldr	r3, [pc, #80]	; (8005b98 <vPortFree+0xb8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01e      	beq.n	8005b8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d11a      	bne.n	8005b8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	4b0e      	ldr	r3, [pc, #56]	; (8005b98 <vPortFree+0xb8>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	43db      	mvns	r3, r3
 8005b62:	401a      	ands	r2, r3
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b68:	f7fe fc1e 	bl	80043a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <vPortFree+0xbc>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4413      	add	r3, r2
 8005b76:	4a09      	ldr	r2, [pc, #36]	; (8005b9c <vPortFree+0xbc>)
 8005b78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b7a:	6938      	ldr	r0, [r7, #16]
 8005b7c:	f000 f874 	bl	8005c68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005b80:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <vPortFree+0xc0>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3301      	adds	r3, #1
 8005b86:	4a06      	ldr	r2, [pc, #24]	; (8005ba0 <vPortFree+0xc0>)
 8005b88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005b8a:	f7fe fc1b 	bl	80043c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b8e:	bf00      	nop
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20004a98 	.word	0x20004a98
 8005b9c:	20004a88 	.word	0x20004a88
 8005ba0:	20004a94 	.word	0x20004a94

08005ba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005baa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005bae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005bb0:	4b27      	ldr	r3, [pc, #156]	; (8005c50 <prvHeapInit+0xac>)
 8005bb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00c      	beq.n	8005bd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3307      	adds	r3, #7
 8005bc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0307 	bic.w	r3, r3, #7
 8005bca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	4a1f      	ldr	r2, [pc, #124]	; (8005c50 <prvHeapInit+0xac>)
 8005bd4:	4413      	add	r3, r2
 8005bd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005bdc:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <prvHeapInit+0xb0>)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005be2:	4b1c      	ldr	r3, [pc, #112]	; (8005c54 <prvHeapInit+0xb0>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	4413      	add	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005bf0:	2208      	movs	r2, #8
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	1a9b      	subs	r3, r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0307 	bic.w	r3, r3, #7
 8005bfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4a15      	ldr	r2, [pc, #84]	; (8005c58 <prvHeapInit+0xb4>)
 8005c04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c06:	4b14      	ldr	r3, [pc, #80]	; (8005c58 <prvHeapInit+0xb4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c0e:	4b12      	ldr	r3, [pc, #72]	; (8005c58 <prvHeapInit+0xb4>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	1ad2      	subs	r2, r2, r3
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c24:	4b0c      	ldr	r3, [pc, #48]	; (8005c58 <prvHeapInit+0xb4>)
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	4a0a      	ldr	r2, [pc, #40]	; (8005c5c <prvHeapInit+0xb8>)
 8005c32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <prvHeapInit+0xbc>)
 8005c3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c3c:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <prvHeapInit+0xc0>)
 8005c3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c42:	601a      	str	r2, [r3, #0]
}
 8005c44:	bf00      	nop
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	20000e7c 	.word	0x20000e7c
 8005c54:	20004a7c 	.word	0x20004a7c
 8005c58:	20004a84 	.word	0x20004a84
 8005c5c:	20004a8c 	.word	0x20004a8c
 8005c60:	20004a88 	.word	0x20004a88
 8005c64:	20004a98 	.word	0x20004a98

08005c68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c70:	4b28      	ldr	r3, [pc, #160]	; (8005d14 <prvInsertBlockIntoFreeList+0xac>)
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	e002      	b.n	8005c7c <prvInsertBlockIntoFreeList+0x14>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d8f7      	bhi.n	8005c76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	4413      	add	r3, r2
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d108      	bne.n	8005caa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	441a      	add	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	441a      	add	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d118      	bne.n	8005cf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	4b15      	ldr	r3, [pc, #84]	; (8005d18 <prvInsertBlockIntoFreeList+0xb0>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d00d      	beq.n	8005ce6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	441a      	add	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	e008      	b.n	8005cf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ce6:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <prvInsertBlockIntoFreeList+0xb0>)
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	e003      	b.n	8005cf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d002      	beq.n	8005d06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d06:	bf00      	nop
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	20004a7c 	.word	0x20004a7c
 8005d18:	20004a84 	.word	0x20004a84

08005d1c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005d20:	4803      	ldr	r0, [pc, #12]	; (8005d30 <_cbSendSystemDesc+0x14>)
 8005d22:	f001 fa11 	bl	8007148 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005d26:	4803      	ldr	r0, [pc, #12]	; (8005d34 <_cbSendSystemDesc+0x18>)
 8005d28:	f001 fa0e 	bl	8007148 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005d2c:	bf00      	nop
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	08007744 	.word	0x08007744
 8005d34:	08007784 	.word	0x08007784

08005d38 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005d3c:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <SEGGER_SYSVIEW_Conf+0x20>)
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <SEGGER_SYSVIEW_Conf+0x20>)
 8005d42:	6819      	ldr	r1, [r3, #0]
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <SEGGER_SYSVIEW_Conf+0x24>)
 8005d46:	4a06      	ldr	r2, [pc, #24]	; (8005d60 <SEGGER_SYSVIEW_Conf+0x28>)
 8005d48:	f000 fd7c 	bl	8006844 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005d4c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8005d50:	f000 fdbc 	bl	80068cc <SEGGER_SYSVIEW_SetRAMBase>
}
 8005d54:	bf00      	nop
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	20000000 	.word	0x20000000
 8005d5c:	08005d1d 	.word	0x08005d1d
 8005d60:	0800788c 	.word	0x0800788c

08005d64 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	607b      	str	r3, [r7, #4]
 8005d6e:	e048      	b.n	8005e02 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8005d70:	4929      	ldr	r1, [pc, #164]	; (8005e18 <_cbSendTaskList+0xb4>)
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fe feed 	bl	8004b60 <uxTaskGetStackHighWaterMark>
 8005d86:	4601      	mov	r1, r0
 8005d88:	4823      	ldr	r0, [pc, #140]	; (8005e18 <_cbSendTaskList+0xb4>)
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4403      	add	r3, r0
 8005d96:	3310      	adds	r3, #16
 8005d98:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005d9a:	491f      	ldr	r1, [pc, #124]	; (8005e18 <_cbSendTaskList+0xb4>)
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	440b      	add	r3, r1
 8005da8:	6818      	ldr	r0, [r3, #0]
 8005daa:	491b      	ldr	r1, [pc, #108]	; (8005e18 <_cbSendTaskList+0xb4>)
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	3304      	adds	r3, #4
 8005dba:	6819      	ldr	r1, [r3, #0]
 8005dbc:	4c16      	ldr	r4, [pc, #88]	; (8005e18 <_cbSendTaskList+0xb4>)
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4423      	add	r3, r4
 8005dca:	3308      	adds	r3, #8
 8005dcc:	681c      	ldr	r4, [r3, #0]
 8005dce:	4d12      	ldr	r5, [pc, #72]	; (8005e18 <_cbSendTaskList+0xb4>)
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	442b      	add	r3, r5
 8005ddc:	330c      	adds	r3, #12
 8005dde:	681d      	ldr	r5, [r3, #0]
 8005de0:	4e0d      	ldr	r6, [pc, #52]	; (8005e18 <_cbSendTaskList+0xb4>)
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4433      	add	r3, r6
 8005dee:	3310      	adds	r3, #16
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	462b      	mov	r3, r5
 8005df6:	4622      	mov	r2, r4
 8005df8:	f000 f8be 	bl	8005f78 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	607b      	str	r3, [r7, #4]
 8005e02:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <_cbSendTaskList+0xb8>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d3b1      	bcc.n	8005d70 <_cbSendTaskList+0xc>
  }
}
 8005e0c:	bf00      	nop
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e16:	bf00      	nop
 8005e18:	20004a9c 	.word	0x20004a9c
 8005e1c:	20004b3c 	.word	0x20004b3c

08005e20 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e24:	b082      	sub	sp, #8
 8005e26:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005e28:	f7fe fb7e 	bl	8004528 <xTaskGetTickCountFromISR>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2200      	movs	r2, #0
 8005e30:	469a      	mov	sl, r3
 8005e32:	4693      	mov	fp, r2
 8005e34:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005e38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	f04f 0a00 	mov.w	sl, #0
 8005e44:	f04f 0b00 	mov.w	fp, #0
 8005e48:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005e4c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8005e50:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005e54:	4652      	mov	r2, sl
 8005e56:	465b      	mov	r3, fp
 8005e58:	1a14      	subs	r4, r2, r0
 8005e5a:	eb63 0501 	sbc.w	r5, r3, r1
 8005e5e:	f04f 0200 	mov.w	r2, #0
 8005e62:	f04f 0300 	mov.w	r3, #0
 8005e66:	00ab      	lsls	r3, r5, #2
 8005e68:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005e6c:	00a2      	lsls	r2, r4, #2
 8005e6e:	4614      	mov	r4, r2
 8005e70:	461d      	mov	r5, r3
 8005e72:	eb14 0800 	adds.w	r8, r4, r0
 8005e76:	eb45 0901 	adc.w	r9, r5, r1
 8005e7a:	f04f 0200 	mov.w	r2, #0
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e8e:	4690      	mov	r8, r2
 8005e90:	4699      	mov	r9, r3
 8005e92:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005e96:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005ea8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005eb6:	2205      	movs	r2, #5
 8005eb8:	492b      	ldr	r1, [pc, #172]	; (8005f68 <SYSVIEW_AddTask+0xc0>)
 8005eba:	68b8      	ldr	r0, [r7, #8]
 8005ebc:	f001 fbce 	bl	800765c <memcmp>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d04b      	beq.n	8005f5e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005ec6:	4b29      	ldr	r3, [pc, #164]	; (8005f6c <SYSVIEW_AddTask+0xc4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b07      	cmp	r3, #7
 8005ecc:	d903      	bls.n	8005ed6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005ece:	4828      	ldr	r0, [pc, #160]	; (8005f70 <SYSVIEW_AddTask+0xc8>)
 8005ed0:	f001 fb68 	bl	80075a4 <SEGGER_SYSVIEW_Warn>
    return;
 8005ed4:	e044      	b.n	8005f60 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005ed6:	4b25      	ldr	r3, [pc, #148]	; (8005f6c <SYSVIEW_AddTask+0xc4>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	4926      	ldr	r1, [pc, #152]	; (8005f74 <SYSVIEW_AddTask+0xcc>)
 8005edc:	4613      	mov	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	440b      	add	r3, r1
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005eea:	4b20      	ldr	r3, [pc, #128]	; (8005f6c <SYSVIEW_AddTask+0xc4>)
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	4921      	ldr	r1, [pc, #132]	; (8005f74 <SYSVIEW_AddTask+0xcc>)
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	3304      	adds	r3, #4
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005f00:	4b1a      	ldr	r3, [pc, #104]	; (8005f6c <SYSVIEW_AddTask+0xc4>)
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	491b      	ldr	r1, [pc, #108]	; (8005f74 <SYSVIEW_AddTask+0xcc>)
 8005f06:	4613      	mov	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	440b      	add	r3, r1
 8005f10:	3308      	adds	r3, #8
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005f16:	4b15      	ldr	r3, [pc, #84]	; (8005f6c <SYSVIEW_AddTask+0xc4>)
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	4916      	ldr	r1, [pc, #88]	; (8005f74 <SYSVIEW_AddTask+0xcc>)
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	440b      	add	r3, r1
 8005f26:	330c      	adds	r3, #12
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005f2c:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <SYSVIEW_AddTask+0xc4>)
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	4910      	ldr	r1, [pc, #64]	; (8005f74 <SYSVIEW_AddTask+0xcc>)
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	440b      	add	r3, r1
 8005f3c:	3310      	adds	r3, #16
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005f42:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <SYSVIEW_AddTask+0xc4>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3301      	adds	r3, #1
 8005f48:	4a08      	ldr	r2, [pc, #32]	; (8005f6c <SYSVIEW_AddTask+0xc4>)
 8005f4a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	68b9      	ldr	r1, [r7, #8]
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 f80e 	bl	8005f78 <SYSVIEW_SendTaskInfo>
 8005f5c:	e000      	b.n	8005f60 <SYSVIEW_AddTask+0xb8>
    return;
 8005f5e:	bf00      	nop

}
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	08007794 	.word	0x08007794
 8005f6c:	20004b3c 	.word	0x20004b3c
 8005f70:	0800779c 	.word	0x0800779c
 8005f74:	20004a9c 	.word	0x20004a9c

08005f78 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	; 0x28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005f86:	f107 0310 	add.w	r3, r7, #16
 8005f8a:	2218      	movs	r2, #24
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f001 fb74 	bl	800767c <memset>
  TaskInfo.TaskID     = TaskID;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005fa8:	f107 0310 	add.w	r3, r7, #16
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 ffd3 	bl	8006f58 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005fb2:	bf00      	nop
 8005fb4:	3728      	adds	r7, #40	; 0x28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
	...

08005fbc <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005fc2:	4b26      	ldr	r3, [pc, #152]	; (800605c <_DoInit+0xa0>)
 8005fc4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005fc6:	22a8      	movs	r2, #168	; 0xa8
 8005fc8:	2100      	movs	r1, #0
 8005fca:	6838      	ldr	r0, [r7, #0]
 8005fcc:	f001 fb56 	bl	800767c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2203      	movs	r2, #3
 8005fd4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2203      	movs	r2, #3
 8005fda:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	4a20      	ldr	r2, [pc, #128]	; (8006060 <_DoInit+0xa4>)
 8005fe0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	4a1f      	ldr	r2, [pc, #124]	; (8006064 <_DoInit+0xa8>)
 8005fe6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fee:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2200      	movs	r2, #0
 8006000:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	4a16      	ldr	r2, [pc, #88]	; (8006060 <_DoInit+0xa4>)
 8006006:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	4a17      	ldr	r2, [pc, #92]	; (8006068 <_DoInit+0xac>)
 800600c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2210      	movs	r2, #16
 8006012:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2200      	movs	r2, #0
 8006018:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2200      	movs	r2, #0
 800601e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2200      	movs	r2, #0
 8006024:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8006026:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800602a:	2300      	movs	r3, #0
 800602c:	607b      	str	r3, [r7, #4]
 800602e:	e00c      	b.n	800604a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f1c3 030f 	rsb	r3, r3, #15
 8006036:	4a0d      	ldr	r2, [pc, #52]	; (800606c <_DoInit+0xb0>)
 8006038:	5cd1      	ldrb	r1, [r2, r3]
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4413      	add	r3, r2
 8006040:	460a      	mov	r2, r1
 8006042:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3301      	adds	r3, #1
 8006048:	607b      	str	r3, [r7, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b0f      	cmp	r3, #15
 800604e:	d9ef      	bls.n	8006030 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8006050:	f3bf 8f5f 	dmb	sy
}
 8006054:	bf00      	nop
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	20004b40 	.word	0x20004b40
 8006060:	080077ec 	.word	0x080077ec
 8006064:	20004be8 	.word	0x20004be8
 8006068:	20004fe8 	.word	0x20004fe8
 800606c:	08007894 	.word	0x08007894

08006070 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006070:	b580      	push	{r7, lr}
 8006072:	b08c      	sub	sp, #48	; 0x30
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800607c:	4b3e      	ldr	r3, [pc, #248]	; (8006178 <SEGGER_RTT_ReadNoLock+0x108>)
 800607e:	623b      	str	r3, [r7, #32]
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b53      	cmp	r3, #83	; 0x53
 8006088:	d001      	beq.n	800608e <SEGGER_RTT_ReadNoLock+0x1e>
 800608a:	f7ff ff97 	bl	8005fbc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4613      	mov	r3, r2
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	4413      	add	r3, r2
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	3360      	adds	r3, #96	; 0x60
 800609a:	4a37      	ldr	r2, [pc, #220]	; (8006178 <SEGGER_RTT_ReadNoLock+0x108>)
 800609c:	4413      	add	r3, r2
 800609e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80060b0:	2300      	movs	r3, #0
 80060b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80060b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d92b      	bls.n	8006114 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4293      	cmp	r3, r2
 80060cc:	bf28      	it	cs
 80060ce:	4613      	movcs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	4413      	add	r3, r2
 80060da:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	6939      	ldr	r1, [r7, #16]
 80060e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060e2:	f001 faf7 	bl	80076d4 <memcpy>
    NumBytesRead += NumBytesRem;
 80060e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	4413      	add	r3, r2
 80060ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80060ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	4413      	add	r3, r2
 80060f4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80060fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	4413      	add	r3, r2
 8006104:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800610c:	429a      	cmp	r2, r3
 800610e:	d101      	bne.n	8006114 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006110:	2300      	movs	r3, #0
 8006112:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4293      	cmp	r3, r2
 8006122:	bf28      	it	cs
 8006124:	4613      	movcs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d019      	beq.n	8006162 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	4413      	add	r3, r2
 8006136:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	6939      	ldr	r1, [r7, #16]
 800613c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800613e:	f001 fac9 	bl	80076d4 <memcpy>
    NumBytesRead += NumBytesRem;
 8006142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	4413      	add	r3, r2
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800614a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	4413      	add	r3, r2
 8006150:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800615a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	4413      	add	r3, r2
 8006160:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8006162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800616c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006170:	4618      	mov	r0, r3
 8006172:	3730      	adds	r7, #48	; 0x30
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	20004b40 	.word	0x20004b40

0800617c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800618a:	4b3d      	ldr	r3, [pc, #244]	; (8006280 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800618c:	61bb      	str	r3, [r7, #24]
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b53      	cmp	r3, #83	; 0x53
 8006196:	d001      	beq.n	800619c <SEGGER_RTT_AllocUpBuffer+0x20>
 8006198:	f7ff ff10 	bl	8005fbc <_DoInit>
  SEGGER_RTT_LOCK();
 800619c:	f3ef 8311 	mrs	r3, BASEPRI
 80061a0:	f04f 0120 	mov.w	r1, #32
 80061a4:	f381 8811 	msr	BASEPRI, r1
 80061a8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80061aa:	4b35      	ldr	r3, [pc, #212]	; (8006280 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80061ac:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80061ae:	2300      	movs	r3, #0
 80061b0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80061b2:	6939      	ldr	r1, [r7, #16]
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	4613      	mov	r3, r2
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	4413      	add	r3, r2
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	440b      	add	r3, r1
 80061c2:	3304      	adds	r3, #4
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d008      	beq.n	80061dc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	3301      	adds	r3, #1
 80061ce:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	dbeb      	blt.n	80061b2 <SEGGER_RTT_AllocUpBuffer+0x36>
 80061da:	e000      	b.n	80061de <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80061dc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	69fa      	ldr	r2, [r7, #28]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	da3f      	bge.n	8006268 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80061e8:	6939      	ldr	r1, [r7, #16]
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	1c5a      	adds	r2, r3, #1
 80061ee:	4613      	mov	r3, r2
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	4413      	add	r3, r2
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	440b      	add	r3, r1
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80061fc:	6939      	ldr	r1, [r7, #16]
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	4613      	mov	r3, r2
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	4413      	add	r3, r2
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	440b      	add	r3, r1
 800620c:	3304      	adds	r3, #4
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8006212:	6939      	ldr	r1, [r7, #16]
 8006214:	69fa      	ldr	r2, [r7, #28]
 8006216:	4613      	mov	r3, r2
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	4413      	add	r3, r2
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	440b      	add	r3, r1
 8006220:	3320      	adds	r3, #32
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8006226:	6939      	ldr	r1, [r7, #16]
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	4613      	mov	r3, r2
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	4413      	add	r3, r2
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	440b      	add	r3, r1
 8006234:	3328      	adds	r3, #40	; 0x28
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800623a:	6939      	ldr	r1, [r7, #16]
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	4613      	mov	r3, r2
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	4413      	add	r3, r2
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	440b      	add	r3, r1
 8006248:	3324      	adds	r3, #36	; 0x24
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800624e:	6939      	ldr	r1, [r7, #16]
 8006250:	69fa      	ldr	r2, [r7, #28]
 8006252:	4613      	mov	r3, r2
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	4413      	add	r3, r2
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	440b      	add	r3, r1
 800625c:	332c      	adds	r3, #44	; 0x2c
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006262:	f3bf 8f5f 	dmb	sy
 8006266:	e002      	b.n	800626e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8006268:	f04f 33ff 	mov.w	r3, #4294967295
 800626c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8006274:	69fb      	ldr	r3, [r7, #28]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3720      	adds	r7, #32
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20004b40 	.word	0x20004b40

08006284 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006284:	b580      	push	{r7, lr}
 8006286:	b08a      	sub	sp, #40	; 0x28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8006292:	4b21      	ldr	r3, [pc, #132]	; (8006318 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8006294:	623b      	str	r3, [r7, #32]
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b53      	cmp	r3, #83	; 0x53
 800629e:	d001      	beq.n	80062a4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80062a0:	f7ff fe8c 	bl	8005fbc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80062a4:	4b1c      	ldr	r3, [pc, #112]	; (8006318 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80062a6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d82c      	bhi.n	8006308 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80062ae:	f3ef 8311 	mrs	r3, BASEPRI
 80062b2:	f04f 0120 	mov.w	r1, #32
 80062b6:	f381 8811 	msr	BASEPRI, r1
 80062ba:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4613      	mov	r3, r2
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	4413      	add	r3, r2
 80062c4:	00db      	lsls	r3, r3, #3
 80062c6:	3360      	adds	r3, #96	; 0x60
 80062c8:	69fa      	ldr	r2, [r7, #28]
 80062ca:	4413      	add	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00e      	beq.n	80062f2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2200      	movs	r2, #0
 80062ea:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	2200      	movs	r2, #0
 80062f0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062f6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80062f8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006302:	2300      	movs	r3, #0
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
 8006306:	e002      	b.n	800630e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8006308:	f04f 33ff 	mov.w	r3, #4294967295
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006310:	4618      	mov	r0, r3
 8006312:	3728      	adds	r7, #40	; 0x28
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	20004b40 	.word	0x20004b40

0800631c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d105      	bne.n	800633a <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	60fa      	str	r2, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	701a      	strb	r2, [r3, #0]
 8006338:	e022      	b.n	8006380 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	1c5a      	adds	r2, r3, #1
 8006342:	60fa      	str	r2, [r7, #12]
 8006344:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b80      	cmp	r3, #128	; 0x80
 800634a:	d90a      	bls.n	8006362 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800634c:	2380      	movs	r3, #128	; 0x80
 800634e:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8006350:	e007      	b.n	8006362 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	1c53      	adds	r3, r2, #1
 8006356:	60bb      	str	r3, [r7, #8]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	1c59      	adds	r1, r3, #1
 800635c:	60f9      	str	r1, [r7, #12]
 800635e:	7812      	ldrb	r2, [r2, #0]
 8006360:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	1e5a      	subs	r2, r3, #1
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <_EncodeStr+0x58>
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1ee      	bne.n	8006352 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	b2da      	uxtb	r2, r3
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8006380:	68fb      	ldr	r3, [r7, #12]
}
 8006382:	4618      	mov	r0, r3
 8006384:	371c      	adds	r7, #28
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	3307      	adds	r3, #7
}
 800639a:	4618      	mov	r0, r3
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
	...

080063a8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80063ae:	4b34      	ldr	r3, [pc, #208]	; (8006480 <_HandleIncomingPacket+0xd8>)
 80063b0:	7e1b      	ldrb	r3, [r3, #24]
 80063b2:	4618      	mov	r0, r3
 80063b4:	1cfb      	adds	r3, r7, #3
 80063b6:	2201      	movs	r2, #1
 80063b8:	4619      	mov	r1, r3
 80063ba:	f7ff fe59 	bl	8006070 <SEGGER_RTT_ReadNoLock>
 80063be:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d057      	beq.n	8006476 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80063c6:	78fb      	ldrb	r3, [r7, #3]
 80063c8:	2b80      	cmp	r3, #128	; 0x80
 80063ca:	d031      	beq.n	8006430 <_HandleIncomingPacket+0x88>
 80063cc:	2b80      	cmp	r3, #128	; 0x80
 80063ce:	dc40      	bgt.n	8006452 <_HandleIncomingPacket+0xaa>
 80063d0:	2b07      	cmp	r3, #7
 80063d2:	dc15      	bgt.n	8006400 <_HandleIncomingPacket+0x58>
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	dd3c      	ble.n	8006452 <_HandleIncomingPacket+0xaa>
 80063d8:	3b01      	subs	r3, #1
 80063da:	2b06      	cmp	r3, #6
 80063dc:	d839      	bhi.n	8006452 <_HandleIncomingPacket+0xaa>
 80063de:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <_HandleIncomingPacket+0x3c>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	08006407 	.word	0x08006407
 80063e8:	0800640d 	.word	0x0800640d
 80063ec:	08006413 	.word	0x08006413
 80063f0:	08006419 	.word	0x08006419
 80063f4:	0800641f 	.word	0x0800641f
 80063f8:	08006425 	.word	0x08006425
 80063fc:	0800642b 	.word	0x0800642b
 8006400:	2b7f      	cmp	r3, #127	; 0x7f
 8006402:	d033      	beq.n	800646c <_HandleIncomingPacket+0xc4>
 8006404:	e025      	b.n	8006452 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006406:	f000 fc2d 	bl	8006c64 <SEGGER_SYSVIEW_Start>
      break;
 800640a:	e034      	b.n	8006476 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800640c:	f000 fce4 	bl	8006dd8 <SEGGER_SYSVIEW_Stop>
      break;
 8006410:	e031      	b.n	8006476 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006412:	f000 febd 	bl	8007190 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006416:	e02e      	b.n	8006476 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006418:	f000 fe82 	bl	8007120 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800641c:	e02b      	b.n	8006476 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800641e:	f000 fd01 	bl	8006e24 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006422:	e028      	b.n	8006476 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006424:	f001 f880 	bl	8007528 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006428:	e025      	b.n	8006476 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800642a:	f001 f85f 	bl	80074ec <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800642e:	e022      	b.n	8006476 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006430:	4b13      	ldr	r3, [pc, #76]	; (8006480 <_HandleIncomingPacket+0xd8>)
 8006432:	7e1b      	ldrb	r3, [r3, #24]
 8006434:	4618      	mov	r0, r3
 8006436:	1cfb      	adds	r3, r7, #3
 8006438:	2201      	movs	r2, #1
 800643a:	4619      	mov	r1, r3
 800643c:	f7ff fe18 	bl	8006070 <SEGGER_RTT_ReadNoLock>
 8006440:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d013      	beq.n	8006470 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006448:	78fb      	ldrb	r3, [r7, #3]
 800644a:	4618      	mov	r0, r3
 800644c:	f000 ffc4 	bl	80073d8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006450:	e00e      	b.n	8006470 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006452:	78fb      	ldrb	r3, [r7, #3]
 8006454:	b25b      	sxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	da0c      	bge.n	8006474 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800645a:	4b09      	ldr	r3, [pc, #36]	; (8006480 <_HandleIncomingPacket+0xd8>)
 800645c:	7e1b      	ldrb	r3, [r3, #24]
 800645e:	4618      	mov	r0, r3
 8006460:	1cfb      	adds	r3, r7, #3
 8006462:	2201      	movs	r2, #1
 8006464:	4619      	mov	r1, r3
 8006466:	f7ff fe03 	bl	8006070 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800646a:	e003      	b.n	8006474 <_HandleIncomingPacket+0xcc>
      break;
 800646c:	bf00      	nop
 800646e:	e002      	b.n	8006476 <_HandleIncomingPacket+0xce>
      break;
 8006470:	bf00      	nop
 8006472:	e000      	b.n	8006476 <_HandleIncomingPacket+0xce>
      break;
 8006474:	bf00      	nop
    }
  }
}
 8006476:	bf00      	nop
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20007000 	.word	0x20007000

08006484 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006484:	b580      	push	{r7, lr}
 8006486:	b08c      	sub	sp, #48	; 0x30
 8006488:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800648a:	2301      	movs	r3, #1
 800648c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800648e:	1d3b      	adds	r3, r7, #4
 8006490:	3301      	adds	r3, #1
 8006492:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006498:	4b31      	ldr	r3, [pc, #196]	; (8006560 <_TrySendOverflowPacket+0xdc>)
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	62bb      	str	r3, [r7, #40]	; 0x28
 800649e:	e00b      	b.n	80064b8 <_TrySendOverflowPacket+0x34>
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	1c59      	adds	r1, r3, #1
 80064a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	09db      	lsrs	r3, r3, #7
 80064b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	2b7f      	cmp	r3, #127	; 0x7f
 80064bc:	d8f0      	bhi.n	80064a0 <_TrySendOverflowPacket+0x1c>
 80064be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064cc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80064ce:	4b25      	ldr	r3, [pc, #148]	; (8006564 <_TrySendOverflowPacket+0xe0>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80064d4:	4b22      	ldr	r3, [pc, #136]	; (8006560 <_TrySendOverflowPacket+0xdc>)
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	623b      	str	r3, [r7, #32]
 80064e6:	e00b      	b.n	8006500 <_TrySendOverflowPacket+0x7c>
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	1c59      	adds	r1, r3, #1
 80064f0:	6279      	str	r1, [r7, #36]	; 0x24
 80064f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	09db      	lsrs	r3, r3, #7
 80064fe:	623b      	str	r3, [r7, #32]
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	2b7f      	cmp	r3, #127	; 0x7f
 8006504:	d8f0      	bhi.n	80064e8 <_TrySendOverflowPacket+0x64>
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	627a      	str	r2, [r7, #36]	; 0x24
 800650c:	6a3a      	ldr	r2, [r7, #32]
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8006516:	4b12      	ldr	r3, [pc, #72]	; (8006560 <_TrySendOverflowPacket+0xdc>)
 8006518:	785b      	ldrb	r3, [r3, #1]
 800651a:	4618      	mov	r0, r3
 800651c:	1d3b      	adds	r3, r7, #4
 800651e:	69fa      	ldr	r2, [r7, #28]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	461a      	mov	r2, r3
 8006524:	1d3b      	adds	r3, r7, #4
 8006526:	4619      	mov	r1, r3
 8006528:	f7f9 fe72 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800652c:	4603      	mov	r3, r0
 800652e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d009      	beq.n	800654a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006536:	4a0a      	ldr	r2, [pc, #40]	; (8006560 <_TrySendOverflowPacket+0xdc>)
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800653c:	4b08      	ldr	r3, [pc, #32]	; (8006560 <_TrySendOverflowPacket+0xdc>)
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	3b01      	subs	r3, #1
 8006542:	b2da      	uxtb	r2, r3
 8006544:	4b06      	ldr	r3, [pc, #24]	; (8006560 <_TrySendOverflowPacket+0xdc>)
 8006546:	701a      	strb	r2, [r3, #0]
 8006548:	e004      	b.n	8006554 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800654a:	4b05      	ldr	r3, [pc, #20]	; (8006560 <_TrySendOverflowPacket+0xdc>)
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	3301      	adds	r3, #1
 8006550:	4a03      	ldr	r2, [pc, #12]	; (8006560 <_TrySendOverflowPacket+0xdc>)
 8006552:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006554:	693b      	ldr	r3, [r7, #16]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3730      	adds	r7, #48	; 0x30
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20007000 	.word	0x20007000
 8006564:	e0001004 	.word	0xe0001004

08006568 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006568:	b580      	push	{r7, lr}
 800656a:	b08a      	sub	sp, #40	; 0x28
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006574:	4b98      	ldr	r3, [pc, #608]	; (80067d8 <_SendPacket+0x270>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d010      	beq.n	800659e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800657c:	4b96      	ldr	r3, [pc, #600]	; (80067d8 <_SendPacket+0x270>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 812d 	beq.w	80067e0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006586:	4b94      	ldr	r3, [pc, #592]	; (80067d8 <_SendPacket+0x270>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d109      	bne.n	80065a2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800658e:	f7ff ff79 	bl	8006484 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006592:	4b91      	ldr	r3, [pc, #580]	; (80067d8 <_SendPacket+0x270>)
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	2b01      	cmp	r3, #1
 8006598:	f040 8124 	bne.w	80067e4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800659c:	e001      	b.n	80065a2 <_SendPacket+0x3a>
    goto Send;
 800659e:	bf00      	nop
 80065a0:	e000      	b.n	80065a4 <_SendPacket+0x3c>
Send:
 80065a2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b1f      	cmp	r3, #31
 80065a8:	d809      	bhi.n	80065be <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80065aa:	4b8b      	ldr	r3, [pc, #556]	; (80067d8 <_SendPacket+0x270>)
 80065ac:	69da      	ldr	r2, [r3, #28]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	fa22 f303 	lsr.w	r3, r2, r3
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f040 8115 	bne.w	80067e8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b17      	cmp	r3, #23
 80065c2:	d807      	bhi.n	80065d4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	e0c4      	b.n	800675e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	2b7f      	cmp	r3, #127	; 0x7f
 80065e0:	d912      	bls.n	8006608 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	09da      	lsrs	r2, r3, #7
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	b2d2      	uxtb	r2, r2
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	3a01      	subs	r2, #1
 80065fa:	60fa      	str	r2, [r7, #12]
 80065fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006600:	b2da      	uxtb	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	e006      	b.n	8006616 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3b01      	subs	r3, #1
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	b2da      	uxtb	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b7e      	cmp	r3, #126	; 0x7e
 800661a:	d807      	bhi.n	800662c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	3b01      	subs	r3, #1
 8006620:	60fb      	str	r3, [r7, #12]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	b2da      	uxtb	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	e098      	b.n	800675e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006632:	d212      	bcs.n	800665a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	09da      	lsrs	r2, r3, #7
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3b01      	subs	r3, #1
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	b2d2      	uxtb	r2, r2
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	b2db      	uxtb	r3, r3
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	3a01      	subs	r2, #1
 800664c:	60fa      	str	r2, [r7, #12]
 800664e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006652:	b2da      	uxtb	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	701a      	strb	r2, [r3, #0]
 8006658:	e081      	b.n	800675e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006660:	d21d      	bcs.n	800669e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	0b9a      	lsrs	r2, r3, #14
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3b01      	subs	r3, #1
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	09db      	lsrs	r3, r3, #7
 8006676:	b2db      	uxtb	r3, r3
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	3a01      	subs	r2, #1
 800667c:	60fa      	str	r2, [r7, #12]
 800667e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006682:	b2da      	uxtb	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	b2db      	uxtb	r3, r3
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	3a01      	subs	r2, #1
 8006690:	60fa      	str	r2, [r7, #12]
 8006692:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006696:	b2da      	uxtb	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	701a      	strb	r2, [r3, #0]
 800669c:	e05f      	b.n	800675e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066a4:	d228      	bcs.n	80066f8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	0d5a      	lsrs	r2, r3, #21
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	b2d2      	uxtb	r2, r2
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	0b9b      	lsrs	r3, r3, #14
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	3a01      	subs	r2, #1
 80066c0:	60fa      	str	r2, [r7, #12]
 80066c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	09db      	lsrs	r3, r3, #7
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	3a01      	subs	r2, #1
 80066d6:	60fa      	str	r2, [r7, #12]
 80066d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	3a01      	subs	r2, #1
 80066ea:	60fa      	str	r2, [r7, #12]
 80066ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	e032      	b.n	800675e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	0f1a      	lsrs	r2, r3, #28
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3b01      	subs	r3, #1
 8006700:	60fb      	str	r3, [r7, #12]
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	0d5b      	lsrs	r3, r3, #21
 800670c:	b2db      	uxtb	r3, r3
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	3a01      	subs	r2, #1
 8006712:	60fa      	str	r2, [r7, #12]
 8006714:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006718:	b2da      	uxtb	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	0b9b      	lsrs	r3, r3, #14
 8006722:	b2db      	uxtb	r3, r3
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	3a01      	subs	r2, #1
 8006728:	60fa      	str	r2, [r7, #12]
 800672a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800672e:	b2da      	uxtb	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	09db      	lsrs	r3, r3, #7
 8006738:	b2db      	uxtb	r3, r3
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	3a01      	subs	r2, #1
 800673e:	60fa      	str	r2, [r7, #12]
 8006740:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006744:	b2da      	uxtb	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	3a01      	subs	r2, #1
 8006752:	60fa      	str	r2, [r7, #12]
 8006754:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006758:	b2da      	uxtb	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800675e:	4b1f      	ldr	r3, [pc, #124]	; (80067dc <_SendPacket+0x274>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006764:	4b1c      	ldr	r3, [pc, #112]	; (80067d8 <_SendPacket+0x270>)
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	623b      	str	r3, [r7, #32]
 8006776:	e00b      	b.n	8006790 <_SendPacket+0x228>
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	b2da      	uxtb	r2, r3
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	1c59      	adds	r1, r3, #1
 8006780:	6279      	str	r1, [r7, #36]	; 0x24
 8006782:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	09db      	lsrs	r3, r3, #7
 800678e:	623b      	str	r3, [r7, #32]
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	2b7f      	cmp	r3, #127	; 0x7f
 8006794:	d8f0      	bhi.n	8006778 <_SendPacket+0x210>
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	627a      	str	r2, [r7, #36]	; 0x24
 800679c:	6a3a      	ldr	r2, [r7, #32]
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80067a6:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <_SendPacket+0x270>)
 80067a8:	785b      	ldrb	r3, [r3, #1]
 80067aa:	4618      	mov	r0, r3
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	461a      	mov	r2, r3
 80067b4:	68f9      	ldr	r1, [r7, #12]
 80067b6:	f7f9 fd2b 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80067ba:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80067c2:	4a05      	ldr	r2, [pc, #20]	; (80067d8 <_SendPacket+0x270>)
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	60d3      	str	r3, [r2, #12]
 80067c8:	e00f      	b.n	80067ea <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80067ca:	4b03      	ldr	r3, [pc, #12]	; (80067d8 <_SendPacket+0x270>)
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	3301      	adds	r3, #1
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	4b01      	ldr	r3, [pc, #4]	; (80067d8 <_SendPacket+0x270>)
 80067d4:	701a      	strb	r2, [r3, #0]
 80067d6:	e008      	b.n	80067ea <_SendPacket+0x282>
 80067d8:	20007000 	.word	0x20007000
 80067dc:	e0001004 	.word	0xe0001004
    goto SendDone;
 80067e0:	bf00      	nop
 80067e2:	e002      	b.n	80067ea <_SendPacket+0x282>
      goto SendDone;
 80067e4:	bf00      	nop
 80067e6:	e000      	b.n	80067ea <_SendPacket+0x282>
      goto SendDone;
 80067e8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80067ea:	4b14      	ldr	r3, [pc, #80]	; (800683c <_SendPacket+0x2d4>)
 80067ec:	7e1b      	ldrb	r3, [r3, #24]
 80067ee:	4619      	mov	r1, r3
 80067f0:	4a13      	ldr	r2, [pc, #76]	; (8006840 <_SendPacket+0x2d8>)
 80067f2:	460b      	mov	r3, r1
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	440b      	add	r3, r1
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	4413      	add	r3, r2
 80067fc:	336c      	adds	r3, #108	; 0x6c
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	4b0e      	ldr	r3, [pc, #56]	; (800683c <_SendPacket+0x2d4>)
 8006802:	7e1b      	ldrb	r3, [r3, #24]
 8006804:	4618      	mov	r0, r3
 8006806:	490e      	ldr	r1, [pc, #56]	; (8006840 <_SendPacket+0x2d8>)
 8006808:	4603      	mov	r3, r0
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	4403      	add	r3, r0
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	440b      	add	r3, r1
 8006812:	3370      	adds	r3, #112	; 0x70
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	429a      	cmp	r2, r3
 8006818:	d00b      	beq.n	8006832 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800681a:	4b08      	ldr	r3, [pc, #32]	; (800683c <_SendPacket+0x2d4>)
 800681c:	789b      	ldrb	r3, [r3, #2]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d107      	bne.n	8006832 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006822:	4b06      	ldr	r3, [pc, #24]	; (800683c <_SendPacket+0x2d4>)
 8006824:	2201      	movs	r2, #1
 8006826:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006828:	f7ff fdbe 	bl	80063a8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800682c:	4b03      	ldr	r3, [pc, #12]	; (800683c <_SendPacket+0x2d4>)
 800682e:	2200      	movs	r2, #0
 8006830:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006832:	bf00      	nop
 8006834:	3728      	adds	r7, #40	; 0x28
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	20007000 	.word	0x20007000
 8006840:	20004b40 	.word	0x20004b40

08006844 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af02      	add	r7, sp, #8
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006852:	2300      	movs	r3, #0
 8006854:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006858:	4917      	ldr	r1, [pc, #92]	; (80068b8 <SEGGER_SYSVIEW_Init+0x74>)
 800685a:	4818      	ldr	r0, [pc, #96]	; (80068bc <SEGGER_SYSVIEW_Init+0x78>)
 800685c:	f7ff fc8e 	bl	800617c <SEGGER_RTT_AllocUpBuffer>
 8006860:	4603      	mov	r3, r0
 8006862:	b2da      	uxtb	r2, r3
 8006864:	4b16      	ldr	r3, [pc, #88]	; (80068c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006866:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006868:	4b15      	ldr	r3, [pc, #84]	; (80068c0 <SEGGER_SYSVIEW_Init+0x7c>)
 800686a:	785a      	ldrb	r2, [r3, #1]
 800686c:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <SEGGER_SYSVIEW_Init+0x7c>)
 800686e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006870:	4b13      	ldr	r3, [pc, #76]	; (80068c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006872:	7e1b      	ldrb	r3, [r3, #24]
 8006874:	4618      	mov	r0, r3
 8006876:	2300      	movs	r3, #0
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	2308      	movs	r3, #8
 800687c:	4a11      	ldr	r2, [pc, #68]	; (80068c4 <SEGGER_SYSVIEW_Init+0x80>)
 800687e:	490f      	ldr	r1, [pc, #60]	; (80068bc <SEGGER_SYSVIEW_Init+0x78>)
 8006880:	f7ff fd00 	bl	8006284 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006884:	4b0e      	ldr	r3, [pc, #56]	; (80068c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006886:	2200      	movs	r2, #0
 8006888:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800688a:	4b0f      	ldr	r3, [pc, #60]	; (80068c8 <SEGGER_SYSVIEW_Init+0x84>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a0c      	ldr	r2, [pc, #48]	; (80068c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006890:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006892:	4a0b      	ldr	r2, [pc, #44]	; (80068c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006898:	4a09      	ldr	r2, [pc, #36]	; (80068c0 <SEGGER_SYSVIEW_Init+0x7c>)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800689e:	4a08      	ldr	r2, [pc, #32]	; (80068c0 <SEGGER_SYSVIEW_Init+0x7c>)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80068a4:	4a06      	ldr	r2, [pc, #24]	; (80068c0 <SEGGER_SYSVIEW_Init+0x7c>)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80068aa:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <SEGGER_SYSVIEW_Init+0x7c>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80068b0:	bf00      	nop
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	20004ff8 	.word	0x20004ff8
 80068bc:	08007800 	.word	0x08007800
 80068c0:	20007000 	.word	0x20007000
 80068c4:	20006ff8 	.word	0x20006ff8
 80068c8:	e0001004 	.word	0xe0001004

080068cc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80068d4:	4a04      	ldr	r2, [pc, #16]	; (80068e8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6113      	str	r3, [r2, #16]
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	20007000 	.word	0x20007000

080068ec <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068f4:	f3ef 8311 	mrs	r3, BASEPRI
 80068f8:	f04f 0120 	mov.w	r1, #32
 80068fc:	f381 8811 	msr	BASEPRI, r1
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	4808      	ldr	r0, [pc, #32]	; (8006924 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006904:	f7ff fd43 	bl	800638e <_PreparePacket>
 8006908:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	68b9      	ldr	r1, [r7, #8]
 800690e:	68b8      	ldr	r0, [r7, #8]
 8006910:	f7ff fe2a 	bl	8006568 <_SendPacket>
  RECORD_END();
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f383 8811 	msr	BASEPRI, r3
}
 800691a:	bf00      	nop
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	20007030 	.word	0x20007030

08006928 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006932:	f3ef 8311 	mrs	r3, BASEPRI
 8006936:	f04f 0120 	mov.w	r1, #32
 800693a:	f381 8811 	msr	BASEPRI, r1
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	4816      	ldr	r0, [pc, #88]	; (800699c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006942:	f7ff fd24 	bl	800638e <_PreparePacket>
 8006946:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	61fb      	str	r3, [r7, #28]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	61bb      	str	r3, [r7, #24]
 8006954:	e00b      	b.n	800696e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	b2da      	uxtb	r2, r3
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	1c59      	adds	r1, r3, #1
 800695e:	61f9      	str	r1, [r7, #28]
 8006960:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006964:	b2d2      	uxtb	r2, r2
 8006966:	701a      	strb	r2, [r3, #0]
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	09db      	lsrs	r3, r3, #7
 800696c:	61bb      	str	r3, [r7, #24]
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	2b7f      	cmp	r3, #127	; 0x7f
 8006972:	d8f0      	bhi.n	8006956 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	61fa      	str	r2, [r7, #28]
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	b2d2      	uxtb	r2, r2
 800697e:	701a      	strb	r2, [r3, #0]
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	68f9      	ldr	r1, [r7, #12]
 8006988:	6938      	ldr	r0, [r7, #16]
 800698a:	f7ff fded 	bl	8006568 <_SendPacket>
  RECORD_END();
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f383 8811 	msr	BASEPRI, r3
}
 8006994:	bf00      	nop
 8006996:	3720      	adds	r7, #32
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	20007030 	.word	0x20007030

080069a0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08c      	sub	sp, #48	; 0x30
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80069ac:	f3ef 8311 	mrs	r3, BASEPRI
 80069b0:	f04f 0120 	mov.w	r1, #32
 80069b4:	f381 8811 	msr	BASEPRI, r1
 80069b8:	61fb      	str	r3, [r7, #28]
 80069ba:	4825      	ldr	r0, [pc, #148]	; (8006a50 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80069bc:	f7ff fce7 	bl	800638e <_PreparePacket>
 80069c0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ce:	e00b      	b.n	80069e8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d6:	1c59      	adds	r1, r3, #1
 80069d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069de:	b2d2      	uxtb	r2, r2
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	09db      	lsrs	r3, r3, #7
 80069e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80069e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ea:	2b7f      	cmp	r3, #127	; 0x7f
 80069ec:	d8f0      	bhi.n	80069d0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80069ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	701a      	strb	r2, [r3, #0]
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	623b      	str	r3, [r7, #32]
 8006a06:	e00b      	b.n	8006a20 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	1c59      	adds	r1, r3, #1
 8006a10:	6279      	str	r1, [r7, #36]	; 0x24
 8006a12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a16:	b2d2      	uxtb	r2, r2
 8006a18:	701a      	strb	r2, [r3, #0]
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	09db      	lsrs	r3, r3, #7
 8006a1e:	623b      	str	r3, [r7, #32]
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	2b7f      	cmp	r3, #127	; 0x7f
 8006a24:	d8f0      	bhi.n	8006a08 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	627a      	str	r2, [r7, #36]	; 0x24
 8006a2c:	6a3a      	ldr	r2, [r7, #32]
 8006a2e:	b2d2      	uxtb	r2, r2
 8006a30:	701a      	strb	r2, [r3, #0]
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	6979      	ldr	r1, [r7, #20]
 8006a3a:	69b8      	ldr	r0, [r7, #24]
 8006a3c:	f7ff fd94 	bl	8006568 <_SendPacket>
  RECORD_END();
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f383 8811 	msr	BASEPRI, r3
}
 8006a46:	bf00      	nop
 8006a48:	3730      	adds	r7, #48	; 0x30
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	20007030 	.word	0x20007030

08006a54 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b08e      	sub	sp, #56	; 0x38
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
 8006a60:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a62:	f3ef 8311 	mrs	r3, BASEPRI
 8006a66:	f04f 0120 	mov.w	r1, #32
 8006a6a:	f381 8811 	msr	BASEPRI, r1
 8006a6e:	61fb      	str	r3, [r7, #28]
 8006a70:	4832      	ldr	r0, [pc, #200]	; (8006b3c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006a72:	f7ff fc8c 	bl	800638e <_PreparePacket>
 8006a76:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	633b      	str	r3, [r7, #48]	; 0x30
 8006a84:	e00b      	b.n	8006a9e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8c:	1c59      	adds	r1, r3, #1
 8006a8e:	6379      	str	r1, [r7, #52]	; 0x34
 8006a90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a94:	b2d2      	uxtb	r2, r2
 8006a96:	701a      	strb	r2, [r3, #0]
 8006a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9a:	09db      	lsrs	r3, r3, #7
 8006a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8006aa2:	d8f0      	bhi.n	8006a86 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	637a      	str	r2, [r7, #52]	; 0x34
 8006aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aac:	b2d2      	uxtb	r2, r2
 8006aae:	701a      	strb	r2, [r3, #0]
 8006ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006abc:	e00b      	b.n	8006ad6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac4:	1c59      	adds	r1, r3, #1
 8006ac6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006ac8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006acc:	b2d2      	uxtb	r2, r2
 8006ace:	701a      	strb	r2, [r3, #0]
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	09db      	lsrs	r3, r3, #7
 8006ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8006ada:	d8f0      	bhi.n	8006abe <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ade:	1c5a      	adds	r2, r3, #1
 8006ae0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ae4:	b2d2      	uxtb	r2, r2
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	623b      	str	r3, [r7, #32]
 8006af4:	e00b      	b.n	8006b0e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	1c59      	adds	r1, r3, #1
 8006afe:	6279      	str	r1, [r7, #36]	; 0x24
 8006b00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b04:	b2d2      	uxtb	r2, r2
 8006b06:	701a      	strb	r2, [r3, #0]
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	09db      	lsrs	r3, r3, #7
 8006b0c:	623b      	str	r3, [r7, #32]
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	2b7f      	cmp	r3, #127	; 0x7f
 8006b12:	d8f0      	bhi.n	8006af6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	627a      	str	r2, [r7, #36]	; 0x24
 8006b1a:	6a3a      	ldr	r2, [r7, #32]
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	6979      	ldr	r1, [r7, #20]
 8006b28:	69b8      	ldr	r0, [r7, #24]
 8006b2a:	f7ff fd1d 	bl	8006568 <_SendPacket>
  RECORD_END();
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	f383 8811 	msr	BASEPRI, r3
}
 8006b34:	bf00      	nop
 8006b36:	3738      	adds	r7, #56	; 0x38
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	20007030 	.word	0x20007030

08006b40 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b090      	sub	sp, #64	; 0x40
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
 8006b4c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b4e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b52:	f04f 0120 	mov.w	r1, #32
 8006b56:	f381 8811 	msr	BASEPRI, r1
 8006b5a:	61fb      	str	r3, [r7, #28]
 8006b5c:	4840      	ldr	r0, [pc, #256]	; (8006c60 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006b5e:	f7ff fc16 	bl	800638e <_PreparePacket>
 8006b62:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b70:	e00b      	b.n	8006b8a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b78:	1c59      	adds	r1, r3, #1
 8006b7a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006b7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b80:	b2d2      	uxtb	r2, r2
 8006b82:	701a      	strb	r2, [r3, #0]
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	09db      	lsrs	r3, r3, #7
 8006b88:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b8e:	d8f0      	bhi.n	8006b72 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	701a      	strb	r2, [r3, #0]
 8006b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ba8:	e00b      	b.n	8006bc2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb0:	1c59      	adds	r1, r3, #1
 8006bb2:	6379      	str	r1, [r7, #52]	; 0x34
 8006bb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bb8:	b2d2      	uxtb	r2, r2
 8006bba:	701a      	strb	r2, [r3, #0]
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	09db      	lsrs	r3, r3, #7
 8006bc0:	633b      	str	r3, [r7, #48]	; 0x30
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8006bc6:	d8f0      	bhi.n	8006baa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	637a      	str	r2, [r7, #52]	; 0x34
 8006bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd0:	b2d2      	uxtb	r2, r2
 8006bd2:	701a      	strb	r2, [r3, #0]
 8006bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be0:	e00b      	b.n	8006bfa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be8:	1c59      	adds	r1, r3, #1
 8006bea:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bf0:	b2d2      	uxtb	r2, r2
 8006bf2:	701a      	strb	r2, [r3, #0]
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	09db      	lsrs	r3, r3, #7
 8006bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	2b7f      	cmp	r3, #127	; 0x7f
 8006bfe:	d8f0      	bhi.n	8006be2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c08:	b2d2      	uxtb	r2, r2
 8006c0a:	701a      	strb	r2, [r3, #0]
 8006c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	627b      	str	r3, [r7, #36]	; 0x24
 8006c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c16:	623b      	str	r3, [r7, #32]
 8006c18:	e00b      	b.n	8006c32 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	1c59      	adds	r1, r3, #1
 8006c22:	6279      	str	r1, [r7, #36]	; 0x24
 8006c24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	701a      	strb	r2, [r3, #0]
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	09db      	lsrs	r3, r3, #7
 8006c30:	623b      	str	r3, [r7, #32]
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	2b7f      	cmp	r3, #127	; 0x7f
 8006c36:	d8f0      	bhi.n	8006c1a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	1c5a      	adds	r2, r3, #1
 8006c3c:	627a      	str	r2, [r7, #36]	; 0x24
 8006c3e:	6a3a      	ldr	r2, [r7, #32]
 8006c40:	b2d2      	uxtb	r2, r2
 8006c42:	701a      	strb	r2, [r3, #0]
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	6979      	ldr	r1, [r7, #20]
 8006c4c:	69b8      	ldr	r0, [r7, #24]
 8006c4e:	f7ff fc8b 	bl	8006568 <_SendPacket>
  RECORD_END();
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	f383 8811 	msr	BASEPRI, r3
}
 8006c58:	bf00      	nop
 8006c5a:	3740      	adds	r7, #64	; 0x40
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	20007030 	.word	0x20007030

08006c64 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08c      	sub	sp, #48	; 0x30
 8006c68:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006c6a:	4b58      	ldr	r3, [pc, #352]	; (8006dcc <SEGGER_SYSVIEW_Start+0x168>)
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006c70:	f3ef 8311 	mrs	r3, BASEPRI
 8006c74:	f04f 0120 	mov.w	r1, #32
 8006c78:	f381 8811 	msr	BASEPRI, r1
 8006c7c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006c7e:	4b53      	ldr	r3, [pc, #332]	; (8006dcc <SEGGER_SYSVIEW_Start+0x168>)
 8006c80:	785b      	ldrb	r3, [r3, #1]
 8006c82:	220a      	movs	r2, #10
 8006c84:	4952      	ldr	r1, [pc, #328]	; (8006dd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7f9 fac2 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006c92:	200a      	movs	r0, #10
 8006c94:	f7ff fe2a 	bl	80068ec <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c98:	f3ef 8311 	mrs	r3, BASEPRI
 8006c9c:	f04f 0120 	mov.w	r1, #32
 8006ca0:	f381 8811 	msr	BASEPRI, r1
 8006ca4:	60bb      	str	r3, [r7, #8]
 8006ca6:	484b      	ldr	r0, [pc, #300]	; (8006dd4 <SEGGER_SYSVIEW_Start+0x170>)
 8006ca8:	f7ff fb71 	bl	800638e <_PreparePacket>
 8006cac:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cb6:	4b45      	ldr	r3, [pc, #276]	; (8006dcc <SEGGER_SYSVIEW_Start+0x168>)
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cbc:	e00b      	b.n	8006cd6 <SEGGER_SYSVIEW_Start+0x72>
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc4:	1c59      	adds	r1, r3, #1
 8006cc6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006cc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	701a      	strb	r2, [r3, #0]
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	09db      	lsrs	r3, r3, #7
 8006cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8006cda:	d8f0      	bhi.n	8006cbe <SEGGER_SYSVIEW_Start+0x5a>
 8006cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ce4:	b2d2      	uxtb	r2, r2
 8006ce6:	701a      	strb	r2, [r3, #0]
 8006ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf0:	4b36      	ldr	r3, [pc, #216]	; (8006dcc <SEGGER_SYSVIEW_Start+0x168>)
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	623b      	str	r3, [r7, #32]
 8006cf6:	e00b      	b.n	8006d10 <SEGGER_SYSVIEW_Start+0xac>
 8006cf8:	6a3b      	ldr	r3, [r7, #32]
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	1c59      	adds	r1, r3, #1
 8006d00:	6279      	str	r1, [r7, #36]	; 0x24
 8006d02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	701a      	strb	r2, [r3, #0]
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	09db      	lsrs	r3, r3, #7
 8006d0e:	623b      	str	r3, [r7, #32]
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	2b7f      	cmp	r3, #127	; 0x7f
 8006d14:	d8f0      	bhi.n	8006cf8 <SEGGER_SYSVIEW_Start+0x94>
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	627a      	str	r2, [r7, #36]	; 0x24
 8006d1c:	6a3a      	ldr	r2, [r7, #32]
 8006d1e:	b2d2      	uxtb	r2, r2
 8006d20:	701a      	strb	r2, [r3, #0]
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	61fb      	str	r3, [r7, #28]
 8006d2a:	4b28      	ldr	r3, [pc, #160]	; (8006dcc <SEGGER_SYSVIEW_Start+0x168>)
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	61bb      	str	r3, [r7, #24]
 8006d30:	e00b      	b.n	8006d4a <SEGGER_SYSVIEW_Start+0xe6>
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	1c59      	adds	r1, r3, #1
 8006d3a:	61f9      	str	r1, [r7, #28]
 8006d3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d40:	b2d2      	uxtb	r2, r2
 8006d42:	701a      	strb	r2, [r3, #0]
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	09db      	lsrs	r3, r3, #7
 8006d48:	61bb      	str	r3, [r7, #24]
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d4e:	d8f0      	bhi.n	8006d32 <SEGGER_SYSVIEW_Start+0xce>
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	61fa      	str	r2, [r7, #28]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	b2d2      	uxtb	r2, r2
 8006d5a:	701a      	strb	r2, [r3, #0]
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	2300      	movs	r3, #0
 8006d66:	613b      	str	r3, [r7, #16]
 8006d68:	e00b      	b.n	8006d82 <SEGGER_SYSVIEW_Start+0x11e>
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	1c59      	adds	r1, r3, #1
 8006d72:	6179      	str	r1, [r7, #20]
 8006d74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d78:	b2d2      	uxtb	r2, r2
 8006d7a:	701a      	strb	r2, [r3, #0]
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	09db      	lsrs	r3, r3, #7
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	2b7f      	cmp	r3, #127	; 0x7f
 8006d86:	d8f0      	bhi.n	8006d6a <SEGGER_SYSVIEW_Start+0x106>
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	617a      	str	r2, [r7, #20]
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	b2d2      	uxtb	r2, r2
 8006d92:	701a      	strb	r2, [r3, #0]
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006d98:	2218      	movs	r2, #24
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7ff fbe3 	bl	8006568 <_SendPacket>
      RECORD_END();
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006da8:	4b08      	ldr	r3, [pc, #32]	; (8006dcc <SEGGER_SYSVIEW_Start+0x168>)
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006db0:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <SEGGER_SYSVIEW_Start+0x168>)
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006db6:	f000 f9eb 	bl	8007190 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006dba:	f000 f9b1 	bl	8007120 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006dbe:	f000 fbb3 	bl	8007528 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006dc2:	bf00      	nop
 8006dc4:	3730      	adds	r7, #48	; 0x30
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20007000 	.word	0x20007000
 8006dd0:	080078a8 	.word	0x080078a8
 8006dd4:	20007030 	.word	0x20007030

08006dd8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006dde:	f3ef 8311 	mrs	r3, BASEPRI
 8006de2:	f04f 0120 	mov.w	r1, #32
 8006de6:	f381 8811 	msr	BASEPRI, r1
 8006dea:	607b      	str	r3, [r7, #4]
 8006dec:	480b      	ldr	r0, [pc, #44]	; (8006e1c <SEGGER_SYSVIEW_Stop+0x44>)
 8006dee:	f7ff face 	bl	800638e <_PreparePacket>
 8006df2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006df4:	4b0a      	ldr	r3, [pc, #40]	; (8006e20 <SEGGER_SYSVIEW_Stop+0x48>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d007      	beq.n	8006e0c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006dfc:	220b      	movs	r2, #11
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6838      	ldr	r0, [r7, #0]
 8006e02:	f7ff fbb1 	bl	8006568 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006e06:	4b06      	ldr	r3, [pc, #24]	; (8006e20 <SEGGER_SYSVIEW_Stop+0x48>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f383 8811 	msr	BASEPRI, r3
}
 8006e12:	bf00      	nop
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20007030 	.word	0x20007030
 8006e20:	20007000 	.word	0x20007000

08006e24 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b08c      	sub	sp, #48	; 0x30
 8006e28:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e2e:	f04f 0120 	mov.w	r1, #32
 8006e32:	f381 8811 	msr	BASEPRI, r1
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	4845      	ldr	r0, [pc, #276]	; (8006f50 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006e3a:	f7ff faa8 	bl	800638e <_PreparePacket>
 8006e3e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e48:	4b42      	ldr	r3, [pc, #264]	; (8006f54 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e4e:	e00b      	b.n	8006e68 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e56:	1c59      	adds	r1, r3, #1
 8006e58:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e5e:	b2d2      	uxtb	r2, r2
 8006e60:	701a      	strb	r2, [r3, #0]
 8006e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e64:	09db      	lsrs	r3, r3, #7
 8006e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e6c:	d8f0      	bhi.n	8006e50 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	701a      	strb	r2, [r3, #0]
 8006e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	627b      	str	r3, [r7, #36]	; 0x24
 8006e82:	4b34      	ldr	r3, [pc, #208]	; (8006f54 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	623b      	str	r3, [r7, #32]
 8006e88:	e00b      	b.n	8006ea2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	1c59      	adds	r1, r3, #1
 8006e92:	6279      	str	r1, [r7, #36]	; 0x24
 8006e94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e98:	b2d2      	uxtb	r2, r2
 8006e9a:	701a      	strb	r2, [r3, #0]
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	09db      	lsrs	r3, r3, #7
 8006ea0:	623b      	str	r3, [r7, #32]
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ea6:	d8f0      	bhi.n	8006e8a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	627a      	str	r2, [r7, #36]	; 0x24
 8006eae:	6a3a      	ldr	r2, [r7, #32]
 8006eb0:	b2d2      	uxtb	r2, r2
 8006eb2:	701a      	strb	r2, [r3, #0]
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	61fb      	str	r3, [r7, #28]
 8006ebc:	4b25      	ldr	r3, [pc, #148]	; (8006f54 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	61bb      	str	r3, [r7, #24]
 8006ec2:	e00b      	b.n	8006edc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	1c59      	adds	r1, r3, #1
 8006ecc:	61f9      	str	r1, [r7, #28]
 8006ece:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	701a      	strb	r2, [r3, #0]
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	09db      	lsrs	r3, r3, #7
 8006eda:	61bb      	str	r3, [r7, #24]
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2b7f      	cmp	r3, #127	; 0x7f
 8006ee0:	d8f0      	bhi.n	8006ec4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	61fa      	str	r2, [r7, #28]
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	701a      	strb	r2, [r3, #0]
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	617b      	str	r3, [r7, #20]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	613b      	str	r3, [r7, #16]
 8006efa:	e00b      	b.n	8006f14 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	1c59      	adds	r1, r3, #1
 8006f04:	6179      	str	r1, [r7, #20]
 8006f06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f0a:	b2d2      	uxtb	r2, r2
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	09db      	lsrs	r3, r3, #7
 8006f12:	613b      	str	r3, [r7, #16]
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	2b7f      	cmp	r3, #127	; 0x7f
 8006f18:	d8f0      	bhi.n	8006efc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	617a      	str	r2, [r7, #20]
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	b2d2      	uxtb	r2, r2
 8006f24:	701a      	strb	r2, [r3, #0]
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006f2a:	2218      	movs	r2, #24
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	68b8      	ldr	r0, [r7, #8]
 8006f30:	f7ff fb1a 	bl	8006568 <_SendPacket>
  RECORD_END();
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006f3a:	4b06      	ldr	r3, [pc, #24]	; (8006f54 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006f42:	4b04      	ldr	r3, [pc, #16]	; (8006f54 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	4798      	blx	r3
  }
}
 8006f48:	bf00      	nop
 8006f4a:	3730      	adds	r7, #48	; 0x30
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	20007030 	.word	0x20007030
 8006f54:	20007000 	.word	0x20007000

08006f58 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b092      	sub	sp, #72	; 0x48
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006f60:	f3ef 8311 	mrs	r3, BASEPRI
 8006f64:	f04f 0120 	mov.w	r1, #32
 8006f68:	f381 8811 	msr	BASEPRI, r1
 8006f6c:	617b      	str	r3, [r7, #20]
 8006f6e:	486a      	ldr	r0, [pc, #424]	; (8007118 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006f70:	f7ff fa0d 	bl	800638e <_PreparePacket>
 8006f74:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	4b66      	ldr	r3, [pc, #408]	; (800711c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	643b      	str	r3, [r7, #64]	; 0x40
 8006f8a:	e00b      	b.n	8006fa4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f92:	1c59      	adds	r1, r3, #1
 8006f94:	6479      	str	r1, [r7, #68]	; 0x44
 8006f96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	701a      	strb	r2, [r3, #0]
 8006f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa0:	09db      	lsrs	r3, r3, #7
 8006fa2:	643b      	str	r3, [r7, #64]	; 0x40
 8006fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8006fa8:	d8f0      	bhi.n	8006f8c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	647a      	str	r2, [r7, #68]	; 0x44
 8006fb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fb2:	b2d2      	uxtb	r2, r2
 8006fb4:	701a      	strb	r2, [r3, #0]
 8006fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fc4:	e00b      	b.n	8006fde <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fcc:	1c59      	adds	r1, r3, #1
 8006fce:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006fd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fd4:	b2d2      	uxtb	r2, r2
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fda:	09db      	lsrs	r3, r3, #7
 8006fdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe0:	2b7f      	cmp	r3, #127	; 0x7f
 8006fe2:	d8f0      	bhi.n	8006fc6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006fea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fec:	b2d2      	uxtb	r2, r2
 8006fee:	701a      	strb	r2, [r3, #0]
 8006ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f7ff f98d 	bl	800631c <_EncodeStr>
 8007002:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007004:	2209      	movs	r2, #9
 8007006:	68f9      	ldr	r1, [r7, #12]
 8007008:	6938      	ldr	r0, [r7, #16]
 800700a:	f7ff faad 	bl	8006568 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	637b      	str	r3, [r7, #52]	; 0x34
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	4b40      	ldr	r3, [pc, #256]	; (800711c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	633b      	str	r3, [r7, #48]	; 0x30
 8007022:	e00b      	b.n	800703c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007026:	b2da      	uxtb	r2, r3
 8007028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702a:	1c59      	adds	r1, r3, #1
 800702c:	6379      	str	r1, [r7, #52]	; 0x34
 800702e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007038:	09db      	lsrs	r3, r3, #7
 800703a:	633b      	str	r3, [r7, #48]	; 0x30
 800703c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703e:	2b7f      	cmp	r3, #127	; 0x7f
 8007040:	d8f0      	bhi.n	8007024 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007044:	1c5a      	adds	r2, r3, #1
 8007046:	637a      	str	r2, [r7, #52]	; 0x34
 8007048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800704a:	b2d2      	uxtb	r2, r2
 800704c:	701a      	strb	r2, [r3, #0]
 800704e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007050:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	62bb      	str	r3, [r7, #40]	; 0x28
 800705c:	e00b      	b.n	8007076 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	b2da      	uxtb	r2, r3
 8007062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007064:	1c59      	adds	r1, r3, #1
 8007066:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007068:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800706c:	b2d2      	uxtb	r2, r2
 800706e:	701a      	strb	r2, [r3, #0]
 8007070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007072:	09db      	lsrs	r3, r3, #7
 8007074:	62bb      	str	r3, [r7, #40]	; 0x28
 8007076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007078:	2b7f      	cmp	r3, #127	; 0x7f
 800707a:	d8f0      	bhi.n	800705e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800707c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007084:	b2d2      	uxtb	r2, r2
 8007086:	701a      	strb	r2, [r3, #0]
 8007088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	627b      	str	r3, [r7, #36]	; 0x24
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	623b      	str	r3, [r7, #32]
 8007096:	e00b      	b.n	80070b0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	b2da      	uxtb	r2, r3
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	1c59      	adds	r1, r3, #1
 80070a0:	6279      	str	r1, [r7, #36]	; 0x24
 80070a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070a6:	b2d2      	uxtb	r2, r2
 80070a8:	701a      	strb	r2, [r3, #0]
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	09db      	lsrs	r3, r3, #7
 80070ae:	623b      	str	r3, [r7, #32]
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	2b7f      	cmp	r3, #127	; 0x7f
 80070b4:	d8f0      	bhi.n	8007098 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	627a      	str	r2, [r7, #36]	; 0x24
 80070bc:	6a3a      	ldr	r2, [r7, #32]
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	701a      	strb	r2, [r3, #0]
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	61fb      	str	r3, [r7, #28]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	61bb      	str	r3, [r7, #24]
 80070d0:	e00b      	b.n	80070ea <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	1c59      	adds	r1, r3, #1
 80070da:	61f9      	str	r1, [r7, #28]
 80070dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	701a      	strb	r2, [r3, #0]
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	09db      	lsrs	r3, r3, #7
 80070e8:	61bb      	str	r3, [r7, #24]
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	2b7f      	cmp	r3, #127	; 0x7f
 80070ee:	d8f0      	bhi.n	80070d2 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	1c5a      	adds	r2, r3, #1
 80070f4:	61fa      	str	r2, [r7, #28]
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	701a      	strb	r2, [r3, #0]
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007100:	2215      	movs	r2, #21
 8007102:	68f9      	ldr	r1, [r7, #12]
 8007104:	6938      	ldr	r0, [r7, #16]
 8007106:	f7ff fa2f 	bl	8006568 <_SendPacket>
  RECORD_END();
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	f383 8811 	msr	BASEPRI, r3
}
 8007110:	bf00      	nop
 8007112:	3748      	adds	r7, #72	; 0x48
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	20007030 	.word	0x20007030
 800711c:	20007000 	.word	0x20007000

08007120 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007124:	4b07      	ldr	r3, [pc, #28]	; (8007144 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d008      	beq.n	800713e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800712c:	4b05      	ldr	r3, [pc, #20]	; (8007144 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007136:	4b03      	ldr	r3, [pc, #12]	; (8007144 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	4798      	blx	r3
  }
}
 800713e:	bf00      	nop
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20007000 	.word	0x20007000

08007148 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007150:	f3ef 8311 	mrs	r3, BASEPRI
 8007154:	f04f 0120 	mov.w	r1, #32
 8007158:	f381 8811 	msr	BASEPRI, r1
 800715c:	617b      	str	r3, [r7, #20]
 800715e:	480b      	ldr	r0, [pc, #44]	; (800718c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007160:	f7ff f915 	bl	800638e <_PreparePacket>
 8007164:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007166:	2280      	movs	r2, #128	; 0x80
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	6938      	ldr	r0, [r7, #16]
 800716c:	f7ff f8d6 	bl	800631c <_EncodeStr>
 8007170:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007172:	220e      	movs	r2, #14
 8007174:	68f9      	ldr	r1, [r7, #12]
 8007176:	6938      	ldr	r0, [r7, #16]
 8007178:	f7ff f9f6 	bl	8006568 <_SendPacket>
  RECORD_END();
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f383 8811 	msr	BASEPRI, r3
}
 8007182:	bf00      	nop
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20007030 	.word	0x20007030

08007190 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007190:	b590      	push	{r4, r7, lr}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007196:	4b15      	ldr	r3, [pc, #84]	; (80071ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d01a      	beq.n	80071d4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800719e:	4b13      	ldr	r3, [pc, #76]	; (80071ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d015      	beq.n	80071d4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80071a8:	4b10      	ldr	r3, [pc, #64]	; (80071ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4798      	blx	r3
 80071b0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80071b4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80071b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071ba:	f04f 0200 	mov.w	r2, #0
 80071be:	f04f 0300 	mov.w	r3, #0
 80071c2:	000a      	movs	r2, r1
 80071c4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80071c6:	4613      	mov	r3, r2
 80071c8:	461a      	mov	r2, r3
 80071ca:	4621      	mov	r1, r4
 80071cc:	200d      	movs	r0, #13
 80071ce:	f7ff fbe7 	bl	80069a0 <SEGGER_SYSVIEW_RecordU32x2>
 80071d2:	e006      	b.n	80071e2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80071d4:	4b06      	ldr	r3, [pc, #24]	; (80071f0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4619      	mov	r1, r3
 80071da:	200c      	movs	r0, #12
 80071dc:	f7ff fba4 	bl	8006928 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80071e0:	bf00      	nop
 80071e2:	bf00      	nop
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd90      	pop	{r4, r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20007000 	.word	0x20007000
 80071f0:	e0001004 	.word	0xe0001004

080071f4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80071fa:	f3ef 8311 	mrs	r3, BASEPRI
 80071fe:	f04f 0120 	mov.w	r1, #32
 8007202:	f381 8811 	msr	BASEPRI, r1
 8007206:	607b      	str	r3, [r7, #4]
 8007208:	4807      	ldr	r0, [pc, #28]	; (8007228 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800720a:	f7ff f8c0 	bl	800638e <_PreparePacket>
 800720e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007210:	2211      	movs	r2, #17
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6838      	ldr	r0, [r7, #0]
 8007216:	f7ff f9a7 	bl	8006568 <_SendPacket>
  RECORD_END();
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f383 8811 	msr	BASEPRI, r3
}
 8007220:	bf00      	nop
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	20007030 	.word	0x20007030

0800722c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007234:	f3ef 8311 	mrs	r3, BASEPRI
 8007238:	f04f 0120 	mov.w	r1, #32
 800723c:	f381 8811 	msr	BASEPRI, r1
 8007240:	617b      	str	r3, [r7, #20]
 8007242:	4819      	ldr	r0, [pc, #100]	; (80072a8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007244:	f7ff f8a3 	bl	800638e <_PreparePacket>
 8007248:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800724e:	4b17      	ldr	r3, [pc, #92]	; (80072ac <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	61fb      	str	r3, [r7, #28]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	61bb      	str	r3, [r7, #24]
 8007260:	e00b      	b.n	800727a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	b2da      	uxtb	r2, r3
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	1c59      	adds	r1, r3, #1
 800726a:	61f9      	str	r1, [r7, #28]
 800726c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007270:	b2d2      	uxtb	r2, r2
 8007272:	701a      	strb	r2, [r3, #0]
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	09db      	lsrs	r3, r3, #7
 8007278:	61bb      	str	r3, [r7, #24]
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	2b7f      	cmp	r3, #127	; 0x7f
 800727e:	d8f0      	bhi.n	8007262 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	61fa      	str	r2, [r7, #28]
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	b2d2      	uxtb	r2, r2
 800728a:	701a      	strb	r2, [r3, #0]
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007290:	2208      	movs	r2, #8
 8007292:	68f9      	ldr	r1, [r7, #12]
 8007294:	6938      	ldr	r0, [r7, #16]
 8007296:	f7ff f967 	bl	8006568 <_SendPacket>
  RECORD_END();
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f383 8811 	msr	BASEPRI, r3
}
 80072a0:	bf00      	nop
 80072a2:	3720      	adds	r7, #32
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	20007030 	.word	0x20007030
 80072ac:	20007000 	.word	0x20007000

080072b0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b088      	sub	sp, #32
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80072b8:	f3ef 8311 	mrs	r3, BASEPRI
 80072bc:	f04f 0120 	mov.w	r1, #32
 80072c0:	f381 8811 	msr	BASEPRI, r1
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	4819      	ldr	r0, [pc, #100]	; (800732c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80072c8:	f7ff f861 	bl	800638e <_PreparePacket>
 80072cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80072d2:	4b17      	ldr	r3, [pc, #92]	; (8007330 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	61fb      	str	r3, [r7, #28]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	61bb      	str	r3, [r7, #24]
 80072e4:	e00b      	b.n	80072fe <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	1c59      	adds	r1, r3, #1
 80072ee:	61f9      	str	r1, [r7, #28]
 80072f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072f4:	b2d2      	uxtb	r2, r2
 80072f6:	701a      	strb	r2, [r3, #0]
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	09db      	lsrs	r3, r3, #7
 80072fc:	61bb      	str	r3, [r7, #24]
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	2b7f      	cmp	r3, #127	; 0x7f
 8007302:	d8f0      	bhi.n	80072e6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	1c5a      	adds	r2, r3, #1
 8007308:	61fa      	str	r2, [r7, #28]
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	b2d2      	uxtb	r2, r2
 800730e:	701a      	strb	r2, [r3, #0]
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007314:	2204      	movs	r2, #4
 8007316:	68f9      	ldr	r1, [r7, #12]
 8007318:	6938      	ldr	r0, [r7, #16]
 800731a:	f7ff f925 	bl	8006568 <_SendPacket>
  RECORD_END();
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	f383 8811 	msr	BASEPRI, r3
}
 8007324:	bf00      	nop
 8007326:	3720      	adds	r7, #32
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	20007030 	.word	0x20007030
 8007330:	20007000 	.word	0x20007000

08007334 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800733c:	f3ef 8311 	mrs	r3, BASEPRI
 8007340:	f04f 0120 	mov.w	r1, #32
 8007344:	f381 8811 	msr	BASEPRI, r1
 8007348:	617b      	str	r3, [r7, #20]
 800734a:	4819      	ldr	r0, [pc, #100]	; (80073b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800734c:	f7ff f81f 	bl	800638e <_PreparePacket>
 8007350:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007356:	4b17      	ldr	r3, [pc, #92]	; (80073b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	61bb      	str	r3, [r7, #24]
 8007368:	e00b      	b.n	8007382 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	b2da      	uxtb	r2, r3
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	1c59      	adds	r1, r3, #1
 8007372:	61f9      	str	r1, [r7, #28]
 8007374:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007378:	b2d2      	uxtb	r2, r2
 800737a:	701a      	strb	r2, [r3, #0]
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	09db      	lsrs	r3, r3, #7
 8007380:	61bb      	str	r3, [r7, #24]
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	2b7f      	cmp	r3, #127	; 0x7f
 8007386:	d8f0      	bhi.n	800736a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	61fa      	str	r2, [r7, #28]
 800738e:	69ba      	ldr	r2, [r7, #24]
 8007390:	b2d2      	uxtb	r2, r2
 8007392:	701a      	strb	r2, [r3, #0]
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007398:	2206      	movs	r2, #6
 800739a:	68f9      	ldr	r1, [r7, #12]
 800739c:	6938      	ldr	r0, [r7, #16]
 800739e:	f7ff f8e3 	bl	8006568 <_SendPacket>
  RECORD_END();
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	f383 8811 	msr	BASEPRI, r3
}
 80073a8:	bf00      	nop
 80073aa:	3720      	adds	r7, #32
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	20007030 	.word	0x20007030
 80073b4:	20007000 	.word	0x20007000

080073b8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80073c0:	4b04      	ldr	r3, [pc, #16]	; (80073d4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	1ad3      	subs	r3, r2, r3
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	20007000 	.word	0x20007000

080073d8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08c      	sub	sp, #48	; 0x30
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80073e2:	4b40      	ldr	r3, [pc, #256]	; (80074e4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d077      	beq.n	80074da <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80073ea:	4b3e      	ldr	r3, [pc, #248]	; (80074e4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80073f0:	2300      	movs	r3, #0
 80073f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80073f4:	e008      	b.n	8007408 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80073f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80073fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d007      	beq.n	8007412 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	3301      	adds	r3, #1
 8007406:	62bb      	str	r3, [r7, #40]	; 0x28
 8007408:	79fb      	ldrb	r3, [r7, #7]
 800740a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800740c:	429a      	cmp	r2, r3
 800740e:	d3f2      	bcc.n	80073f6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007410:	e000      	b.n	8007414 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007412:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007416:	2b00      	cmp	r3, #0
 8007418:	d055      	beq.n	80074c6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800741a:	f3ef 8311 	mrs	r3, BASEPRI
 800741e:	f04f 0120 	mov.w	r1, #32
 8007422:	f381 8811 	msr	BASEPRI, r1
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	482f      	ldr	r0, [pc, #188]	; (80074e8 <SEGGER_SYSVIEW_SendModule+0x110>)
 800742a:	f7fe ffb0 	bl	800638e <_PreparePacket>
 800742e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	627b      	str	r3, [r7, #36]	; 0x24
 8007438:	79fb      	ldrb	r3, [r7, #7]
 800743a:	623b      	str	r3, [r7, #32]
 800743c:	e00b      	b.n	8007456 <SEGGER_SYSVIEW_SendModule+0x7e>
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	b2da      	uxtb	r2, r3
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	1c59      	adds	r1, r3, #1
 8007446:	6279      	str	r1, [r7, #36]	; 0x24
 8007448:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800744c:	b2d2      	uxtb	r2, r2
 800744e:	701a      	strb	r2, [r3, #0]
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	09db      	lsrs	r3, r3, #7
 8007454:	623b      	str	r3, [r7, #32]
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	2b7f      	cmp	r3, #127	; 0x7f
 800745a:	d8f0      	bhi.n	800743e <SEGGER_SYSVIEW_SendModule+0x66>
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	627a      	str	r2, [r7, #36]	; 0x24
 8007462:	6a3a      	ldr	r2, [r7, #32]
 8007464:	b2d2      	uxtb	r2, r2
 8007466:	701a      	strb	r2, [r3, #0]
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	61fb      	str	r3, [r7, #28]
 8007470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	61bb      	str	r3, [r7, #24]
 8007476:	e00b      	b.n	8007490 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	b2da      	uxtb	r2, r3
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	1c59      	adds	r1, r3, #1
 8007480:	61f9      	str	r1, [r7, #28]
 8007482:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	701a      	strb	r2, [r3, #0]
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	09db      	lsrs	r3, r3, #7
 800748e:	61bb      	str	r3, [r7, #24]
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	2b7f      	cmp	r3, #127	; 0x7f
 8007494:	d8f0      	bhi.n	8007478 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	61fa      	str	r2, [r7, #28]
 800749c:	69ba      	ldr	r2, [r7, #24]
 800749e:	b2d2      	uxtb	r2, r2
 80074a0:	701a      	strb	r2, [r3, #0]
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2280      	movs	r2, #128	; 0x80
 80074ac:	4619      	mov	r1, r3
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f7fe ff34 	bl	800631c <_EncodeStr>
 80074b4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80074b6:	2216      	movs	r2, #22
 80074b8:	68f9      	ldr	r1, [r7, #12]
 80074ba:	6938      	ldr	r0, [r7, #16]
 80074bc:	f7ff f854 	bl	8006568 <_SendPacket>
      RECORD_END();
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80074c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d006      	beq.n	80074da <SEGGER_SYSVIEW_SendModule+0x102>
 80074cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80074d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	4798      	blx	r3
    }
  }
}
 80074da:	bf00      	nop
 80074dc:	3730      	adds	r7, #48	; 0x30
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20007028 	.word	0x20007028
 80074e8:	20007030 	.word	0x20007030

080074ec <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80074f2:	4b0c      	ldr	r3, [pc, #48]	; (8007524 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00f      	beq.n	800751a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80074fa:	4b0a      	ldr	r3, [pc, #40]	; (8007524 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d002      	beq.n	800750e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1f2      	bne.n	8007500 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800751a:	bf00      	nop
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20007028 	.word	0x20007028

08007528 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800752e:	f3ef 8311 	mrs	r3, BASEPRI
 8007532:	f04f 0120 	mov.w	r1, #32
 8007536:	f381 8811 	msr	BASEPRI, r1
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	4817      	ldr	r0, [pc, #92]	; (800759c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800753e:	f7fe ff26 	bl	800638e <_PreparePacket>
 8007542:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	617b      	str	r3, [r7, #20]
 800754c:	4b14      	ldr	r3, [pc, #80]	; (80075a0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	613b      	str	r3, [r7, #16]
 8007552:	e00b      	b.n	800756c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	b2da      	uxtb	r2, r3
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	1c59      	adds	r1, r3, #1
 800755c:	6179      	str	r1, [r7, #20]
 800755e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007562:	b2d2      	uxtb	r2, r2
 8007564:	701a      	strb	r2, [r3, #0]
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	09db      	lsrs	r3, r3, #7
 800756a:	613b      	str	r3, [r7, #16]
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	2b7f      	cmp	r3, #127	; 0x7f
 8007570:	d8f0      	bhi.n	8007554 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	617a      	str	r2, [r7, #20]
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	b2d2      	uxtb	r2, r2
 800757c:	701a      	strb	r2, [r3, #0]
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007582:	221b      	movs	r2, #27
 8007584:	6879      	ldr	r1, [r7, #4]
 8007586:	68b8      	ldr	r0, [r7, #8]
 8007588:	f7fe ffee 	bl	8006568 <_SendPacket>
  RECORD_END();
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f383 8811 	msr	BASEPRI, r3
}
 8007592:	bf00      	nop
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20007030 	.word	0x20007030
 80075a0:	2000702c 	.word	0x2000702c

080075a4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08a      	sub	sp, #40	; 0x28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80075ac:	f3ef 8311 	mrs	r3, BASEPRI
 80075b0:	f04f 0120 	mov.w	r1, #32
 80075b4:	f381 8811 	msr	BASEPRI, r1
 80075b8:	617b      	str	r3, [r7, #20]
 80075ba:	4827      	ldr	r0, [pc, #156]	; (8007658 <SEGGER_SYSVIEW_Warn+0xb4>)
 80075bc:	f7fe fee7 	bl	800638e <_PreparePacket>
 80075c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80075c2:	2280      	movs	r2, #128	; 0x80
 80075c4:	6879      	ldr	r1, [r7, #4]
 80075c6:	6938      	ldr	r0, [r7, #16]
 80075c8:	f7fe fea8 	bl	800631c <_EncodeStr>
 80075cc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	627b      	str	r3, [r7, #36]	; 0x24
 80075d2:	2301      	movs	r3, #1
 80075d4:	623b      	str	r3, [r7, #32]
 80075d6:	e00b      	b.n	80075f0 <SEGGER_SYSVIEW_Warn+0x4c>
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075de:	1c59      	adds	r1, r3, #1
 80075e0:	6279      	str	r1, [r7, #36]	; 0x24
 80075e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075e6:	b2d2      	uxtb	r2, r2
 80075e8:	701a      	strb	r2, [r3, #0]
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	09db      	lsrs	r3, r3, #7
 80075ee:	623b      	str	r3, [r7, #32]
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	2b7f      	cmp	r3, #127	; 0x7f
 80075f4:	d8f0      	bhi.n	80075d8 <SEGGER_SYSVIEW_Warn+0x34>
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	627a      	str	r2, [r7, #36]	; 0x24
 80075fc:	6a3a      	ldr	r2, [r7, #32]
 80075fe:	b2d2      	uxtb	r2, r2
 8007600:	701a      	strb	r2, [r3, #0]
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	61fb      	str	r3, [r7, #28]
 800760a:	2300      	movs	r3, #0
 800760c:	61bb      	str	r3, [r7, #24]
 800760e:	e00b      	b.n	8007628 <SEGGER_SYSVIEW_Warn+0x84>
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	b2da      	uxtb	r2, r3
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	1c59      	adds	r1, r3, #1
 8007618:	61f9      	str	r1, [r7, #28]
 800761a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800761e:	b2d2      	uxtb	r2, r2
 8007620:	701a      	strb	r2, [r3, #0]
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	09db      	lsrs	r3, r3, #7
 8007626:	61bb      	str	r3, [r7, #24]
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	2b7f      	cmp	r3, #127	; 0x7f
 800762c:	d8f0      	bhi.n	8007610 <SEGGER_SYSVIEW_Warn+0x6c>
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	1c5a      	adds	r2, r3, #1
 8007632:	61fa      	str	r2, [r7, #28]
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	701a      	strb	r2, [r3, #0]
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800763e:	221a      	movs	r2, #26
 8007640:	68f9      	ldr	r1, [r7, #12]
 8007642:	6938      	ldr	r0, [r7, #16]
 8007644:	f7fe ff90 	bl	8006568 <_SendPacket>
  RECORD_END();
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	f383 8811 	msr	BASEPRI, r3
}
 800764e:	bf00      	nop
 8007650:	3728      	adds	r7, #40	; 0x28
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20007030 	.word	0x20007030

0800765c <memcmp>:
 800765c:	b510      	push	{r4, lr}
 800765e:	3901      	subs	r1, #1
 8007660:	4402      	add	r2, r0
 8007662:	4290      	cmp	r0, r2
 8007664:	d101      	bne.n	800766a <memcmp+0xe>
 8007666:	2000      	movs	r0, #0
 8007668:	e005      	b.n	8007676 <memcmp+0x1a>
 800766a:	7803      	ldrb	r3, [r0, #0]
 800766c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007670:	42a3      	cmp	r3, r4
 8007672:	d001      	beq.n	8007678 <memcmp+0x1c>
 8007674:	1b18      	subs	r0, r3, r4
 8007676:	bd10      	pop	{r4, pc}
 8007678:	3001      	adds	r0, #1
 800767a:	e7f2      	b.n	8007662 <memcmp+0x6>

0800767c <memset>:
 800767c:	4402      	add	r2, r0
 800767e:	4603      	mov	r3, r0
 8007680:	4293      	cmp	r3, r2
 8007682:	d100      	bne.n	8007686 <memset+0xa>
 8007684:	4770      	bx	lr
 8007686:	f803 1b01 	strb.w	r1, [r3], #1
 800768a:	e7f9      	b.n	8007680 <memset+0x4>

0800768c <__libc_init_array>:
 800768c:	b570      	push	{r4, r5, r6, lr}
 800768e:	4d0d      	ldr	r5, [pc, #52]	; (80076c4 <__libc_init_array+0x38>)
 8007690:	4c0d      	ldr	r4, [pc, #52]	; (80076c8 <__libc_init_array+0x3c>)
 8007692:	1b64      	subs	r4, r4, r5
 8007694:	10a4      	asrs	r4, r4, #2
 8007696:	2600      	movs	r6, #0
 8007698:	42a6      	cmp	r6, r4
 800769a:	d109      	bne.n	80076b0 <__libc_init_array+0x24>
 800769c:	4d0b      	ldr	r5, [pc, #44]	; (80076cc <__libc_init_array+0x40>)
 800769e:	4c0c      	ldr	r4, [pc, #48]	; (80076d0 <__libc_init_array+0x44>)
 80076a0:	f000 f826 	bl	80076f0 <_init>
 80076a4:	1b64      	subs	r4, r4, r5
 80076a6:	10a4      	asrs	r4, r4, #2
 80076a8:	2600      	movs	r6, #0
 80076aa:	42a6      	cmp	r6, r4
 80076ac:	d105      	bne.n	80076ba <__libc_init_array+0x2e>
 80076ae:	bd70      	pop	{r4, r5, r6, pc}
 80076b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076b4:	4798      	blx	r3
 80076b6:	3601      	adds	r6, #1
 80076b8:	e7ee      	b.n	8007698 <__libc_init_array+0xc>
 80076ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80076be:	4798      	blx	r3
 80076c0:	3601      	adds	r6, #1
 80076c2:	e7f2      	b.n	80076aa <__libc_init_array+0x1e>
 80076c4:	080078bc 	.word	0x080078bc
 80076c8:	080078bc 	.word	0x080078bc
 80076cc:	080078bc 	.word	0x080078bc
 80076d0:	080078c0 	.word	0x080078c0

080076d4 <memcpy>:
 80076d4:	440a      	add	r2, r1
 80076d6:	4291      	cmp	r1, r2
 80076d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80076dc:	d100      	bne.n	80076e0 <memcpy+0xc>
 80076de:	4770      	bx	lr
 80076e0:	b510      	push	{r4, lr}
 80076e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076ea:	4291      	cmp	r1, r2
 80076ec:	d1f9      	bne.n	80076e2 <memcpy+0xe>
 80076ee:	bd10      	pop	{r4, pc}

080076f0 <_init>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	bf00      	nop
 80076f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f6:	bc08      	pop	{r3}
 80076f8:	469e      	mov	lr, r3
 80076fa:	4770      	bx	lr

080076fc <_fini>:
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	bf00      	nop
 8007700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007702:	bc08      	pop	{r3}
 8007704:	469e      	mov	lr, r3
 8007706:	4770      	bx	lr
