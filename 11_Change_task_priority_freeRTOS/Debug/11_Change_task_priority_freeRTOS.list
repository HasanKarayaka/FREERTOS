
11_Change_task_priority_freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f2c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080060fc  080060fc  000160fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006238  08006238  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006238  08006238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006240  08006240  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006240  08006240  00016240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006244  08006244  00016244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bb8  20000060  080062a8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c18  080062a8  00024c18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000173bf  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000338b  00000000  00000000  00037492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  0003a820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc8  00000000  00000000  0003bc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003cfa  00000000  00000000  0003cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017312  00000000  00000000  0004092a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dae23  00000000  00000000  00057c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a80  00000000  00000000  00132a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001384e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080060e4 	.word	0x080060e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080060e4 	.word	0x080060e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <EXTI1_IRQHandler>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void EXTI1_IRQHandler(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
    // Kesme kaynağını kontrol et
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1) != RESET) {
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <EXTI1_IRQHandler+0x38>)
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	f003 0302 	and.w	r3, r3, #2
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d010      	beq.n	80005ee <EXTI1_IRQHandler+0x32>
        // Kesme işlemleri (örneğin LED yakmak)
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // A5 pinindeki bir LED'i yakıp söndür
 80005cc:	2120      	movs	r1, #32
 80005ce:	480a      	ldr	r0, [pc, #40]	; (80005f8 <EXTI1_IRQHandler+0x3c>)
 80005d0:	f000 fec5 	bl	800135e <HAL_GPIO_TogglePin>

        // Kesme bayrağını sıfırlayın
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <EXTI1_IRQHandler+0x38>)
 80005d6:	2202      	movs	r2, #2
 80005d8:	615a      	str	r2, [r3, #20]

        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET)
 80005da:	2102      	movs	r1, #2
 80005dc:	4806      	ldr	r0, [pc, #24]	; (80005f8 <EXTI1_IRQHandler+0x3c>)
 80005de:	f000 fe8d 	bl	80012fc <HAL_GPIO_ReadPin>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d102      	bne.n	80005ee <EXTI1_IRQHandler+0x32>
        {
        	buttonState = 1;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <EXTI1_IRQHandler+0x40>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40013c00 	.word	0x40013c00
 80005f8:	40020000 	.word	0x40020000
 80005fc:	2000012c 	.word	0x2000012c

08000600 <prinMessage>:

void prinMessage(char *message)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	for(int i = 0;i < strlen(message);i++)
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	e012      	b.n	8000634 <prinMessage+0x34>
	{
        while (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET) {
        	 HAL_UART_Transmit(&huart2, (uint8_t*)&message[i], 1, HAL_MAX_DELAY);
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	18d1      	adds	r1, r2, r3
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	2201      	movs	r2, #1
 800061a:	480c      	ldr	r0, [pc, #48]	; (800064c <prinMessage+0x4c>)
 800061c:	f001 ff49 	bl	80024b2 <HAL_UART_Transmit>
        while (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET) {
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <prinMessage+0x4c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062a:	2b80      	cmp	r3, #128	; 0x80
 800062c:	d0ef      	beq.n	800060e <prinMessage+0xe>
	for(int i = 0;i < strlen(message);i++)
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3301      	adds	r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff fdeb 	bl	8000210 <strlen>
 800063a:	4602      	mov	r2, r0
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	429a      	cmp	r2, r3
 8000640:	d8ee      	bhi.n	8000620 <prinMessage+0x20>
        }


	}
}
 8000642:	bf00      	nop
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000007c 	.word	0x2000007c

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fb9a 	bl	8000d8c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f826 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 f8ae 	bl	80007bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000660:	f000 f882 	bl	8000768 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000664:	f002 fade 	bl	8002c24 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(Task1_Handler, NULL, &Task1_attributes);
 8000668:	4a09      	ldr	r2, [pc, #36]	; (8000690 <main+0x40>)
 800066a:	2100      	movs	r1, #0
 800066c:	4809      	ldr	r0, [pc, #36]	; (8000694 <main+0x44>)
 800066e:	f002 fb23 	bl	8002cb8 <osThreadNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a08      	ldr	r2, [pc, #32]	; (8000698 <main+0x48>)
 8000676:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task2_Handler, NULL, &Task2_attributes);
 8000678:	4a08      	ldr	r2, [pc, #32]	; (800069c <main+0x4c>)
 800067a:	2100      	movs	r1, #0
 800067c:	4808      	ldr	r0, [pc, #32]	; (80006a0 <main+0x50>)
 800067e:	f002 fb1b 	bl	8002cb8 <osThreadNew>
 8000682:	4603      	mov	r3, r0
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <main+0x54>)
 8000686:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000688:	f002 faf0 	bl	8002c6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068c:	e7fe      	b.n	800068c <main+0x3c>
 800068e:	bf00      	nop
 8000690:	080061a4 	.word	0x080061a4
 8000694:	0800090d 	.word	0x0800090d
 8000698:	200000c0 	.word	0x200000c0
 800069c:	080061c8 	.word	0x080061c8
 80006a0:	080009b9 	.word	0x080009b9
 80006a4:	200000c4 	.word	0x200000c4

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	; 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2234      	movs	r2, #52	; 0x34
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f005 f890 	bl	80057dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b23      	ldr	r3, [pc, #140]	; (8000760 <SystemClock_Config+0xb8>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	4a22      	ldr	r2, [pc, #136]	; (8000760 <SystemClock_Config+0xb8>)
 80006d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006da:	6413      	str	r3, [r2, #64]	; 0x40
 80006dc:	4b20      	ldr	r3, [pc, #128]	; (8000760 <SystemClock_Config+0xb8>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e8:	2300      	movs	r3, #0
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <SystemClock_Config+0xbc>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f4:	4a1b      	ldr	r2, [pc, #108]	; (8000764 <SystemClock_Config+0xbc>)
 80006f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <SystemClock_Config+0xbc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000708:	2302      	movs	r3, #2
 800070a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000710:	2310      	movs	r3, #16
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000714:	2300      	movs	r3, #0
 8000716:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4618      	mov	r0, r3
 800071e:	f001 f92f 	bl	8001980 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000728:	f000 f9b2 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fe24 	bl	8001394 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000752:	f000 f99d 	bl	8000a90 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f001 fe3a 	bl	8002418 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f971 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000007c 	.word	0x2000007c
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b38      	ldr	r3, [pc, #224]	; (80008b8 <MX_GPIO_Init+0xfc>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a37      	ldr	r2, [pc, #220]	; (80008b8 <MX_GPIO_Init+0xfc>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <MX_GPIO_Init+0xfc>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <MX_GPIO_Init+0xfc>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a30      	ldr	r2, [pc, #192]	; (80008b8 <MX_GPIO_Init+0xfc>)
 80007f8:	f043 0320 	orr.w	r3, r3, #32
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <MX_GPIO_Init+0xfc>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0320 	and.w	r3, r3, #32
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <MX_GPIO_Init+0xfc>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a29      	ldr	r2, [pc, #164]	; (80008b8 <MX_GPIO_Init+0xfc>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <MX_GPIO_Init+0xfc>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800082c:	4823      	ldr	r0, [pc, #140]	; (80008bc <MX_GPIO_Init+0x100>)
 800082e:	f000 fd7d 	bl	800132c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2107      	movs	r1, #7
 8000836:	4822      	ldr	r0, [pc, #136]	; (80008c0 <MX_GPIO_Init+0x104>)
 8000838:	f000 fd78 	bl	800132c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800083c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4619      	mov	r1, r3
 8000854:	4819      	ldr	r0, [pc, #100]	; (80008bc <MX_GPIO_Init+0x100>)
 8000856:	f000 fbbd 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800085a:	2307      	movs	r3, #7
 800085c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	4619      	mov	r1, r3
 8000870:	4813      	ldr	r0, [pc, #76]	; (80008c0 <MX_GPIO_Init+0x104>)
 8000872:	f000 fbaf 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000876:	2302      	movs	r3, #2
 8000878:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	4619      	mov	r1, r3
 8000888:	480e      	ldr	r0, [pc, #56]	; (80008c4 <MX_GPIO_Init+0x108>)
 800088a:	f000 fba3 	bl	8000fd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800088e:	2312      	movs	r3, #18
 8000890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000892:	230c      	movs	r3, #12
 8000894:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000896:	2301      	movs	r3, #1
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate =GPIO_AF7_USART2;
 800089e:	2307      	movs	r3, #7
 80008a0:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	4619      	mov	r1, r3
 80008a8:	4806      	ldr	r0, [pc, #24]	; (80008c4 <MX_GPIO_Init+0x108>)
 80008aa:	f000 fb93 	bl	8000fd4 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ae:	bf00      	nop
 80008b0:	3720      	adds	r7, #32
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020800 	.word	0x40020800
 80008c0:	40021400 	.word	0x40021400
 80008c4:	40020000 	.word	0x40020000

080008c8 <freeRTOS_Delay>:

/* USER CODE BEGIN 4 */
void freeRTOS_Delay(uint32_t delayMS)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	uint32_t currentTick = xTaskGetTickCount();
 80008d0:	f003 fbc4 	bl	800405c <xTaskGetTickCount>
 80008d4:	60f8      	str	r0, [r7, #12]
	uint32_t delayTick = pdMS_TO_TICKS(delayMS);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008dc:	fb02 f303 	mul.w	r3, r2, r3
 80008e0:	4a09      	ldr	r2, [pc, #36]	; (8000908 <freeRTOS_Delay+0x40>)
 80008e2:	fba2 2303 	umull	r2, r3, r2, r3
 80008e6:	099b      	lsrs	r3, r3, #6
 80008e8:	60bb      	str	r3, [r7, #8]
	while(xTaskGetTickCount() < (currentTick + delayTick));
 80008ea:	bf00      	nop
 80008ec:	f003 fbb6 	bl	800405c <xTaskGetTickCount>
 80008f0:	4601      	mov	r1, r0
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4413      	add	r3, r2
 80008f8:	4299      	cmp	r1, r3
 80008fa:	d3f7      	bcc.n	80008ec <freeRTOS_Delay+0x24>
}
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	10624dd3 	.word	0x10624dd3

0800090c <Task1_Handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_Handler */
void Task1_Handler(void *argument)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	UBaseType_t p1,p2;

	 sprintf(myMessage, "Task1 is running\r\n");
 8000914:	4921      	ldr	r1, [pc, #132]	; (800099c <Task1_Handler+0x90>)
 8000916:	4822      	ldr	r0, [pc, #136]	; (80009a0 <Task1_Handler+0x94>)
 8000918:	f004 ff40 	bl	800579c <siprintf>
	 prinMessage(myMessage);
 800091c:	4820      	ldr	r0, [pc, #128]	; (80009a0 <Task1_Handler+0x94>)
 800091e:	f7ff fe6f 	bl	8000600 <prinMessage>

	 sprintf(myMessage,"Task1 priority : %d \r\n", uxTaskPriorityGet(Task1Handle));
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <Task1_Handler+0x98>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f003 f9ce 	bl	8003cc8 <uxTaskPriorityGet>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	491d      	ldr	r1, [pc, #116]	; (80009a8 <Task1_Handler+0x9c>)
 8000932:	481b      	ldr	r0, [pc, #108]	; (80009a0 <Task1_Handler+0x94>)
 8000934:	f004 ff32 	bl	800579c <siprintf>
	 prinMessage(myMessage);
 8000938:	4819      	ldr	r0, [pc, #100]	; (80009a0 <Task1_Handler+0x94>)
 800093a:	f7ff fe61 	bl	8000600 <prinMessage>

	 sprintf(myMessage,"Task2 priority : %d \r\n", uxTaskPriorityGet(Task2Handle));
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <Task1_Handler+0xa0>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4618      	mov	r0, r3
 8000944:	f003 f9c0 	bl	8003cc8 <uxTaskPriorityGet>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	4918      	ldr	r1, [pc, #96]	; (80009b0 <Task1_Handler+0xa4>)
 800094e:	4814      	ldr	r0, [pc, #80]	; (80009a0 <Task1_Handler+0x94>)
 8000950:	f004 ff24 	bl	800579c <siprintf>
    prinMessage(myMessage);
 8000954:	4812      	ldr	r0, [pc, #72]	; (80009a0 <Task1_Handler+0x94>)
 8000956:	f7ff fe53 	bl	8000600 <prinMessage>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(buttonState == 1)
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <Task1_Handler+0xa8>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d117      	bne.n	8000992 <Task1_Handler+0x86>
	  {
		  p1= uxTaskPriorityGet(Task1Handle);
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <Task1_Handler+0x98>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f003 f9ae 	bl	8003cc8 <uxTaskPriorityGet>
 800096c:	60f8      	str	r0, [r7, #12]
		  p2 = uxTaskPriorityGet(Task2Handle);
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <Task1_Handler+0xa0>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f003 f9a8 	bl	8003cc8 <uxTaskPriorityGet>
 8000978:	60b8      	str	r0, [r7, #8]

		  vTaskPrioritySet(Task1Handle, p2);
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <Task1_Handler+0x98>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	68b9      	ldr	r1, [r7, #8]
 8000980:	4618      	mov	r0, r3
 8000982:	f003 f9bb 	bl	8003cfc <vTaskPrioritySet>
		  vTaskPrioritySet(Task2Handle, p1);
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <Task1_Handler+0xa0>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	68f9      	ldr	r1, [r7, #12]
 800098c:	4618      	mov	r0, r3
 800098e:	f003 f9b5 	bl	8003cfc <vTaskPrioritySet>
	  }

	  freeRTOS_Delay(200);
 8000992:	20c8      	movs	r0, #200	; 0xc8
 8000994:	f7ff ff98 	bl	80008c8 <freeRTOS_Delay>
	  if(buttonState == 1)
 8000998:	e7df      	b.n	800095a <Task1_Handler+0x4e>
 800099a:	bf00      	nop
 800099c:	0800610c 	.word	0x0800610c
 80009a0:	200000c8 	.word	0x200000c8
 80009a4:	200000c0 	.word	0x200000c0
 80009a8:	08006120 	.word	0x08006120
 80009ac:	200000c4 	.word	0x200000c4
 80009b0:	08006138 	.word	0x08006138
 80009b4:	2000012c 	.word	0x2000012c

080009b8 <Task2_Handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_Handler */
void Task2_Handler(void *argument)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	  UBaseType_t p1,p2;

	  sprintf(myMessage,"TASK2' running \r\n");
 80009c0:	4922      	ldr	r1, [pc, #136]	; (8000a4c <Task2_Handler+0x94>)
 80009c2:	4823      	ldr	r0, [pc, #140]	; (8000a50 <Task2_Handler+0x98>)
 80009c4:	f004 feea 	bl	800579c <siprintf>
	  prinMessage(myMessage);
 80009c8:	4821      	ldr	r0, [pc, #132]	; (8000a50 <Task2_Handler+0x98>)
 80009ca:	f7ff fe19 	bl	8000600 <prinMessage>

	  sprintf(myMessage,"TASK1' priority\r\n",uxTaskPriorityGet(Task1Handle));
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <Task2_Handler+0x9c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f003 f978 	bl	8003cc8 <uxTaskPriorityGet>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	491e      	ldr	r1, [pc, #120]	; (8000a58 <Task2_Handler+0xa0>)
 80009de:	481c      	ldr	r0, [pc, #112]	; (8000a50 <Task2_Handler+0x98>)
 80009e0:	f004 fedc 	bl	800579c <siprintf>
	  prinMessage(myMessage);
 80009e4:	481a      	ldr	r0, [pc, #104]	; (8000a50 <Task2_Handler+0x98>)
 80009e6:	f7ff fe0b 	bl	8000600 <prinMessage>
	  sprintf(myMessage,"TASK2' priority\r\n",uxTaskPriorityGet(Task2Handle));
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <Task2_Handler+0xa4>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f003 f96a 	bl	8003cc8 <uxTaskPriorityGet>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	4919      	ldr	r1, [pc, #100]	; (8000a60 <Task2_Handler+0xa8>)
 80009fa:	4815      	ldr	r0, [pc, #84]	; (8000a50 <Task2_Handler+0x98>)
 80009fc:	f004 fece 	bl	800579c <siprintf>
	  prinMessage(myMessage);
 8000a00:	4813      	ldr	r0, [pc, #76]	; (8000a50 <Task2_Handler+0x98>)
 8000a02:	f7ff fdfd 	bl	8000600 <prinMessage>
  /* Infinite loop */
  for(;;)
  {


      if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET)
 8000a06:	2102      	movs	r1, #2
 8000a08:	4816      	ldr	r0, [pc, #88]	; (8000a64 <Task2_Handler+0xac>)
 8000a0a:	f000 fc77 	bl	80012fc <HAL_GPIO_ReadPin>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d1f8      	bne.n	8000a06 <Task2_Handler+0x4e>
      {
    	  buttonState = 0;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <Task2_Handler+0xb0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]

    	  p1 =uxTaskPriorityGet(Task1Handle);
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <Task2_Handler+0x9c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 f952 	bl	8003cc8 <uxTaskPriorityGet>
 8000a24:	60f8      	str	r0, [r7, #12]
    	  p2 = uxTaskPriorityGet(Task2Handle);
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <Task2_Handler+0xa4>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f003 f94c 	bl	8003cc8 <uxTaskPriorityGet>
 8000a30:	60b8      	str	r0, [r7, #8]

    	  vTaskPrioritySet(Task1Handle, p2);
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <Task2_Handler+0x9c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	68b9      	ldr	r1, [r7, #8]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f003 f95f 	bl	8003cfc <vTaskPrioritySet>
    	  vTaskPrioritySet(Task2Handle, p1);
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <Task2_Handler+0xa4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	68f9      	ldr	r1, [r7, #12]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f003 f959 	bl	8003cfc <vTaskPrioritySet>
      if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET)
 8000a4a:	e7dc      	b.n	8000a06 <Task2_Handler+0x4e>
 8000a4c:	08006150 	.word	0x08006150
 8000a50:	200000c8 	.word	0x200000c8
 8000a54:	200000c0 	.word	0x200000c0
 8000a58:	08006164 	.word	0x08006164
 8000a5c:	200000c4 	.word	0x200000c4
 8000a60:	08006178 	.word	0x08006178
 8000a64:	40020000 	.word	0x40020000
 8000a68:	2000012c 	.word	0x2000012c

08000a6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d101      	bne.n	8000a82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a7e:	f000 f9a7 	bl	8000dd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40010000 	.word	0x40010000

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_MspInit+0x54>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	4a11      	ldr	r2, [pc, #68]	; (8000af0 <HAL_MspInit+0x54>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_MspInit+0x54>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_MspInit+0x54>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_MspInit+0x54>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_MspInit+0x54>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	210f      	movs	r1, #15
 8000ade:	f06f 0001 	mvn.w	r0, #1
 8000ae2:	f000 fa4d 	bl	8000f80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <HAL_UART_MspInit+0x84>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12b      	bne.n	8000b6e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_UART_MspInit+0x88>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <HAL_UART_MspInit+0x88>)
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_UART_MspInit+0x88>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_UART_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <HAL_UART_MspInit+0x88>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_UART_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b4e:	230c      	movs	r3, #12
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b5e:	2307      	movs	r3, #7
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <HAL_UART_MspInit+0x8c>)
 8000b6a:	f000 fa33 	bl	8000fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40004400 	.word	0x40004400
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000

08000b84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08c      	sub	sp, #48	; 0x30
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <HAL_InitTick+0xd0>)
 8000b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9c:	4a2d      	ldr	r2, [pc, #180]	; (8000c54 <HAL_InitTick+0xd0>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba4:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <HAL_InitTick+0xd0>)
 8000ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bb0:	f107 020c 	add.w	r2, r7, #12
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 fd04 	bl	80015c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bc0:	f000 fcee 	bl	80015a0 <HAL_RCC_GetPCLK2Freq>
 8000bc4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc8:	4a23      	ldr	r2, [pc, #140]	; (8000c58 <HAL_InitTick+0xd4>)
 8000bca:	fba2 2303 	umull	r2, r3, r2, r3
 8000bce:	0c9b      	lsrs	r3, r3, #18
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bd4:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <HAL_InitTick+0xd8>)
 8000bd6:	4a22      	ldr	r2, [pc, #136]	; (8000c60 <HAL_InitTick+0xdc>)
 8000bd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <HAL_InitTick+0xd8>)
 8000bdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000be0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000be2:	4a1e      	ldr	r2, [pc, #120]	; (8000c5c <HAL_InitTick+0xd8>)
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000be8:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <HAL_InitTick+0xd8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bee:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <HAL_InitTick+0xd8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <HAL_InitTick+0xd8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000bfa:	4818      	ldr	r0, [pc, #96]	; (8000c5c <HAL_InitTick+0xd8>)
 8000bfc:	f001 f95e 	bl	8001ebc <HAL_TIM_Base_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d11b      	bne.n	8000c46 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c0e:	4813      	ldr	r0, [pc, #76]	; (8000c5c <HAL_InitTick+0xd8>)
 8000c10:	f001 f9ae 	bl	8001f70 <HAL_TIM_Base_Start_IT>
 8000c14:	4603      	mov	r3, r0
 8000c16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d111      	bne.n	8000c46 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c22:	2019      	movs	r0, #25
 8000c24:	f000 f9c8 	bl	8000fb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b0f      	cmp	r3, #15
 8000c2c:	d808      	bhi.n	8000c40 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	2019      	movs	r0, #25
 8000c34:	f000 f9a4 	bl	8000f80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c38:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_InitTick+0xe0>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	e002      	b.n	8000c46 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3730      	adds	r7, #48	; 0x30
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800
 8000c58:	431bde83 	.word	0x431bde83
 8000c5c:	20000130 	.word	0x20000130
 8000c60:	40010000 	.word	0x40010000
 8000c64:	20000004 	.word	0x20000004

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <NMI_Handler+0x4>

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c9a:	f001 f9d9 	bl	8002050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000130 	.word	0x20000130

08000ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <_sbrk+0x5c>)
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <_sbrk+0x60>)
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <_sbrk+0x64>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <_sbrk+0x68>)
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d207      	bcs.n	8000ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd8:	f004 fd88 	bl	80057ec <__errno>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	220c      	movs	r2, #12
 8000ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	e009      	b.n	8000cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <_sbrk+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20020000 	.word	0x20020000
 8000d08:	00000400 	.word	0x00000400
 8000d0c:	20000178 	.word	0x20000178
 8000d10:	20004c18 	.word	0x20004c18

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d3e:	490e      	ldr	r1, [pc, #56]	; (8000d78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d40:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d54:	4c0b      	ldr	r4, [pc, #44]	; (8000d84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d62:	f7ff ffd7 	bl	8000d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f004 fd47 	bl	80057f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fc71 	bl	8000650 <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d7c:	08006248 	.word	0x08006248
  ldr r2, =_sbss
 8000d80:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d84:	20004c18 	.word	0x20004c18

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <HAL_Init+0x40>)
 8000d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <HAL_Init+0x40>)
 8000da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_Init+0x40>)
 8000dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f8d8 	bl	8000f6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	200f      	movs	r0, #15
 8000dbc:	f7ff fee2 	bl	8000b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fe6c 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023c00 	.word	0x40023c00

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000008 	.word	0x20000008
 8000df4:	2000017c 	.word	0x2000017c

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	2000017c 	.word	0x2000017c

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	db0b      	blt.n	8000e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 021f 	and.w	r2, r3, #31
 8000e8c:	4907      	ldr	r1, [pc, #28]	; (8000eac <__NVIC_EnableIRQ+0x38>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	2001      	movs	r0, #1
 8000e96:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	; (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ff4c 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f92:	f7ff ff61 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000f96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	68b9      	ldr	r1, [r7, #8]
 8000f9c:	6978      	ldr	r0, [r7, #20]
 8000f9e:	f7ff ffb1 	bl	8000f04 <NVIC_EncodePriority>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff80 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000fb0:	bf00      	nop
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff54 	bl	8000e74 <__NVIC_EnableIRQ>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	e165      	b.n	80012bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	429a      	cmp	r2, r3
 800100a:	f040 8154 	bne.w	80012b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b01      	cmp	r3, #1
 8001018:	d005      	beq.n	8001026 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001022:	2b02      	cmp	r3, #2
 8001024:	d130      	bne.n	8001088 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	091b      	lsrs	r3, r3, #4
 8001072:	f003 0201 	and.w	r2, r3, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b03      	cmp	r3, #3
 8001092:	d017      	beq.n	80010c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d123      	bne.n	8001118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	08da      	lsrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	08da      	lsrs	r2, r3, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3208      	adds	r2, #8
 8001112:	69b9      	ldr	r1, [r7, #24]
 8001114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0203 	and.w	r2, r3, #3
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80ae 	beq.w	80012b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b5d      	ldr	r3, [pc, #372]	; (80012d4 <HAL_GPIO_Init+0x300>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a5c      	ldr	r2, [pc, #368]	; (80012d4 <HAL_GPIO_Init+0x300>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b5a      	ldr	r3, [pc, #360]	; (80012d4 <HAL_GPIO_Init+0x300>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001176:	4a58      	ldr	r2, [pc, #352]	; (80012d8 <HAL_GPIO_Init+0x304>)
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4f      	ldr	r2, [pc, #316]	; (80012dc <HAL_GPIO_Init+0x308>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d025      	beq.n	80011ee <HAL_GPIO_Init+0x21a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4e      	ldr	r2, [pc, #312]	; (80012e0 <HAL_GPIO_Init+0x30c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d01f      	beq.n	80011ea <HAL_GPIO_Init+0x216>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4d      	ldr	r2, [pc, #308]	; (80012e4 <HAL_GPIO_Init+0x310>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d019      	beq.n	80011e6 <HAL_GPIO_Init+0x212>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4c      	ldr	r2, [pc, #304]	; (80012e8 <HAL_GPIO_Init+0x314>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d013      	beq.n	80011e2 <HAL_GPIO_Init+0x20e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4b      	ldr	r2, [pc, #300]	; (80012ec <HAL_GPIO_Init+0x318>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d00d      	beq.n	80011de <HAL_GPIO_Init+0x20a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4a      	ldr	r2, [pc, #296]	; (80012f0 <HAL_GPIO_Init+0x31c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d007      	beq.n	80011da <HAL_GPIO_Init+0x206>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a49      	ldr	r2, [pc, #292]	; (80012f4 <HAL_GPIO_Init+0x320>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <HAL_GPIO_Init+0x202>
 80011d2:	2306      	movs	r3, #6
 80011d4:	e00c      	b.n	80011f0 <HAL_GPIO_Init+0x21c>
 80011d6:	2307      	movs	r3, #7
 80011d8:	e00a      	b.n	80011f0 <HAL_GPIO_Init+0x21c>
 80011da:	2305      	movs	r3, #5
 80011dc:	e008      	b.n	80011f0 <HAL_GPIO_Init+0x21c>
 80011de:	2304      	movs	r3, #4
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x21c>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e004      	b.n	80011f0 <HAL_GPIO_Init+0x21c>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_Init+0x21c>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_GPIO_Init+0x21c>
 80011ee:	2300      	movs	r3, #0
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	f002 0203 	and.w	r2, r2, #3
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4093      	lsls	r3, r2
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001200:	4935      	ldr	r1, [pc, #212]	; (80012d8 <HAL_GPIO_Init+0x304>)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800120e:	4b3a      	ldr	r3, [pc, #232]	; (80012f8 <HAL_GPIO_Init+0x324>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001232:	4a31      	ldr	r2, [pc, #196]	; (80012f8 <HAL_GPIO_Init+0x324>)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001238:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <HAL_GPIO_Init+0x324>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800125c:	4a26      	ldr	r2, [pc, #152]	; (80012f8 <HAL_GPIO_Init+0x324>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001262:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <HAL_GPIO_Init+0x324>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001286:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <HAL_GPIO_Init+0x324>)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <HAL_GPIO_Init+0x324>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b0:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <HAL_GPIO_Init+0x324>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3301      	adds	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	2b0f      	cmp	r3, #15
 80012c0:	f67f ae96 	bls.w	8000ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40013800 	.word	0x40013800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40021400 	.word	0x40021400
 80012f4:	40021800 	.word	0x40021800
 80012f8:	40013c00 	.word	0x40013c00

080012fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	4013      	ands	r3, r2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	e001      	b.n	800131e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800131e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
 8001338:	4613      	mov	r3, r2
 800133a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800133c:	787b      	ldrb	r3, [r7, #1]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001348:	e003      	b.n	8001352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800134a:	887b      	ldrh	r3, [r7, #2]
 800134c:	041a      	lsls	r2, r3, #16
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	619a      	str	r2, [r3, #24]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800135e:	b480      	push	{r7}
 8001360:	b085      	sub	sp, #20
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	460b      	mov	r3, r1
 8001368:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001370:	887a      	ldrh	r2, [r7, #2]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4013      	ands	r3, r2
 8001376:	041a      	lsls	r2, r3, #16
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	43d9      	mvns	r1, r3
 800137c:	887b      	ldrh	r3, [r7, #2]
 800137e:	400b      	ands	r3, r1
 8001380:	431a      	orrs	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	619a      	str	r2, [r3, #24]
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0cc      	b.n	8001542 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013a8:	4b68      	ldr	r3, [pc, #416]	; (800154c <HAL_RCC_ClockConfig+0x1b8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 030f 	and.w	r3, r3, #15
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d90c      	bls.n	80013d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b6:	4b65      	ldr	r3, [pc, #404]	; (800154c <HAL_RCC_ClockConfig+0x1b8>)
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013be:	4b63      	ldr	r3, [pc, #396]	; (800154c <HAL_RCC_ClockConfig+0x1b8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d001      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e0b8      	b.n	8001542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d020      	beq.n	800141e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d005      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013e8:	4b59      	ldr	r3, [pc, #356]	; (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	4a58      	ldr	r2, [pc, #352]	; (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 80013ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001400:	4b53      	ldr	r3, [pc, #332]	; (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	4a52      	ldr	r2, [pc, #328]	; (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001406:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800140a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800140c:	4b50      	ldr	r3, [pc, #320]	; (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	494d      	ldr	r1, [pc, #308]	; (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 800141a:	4313      	orrs	r3, r2
 800141c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d044      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d107      	bne.n	8001442 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	4b47      	ldr	r3, [pc, #284]	; (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d119      	bne.n	8001472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e07f      	b.n	8001542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d003      	beq.n	8001452 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800144e:	2b03      	cmp	r3, #3
 8001450:	d107      	bne.n	8001462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001452:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d109      	bne.n	8001472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e06f      	b.n	8001542 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001462:	4b3b      	ldr	r3, [pc, #236]	; (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e067      	b.n	8001542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001472:	4b37      	ldr	r3, [pc, #220]	; (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f023 0203 	bic.w	r2, r3, #3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	4934      	ldr	r1, [pc, #208]	; (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001480:	4313      	orrs	r3, r2
 8001482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001484:	f7ff fcb8 	bl	8000df8 <HAL_GetTick>
 8001488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148a:	e00a      	b.n	80014a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800148c:	f7ff fcb4 	bl	8000df8 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	f241 3288 	movw	r2, #5000	; 0x1388
 800149a:	4293      	cmp	r3, r2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e04f      	b.n	8001542 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 020c 	and.w	r2, r3, #12
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d1eb      	bne.n	800148c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014b4:	4b25      	ldr	r3, [pc, #148]	; (800154c <HAL_RCC_ClockConfig+0x1b8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d20c      	bcs.n	80014dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c2:	4b22      	ldr	r3, [pc, #136]	; (800154c <HAL_RCC_ClockConfig+0x1b8>)
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_RCC_ClockConfig+0x1b8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e032      	b.n	8001542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d008      	beq.n	80014fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	4916      	ldr	r1, [pc, #88]	; (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b00      	cmp	r3, #0
 8001504:	d009      	beq.n	800151a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	490e      	ldr	r1, [pc, #56]	; (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	4313      	orrs	r3, r2
 8001518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800151a:	f000 f887 	bl	800162c <HAL_RCC_GetSysClockFreq>
 800151e:	4602      	mov	r2, r0
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	490a      	ldr	r1, [pc, #40]	; (8001554 <HAL_RCC_ClockConfig+0x1c0>)
 800152c:	5ccb      	ldrb	r3, [r1, r3]
 800152e:	fa22 f303 	lsr.w	r3, r2, r3
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_RCC_ClockConfig+0x1c8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fb22 	bl	8000b84 <HAL_InitTick>

  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023c00 	.word	0x40023c00
 8001550:	40023800 	.word	0x40023800
 8001554:	080061ec 	.word	0x080061ec
 8001558:	20000000 	.word	0x20000000
 800155c:	20000004 	.word	0x20000004

08001560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <HAL_RCC_GetHCLKFreq+0x14>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000000 	.word	0x20000000

08001578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800157c:	f7ff fff0 	bl	8001560 <HAL_RCC_GetHCLKFreq>
 8001580:	4602      	mov	r2, r0
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	0a9b      	lsrs	r3, r3, #10
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	4903      	ldr	r1, [pc, #12]	; (800159c <HAL_RCC_GetPCLK1Freq+0x24>)
 800158e:	5ccb      	ldrb	r3, [r1, r3]
 8001590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001594:	4618      	mov	r0, r3
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40023800 	.word	0x40023800
 800159c:	080061fc 	.word	0x080061fc

080015a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015a4:	f7ff ffdc 	bl	8001560 <HAL_RCC_GetHCLKFreq>
 80015a8:	4602      	mov	r2, r0
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	0b5b      	lsrs	r3, r3, #13
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	4903      	ldr	r1, [pc, #12]	; (80015c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015b6:	5ccb      	ldrb	r3, [r1, r3]
 80015b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015bc:	4618      	mov	r0, r3
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40023800 	.word	0x40023800
 80015c4:	080061fc 	.word	0x080061fc

080015c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	220f      	movs	r2, #15
 80015d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_RCC_GetClockConfig+0x5c>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 0203 	and.w	r2, r3, #3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <HAL_RCC_GetClockConfig+0x5c>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_RCC_GetClockConfig+0x5c>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_RCC_GetClockConfig+0x5c>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	08db      	lsrs	r3, r3, #3
 8001602:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800160a:	4b07      	ldr	r3, [pc, #28]	; (8001628 <HAL_RCC_GetClockConfig+0x60>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 020f 	and.w	r2, r3, #15
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	601a      	str	r2, [r3, #0]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800
 8001628:	40023c00 	.word	0x40023c00

0800162c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800162c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001630:	b0a6      	sub	sp, #152	; 0x98
 8001632:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800163a:	2300      	movs	r3, #0
 800163c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001652:	4bc8      	ldr	r3, [pc, #800]	; (8001974 <HAL_RCC_GetSysClockFreq+0x348>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b0c      	cmp	r3, #12
 800165c:	f200 817e 	bhi.w	800195c <HAL_RCC_GetSysClockFreq+0x330>
 8001660:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001666:	bf00      	nop
 8001668:	0800169d 	.word	0x0800169d
 800166c:	0800195d 	.word	0x0800195d
 8001670:	0800195d 	.word	0x0800195d
 8001674:	0800195d 	.word	0x0800195d
 8001678:	080016a5 	.word	0x080016a5
 800167c:	0800195d 	.word	0x0800195d
 8001680:	0800195d 	.word	0x0800195d
 8001684:	0800195d 	.word	0x0800195d
 8001688:	080016ad 	.word	0x080016ad
 800168c:	0800195d 	.word	0x0800195d
 8001690:	0800195d 	.word	0x0800195d
 8001694:	0800195d 	.word	0x0800195d
 8001698:	08001817 	.word	0x08001817
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800169c:	4bb6      	ldr	r3, [pc, #728]	; (8001978 <HAL_RCC_GetSysClockFreq+0x34c>)
 800169e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80016a2:	e15f      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016a4:	4bb5      	ldr	r3, [pc, #724]	; (800197c <HAL_RCC_GetSysClockFreq+0x350>)
 80016a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80016aa:	e15b      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016ac:	4bb1      	ldr	r3, [pc, #708]	; (8001974 <HAL_RCC_GetSysClockFreq+0x348>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016b8:	4bae      	ldr	r3, [pc, #696]	; (8001974 <HAL_RCC_GetSysClockFreq+0x348>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d031      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c4:	4bab      	ldr	r3, [pc, #684]	; (8001974 <HAL_RCC_GetSysClockFreq+0x348>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	099b      	lsrs	r3, r3, #6
 80016ca:	2200      	movs	r2, #0
 80016cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80016ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80016d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016d6:	663b      	str	r3, [r7, #96]	; 0x60
 80016d8:	2300      	movs	r3, #0
 80016da:	667b      	str	r3, [r7, #100]	; 0x64
 80016dc:	4ba7      	ldr	r3, [pc, #668]	; (800197c <HAL_RCC_GetSysClockFreq+0x350>)
 80016de:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016e2:	462a      	mov	r2, r5
 80016e4:	fb03 f202 	mul.w	r2, r3, r2
 80016e8:	2300      	movs	r3, #0
 80016ea:	4621      	mov	r1, r4
 80016ec:	fb01 f303 	mul.w	r3, r1, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	4aa2      	ldr	r2, [pc, #648]	; (800197c <HAL_RCC_GetSysClockFreq+0x350>)
 80016f4:	4621      	mov	r1, r4
 80016f6:	fba1 1202 	umull	r1, r2, r1, r2
 80016fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80016fc:	460a      	mov	r2, r1
 80016fe:	67ba      	str	r2, [r7, #120]	; 0x78
 8001700:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001702:	4413      	add	r3, r2
 8001704:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001706:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800170a:	2200      	movs	r2, #0
 800170c:	65bb      	str	r3, [r7, #88]	; 0x58
 800170e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001710:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001714:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001718:	f7fe fdd2 	bl	80002c0 <__aeabi_uldivmod>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4613      	mov	r3, r2
 8001722:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001726:	e064      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001728:	4b92      	ldr	r3, [pc, #584]	; (8001974 <HAL_RCC_GetSysClockFreq+0x348>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	099b      	lsrs	r3, r3, #6
 800172e:	2200      	movs	r2, #0
 8001730:	653b      	str	r3, [r7, #80]	; 0x50
 8001732:	657a      	str	r2, [r7, #84]	; 0x54
 8001734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800173a:	64bb      	str	r3, [r7, #72]	; 0x48
 800173c:	2300      	movs	r3, #0
 800173e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001740:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001744:	4622      	mov	r2, r4
 8001746:	462b      	mov	r3, r5
 8001748:	f04f 0000 	mov.w	r0, #0
 800174c:	f04f 0100 	mov.w	r1, #0
 8001750:	0159      	lsls	r1, r3, #5
 8001752:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001756:	0150      	lsls	r0, r2, #5
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4621      	mov	r1, r4
 800175e:	1a51      	subs	r1, r2, r1
 8001760:	6139      	str	r1, [r7, #16]
 8001762:	4629      	mov	r1, r5
 8001764:	eb63 0301 	sbc.w	r3, r3, r1
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001776:	4659      	mov	r1, fp
 8001778:	018b      	lsls	r3, r1, #6
 800177a:	4651      	mov	r1, sl
 800177c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001780:	4651      	mov	r1, sl
 8001782:	018a      	lsls	r2, r1, #6
 8001784:	4651      	mov	r1, sl
 8001786:	ebb2 0801 	subs.w	r8, r2, r1
 800178a:	4659      	mov	r1, fp
 800178c:	eb63 0901 	sbc.w	r9, r3, r1
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800179c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017a4:	4690      	mov	r8, r2
 80017a6:	4699      	mov	r9, r3
 80017a8:	4623      	mov	r3, r4
 80017aa:	eb18 0303 	adds.w	r3, r8, r3
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	462b      	mov	r3, r5
 80017b2:	eb49 0303 	adc.w	r3, r9, r3
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017c4:	4629      	mov	r1, r5
 80017c6:	028b      	lsls	r3, r1, #10
 80017c8:	4621      	mov	r1, r4
 80017ca:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017ce:	4621      	mov	r1, r4
 80017d0:	028a      	lsls	r2, r1, #10
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017da:	2200      	movs	r2, #0
 80017dc:	643b      	str	r3, [r7, #64]	; 0x40
 80017de:	647a      	str	r2, [r7, #68]	; 0x44
 80017e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80017e4:	f7fe fd6c 	bl	80002c0 <__aeabi_uldivmod>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4613      	mov	r3, r2
 80017ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017f2:	4b60      	ldr	r3, [pc, #384]	; (8001974 <HAL_RCC_GetSysClockFreq+0x348>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	0c1b      	lsrs	r3, r3, #16
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	3301      	adds	r3, #1
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001804:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001808:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800180c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001810:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001814:	e0a6      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001816:	4b57      	ldr	r3, [pc, #348]	; (8001974 <HAL_RCC_GetSysClockFreq+0x348>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800181e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001822:	4b54      	ldr	r3, [pc, #336]	; (8001974 <HAL_RCC_GetSysClockFreq+0x348>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d02a      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182e:	4b51      	ldr	r3, [pc, #324]	; (8001974 <HAL_RCC_GetSysClockFreq+0x348>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	099b      	lsrs	r3, r3, #6
 8001834:	2200      	movs	r2, #0
 8001836:	63bb      	str	r3, [r7, #56]	; 0x38
 8001838:	63fa      	str	r2, [r7, #60]	; 0x3c
 800183a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800183c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001840:	2100      	movs	r1, #0
 8001842:	4b4e      	ldr	r3, [pc, #312]	; (800197c <HAL_RCC_GetSysClockFreq+0x350>)
 8001844:	fb03 f201 	mul.w	r2, r3, r1
 8001848:	2300      	movs	r3, #0
 800184a:	fb00 f303 	mul.w	r3, r0, r3
 800184e:	4413      	add	r3, r2
 8001850:	4a4a      	ldr	r2, [pc, #296]	; (800197c <HAL_RCC_GetSysClockFreq+0x350>)
 8001852:	fba0 1202 	umull	r1, r2, r0, r2
 8001856:	677a      	str	r2, [r7, #116]	; 0x74
 8001858:	460a      	mov	r2, r1
 800185a:	673a      	str	r2, [r7, #112]	; 0x70
 800185c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800185e:	4413      	add	r3, r2
 8001860:	677b      	str	r3, [r7, #116]	; 0x74
 8001862:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001866:	2200      	movs	r2, #0
 8001868:	633b      	str	r3, [r7, #48]	; 0x30
 800186a:	637a      	str	r2, [r7, #52]	; 0x34
 800186c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001870:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001874:	f7fe fd24 	bl	80002c0 <__aeabi_uldivmod>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4613      	mov	r3, r2
 800187e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001882:	e05b      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001884:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <HAL_RCC_GetSysClockFreq+0x348>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	099b      	lsrs	r3, r3, #6
 800188a:	2200      	movs	r2, #0
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
 800188e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001896:	623b      	str	r3, [r7, #32]
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
 800189c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018a0:	4642      	mov	r2, r8
 80018a2:	464b      	mov	r3, r9
 80018a4:	f04f 0000 	mov.w	r0, #0
 80018a8:	f04f 0100 	mov.w	r1, #0
 80018ac:	0159      	lsls	r1, r3, #5
 80018ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018b2:	0150      	lsls	r0, r2, #5
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4641      	mov	r1, r8
 80018ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80018be:	4649      	mov	r1, r9
 80018c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018d8:	ebb2 040a 	subs.w	r4, r2, sl
 80018dc:	eb63 050b 	sbc.w	r5, r3, fp
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	00eb      	lsls	r3, r5, #3
 80018ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018ee:	00e2      	lsls	r2, r4, #3
 80018f0:	4614      	mov	r4, r2
 80018f2:	461d      	mov	r5, r3
 80018f4:	4643      	mov	r3, r8
 80018f6:	18e3      	adds	r3, r4, r3
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	464b      	mov	r3, r9
 80018fc:	eb45 0303 	adc.w	r3, r5, r3
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800190e:	4629      	mov	r1, r5
 8001910:	028b      	lsls	r3, r1, #10
 8001912:	4621      	mov	r1, r4
 8001914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001918:	4621      	mov	r1, r4
 800191a:	028a      	lsls	r2, r1, #10
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001924:	2200      	movs	r2, #0
 8001926:	61bb      	str	r3, [r7, #24]
 8001928:	61fa      	str	r2, [r7, #28]
 800192a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800192e:	f7fe fcc7 	bl	80002c0 <__aeabi_uldivmod>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4613      	mov	r3, r2
 8001938:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800193c:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <HAL_RCC_GetSysClockFreq+0x348>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	0f1b      	lsrs	r3, r3, #28
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800194a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800194e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800195a:	e003      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_RCC_GetSysClockFreq+0x34c>)
 800195e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001962:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001964:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001968:	4618      	mov	r0, r3
 800196a:	3798      	adds	r7, #152	; 0x98
 800196c:	46bd      	mov	sp, r7
 800196e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800
 8001978:	00f42400 	.word	0x00f42400
 800197c:	017d7840 	.word	0x017d7840

08001980 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e28d      	b.n	8001eae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 8083 	beq.w	8001aa6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019a0:	4b94      	ldr	r3, [pc, #592]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d019      	beq.n	80019e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019ac:	4b91      	ldr	r3, [pc, #580]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d106      	bne.n	80019c6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019b8:	4b8e      	ldr	r3, [pc, #568]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019c4:	d00c      	beq.n	80019e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c6:	4b8b      	ldr	r3, [pc, #556]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019ce:	2b0c      	cmp	r3, #12
 80019d0:	d112      	bne.n	80019f8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019d2:	4b88      	ldr	r3, [pc, #544]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019de:	d10b      	bne.n	80019f8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e0:	4b84      	ldr	r3, [pc, #528]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d05b      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x124>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d157      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e25a      	b.n	8001eae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a00:	d106      	bne.n	8001a10 <HAL_RCC_OscConfig+0x90>
 8001a02:	4b7c      	ldr	r3, [pc, #496]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a7b      	ldr	r2, [pc, #492]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	e01d      	b.n	8001a4c <HAL_RCC_OscConfig+0xcc>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0xb4>
 8001a1a:	4b76      	ldr	r3, [pc, #472]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a75      	ldr	r2, [pc, #468]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	4b73      	ldr	r3, [pc, #460]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a72      	ldr	r2, [pc, #456]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e00b      	b.n	8001a4c <HAL_RCC_OscConfig+0xcc>
 8001a34:	4b6f      	ldr	r3, [pc, #444]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a6e      	ldr	r2, [pc, #440]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b6c      	ldr	r3, [pc, #432]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a6b      	ldr	r2, [pc, #428]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d013      	beq.n	8001a7c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff f9d0 	bl	8000df8 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff f9cc 	bl	8000df8 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e21f      	b.n	8001eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	4b61      	ldr	r3, [pc, #388]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0xdc>
 8001a7a:	e014      	b.n	8001aa6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7c:	f7ff f9bc 	bl	8000df8 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a84:	f7ff f9b8 	bl	8000df8 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	; 0x64
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e20b      	b.n	8001eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a96:	4b57      	ldr	r3, [pc, #348]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x104>
 8001aa2:	e000      	b.n	8001aa6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d06f      	beq.n	8001b92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ab2:	4b50      	ldr	r3, [pc, #320]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d017      	beq.n	8001aee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001abe:	4b4d      	ldr	r3, [pc, #308]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d105      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001aca:	4b4a      	ldr	r3, [pc, #296]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00b      	beq.n	8001aee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ad6:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d11c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae2:	4b44      	ldr	r3, [pc, #272]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d116      	bne.n	8001b1c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	4b41      	ldr	r3, [pc, #260]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d005      	beq.n	8001b06 <HAL_RCC_OscConfig+0x186>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d001      	beq.n	8001b06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e1d3      	b.n	8001eae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b06:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4937      	ldr	r1, [pc, #220]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1a:	e03a      	b.n	8001b92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d020      	beq.n	8001b66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b24:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <HAL_RCC_OscConfig+0x278>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7ff f965 	bl	8000df8 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b32:	f7ff f961 	bl	8000df8 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e1b4      	b.n	8001eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b44:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4925      	ldr	r1, [pc, #148]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	600b      	str	r3, [r1, #0]
 8001b64:	e015      	b.n	8001b92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b66:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <HAL_RCC_OscConfig+0x278>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff f944 	bl	8000df8 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b74:	f7ff f940 	bl	8000df8 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e193      	b.n	8001eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d036      	beq.n	8001c0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d016      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HAL_RCC_OscConfig+0x27c>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff f924 	bl	8000df8 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff f920 	bl	8000df8 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e173      	b.n	8001eae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x234>
 8001bd2:	e01b      	b.n	8001c0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_RCC_OscConfig+0x27c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bda:	f7ff f90d 	bl	8000df8 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be0:	e00e      	b.n	8001c00 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be2:	f7ff f909 	bl	8000df8 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d907      	bls.n	8001c00 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e15c      	b.n	8001eae <HAL_RCC_OscConfig+0x52e>
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	42470000 	.word	0x42470000
 8001bfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	4b8a      	ldr	r3, [pc, #552]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1ea      	bne.n	8001be2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 8097 	beq.w	8001d48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1e:	4b83      	ldr	r3, [pc, #524]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10f      	bne.n	8001c4a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	4b7f      	ldr	r3, [pc, #508]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a7e      	ldr	r2, [pc, #504]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b7c      	ldr	r3, [pc, #496]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c46:	2301      	movs	r3, #1
 8001c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4a:	4b79      	ldr	r3, [pc, #484]	; (8001e30 <HAL_RCC_OscConfig+0x4b0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d118      	bne.n	8001c88 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c56:	4b76      	ldr	r3, [pc, #472]	; (8001e30 <HAL_RCC_OscConfig+0x4b0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a75      	ldr	r2, [pc, #468]	; (8001e30 <HAL_RCC_OscConfig+0x4b0>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c62:	f7ff f8c9 	bl	8000df8 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6a:	f7ff f8c5 	bl	8000df8 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e118      	b.n	8001eae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7c:	4b6c      	ldr	r3, [pc, #432]	; (8001e30 <HAL_RCC_OscConfig+0x4b0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d106      	bne.n	8001c9e <HAL_RCC_OscConfig+0x31e>
 8001c90:	4b66      	ldr	r3, [pc, #408]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c94:	4a65      	ldr	r2, [pc, #404]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9c:	e01c      	b.n	8001cd8 <HAL_RCC_OscConfig+0x358>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b05      	cmp	r3, #5
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x340>
 8001ca6:	4b61      	ldr	r3, [pc, #388]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001caa:	4a60      	ldr	r2, [pc, #384]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb2:	4b5e      	ldr	r3, [pc, #376]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb6:	4a5d      	ldr	r2, [pc, #372]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0x358>
 8001cc0:	4b5a      	ldr	r3, [pc, #360]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc4:	4a59      	ldr	r2, [pc, #356]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	6713      	str	r3, [r2, #112]	; 0x70
 8001ccc:	4b57      	ldr	r3, [pc, #348]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd0:	4a56      	ldr	r2, [pc, #344]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001cd2:	f023 0304 	bic.w	r3, r3, #4
 8001cd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d015      	beq.n	8001d0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7ff f88a 	bl	8000df8 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7ff f886 	bl	8000df8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e0d7      	b.n	8001eae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfe:	4b4b      	ldr	r3, [pc, #300]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0ee      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x368>
 8001d0a:	e014      	b.n	8001d36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0c:	f7ff f874 	bl	8000df8 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d12:	e00a      	b.n	8001d2a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d14:	f7ff f870 	bl	8000df8 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e0c1      	b.n	8001eae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2a:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1ee      	bne.n	8001d14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d105      	bne.n	8001d48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3c:	4b3b      	ldr	r3, [pc, #236]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	4a3a      	ldr	r2, [pc, #232]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 80ad 	beq.w	8001eac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d52:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d060      	beq.n	8001e20 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d145      	bne.n	8001df2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d66:	4b33      	ldr	r3, [pc, #204]	; (8001e34 <HAL_RCC_OscConfig+0x4b4>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff f844 	bl	8000df8 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d74:	f7ff f840 	bl	8000df8 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e093      	b.n	8001eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d86:	4b29      	ldr	r3, [pc, #164]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69da      	ldr	r2, [r3, #28]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	019b      	lsls	r3, r3, #6
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	085b      	lsrs	r3, r3, #1
 8001daa:	3b01      	subs	r3, #1
 8001dac:	041b      	lsls	r3, r3, #16
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	061b      	lsls	r3, r3, #24
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	071b      	lsls	r3, r3, #28
 8001dbe:	491b      	ldr	r1, [pc, #108]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <HAL_RCC_OscConfig+0x4b4>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	f7ff f815 	bl	8000df8 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7ff f811 	bl	8000df8 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e064      	b.n	8001eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x452>
 8001df0:	e05c      	b.n	8001eac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_RCC_OscConfig+0x4b4>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7fe fffe 	bl	8000df8 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e00:	f7fe fffa 	bl	8000df8 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e04d      	b.n	8001eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_RCC_OscConfig+0x4ac>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x480>
 8001e1e:	e045      	b.n	8001eac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d107      	bne.n	8001e38 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e040      	b.n	8001eae <HAL_RCC_OscConfig+0x52e>
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40007000 	.word	0x40007000
 8001e34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e38:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <HAL_RCC_OscConfig+0x538>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d030      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d129      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d122      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e68:	4013      	ands	r3, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d119      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	085b      	lsrs	r3, r3, #1
 8001e80:	3b01      	subs	r3, #1
 8001e82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d10f      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d107      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800

08001ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e041      	b.n	8001f52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f839 	bl	8001f5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f000 f9d8 	bl	80022b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d001      	beq.n	8001f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e04e      	b.n	8002026 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a23      	ldr	r2, [pc, #140]	; (8002034 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d022      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0x80>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb2:	d01d      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0x80>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1f      	ldr	r2, [pc, #124]	; (8002038 <HAL_TIM_Base_Start_IT+0xc8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d018      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0x80>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1e      	ldr	r2, [pc, #120]	; (800203c <HAL_TIM_Base_Start_IT+0xcc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d013      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0x80>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00e      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0x80>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d009      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0x80>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a19      	ldr	r2, [pc, #100]	; (8002048 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d004      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0x80>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a18      	ldr	r2, [pc, #96]	; (800204c <HAL_TIM_Base_Start_IT+0xdc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d111      	bne.n	8002014 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d010      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0201 	orr.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002012:	e007      	b.n	8002024 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40010000 	.word	0x40010000
 8002038:	40000400 	.word	0x40000400
 800203c:	40000800 	.word	0x40000800
 8002040:	40000c00 	.word	0x40000c00
 8002044:	40010400 	.word	0x40010400
 8002048:	40014000 	.word	0x40014000
 800204c:	40001800 	.word	0x40001800

08002050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b02      	cmp	r3, #2
 8002064:	d122      	bne.n	80020ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b02      	cmp	r3, #2
 8002072:	d11b      	bne.n	80020ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0202 	mvn.w	r2, #2
 800207c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f8ee 	bl	8002274 <HAL_TIM_IC_CaptureCallback>
 8002098:	e005      	b.n	80020a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f8e0 	bl	8002260 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f8f1 	bl	8002288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d122      	bne.n	8002100 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d11b      	bne.n	8002100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0204 	mvn.w	r2, #4
 80020d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2202      	movs	r2, #2
 80020d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f8c4 	bl	8002274 <HAL_TIM_IC_CaptureCallback>
 80020ec:	e005      	b.n	80020fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f8b6 	bl	8002260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f8c7 	bl	8002288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b08      	cmp	r3, #8
 800210c:	d122      	bne.n	8002154 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b08      	cmp	r3, #8
 800211a:	d11b      	bne.n	8002154 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0208 	mvn.w	r2, #8
 8002124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2204      	movs	r2, #4
 800212a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f89a 	bl	8002274 <HAL_TIM_IC_CaptureCallback>
 8002140:	e005      	b.n	800214e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f88c 	bl	8002260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f89d 	bl	8002288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b10      	cmp	r3, #16
 8002160:	d122      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b10      	cmp	r3, #16
 800216e:	d11b      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0210 	mvn.w	r2, #16
 8002178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2208      	movs	r2, #8
 800217e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f870 	bl	8002274 <HAL_TIM_IC_CaptureCallback>
 8002194:	e005      	b.n	80021a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f862 	bl	8002260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f873 	bl	8002288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d10e      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d107      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0201 	mvn.w	r2, #1
 80021cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7fe fc4c 	bl	8000a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021de:	2b80      	cmp	r3, #128	; 0x80
 80021e0:	d10e      	bne.n	8002200 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ec:	2b80      	cmp	r3, #128	; 0x80
 80021ee:	d107      	bne.n	8002200 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f902 	bl	8002404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220a:	2b40      	cmp	r3, #64	; 0x40
 800220c:	d10e      	bne.n	800222c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002218:	2b40      	cmp	r3, #64	; 0x40
 800221a:	d107      	bne.n	800222c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f838 	bl	800229c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b20      	cmp	r3, #32
 8002238:	d10e      	bne.n	8002258 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0320 	and.w	r3, r3, #32
 8002244:	2b20      	cmp	r3, #32
 8002246:	d107      	bne.n	8002258 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0220 	mvn.w	r2, #32
 8002250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f8cc 	bl	80023f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a40      	ldr	r2, [pc, #256]	; (80023c4 <TIM_Base_SetConfig+0x114>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d013      	beq.n	80022f0 <TIM_Base_SetConfig+0x40>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ce:	d00f      	beq.n	80022f0 <TIM_Base_SetConfig+0x40>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a3d      	ldr	r2, [pc, #244]	; (80023c8 <TIM_Base_SetConfig+0x118>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d00b      	beq.n	80022f0 <TIM_Base_SetConfig+0x40>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a3c      	ldr	r2, [pc, #240]	; (80023cc <TIM_Base_SetConfig+0x11c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d007      	beq.n	80022f0 <TIM_Base_SetConfig+0x40>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a3b      	ldr	r2, [pc, #236]	; (80023d0 <TIM_Base_SetConfig+0x120>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d003      	beq.n	80022f0 <TIM_Base_SetConfig+0x40>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a3a      	ldr	r2, [pc, #232]	; (80023d4 <TIM_Base_SetConfig+0x124>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d108      	bne.n	8002302 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	4313      	orrs	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a2f      	ldr	r2, [pc, #188]	; (80023c4 <TIM_Base_SetConfig+0x114>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d02b      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002310:	d027      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a2c      	ldr	r2, [pc, #176]	; (80023c8 <TIM_Base_SetConfig+0x118>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d023      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a2b      	ldr	r2, [pc, #172]	; (80023cc <TIM_Base_SetConfig+0x11c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d01f      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a2a      	ldr	r2, [pc, #168]	; (80023d0 <TIM_Base_SetConfig+0x120>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d01b      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a29      	ldr	r2, [pc, #164]	; (80023d4 <TIM_Base_SetConfig+0x124>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d017      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a28      	ldr	r2, [pc, #160]	; (80023d8 <TIM_Base_SetConfig+0x128>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d013      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a27      	ldr	r2, [pc, #156]	; (80023dc <TIM_Base_SetConfig+0x12c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00f      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a26      	ldr	r2, [pc, #152]	; (80023e0 <TIM_Base_SetConfig+0x130>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00b      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a25      	ldr	r2, [pc, #148]	; (80023e4 <TIM_Base_SetConfig+0x134>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a24      	ldr	r2, [pc, #144]	; (80023e8 <TIM_Base_SetConfig+0x138>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d003      	beq.n	8002362 <TIM_Base_SetConfig+0xb2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a23      	ldr	r2, [pc, #140]	; (80023ec <TIM_Base_SetConfig+0x13c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d108      	bne.n	8002374 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4313      	orrs	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	4313      	orrs	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <TIM_Base_SetConfig+0x114>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d003      	beq.n	80023a8 <TIM_Base_SetConfig+0xf8>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a0c      	ldr	r2, [pc, #48]	; (80023d4 <TIM_Base_SetConfig+0x124>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d103      	bne.n	80023b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	615a      	str	r2, [r3, #20]
}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40000800 	.word	0x40000800
 80023d0:	40000c00 	.word	0x40000c00
 80023d4:	40010400 	.word	0x40010400
 80023d8:	40014000 	.word	0x40014000
 80023dc:	40014400 	.word	0x40014400
 80023e0:	40014800 	.word	0x40014800
 80023e4:	40001800 	.word	0x40001800
 80023e8:	40001c00 	.word	0x40001c00
 80023ec:	40002000 	.word	0x40002000

080023f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e03f      	b.n	80024aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7fe fb58 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2224      	movs	r2, #36	; 0x24
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800245a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f929 	bl	80026b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695a      	ldr	r2, [r3, #20]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b08a      	sub	sp, #40	; 0x28
 80024b6:	af02      	add	r7, sp, #8
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	4613      	mov	r3, r2
 80024c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	d17c      	bne.n	80025cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <HAL_UART_Transmit+0x2c>
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e075      	b.n	80025ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_UART_Transmit+0x3e>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e06e      	b.n	80025ce <HAL_UART_Transmit+0x11c>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2221      	movs	r2, #33	; 0x21
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002506:	f7fe fc77 	bl	8000df8 <HAL_GetTick>
 800250a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	88fa      	ldrh	r2, [r7, #6]
 8002510:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	88fa      	ldrh	r2, [r7, #6]
 8002516:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002520:	d108      	bne.n	8002534 <HAL_UART_Transmit+0x82>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d104      	bne.n	8002534 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	e003      	b.n	800253c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002544:	e02a      	b.n	800259c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2200      	movs	r2, #0
 800254e:	2180      	movs	r1, #128	; 0x80
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f840 	bl	80025d6 <UART_WaitOnFlagUntilTimeout>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e036      	b.n	80025ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10b      	bne.n	800257e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002574:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	3302      	adds	r3, #2
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	e007      	b.n	800258e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	3301      	adds	r3, #1
 800258c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1cf      	bne.n	8002546 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2200      	movs	r2, #0
 80025ae:	2140      	movs	r1, #64	; 0x40
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 f810 	bl	80025d6 <UART_WaitOnFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e006      	b.n	80025ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	e000      	b.n	80025ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80025cc:	2302      	movs	r3, #2
  }
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3720      	adds	r7, #32
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b090      	sub	sp, #64	; 0x40
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	4613      	mov	r3, r2
 80025e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025e6:	e050      	b.n	800268a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ee:	d04c      	beq.n	800268a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d007      	beq.n	8002606 <UART_WaitOnFlagUntilTimeout+0x30>
 80025f6:	f7fe fbff 	bl	8000df8 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002602:	429a      	cmp	r2, r3
 8002604:	d241      	bcs.n	800268a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	330c      	adds	r3, #12
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	e853 3f00 	ldrex	r3, [r3]
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800261c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	330c      	adds	r3, #12
 8002624:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002626:	637a      	str	r2, [r7, #52]	; 0x34
 8002628:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800262c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800262e:	e841 2300 	strex	r3, r2, [r1]
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1e5      	bne.n	8002606 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3314      	adds	r3, #20
 8002640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	e853 3f00 	ldrex	r3, [r3]
 8002648:	613b      	str	r3, [r7, #16]
   return(result);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	63bb      	str	r3, [r7, #56]	; 0x38
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3314      	adds	r3, #20
 8002658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800265a:	623a      	str	r2, [r7, #32]
 800265c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265e:	69f9      	ldr	r1, [r7, #28]
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	e841 2300 	strex	r3, r2, [r1]
 8002666:	61bb      	str	r3, [r7, #24]
   return(result);
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1e5      	bne.n	800263a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2220      	movs	r2, #32
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2220      	movs	r2, #32
 800267a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e00f      	b.n	80026aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4013      	ands	r3, r2
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	429a      	cmp	r2, r3
 8002698:	bf0c      	ite	eq
 800269a:	2301      	moveq	r3, #1
 800269c:	2300      	movne	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d09f      	beq.n	80025e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3740      	adds	r7, #64	; 0x40
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b8:	b0c0      	sub	sp, #256	; 0x100
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d0:	68d9      	ldr	r1, [r3, #12]
 80026d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	ea40 0301 	orr.w	r3, r0, r1
 80026dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800270c:	f021 010c 	bic.w	r1, r1, #12
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800271a:	430b      	orrs	r3, r1
 800271c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800271e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800272a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800272e:	6999      	ldr	r1, [r3, #24]
 8002730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	ea40 0301 	orr.w	r3, r0, r1
 800273a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800273c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4b8f      	ldr	r3, [pc, #572]	; (8002980 <UART_SetConfig+0x2cc>)
 8002744:	429a      	cmp	r2, r3
 8002746:	d005      	beq.n	8002754 <UART_SetConfig+0xa0>
 8002748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	4b8d      	ldr	r3, [pc, #564]	; (8002984 <UART_SetConfig+0x2d0>)
 8002750:	429a      	cmp	r2, r3
 8002752:	d104      	bne.n	800275e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002754:	f7fe ff24 	bl	80015a0 <HAL_RCC_GetPCLK2Freq>
 8002758:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800275c:	e003      	b.n	8002766 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800275e:	f7fe ff0b 	bl	8001578 <HAL_RCC_GetPCLK1Freq>
 8002762:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002770:	f040 810c 	bne.w	800298c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002778:	2200      	movs	r2, #0
 800277a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800277e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002782:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002786:	4622      	mov	r2, r4
 8002788:	462b      	mov	r3, r5
 800278a:	1891      	adds	r1, r2, r2
 800278c:	65b9      	str	r1, [r7, #88]	; 0x58
 800278e:	415b      	adcs	r3, r3
 8002790:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002792:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002796:	4621      	mov	r1, r4
 8002798:	eb12 0801 	adds.w	r8, r2, r1
 800279c:	4629      	mov	r1, r5
 800279e:	eb43 0901 	adc.w	r9, r3, r1
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027b6:	4690      	mov	r8, r2
 80027b8:	4699      	mov	r9, r3
 80027ba:	4623      	mov	r3, r4
 80027bc:	eb18 0303 	adds.w	r3, r8, r3
 80027c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80027c4:	462b      	mov	r3, r5
 80027c6:	eb49 0303 	adc.w	r3, r9, r3
 80027ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80027de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027e2:	460b      	mov	r3, r1
 80027e4:	18db      	adds	r3, r3, r3
 80027e6:	653b      	str	r3, [r7, #80]	; 0x50
 80027e8:	4613      	mov	r3, r2
 80027ea:	eb42 0303 	adc.w	r3, r2, r3
 80027ee:	657b      	str	r3, [r7, #84]	; 0x54
 80027f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80027f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80027f8:	f7fd fd62 	bl	80002c0 <__aeabi_uldivmod>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4b61      	ldr	r3, [pc, #388]	; (8002988 <UART_SetConfig+0x2d4>)
 8002802:	fba3 2302 	umull	r2, r3, r3, r2
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	011c      	lsls	r4, r3, #4
 800280a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800280e:	2200      	movs	r2, #0
 8002810:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002814:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002818:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800281c:	4642      	mov	r2, r8
 800281e:	464b      	mov	r3, r9
 8002820:	1891      	adds	r1, r2, r2
 8002822:	64b9      	str	r1, [r7, #72]	; 0x48
 8002824:	415b      	adcs	r3, r3
 8002826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002828:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800282c:	4641      	mov	r1, r8
 800282e:	eb12 0a01 	adds.w	sl, r2, r1
 8002832:	4649      	mov	r1, r9
 8002834:	eb43 0b01 	adc.w	fp, r3, r1
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002844:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800284c:	4692      	mov	sl, r2
 800284e:	469b      	mov	fp, r3
 8002850:	4643      	mov	r3, r8
 8002852:	eb1a 0303 	adds.w	r3, sl, r3
 8002856:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800285a:	464b      	mov	r3, r9
 800285c:	eb4b 0303 	adc.w	r3, fp, r3
 8002860:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002870:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002874:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002878:	460b      	mov	r3, r1
 800287a:	18db      	adds	r3, r3, r3
 800287c:	643b      	str	r3, [r7, #64]	; 0x40
 800287e:	4613      	mov	r3, r2
 8002880:	eb42 0303 	adc.w	r3, r2, r3
 8002884:	647b      	str	r3, [r7, #68]	; 0x44
 8002886:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800288a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800288e:	f7fd fd17 	bl	80002c0 <__aeabi_uldivmod>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4611      	mov	r1, r2
 8002898:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <UART_SetConfig+0x2d4>)
 800289a:	fba3 2301 	umull	r2, r3, r3, r1
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	2264      	movs	r2, #100	; 0x64
 80028a2:	fb02 f303 	mul.w	r3, r2, r3
 80028a6:	1acb      	subs	r3, r1, r3
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80028ae:	4b36      	ldr	r3, [pc, #216]	; (8002988 <UART_SetConfig+0x2d4>)
 80028b0:	fba3 2302 	umull	r2, r3, r3, r2
 80028b4:	095b      	lsrs	r3, r3, #5
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028bc:	441c      	add	r4, r3
 80028be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028c2:	2200      	movs	r2, #0
 80028c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80028cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80028d0:	4642      	mov	r2, r8
 80028d2:	464b      	mov	r3, r9
 80028d4:	1891      	adds	r1, r2, r2
 80028d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80028d8:	415b      	adcs	r3, r3
 80028da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028e0:	4641      	mov	r1, r8
 80028e2:	1851      	adds	r1, r2, r1
 80028e4:	6339      	str	r1, [r7, #48]	; 0x30
 80028e6:	4649      	mov	r1, r9
 80028e8:	414b      	adcs	r3, r1
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80028f8:	4659      	mov	r1, fp
 80028fa:	00cb      	lsls	r3, r1, #3
 80028fc:	4651      	mov	r1, sl
 80028fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002902:	4651      	mov	r1, sl
 8002904:	00ca      	lsls	r2, r1, #3
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	4603      	mov	r3, r0
 800290c:	4642      	mov	r2, r8
 800290e:	189b      	adds	r3, r3, r2
 8002910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002914:	464b      	mov	r3, r9
 8002916:	460a      	mov	r2, r1
 8002918:	eb42 0303 	adc.w	r3, r2, r3
 800291c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800292c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002930:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002934:	460b      	mov	r3, r1
 8002936:	18db      	adds	r3, r3, r3
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28
 800293a:	4613      	mov	r3, r2
 800293c:	eb42 0303 	adc.w	r3, r2, r3
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002942:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002946:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800294a:	f7fd fcb9 	bl	80002c0 <__aeabi_uldivmod>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <UART_SetConfig+0x2d4>)
 8002954:	fba3 1302 	umull	r1, r3, r3, r2
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	2164      	movs	r1, #100	; 0x64
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	3332      	adds	r3, #50	; 0x32
 8002966:	4a08      	ldr	r2, [pc, #32]	; (8002988 <UART_SetConfig+0x2d4>)
 8002968:	fba2 2303 	umull	r2, r3, r2, r3
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	f003 0207 	and.w	r2, r3, #7
 8002972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4422      	add	r2, r4
 800297a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800297c:	e106      	b.n	8002b8c <UART_SetConfig+0x4d8>
 800297e:	bf00      	nop
 8002980:	40011000 	.word	0x40011000
 8002984:	40011400 	.word	0x40011400
 8002988:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800298c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002990:	2200      	movs	r2, #0
 8002992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002996:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800299a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800299e:	4642      	mov	r2, r8
 80029a0:	464b      	mov	r3, r9
 80029a2:	1891      	adds	r1, r2, r2
 80029a4:	6239      	str	r1, [r7, #32]
 80029a6:	415b      	adcs	r3, r3
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
 80029aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029ae:	4641      	mov	r1, r8
 80029b0:	1854      	adds	r4, r2, r1
 80029b2:	4649      	mov	r1, r9
 80029b4:	eb43 0501 	adc.w	r5, r3, r1
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	00eb      	lsls	r3, r5, #3
 80029c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029c6:	00e2      	lsls	r2, r4, #3
 80029c8:	4614      	mov	r4, r2
 80029ca:	461d      	mov	r5, r3
 80029cc:	4643      	mov	r3, r8
 80029ce:	18e3      	adds	r3, r4, r3
 80029d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029d4:	464b      	mov	r3, r9
 80029d6:	eb45 0303 	adc.w	r3, r5, r3
 80029da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80029fa:	4629      	mov	r1, r5
 80029fc:	008b      	lsls	r3, r1, #2
 80029fe:	4621      	mov	r1, r4
 8002a00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a04:	4621      	mov	r1, r4
 8002a06:	008a      	lsls	r2, r1, #2
 8002a08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a0c:	f7fd fc58 	bl	80002c0 <__aeabi_uldivmod>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4b60      	ldr	r3, [pc, #384]	; (8002b98 <UART_SetConfig+0x4e4>)
 8002a16:	fba3 2302 	umull	r2, r3, r3, r2
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	011c      	lsls	r4, r3, #4
 8002a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a22:	2200      	movs	r2, #0
 8002a24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a30:	4642      	mov	r2, r8
 8002a32:	464b      	mov	r3, r9
 8002a34:	1891      	adds	r1, r2, r2
 8002a36:	61b9      	str	r1, [r7, #24]
 8002a38:	415b      	adcs	r3, r3
 8002a3a:	61fb      	str	r3, [r7, #28]
 8002a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a40:	4641      	mov	r1, r8
 8002a42:	1851      	adds	r1, r2, r1
 8002a44:	6139      	str	r1, [r7, #16]
 8002a46:	4649      	mov	r1, r9
 8002a48:	414b      	adcs	r3, r1
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a58:	4659      	mov	r1, fp
 8002a5a:	00cb      	lsls	r3, r1, #3
 8002a5c:	4651      	mov	r1, sl
 8002a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a62:	4651      	mov	r1, sl
 8002a64:	00ca      	lsls	r2, r1, #3
 8002a66:	4610      	mov	r0, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4642      	mov	r2, r8
 8002a6e:	189b      	adds	r3, r3, r2
 8002a70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a74:	464b      	mov	r3, r9
 8002a76:	460a      	mov	r2, r1
 8002a78:	eb42 0303 	adc.w	r3, r2, r3
 8002a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a98:	4649      	mov	r1, r9
 8002a9a:	008b      	lsls	r3, r1, #2
 8002a9c:	4641      	mov	r1, r8
 8002a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aa2:	4641      	mov	r1, r8
 8002aa4:	008a      	lsls	r2, r1, #2
 8002aa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002aaa:	f7fd fc09 	bl	80002c0 <__aeabi_uldivmod>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4b38      	ldr	r3, [pc, #224]	; (8002b98 <UART_SetConfig+0x4e4>)
 8002ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	2264      	movs	r2, #100	; 0x64
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	1acb      	subs	r3, r1, r3
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	3332      	adds	r3, #50	; 0x32
 8002ac8:	4a33      	ldr	r2, [pc, #204]	; (8002b98 <UART_SetConfig+0x4e4>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad4:	441c      	add	r4, r3
 8002ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ada:	2200      	movs	r2, #0
 8002adc:	673b      	str	r3, [r7, #112]	; 0x70
 8002ade:	677a      	str	r2, [r7, #116]	; 0x74
 8002ae0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ae4:	4642      	mov	r2, r8
 8002ae6:	464b      	mov	r3, r9
 8002ae8:	1891      	adds	r1, r2, r2
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	415b      	adcs	r3, r3
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002af4:	4641      	mov	r1, r8
 8002af6:	1851      	adds	r1, r2, r1
 8002af8:	6039      	str	r1, [r7, #0]
 8002afa:	4649      	mov	r1, r9
 8002afc:	414b      	adcs	r3, r1
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b0c:	4659      	mov	r1, fp
 8002b0e:	00cb      	lsls	r3, r1, #3
 8002b10:	4651      	mov	r1, sl
 8002b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b16:	4651      	mov	r1, sl
 8002b18:	00ca      	lsls	r2, r1, #3
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4642      	mov	r2, r8
 8002b22:	189b      	adds	r3, r3, r2
 8002b24:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b26:	464b      	mov	r3, r9
 8002b28:	460a      	mov	r2, r1
 8002b2a:	eb42 0303 	adc.w	r3, r2, r3
 8002b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	663b      	str	r3, [r7, #96]	; 0x60
 8002b3a:	667a      	str	r2, [r7, #100]	; 0x64
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b48:	4649      	mov	r1, r9
 8002b4a:	008b      	lsls	r3, r1, #2
 8002b4c:	4641      	mov	r1, r8
 8002b4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b52:	4641      	mov	r1, r8
 8002b54:	008a      	lsls	r2, r1, #2
 8002b56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b5a:	f7fd fbb1 	bl	80002c0 <__aeabi_uldivmod>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <UART_SetConfig+0x4e4>)
 8002b64:	fba3 1302 	umull	r1, r3, r3, r2
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	2164      	movs	r1, #100	; 0x64
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	3332      	adds	r3, #50	; 0x32
 8002b76:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <UART_SetConfig+0x4e4>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	f003 020f 	and.w	r2, r3, #15
 8002b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4422      	add	r2, r4
 8002b8a:	609a      	str	r2, [r3, #8]
}
 8002b8c:	bf00      	nop
 8002b8e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b92:	46bd      	mov	sp, r7
 8002b94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b98:	51eb851f 	.word	0x51eb851f

08002b9c <__NVIC_SetPriority>:
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	6039      	str	r1, [r7, #0]
 8002ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	db0a      	blt.n	8002bc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	490c      	ldr	r1, [pc, #48]	; (8002be8 <__NVIC_SetPriority+0x4c>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	0112      	lsls	r2, r2, #4
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002bc4:	e00a      	b.n	8002bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4908      	ldr	r1, [pc, #32]	; (8002bec <__NVIC_SetPriority+0x50>)
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	3b04      	subs	r3, #4
 8002bd4:	0112      	lsls	r2, r2, #4
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	440b      	add	r3, r1
 8002bda:	761a      	strb	r2, [r3, #24]
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000e100 	.word	0xe000e100
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <SysTick_Handler+0x1c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002bf8:	f001 fd66 	bl	80046c8 <xTaskGetSchedulerState>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d001      	beq.n	8002c06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002c02:	f002 fb51 	bl	80052a8 <xPortSysTickHandler>
  }
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	e000e010 	.word	0xe000e010

08002c10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002c14:	2100      	movs	r1, #0
 8002c16:	f06f 0004 	mvn.w	r0, #4
 8002c1a:	f7ff ffbf 	bl	8002b9c <__NVIC_SetPriority>
#endif
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c2a:	f3ef 8305 	mrs	r3, IPSR
 8002c2e:	603b      	str	r3, [r7, #0]
  return(result);
 8002c30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002c36:	f06f 0305 	mvn.w	r3, #5
 8002c3a:	607b      	str	r3, [r7, #4]
 8002c3c:	e00c      	b.n	8002c58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <osKernelInitialize+0x44>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d105      	bne.n	8002c52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002c46:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <osKernelInitialize+0x44>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	607b      	str	r3, [r7, #4]
 8002c50:	e002      	b.n	8002c58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
 8002c56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c58:	687b      	ldr	r3, [r7, #4]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000180 	.word	0x20000180

08002c6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c72:	f3ef 8305 	mrs	r3, IPSR
 8002c76:	603b      	str	r3, [r7, #0]
  return(result);
 8002c78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002c7e:	f06f 0305 	mvn.w	r3, #5
 8002c82:	607b      	str	r3, [r7, #4]
 8002c84:	e010      	b.n	8002ca8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <osKernelStart+0x48>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d109      	bne.n	8002ca2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002c8e:	f7ff ffbf 	bl	8002c10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <osKernelStart+0x48>)
 8002c94:	2202      	movs	r2, #2
 8002c96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002c98:	f001 f8ce 	bl	8003e38 <vTaskStartScheduler>
      stat = osOK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	e002      	b.n	8002ca8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ca8:	687b      	ldr	r3, [r7, #4]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000180 	.word	0x20000180

08002cb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08e      	sub	sp, #56	; 0x38
 8002cbc:	af04      	add	r7, sp, #16
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cc8:	f3ef 8305 	mrs	r3, IPSR
 8002ccc:	617b      	str	r3, [r7, #20]
  return(result);
 8002cce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d17e      	bne.n	8002dd2 <osThreadNew+0x11a>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d07b      	beq.n	8002dd2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002cde:	2318      	movs	r3, #24
 8002ce0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d045      	beq.n	8002d7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <osThreadNew+0x48>
        name = attr->name;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <osThreadNew+0x6e>
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b38      	cmp	r3, #56	; 0x38
 8002d18:	d805      	bhi.n	8002d26 <osThreadNew+0x6e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <osThreadNew+0x72>
        return (NULL);
 8002d26:	2300      	movs	r3, #0
 8002d28:	e054      	b.n	8002dd4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00e      	beq.n	8002d60 <osThreadNew+0xa8>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b5b      	cmp	r3, #91	; 0x5b
 8002d48:	d90a      	bls.n	8002d60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d006      	beq.n	8002d60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <osThreadNew+0xa8>
        mem = 1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	e010      	b.n	8002d82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10c      	bne.n	8002d82 <osThreadNew+0xca>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d108      	bne.n	8002d82 <osThreadNew+0xca>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d104      	bne.n	8002d82 <osThreadNew+0xca>
          mem = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
 8002d7c:	e001      	b.n	8002d82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d110      	bne.n	8002daa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d90:	9202      	str	r2, [sp, #8]
 8002d92:	9301      	str	r3, [sp, #4]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	6a3a      	ldr	r2, [r7, #32]
 8002d9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fdf0 	bl	8003984 <xTaskCreateStatic>
 8002da4:	4603      	mov	r3, r0
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	e013      	b.n	8002dd2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d110      	bne.n	8002dd2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	f107 0310 	add.w	r3, r7, #16
 8002db8:	9301      	str	r3, [sp, #4]
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 fe3b 	bl	8003a3e <xTaskCreate>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d001      	beq.n	8002dd2 <osThreadNew+0x11a>
            hTask = NULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002dd2:	693b      	ldr	r3, [r7, #16]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3728      	adds	r7, #40	; 0x28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4a07      	ldr	r2, [pc, #28]	; (8002e08 <vApplicationGetIdleTaskMemory+0x2c>)
 8002dec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	4a06      	ldr	r2, [pc, #24]	; (8002e0c <vApplicationGetIdleTaskMemory+0x30>)
 8002df2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2280      	movs	r2, #128	; 0x80
 8002df8:	601a      	str	r2, [r3, #0]
}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20000184 	.word	0x20000184
 8002e0c:	200001e0 	.word	0x200001e0

08002e10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4a07      	ldr	r2, [pc, #28]	; (8002e3c <vApplicationGetTimerTaskMemory+0x2c>)
 8002e20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4a06      	ldr	r2, [pc, #24]	; (8002e40 <vApplicationGetTimerTaskMemory+0x30>)
 8002e26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e2e:	601a      	str	r2, [r3, #0]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	200003e0 	.word	0x200003e0
 8002e40:	2000043c 	.word	0x2000043c

08002e44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f103 0208 	add.w	r2, r3, #8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f103 0208 	add.w	r2, r3, #8
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f103 0208 	add.w	r2, r3, #8
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b085      	sub	sp, #20
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	601a      	str	r2, [r3, #0]
}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b085      	sub	sp, #20
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d103      	bne.n	8002f06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	e00c      	b.n	8002f20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3308      	adds	r3, #8
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e002      	b.n	8002f14 <vListInsert+0x2e>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d2f6      	bcs.n	8002f0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	601a      	str	r2, [r3, #0]
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6892      	ldr	r2, [r2, #8]
 8002f6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6852      	ldr	r2, [r2, #4]
 8002f78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d103      	bne.n	8002f8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	1e5a      	subs	r2, r3, #1
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10a      	bne.n	8002fd6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002fd2:	bf00      	nop
 8002fd4:	e7fe      	b.n	8002fd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002fd6:	f002 f8d5 	bl	8005184 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe2:	68f9      	ldr	r1, [r7, #12]
 8002fe4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fe6:	fb01 f303 	mul.w	r3, r1, r3
 8002fea:	441a      	add	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003006:	3b01      	subs	r3, #1
 8003008:	68f9      	ldr	r1, [r7, #12]
 800300a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	441a      	add	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	22ff      	movs	r2, #255	; 0xff
 800301a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	22ff      	movs	r2, #255	; 0xff
 8003022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d114      	bne.n	8003056 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01a      	beq.n	800306a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3310      	adds	r3, #16
 8003038:	4618      	mov	r0, r3
 800303a:	f001 f987 	bl	800434c <xTaskRemoveFromEventList>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d012      	beq.n	800306a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <xQueueGenericReset+0xcc>)
 8003046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	e009      	b.n	800306a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	3310      	adds	r3, #16
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff fef2 	bl	8002e44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3324      	adds	r3, #36	; 0x24
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff feed 	bl	8002e44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800306a:	f002 f8bb 	bl	80051e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800306e:	2301      	movs	r3, #1
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	e000ed04 	.word	0xe000ed04

0800307c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08e      	sub	sp, #56	; 0x38
 8003080:	af02      	add	r7, sp, #8
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003094:	f383 8811 	msr	BASEPRI, r3
 8003098:	f3bf 8f6f 	isb	sy
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80030a2:	bf00      	nop
 80030a4:	e7fe      	b.n	80030a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10a      	bne.n	80030c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80030ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030be:	bf00      	nop
 80030c0:	e7fe      	b.n	80030c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <xQueueGenericCreateStatic+0x52>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <xQueueGenericCreateStatic+0x56>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <xQueueGenericCreateStatic+0x58>
 80030d2:	2300      	movs	r3, #0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10a      	bne.n	80030ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	623b      	str	r3, [r7, #32]
}
 80030ea:	bf00      	nop
 80030ec:	e7fe      	b.n	80030ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d102      	bne.n	80030fa <xQueueGenericCreateStatic+0x7e>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <xQueueGenericCreateStatic+0x82>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <xQueueGenericCreateStatic+0x84>
 80030fe:	2300      	movs	r3, #0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	61fb      	str	r3, [r7, #28]
}
 8003116:	bf00      	nop
 8003118:	e7fe      	b.n	8003118 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800311a:	2350      	movs	r3, #80	; 0x50
 800311c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b50      	cmp	r3, #80	; 0x50
 8003122:	d00a      	beq.n	800313a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	61bb      	str	r3, [r7, #24]
}
 8003136:	bf00      	nop
 8003138:	e7fe      	b.n	8003138 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800313a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00d      	beq.n	8003162 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800314e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	4613      	mov	r3, r2
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f805 	bl	800316c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003164:	4618      	mov	r0, r3
 8003166:	3730      	adds	r7, #48	; 0x30
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d103      	bne.n	8003188 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	e002      	b.n	800318e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800319a:	2101      	movs	r1, #1
 800319c:	69b8      	ldr	r0, [r7, #24]
 800319e:	f7ff ff05 	bl	8002fac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80031aa:	bf00      	nop
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08e      	sub	sp, #56	; 0x38
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80031c2:	2300      	movs	r3, #0
 80031c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10a      	bne.n	80031e6 <xQueueGenericSend+0x32>
	__asm volatile
 80031d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031e2:	bf00      	nop
 80031e4:	e7fe      	b.n	80031e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d103      	bne.n	80031f4 <xQueueGenericSend+0x40>
 80031ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <xQueueGenericSend+0x44>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <xQueueGenericSend+0x46>
 80031f8:	2300      	movs	r3, #0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10a      	bne.n	8003214 <xQueueGenericSend+0x60>
	__asm volatile
 80031fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003202:	f383 8811 	msr	BASEPRI, r3
 8003206:	f3bf 8f6f 	isb	sy
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003210:	bf00      	nop
 8003212:	e7fe      	b.n	8003212 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d103      	bne.n	8003222 <xQueueGenericSend+0x6e>
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <xQueueGenericSend+0x72>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <xQueueGenericSend+0x74>
 8003226:	2300      	movs	r3, #0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <xQueueGenericSend+0x8e>
	__asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	623b      	str	r3, [r7, #32]
}
 800323e:	bf00      	nop
 8003240:	e7fe      	b.n	8003240 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003242:	f001 fa41 	bl	80046c8 <xTaskGetSchedulerState>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d102      	bne.n	8003252 <xQueueGenericSend+0x9e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <xQueueGenericSend+0xa2>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <xQueueGenericSend+0xa4>
 8003256:	2300      	movs	r3, #0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10a      	bne.n	8003272 <xQueueGenericSend+0xbe>
	__asm volatile
 800325c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	61fb      	str	r3, [r7, #28]
}
 800326e:	bf00      	nop
 8003270:	e7fe      	b.n	8003270 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003272:	f001 ff87 	bl	8005184 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327e:	429a      	cmp	r2, r3
 8003280:	d302      	bcc.n	8003288 <xQueueGenericSend+0xd4>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d129      	bne.n	80032dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	68b9      	ldr	r1, [r7, #8]
 800328c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800328e:	f000 fa0b 	bl	80036a8 <prvCopyDataToQueue>
 8003292:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	2b00      	cmp	r3, #0
 800329a:	d010      	beq.n	80032be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	3324      	adds	r3, #36	; 0x24
 80032a0:	4618      	mov	r0, r3
 80032a2:	f001 f853 	bl	800434c <xTaskRemoveFromEventList>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d013      	beq.n	80032d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80032ac:	4b3f      	ldr	r3, [pc, #252]	; (80033ac <xQueueGenericSend+0x1f8>)
 80032ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	e00a      	b.n	80032d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80032be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d007      	beq.n	80032d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032c4:	4b39      	ldr	r3, [pc, #228]	; (80033ac <xQueueGenericSend+0x1f8>)
 80032c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032d4:	f001 ff86 	bl	80051e4 <vPortExitCritical>
				return pdPASS;
 80032d8:	2301      	movs	r3, #1
 80032da:	e063      	b.n	80033a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032e2:	f001 ff7f 	bl	80051e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e05c      	b.n	80033a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d106      	bne.n	80032fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032f0:	f107 0314 	add.w	r3, r7, #20
 80032f4:	4618      	mov	r0, r3
 80032f6:	f001 f88d 	bl	8004414 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032fa:	2301      	movs	r3, #1
 80032fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032fe:	f001 ff71 	bl	80051e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003302:	f000 fdff 	bl	8003f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003306:	f001 ff3d 	bl	8005184 <vPortEnterCritical>
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003310:	b25b      	sxtb	r3, r3
 8003312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003316:	d103      	bne.n	8003320 <xQueueGenericSend+0x16c>
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003326:	b25b      	sxtb	r3, r3
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d103      	bne.n	8003336 <xQueueGenericSend+0x182>
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003336:	f001 ff55 	bl	80051e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800333a:	1d3a      	adds	r2, r7, #4
 800333c:	f107 0314 	add.w	r3, r7, #20
 8003340:	4611      	mov	r1, r2
 8003342:	4618      	mov	r0, r3
 8003344:	f001 f87c 	bl	8004440 <xTaskCheckForTimeOut>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d124      	bne.n	8003398 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800334e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003350:	f000 faa2 	bl	8003898 <prvIsQueueFull>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d018      	beq.n	800338c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335c:	3310      	adds	r3, #16
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	4611      	mov	r1, r2
 8003362:	4618      	mov	r0, r3
 8003364:	f000 ffa2 	bl	80042ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800336a:	f000 fa2d 	bl	80037c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800336e:	f000 fdd7 	bl	8003f20 <xTaskResumeAll>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	f47f af7c 	bne.w	8003272 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800337a:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <xQueueGenericSend+0x1f8>)
 800337c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	e772      	b.n	8003272 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800338c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800338e:	f000 fa1b 	bl	80037c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003392:	f000 fdc5 	bl	8003f20 <xTaskResumeAll>
 8003396:	e76c      	b.n	8003272 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800339a:	f000 fa15 	bl	80037c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800339e:	f000 fdbf 	bl	8003f20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80033a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3738      	adds	r7, #56	; 0x38
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	e000ed04 	.word	0xe000ed04

080033b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b090      	sub	sp, #64	; 0x40
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80033c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10a      	bne.n	80033de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80033c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80033da:	bf00      	nop
 80033dc:	e7fe      	b.n	80033dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d103      	bne.n	80033ec <xQueueGenericSendFromISR+0x3c>
 80033e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <xQueueGenericSendFromISR+0x40>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <xQueueGenericSendFromISR+0x42>
 80033f0:	2300      	movs	r3, #0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10a      	bne.n	800340c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80033f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003408:	bf00      	nop
 800340a:	e7fe      	b.n	800340a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d103      	bne.n	800341a <xQueueGenericSendFromISR+0x6a>
 8003412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <xQueueGenericSendFromISR+0x6e>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <xQueueGenericSendFromISR+0x70>
 800341e:	2300      	movs	r3, #0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	623b      	str	r3, [r7, #32]
}
 8003436:	bf00      	nop
 8003438:	e7fe      	b.n	8003438 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800343a:	f001 ff85 	bl	8005348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800343e:	f3ef 8211 	mrs	r2, BASEPRI
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	61fa      	str	r2, [r7, #28]
 8003454:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003456:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800345a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	429a      	cmp	r2, r3
 8003464:	d302      	bcc.n	800346c <xQueueGenericSendFromISR+0xbc>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d12f      	bne.n	80034cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003482:	f000 f911 	bl	80036a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003486:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800348a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348e:	d112      	bne.n	80034b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	2b00      	cmp	r3, #0
 8003496:	d016      	beq.n	80034c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349a:	3324      	adds	r3, #36	; 0x24
 800349c:	4618      	mov	r0, r3
 800349e:	f000 ff55 	bl	800434c <xTaskRemoveFromEventList>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00e      	beq.n	80034c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e007      	b.n	80034c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80034b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034ba:	3301      	adds	r3, #1
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	b25a      	sxtb	r2, r3
 80034c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80034c6:	2301      	movs	r3, #1
 80034c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80034ca:	e001      	b.n	80034d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3740      	adds	r7, #64	; 0x40
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08c      	sub	sp, #48	; 0x30
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034f4:	2300      	movs	r3, #0
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <xQueueReceive+0x30>
	__asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	623b      	str	r3, [r7, #32]
}
 8003514:	bf00      	nop
 8003516:	e7fe      	b.n	8003516 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d103      	bne.n	8003526 <xQueueReceive+0x3e>
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <xQueueReceive+0x42>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <xQueueReceive+0x44>
 800352a:	2300      	movs	r3, #0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10a      	bne.n	8003546 <xQueueReceive+0x5e>
	__asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	61fb      	str	r3, [r7, #28]
}
 8003542:	bf00      	nop
 8003544:	e7fe      	b.n	8003544 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003546:	f001 f8bf 	bl	80046c8 <xTaskGetSchedulerState>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d102      	bne.n	8003556 <xQueueReceive+0x6e>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <xQueueReceive+0x72>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <xQueueReceive+0x74>
 800355a:	2300      	movs	r3, #0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10a      	bne.n	8003576 <xQueueReceive+0x8e>
	__asm volatile
 8003560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	61bb      	str	r3, [r7, #24]
}
 8003572:	bf00      	nop
 8003574:	e7fe      	b.n	8003574 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003576:	f001 fe05 	bl	8005184 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	2b00      	cmp	r3, #0
 8003584:	d01f      	beq.n	80035c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800358a:	f000 f8f7 	bl	800377c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	1e5a      	subs	r2, r3, #1
 8003592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003594:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00f      	beq.n	80035be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a0:	3310      	adds	r3, #16
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 fed2 	bl	800434c <xTaskRemoveFromEventList>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d007      	beq.n	80035be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80035ae:	4b3d      	ldr	r3, [pc, #244]	; (80036a4 <xQueueReceive+0x1bc>)
 80035b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80035be:	f001 fe11 	bl	80051e4 <vPortExitCritical>
				return pdPASS;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e069      	b.n	800369a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d103      	bne.n	80035d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035cc:	f001 fe0a 	bl	80051e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035d0:	2300      	movs	r3, #0
 80035d2:	e062      	b.n	800369a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035da:	f107 0310 	add.w	r3, r7, #16
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 ff18 	bl	8004414 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035e4:	2301      	movs	r3, #1
 80035e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035e8:	f001 fdfc 	bl	80051e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035ec:	f000 fc8a 	bl	8003f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035f0:	f001 fdc8 	bl	8005184 <vPortEnterCritical>
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035fa:	b25b      	sxtb	r3, r3
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003600:	d103      	bne.n	800360a <xQueueReceive+0x122>
 8003602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003610:	b25b      	sxtb	r3, r3
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003616:	d103      	bne.n	8003620 <xQueueReceive+0x138>
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003620:	f001 fde0 	bl	80051e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003624:	1d3a      	adds	r2, r7, #4
 8003626:	f107 0310 	add.w	r3, r7, #16
 800362a:	4611      	mov	r1, r2
 800362c:	4618      	mov	r0, r3
 800362e:	f000 ff07 	bl	8004440 <xTaskCheckForTimeOut>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d123      	bne.n	8003680 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800363a:	f000 f917 	bl	800386c <prvIsQueueEmpty>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d017      	beq.n	8003674 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003646:	3324      	adds	r3, #36	; 0x24
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	4611      	mov	r1, r2
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fe2d 	bl	80042ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003654:	f000 f8b8 	bl	80037c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003658:	f000 fc62 	bl	8003f20 <xTaskResumeAll>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d189      	bne.n	8003576 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003662:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <xQueueReceive+0x1bc>)
 8003664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	e780      	b.n	8003576 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003676:	f000 f8a7 	bl	80037c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800367a:	f000 fc51 	bl	8003f20 <xTaskResumeAll>
 800367e:	e77a      	b.n	8003576 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003682:	f000 f8a1 	bl	80037c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003686:	f000 fc4b 	bl	8003f20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800368a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800368c:	f000 f8ee 	bl	800386c <prvIsQueueEmpty>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	f43f af6f 	beq.w	8003576 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003698:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800369a:	4618      	mov	r0, r3
 800369c:	3730      	adds	r7, #48	; 0x30
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	e000ed04 	.word	0xe000ed04

080036a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10d      	bne.n	80036e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d14d      	bne.n	800376a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f001 f816 	bl	8004704 <xTaskPriorityDisinherit>
 80036d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	e043      	b.n	800376a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d119      	bne.n	800371c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6858      	ldr	r0, [r3, #4]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	461a      	mov	r2, r3
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	f002 f8a6 	bl	8005844 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	441a      	add	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	d32b      	bcc.n	800376a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	e026      	b.n	800376a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	68d8      	ldr	r0, [r3, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	461a      	mov	r2, r3
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	f002 f88c 	bl	8005844 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	425b      	negs	r3, r3
 8003736:	441a      	add	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d207      	bcs.n	8003758 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	425b      	negs	r3, r3
 8003752:	441a      	add	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d105      	bne.n	800376a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	3b01      	subs	r3, #1
 8003768:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003772:	697b      	ldr	r3, [r7, #20]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d018      	beq.n	80037c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	441a      	add	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d303      	bcc.n	80037b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68d9      	ldr	r1, [r3, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	461a      	mov	r2, r3
 80037ba:	6838      	ldr	r0, [r7, #0]
 80037bc:	f002 f842 	bl	8005844 <memcpy>
	}
}
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037d0:	f001 fcd8 	bl	8005184 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037dc:	e011      	b.n	8003802 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d012      	beq.n	800380c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3324      	adds	r3, #36	; 0x24
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fdae 	bl	800434c <xTaskRemoveFromEventList>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037f6:	f000 fe85 	bl	8004504 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003806:	2b00      	cmp	r3, #0
 8003808:	dce9      	bgt.n	80037de <prvUnlockQueue+0x16>
 800380a:	e000      	b.n	800380e <prvUnlockQueue+0x46>
					break;
 800380c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	22ff      	movs	r2, #255	; 0xff
 8003812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003816:	f001 fce5 	bl	80051e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800381a:	f001 fcb3 	bl	8005184 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003824:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003826:	e011      	b.n	800384c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d012      	beq.n	8003856 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3310      	adds	r3, #16
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fd89 	bl	800434c <xTaskRemoveFromEventList>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003840:	f000 fe60 	bl	8004504 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003844:	7bbb      	ldrb	r3, [r7, #14]
 8003846:	3b01      	subs	r3, #1
 8003848:	b2db      	uxtb	r3, r3
 800384a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800384c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003850:	2b00      	cmp	r3, #0
 8003852:	dce9      	bgt.n	8003828 <prvUnlockQueue+0x60>
 8003854:	e000      	b.n	8003858 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003856:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	22ff      	movs	r2, #255	; 0xff
 800385c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003860:	f001 fcc0 	bl	80051e4 <vPortExitCritical>
}
 8003864:	bf00      	nop
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003874:	f001 fc86 	bl	8005184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	2b00      	cmp	r3, #0
 800387e:	d102      	bne.n	8003886 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003880:	2301      	movs	r3, #1
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	e001      	b.n	800388a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800388a:	f001 fcab 	bl	80051e4 <vPortExitCritical>

	return xReturn;
 800388e:	68fb      	ldr	r3, [r7, #12]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038a0:	f001 fc70 	bl	8005184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d102      	bne.n	80038b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038b0:	2301      	movs	r3, #1
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	e001      	b.n	80038ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038ba:	f001 fc93 	bl	80051e4 <vPortExitCritical>

	return xReturn;
 80038be:	68fb      	ldr	r3, [r7, #12]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	e014      	b.n	8003902 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038d8:	4a0f      	ldr	r2, [pc, #60]	; (8003918 <vQueueAddToRegistry+0x50>)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10b      	bne.n	80038fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038e4:	490c      	ldr	r1, [pc, #48]	; (8003918 <vQueueAddToRegistry+0x50>)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <vQueueAddToRegistry+0x50>)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4413      	add	r3, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038fa:	e006      	b.n	800390a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3301      	adds	r3, #1
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b07      	cmp	r3, #7
 8003906:	d9e7      	bls.n	80038d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	2000083c 	.word	0x2000083c

0800391c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800392c:	f001 fc2a 	bl	8005184 <vPortEnterCritical>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003936:	b25b      	sxtb	r3, r3
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393c:	d103      	bne.n	8003946 <vQueueWaitForMessageRestricted+0x2a>
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800394c:	b25b      	sxtb	r3, r3
 800394e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003952:	d103      	bne.n	800395c <vQueueWaitForMessageRestricted+0x40>
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800395c:	f001 fc42 	bl	80051e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	3324      	adds	r3, #36	; 0x24
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fcbf 	bl	80042f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003976:	6978      	ldr	r0, [r7, #20]
 8003978:	f7ff ff26 	bl	80037c8 <prvUnlockQueue>
	}
 800397c:	bf00      	nop
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08e      	sub	sp, #56	; 0x38
 8003988:	af04      	add	r7, sp, #16
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	623b      	str	r3, [r7, #32]
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80039ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <xTaskCreateStatic+0x46>
	__asm volatile
 80039b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	61fb      	str	r3, [r7, #28]
}
 80039c6:	bf00      	nop
 80039c8:	e7fe      	b.n	80039c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039ca:	235c      	movs	r3, #92	; 0x5c
 80039cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	2b5c      	cmp	r3, #92	; 0x5c
 80039d2:	d00a      	beq.n	80039ea <xTaskCreateStatic+0x66>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	61bb      	str	r3, [r7, #24]
}
 80039e6:	bf00      	nop
 80039e8:	e7fe      	b.n	80039e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80039ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d01e      	beq.n	8003a30 <xTaskCreateStatic+0xac>
 80039f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d01b      	beq.n	8003a30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	2202      	movs	r2, #2
 8003a06:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	9303      	str	r3, [sp, #12]
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	9302      	str	r3, [sp, #8]
 8003a12:	f107 0314 	add.w	r3, r7, #20
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f850 	bl	8003ac8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a2a:	f000 f8dd 	bl	8003be8 <prvAddNewTaskToReadyList>
 8003a2e:	e001      	b.n	8003a34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a34:	697b      	ldr	r3, [r7, #20]
	}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3728      	adds	r7, #40	; 0x28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b08c      	sub	sp, #48	; 0x30
 8003a42:	af04      	add	r7, sp, #16
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	603b      	str	r3, [r7, #0]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f001 fcb8 	bl	80053c8 <pvPortMalloc>
 8003a58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00e      	beq.n	8003a7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a60:	205c      	movs	r0, #92	; 0x5c
 8003a62:	f001 fcb1 	bl	80053c8 <pvPortMalloc>
 8003a66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
 8003a74:	e005      	b.n	8003a82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a76:	6978      	ldr	r0, [r7, #20]
 8003a78:	f001 fd72 	bl	8005560 <vPortFree>
 8003a7c:	e001      	b.n	8003a82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d017      	beq.n	8003ab8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a90:	88fa      	ldrh	r2, [r7, #6]
 8003a92:	2300      	movs	r3, #0
 8003a94:	9303      	str	r3, [sp, #12]
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	9302      	str	r3, [sp, #8]
 8003a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f80e 	bl	8003ac8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003aac:	69f8      	ldr	r0, [r7, #28]
 8003aae:	f000 f89b 	bl	8003be8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	61bb      	str	r3, [r7, #24]
 8003ab6:	e002      	b.n	8003abe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8003abc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003abe:	69bb      	ldr	r3, [r7, #24]
	}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3720      	adds	r7, #32
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	461a      	mov	r2, r3
 8003ae0:	21a5      	movs	r1, #165	; 0xa5
 8003ae2:	f001 fe7b 	bl	80057dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003af0:	3b01      	subs	r3, #1
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	f023 0307 	bic.w	r3, r3, #7
 8003afe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0e:	f383 8811 	msr	BASEPRI, r3
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	617b      	str	r3, [r7, #20]
}
 8003b1c:	bf00      	nop
 8003b1e:	e7fe      	b.n	8003b1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d01f      	beq.n	8003b66 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b26:	2300      	movs	r3, #0
 8003b28:	61fb      	str	r3, [r7, #28]
 8003b2a:	e012      	b.n	8003b52 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	4413      	add	r3, r2
 8003b32:	7819      	ldrb	r1, [r3, #0]
 8003b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	4413      	add	r3, r2
 8003b3a:	3334      	adds	r3, #52	; 0x34
 8003b3c:	460a      	mov	r2, r1
 8003b3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	4413      	add	r3, r2
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d006      	beq.n	8003b5a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	2b0f      	cmp	r3, #15
 8003b56:	d9e9      	bls.n	8003b2c <prvInitialiseNewTask+0x64>
 8003b58:	e000      	b.n	8003b5c <prvInitialiseNewTask+0x94>
			{
				break;
 8003b5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b64:	e003      	b.n	8003b6e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	2b37      	cmp	r3, #55	; 0x37
 8003b72:	d901      	bls.n	8003b78 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b74:	2337      	movs	r3, #55	; 0x37
 8003b76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	2200      	movs	r2, #0
 8003b88:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff f978 	bl	8002e84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	3318      	adds	r3, #24
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff f973 	bl	8002e84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	68f9      	ldr	r1, [r7, #12]
 8003bc6:	69b8      	ldr	r0, [r7, #24]
 8003bc8:	f001 f9ac 	bl	8004f24 <pxPortInitialiseStack>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bde:	bf00      	nop
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bf0:	f001 fac8 	bl	8005184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bf4:	4b2d      	ldr	r3, [pc, #180]	; (8003cac <prvAddNewTaskToReadyList+0xc4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	4a2c      	ldr	r2, [pc, #176]	; (8003cac <prvAddNewTaskToReadyList+0xc4>)
 8003bfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bfe:	4b2c      	ldr	r3, [pc, #176]	; (8003cb0 <prvAddNewTaskToReadyList+0xc8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c06:	4a2a      	ldr	r2, [pc, #168]	; (8003cb0 <prvAddNewTaskToReadyList+0xc8>)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c0c:	4b27      	ldr	r3, [pc, #156]	; (8003cac <prvAddNewTaskToReadyList+0xc4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d110      	bne.n	8003c36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c14:	f000 fc9a 	bl	800454c <prvInitialiseTaskLists>
 8003c18:	e00d      	b.n	8003c36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c1a:	4b26      	ldr	r3, [pc, #152]	; (8003cb4 <prvAddNewTaskToReadyList+0xcc>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c22:	4b23      	ldr	r3, [pc, #140]	; (8003cb0 <prvAddNewTaskToReadyList+0xc8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d802      	bhi.n	8003c36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c30:	4a1f      	ldr	r2, [pc, #124]	; (8003cb0 <prvAddNewTaskToReadyList+0xc8>)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c36:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <prvAddNewTaskToReadyList+0xd0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	4a1e      	ldr	r2, [pc, #120]	; (8003cb8 <prvAddNewTaskToReadyList+0xd0>)
 8003c3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c40:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <prvAddNewTaskToReadyList+0xd0>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4c:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <prvAddNewTaskToReadyList+0xd4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d903      	bls.n	8003c5c <prvAddNewTaskToReadyList+0x74>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	4a18      	ldr	r2, [pc, #96]	; (8003cbc <prvAddNewTaskToReadyList+0xd4>)
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4a15      	ldr	r2, [pc, #84]	; (8003cc0 <prvAddNewTaskToReadyList+0xd8>)
 8003c6a:	441a      	add	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4619      	mov	r1, r3
 8003c72:	4610      	mov	r0, r2
 8003c74:	f7ff f913 	bl	8002e9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c78:	f001 fab4 	bl	80051e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c7c:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <prvAddNewTaskToReadyList+0xcc>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00e      	beq.n	8003ca2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c84:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <prvAddNewTaskToReadyList+0xc8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d207      	bcs.n	8003ca2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <prvAddNewTaskToReadyList+0xdc>)
 8003c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000d50 	.word	0x20000d50
 8003cb0:	2000087c 	.word	0x2000087c
 8003cb4:	20000d5c 	.word	0x20000d5c
 8003cb8:	20000d6c 	.word	0x20000d6c
 8003cbc:	20000d58 	.word	0x20000d58
 8003cc0:	20000880 	.word	0x20000880
 8003cc4:	e000ed04 	.word	0xe000ed04

08003cc8 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8003cd0:	f001 fa58 	bl	8005184 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d102      	bne.n	8003ce0 <uxTaskPriorityGet+0x18>
 8003cda:	4b07      	ldr	r3, [pc, #28]	; (8003cf8 <uxTaskPriorityGet+0x30>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	e000      	b.n	8003ce2 <uxTaskPriorityGet+0x1a>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8003cea:	f001 fa7b 	bl	80051e4 <vPortExitCritical>

		return uxReturn;
 8003cee:	68bb      	ldr	r3, [r7, #8]
	}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	2000087c 	.word	0x2000087c

08003cfc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b37      	cmp	r3, #55	; 0x37
 8003d0e:	d90a      	bls.n	8003d26 <vTaskPrioritySet+0x2a>
	__asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	60fb      	str	r3, [r7, #12]
}
 8003d22:	bf00      	nop
 8003d24:	e7fe      	b.n	8003d24 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b37      	cmp	r3, #55	; 0x37
 8003d2a:	d901      	bls.n	8003d30 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d2c:	2337      	movs	r3, #55	; 0x37
 8003d2e:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8003d30:	f001 fa28 	bl	8005184 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <vTaskPrioritySet+0x44>
 8003d3a:	4b3b      	ldr	r3, [pc, #236]	; (8003e28 <vTaskPrioritySet+0x12c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	e000      	b.n	8003d42 <vTaskPrioritySet+0x46>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d48:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d063      	beq.n	8003e1a <vTaskPrioritySet+0x11e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d90d      	bls.n	8003d76 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8003d5a:	4b33      	ldr	r3, [pc, #204]	; (8003e28 <vTaskPrioritySet+0x12c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d00f      	beq.n	8003d84 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8003d64:	4b30      	ldr	r3, [pc, #192]	; (8003e28 <vTaskPrioritySet+0x12c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d309      	bcc.n	8003d84 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8003d70:	2301      	movs	r3, #1
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	e006      	b.n	8003d84 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8003d76:	4b2c      	ldr	r3, [pc, #176]	; (8003e28 <vTaskPrioritySet+0x12c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d101      	bne.n	8003d84 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8003d80:	2301      	movs	r3, #1
 8003d82:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d102      	bne.n	8003d9c <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	db04      	blt.n	8003db4 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	6959      	ldr	r1, [r3, #20]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4a1a      	ldr	r2, [pc, #104]	; (8003e2c <vTaskPrioritySet+0x130>)
 8003dc4:	4413      	add	r3, r2
 8003dc6:	4299      	cmp	r1, r3
 8003dc8:	d11c      	bne.n	8003e04 <vTaskPrioritySet+0x108>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff f8c2 	bl	8002f58 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd8:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <vTaskPrioritySet+0x134>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d903      	bls.n	8003de8 <vTaskPrioritySet+0xec>
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	4a12      	ldr	r2, [pc, #72]	; (8003e30 <vTaskPrioritySet+0x134>)
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4a0d      	ldr	r2, [pc, #52]	; (8003e2c <vTaskPrioritySet+0x130>)
 8003df6:	441a      	add	r2, r3
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	f7ff f84d 	bl	8002e9e <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d007      	beq.n	8003e1a <vTaskPrioritySet+0x11e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <vTaskPrioritySet+0x138>)
 8003e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8003e1a:	f001 f9e3 	bl	80051e4 <vPortExitCritical>
	}
 8003e1e:	bf00      	nop
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	2000087c 	.word	0x2000087c
 8003e2c:	20000880 	.word	0x20000880
 8003e30:	20000d58 	.word	0x20000d58
 8003e34:	e000ed04 	.word	0xe000ed04

08003e38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08a      	sub	sp, #40	; 0x28
 8003e3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e46:	463a      	mov	r2, r7
 8003e48:	1d39      	adds	r1, r7, #4
 8003e4a:	f107 0308 	add.w	r3, r7, #8
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe ffc4 	bl	8002ddc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e54:	6839      	ldr	r1, [r7, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	9202      	str	r2, [sp, #8]
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	2300      	movs	r3, #0
 8003e64:	460a      	mov	r2, r1
 8003e66:	4921      	ldr	r1, [pc, #132]	; (8003eec <vTaskStartScheduler+0xb4>)
 8003e68:	4821      	ldr	r0, [pc, #132]	; (8003ef0 <vTaskStartScheduler+0xb8>)
 8003e6a:	f7ff fd8b 	bl	8003984 <xTaskCreateStatic>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4a20      	ldr	r2, [pc, #128]	; (8003ef4 <vTaskStartScheduler+0xbc>)
 8003e72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e74:	4b1f      	ldr	r3, [pc, #124]	; (8003ef4 <vTaskStartScheduler+0xbc>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	e001      	b.n	8003e86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d102      	bne.n	8003e92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003e8c:	f000 fcfc 	bl	8004888 <xTimerCreateTimerTask>
 8003e90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d116      	bne.n	8003ec6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	613b      	str	r3, [r7, #16]
}
 8003eaa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003eac:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <vTaskStartScheduler+0xc0>)
 8003eae:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003eb4:	4b11      	ldr	r3, [pc, #68]	; (8003efc <vTaskStartScheduler+0xc4>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003eba:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <vTaskStartScheduler+0xc8>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ec0:	f001 f8be 	bl	8005040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ec4:	e00e      	b.n	8003ee4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d10a      	bne.n	8003ee4 <vTaskStartScheduler+0xac>
	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	60fb      	str	r3, [r7, #12]
}
 8003ee0:	bf00      	nop
 8003ee2:	e7fe      	b.n	8003ee2 <vTaskStartScheduler+0xaa>
}
 8003ee4:	bf00      	nop
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	0800618c 	.word	0x0800618c
 8003ef0:	0800451d 	.word	0x0800451d
 8003ef4:	20000d74 	.word	0x20000d74
 8003ef8:	20000d70 	.word	0x20000d70
 8003efc:	20000d5c 	.word	0x20000d5c
 8003f00:	20000d54 	.word	0x20000d54

08003f04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003f08:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <vTaskSuspendAll+0x18>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	4a03      	ldr	r2, [pc, #12]	; (8003f1c <vTaskSuspendAll+0x18>)
 8003f10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003f12:	bf00      	nop
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	20000d78 	.word	0x20000d78

08003f20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f2e:	4b42      	ldr	r3, [pc, #264]	; (8004038 <xTaskResumeAll+0x118>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <xTaskResumeAll+0x2c>
	__asm volatile
 8003f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	603b      	str	r3, [r7, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	e7fe      	b.n	8003f4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f4c:	f001 f91a 	bl	8005184 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f50:	4b39      	ldr	r3, [pc, #228]	; (8004038 <xTaskResumeAll+0x118>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	4a38      	ldr	r2, [pc, #224]	; (8004038 <xTaskResumeAll+0x118>)
 8003f58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f5a:	4b37      	ldr	r3, [pc, #220]	; (8004038 <xTaskResumeAll+0x118>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d162      	bne.n	8004028 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f62:	4b36      	ldr	r3, [pc, #216]	; (800403c <xTaskResumeAll+0x11c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d05e      	beq.n	8004028 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f6a:	e02f      	b.n	8003fcc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f6c:	4b34      	ldr	r3, [pc, #208]	; (8004040 <xTaskResumeAll+0x120>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	3318      	adds	r3, #24
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fe ffed 	bl	8002f58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3304      	adds	r3, #4
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe ffe8 	bl	8002f58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8c:	4b2d      	ldr	r3, [pc, #180]	; (8004044 <xTaskResumeAll+0x124>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d903      	bls.n	8003f9c <xTaskResumeAll+0x7c>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	4a2a      	ldr	r2, [pc, #168]	; (8004044 <xTaskResumeAll+0x124>)
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4a27      	ldr	r2, [pc, #156]	; (8004048 <xTaskResumeAll+0x128>)
 8003faa:	441a      	add	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	f7fe ff73 	bl	8002e9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fbc:	4b23      	ldr	r3, [pc, #140]	; (800404c <xTaskResumeAll+0x12c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d302      	bcc.n	8003fcc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003fc6:	4b22      	ldr	r3, [pc, #136]	; (8004050 <xTaskResumeAll+0x130>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fcc:	4b1c      	ldr	r3, [pc, #112]	; (8004040 <xTaskResumeAll+0x120>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1cb      	bne.n	8003f6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003fda:	f000 fb55 	bl	8004688 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003fde:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <xTaskResumeAll+0x134>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d010      	beq.n	800400c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003fea:	f000 f847 	bl	800407c <xTaskIncrementTick>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ff4:	4b16      	ldr	r3, [pc, #88]	; (8004050 <xTaskResumeAll+0x130>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f1      	bne.n	8003fea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004006:	4b13      	ldr	r3, [pc, #76]	; (8004054 <xTaskResumeAll+0x134>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800400c:	4b10      	ldr	r3, [pc, #64]	; (8004050 <xTaskResumeAll+0x130>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d009      	beq.n	8004028 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004014:	2301      	movs	r3, #1
 8004016:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004018:	4b0f      	ldr	r3, [pc, #60]	; (8004058 <xTaskResumeAll+0x138>)
 800401a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004028:	f001 f8dc 	bl	80051e4 <vPortExitCritical>

	return xAlreadyYielded;
 800402c:	68bb      	ldr	r3, [r7, #8]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000d78 	.word	0x20000d78
 800403c:	20000d50 	.word	0x20000d50
 8004040:	20000d10 	.word	0x20000d10
 8004044:	20000d58 	.word	0x20000d58
 8004048:	20000880 	.word	0x20000880
 800404c:	2000087c 	.word	0x2000087c
 8004050:	20000d64 	.word	0x20000d64
 8004054:	20000d60 	.word	0x20000d60
 8004058:	e000ed04 	.word	0xe000ed04

0800405c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004062:	4b05      	ldr	r3, [pc, #20]	; (8004078 <xTaskGetTickCount+0x1c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004068:	687b      	ldr	r3, [r7, #4]
}
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20000d54 	.word	0x20000d54

0800407c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004086:	4b4f      	ldr	r3, [pc, #316]	; (80041c4 <xTaskIncrementTick+0x148>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f040 808f 	bne.w	80041ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004090:	4b4d      	ldr	r3, [pc, #308]	; (80041c8 <xTaskIncrementTick+0x14c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3301      	adds	r3, #1
 8004096:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004098:	4a4b      	ldr	r2, [pc, #300]	; (80041c8 <xTaskIncrementTick+0x14c>)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d120      	bne.n	80040e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80040a4:	4b49      	ldr	r3, [pc, #292]	; (80041cc <xTaskIncrementTick+0x150>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	603b      	str	r3, [r7, #0]
}
 80040c0:	bf00      	nop
 80040c2:	e7fe      	b.n	80040c2 <xTaskIncrementTick+0x46>
 80040c4:	4b41      	ldr	r3, [pc, #260]	; (80041cc <xTaskIncrementTick+0x150>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	4b41      	ldr	r3, [pc, #260]	; (80041d0 <xTaskIncrementTick+0x154>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a3f      	ldr	r2, [pc, #252]	; (80041cc <xTaskIncrementTick+0x150>)
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	4a3f      	ldr	r2, [pc, #252]	; (80041d0 <xTaskIncrementTick+0x154>)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	4b3e      	ldr	r3, [pc, #248]	; (80041d4 <xTaskIncrementTick+0x158>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	4a3d      	ldr	r2, [pc, #244]	; (80041d4 <xTaskIncrementTick+0x158>)
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	f000 fad1 	bl	8004688 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80040e6:	4b3c      	ldr	r3, [pc, #240]	; (80041d8 <xTaskIncrementTick+0x15c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d349      	bcc.n	8004184 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040f0:	4b36      	ldr	r3, [pc, #216]	; (80041cc <xTaskIncrementTick+0x150>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d104      	bne.n	8004104 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040fa:	4b37      	ldr	r3, [pc, #220]	; (80041d8 <xTaskIncrementTick+0x15c>)
 80040fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004100:	601a      	str	r2, [r3, #0]
					break;
 8004102:	e03f      	b.n	8004184 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004104:	4b31      	ldr	r3, [pc, #196]	; (80041cc <xTaskIncrementTick+0x150>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	429a      	cmp	r2, r3
 800411a:	d203      	bcs.n	8004124 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800411c:	4a2e      	ldr	r2, [pc, #184]	; (80041d8 <xTaskIncrementTick+0x15c>)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004122:	e02f      	b.n	8004184 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	3304      	adds	r3, #4
 8004128:	4618      	mov	r0, r3
 800412a:	f7fe ff15 	bl	8002f58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	2b00      	cmp	r3, #0
 8004134:	d004      	beq.n	8004140 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	3318      	adds	r3, #24
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe ff0c 	bl	8002f58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004144:	4b25      	ldr	r3, [pc, #148]	; (80041dc <xTaskIncrementTick+0x160>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d903      	bls.n	8004154 <xTaskIncrementTick+0xd8>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	4a22      	ldr	r2, [pc, #136]	; (80041dc <xTaskIncrementTick+0x160>)
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4a1f      	ldr	r2, [pc, #124]	; (80041e0 <xTaskIncrementTick+0x164>)
 8004162:	441a      	add	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	3304      	adds	r3, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f7fe fe97 	bl	8002e9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004174:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <xTaskIncrementTick+0x168>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	429a      	cmp	r2, r3
 800417c:	d3b8      	bcc.n	80040f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800417e:	2301      	movs	r3, #1
 8004180:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004182:	e7b5      	b.n	80040f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004184:	4b17      	ldr	r3, [pc, #92]	; (80041e4 <xTaskIncrementTick+0x168>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418a:	4915      	ldr	r1, [pc, #84]	; (80041e0 <xTaskIncrementTick+0x164>)
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d901      	bls.n	80041a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800419c:	2301      	movs	r3, #1
 800419e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <xTaskIncrementTick+0x16c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d007      	beq.n	80041b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80041a8:	2301      	movs	r3, #1
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	e004      	b.n	80041b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80041ae:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <xTaskIncrementTick+0x170>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3301      	adds	r3, #1
 80041b4:	4a0d      	ldr	r2, [pc, #52]	; (80041ec <xTaskIncrementTick+0x170>)
 80041b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80041b8:	697b      	ldr	r3, [r7, #20]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000d78 	.word	0x20000d78
 80041c8:	20000d54 	.word	0x20000d54
 80041cc:	20000d08 	.word	0x20000d08
 80041d0:	20000d0c 	.word	0x20000d0c
 80041d4:	20000d68 	.word	0x20000d68
 80041d8:	20000d70 	.word	0x20000d70
 80041dc:	20000d58 	.word	0x20000d58
 80041e0:	20000880 	.word	0x20000880
 80041e4:	2000087c 	.word	0x2000087c
 80041e8:	20000d64 	.word	0x20000d64
 80041ec:	20000d60 	.word	0x20000d60

080041f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041f6:	4b28      	ldr	r3, [pc, #160]	; (8004298 <vTaskSwitchContext+0xa8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041fe:	4b27      	ldr	r3, [pc, #156]	; (800429c <vTaskSwitchContext+0xac>)
 8004200:	2201      	movs	r2, #1
 8004202:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004204:	e041      	b.n	800428a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004206:	4b25      	ldr	r3, [pc, #148]	; (800429c <vTaskSwitchContext+0xac>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800420c:	4b24      	ldr	r3, [pc, #144]	; (80042a0 <vTaskSwitchContext+0xb0>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	e010      	b.n	8004236 <vTaskSwitchContext+0x46>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <vTaskSwitchContext+0x40>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	607b      	str	r3, [r7, #4]
}
 800422c:	bf00      	nop
 800422e:	e7fe      	b.n	800422e <vTaskSwitchContext+0x3e>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3b01      	subs	r3, #1
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	491b      	ldr	r1, [pc, #108]	; (80042a4 <vTaskSwitchContext+0xb4>)
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0e4      	beq.n	8004214 <vTaskSwitchContext+0x24>
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4a13      	ldr	r2, [pc, #76]	; (80042a4 <vTaskSwitchContext+0xb4>)
 8004256:	4413      	add	r3, r2
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	605a      	str	r2, [r3, #4]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	3308      	adds	r3, #8
 800426c:	429a      	cmp	r2, r3
 800426e:	d104      	bne.n	800427a <vTaskSwitchContext+0x8a>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	605a      	str	r2, [r3, #4]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4a09      	ldr	r2, [pc, #36]	; (80042a8 <vTaskSwitchContext+0xb8>)
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	4a06      	ldr	r2, [pc, #24]	; (80042a0 <vTaskSwitchContext+0xb0>)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6013      	str	r3, [r2, #0]
}
 800428a:	bf00      	nop
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	20000d78 	.word	0x20000d78
 800429c:	20000d64 	.word	0x20000d64
 80042a0:	20000d58 	.word	0x20000d58
 80042a4:	20000880 	.word	0x20000880
 80042a8:	2000087c 	.word	0x2000087c

080042ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	60fb      	str	r3, [r7, #12]
}
 80042ce:	bf00      	nop
 80042d0:	e7fe      	b.n	80042d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <vTaskPlaceOnEventList+0x44>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3318      	adds	r3, #24
 80042d8:	4619      	mov	r1, r3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fe fe03 	bl	8002ee6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042e0:	2101      	movs	r1, #1
 80042e2:	6838      	ldr	r0, [r7, #0]
 80042e4:	f000 fa7c 	bl	80047e0 <prvAddCurrentTaskToDelayedList>
}
 80042e8:	bf00      	nop
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	2000087c 	.word	0x2000087c

080042f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	617b      	str	r3, [r7, #20]
}
 8004318:	bf00      	nop
 800431a:	e7fe      	b.n	800431a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800431c:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <vTaskPlaceOnEventListRestricted+0x54>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3318      	adds	r3, #24
 8004322:	4619      	mov	r1, r3
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f7fe fdba 	bl	8002e9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004330:	f04f 33ff 	mov.w	r3, #4294967295
 8004334:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	68b8      	ldr	r0, [r7, #8]
 800433a:	f000 fa51 	bl	80047e0 <prvAddCurrentTaskToDelayedList>
	}
 800433e:	bf00      	nop
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	2000087c 	.word	0x2000087c

0800434c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	60fb      	str	r3, [r7, #12]
}
 8004374:	bf00      	nop
 8004376:	e7fe      	b.n	8004376 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	3318      	adds	r3, #24
 800437c:	4618      	mov	r0, r3
 800437e:	f7fe fdeb 	bl	8002f58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004382:	4b1e      	ldr	r3, [pc, #120]	; (80043fc <xTaskRemoveFromEventList+0xb0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d11d      	bne.n	80043c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	3304      	adds	r3, #4
 800438e:	4618      	mov	r0, r3
 8004390:	f7fe fde2 	bl	8002f58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004398:	4b19      	ldr	r3, [pc, #100]	; (8004400 <xTaskRemoveFromEventList+0xb4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d903      	bls.n	80043a8 <xTaskRemoveFromEventList+0x5c>
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	4a16      	ldr	r2, [pc, #88]	; (8004400 <xTaskRemoveFromEventList+0xb4>)
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4a13      	ldr	r2, [pc, #76]	; (8004404 <xTaskRemoveFromEventList+0xb8>)
 80043b6:	441a      	add	r2, r3
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	3304      	adds	r3, #4
 80043bc:	4619      	mov	r1, r3
 80043be:	4610      	mov	r0, r2
 80043c0:	f7fe fd6d 	bl	8002e9e <vListInsertEnd>
 80043c4:	e005      	b.n	80043d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	3318      	adds	r3, #24
 80043ca:	4619      	mov	r1, r3
 80043cc:	480e      	ldr	r0, [pc, #56]	; (8004408 <xTaskRemoveFromEventList+0xbc>)
 80043ce:	f7fe fd66 	bl	8002e9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d6:	4b0d      	ldr	r3, [pc, #52]	; (800440c <xTaskRemoveFromEventList+0xc0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	429a      	cmp	r2, r3
 80043de:	d905      	bls.n	80043ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80043e0:	2301      	movs	r3, #1
 80043e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80043e4:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <xTaskRemoveFromEventList+0xc4>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	e001      	b.n	80043f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80043f0:	697b      	ldr	r3, [r7, #20]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000d78 	.word	0x20000d78
 8004400:	20000d58 	.word	0x20000d58
 8004404:	20000880 	.word	0x20000880
 8004408:	20000d10 	.word	0x20000d10
 800440c:	2000087c 	.word	0x2000087c
 8004410:	20000d64 	.word	0x20000d64

08004414 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <vTaskInternalSetTimeOutState+0x24>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <vTaskInternalSetTimeOutState+0x28>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	605a      	str	r2, [r3, #4]
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	20000d68 	.word	0x20000d68
 800443c:	20000d54 	.word	0x20000d54

08004440 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10a      	bne.n	8004466 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	613b      	str	r3, [r7, #16]
}
 8004462:	bf00      	nop
 8004464:	e7fe      	b.n	8004464 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10a      	bne.n	8004482 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800446c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004470:	f383 8811 	msr	BASEPRI, r3
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	60fb      	str	r3, [r7, #12]
}
 800447e:	bf00      	nop
 8004480:	e7fe      	b.n	8004480 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004482:	f000 fe7f 	bl	8005184 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004486:	4b1d      	ldr	r3, [pc, #116]	; (80044fc <xTaskCheckForTimeOut+0xbc>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449e:	d102      	bne.n	80044a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61fb      	str	r3, [r7, #28]
 80044a4:	e023      	b.n	80044ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4b15      	ldr	r3, [pc, #84]	; (8004500 <xTaskCheckForTimeOut+0xc0>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d007      	beq.n	80044c2 <xTaskCheckForTimeOut+0x82>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d302      	bcc.n	80044c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80044bc:	2301      	movs	r3, #1
 80044be:	61fb      	str	r3, [r7, #28]
 80044c0:	e015      	b.n	80044ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d20b      	bcs.n	80044e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	1ad2      	subs	r2, r2, r3
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff ff9b 	bl	8004414 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	e004      	b.n	80044ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80044ea:	2301      	movs	r3, #1
 80044ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80044ee:	f000 fe79 	bl	80051e4 <vPortExitCritical>

	return xReturn;
 80044f2:	69fb      	ldr	r3, [r7, #28]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3720      	adds	r7, #32
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20000d54 	.word	0x20000d54
 8004500:	20000d68 	.word	0x20000d68

08004504 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004508:	4b03      	ldr	r3, [pc, #12]	; (8004518 <vTaskMissedYield+0x14>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]
}
 800450e:	bf00      	nop
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	20000d64 	.word	0x20000d64

0800451c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004524:	f000 f852 	bl	80045cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <prvIdleTask+0x28>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d9f9      	bls.n	8004524 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <prvIdleTask+0x2c>)
 8004532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004540:	e7f0      	b.n	8004524 <prvIdleTask+0x8>
 8004542:	bf00      	nop
 8004544:	20000880 	.word	0x20000880
 8004548:	e000ed04 	.word	0xe000ed04

0800454c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004552:	2300      	movs	r3, #0
 8004554:	607b      	str	r3, [r7, #4]
 8004556:	e00c      	b.n	8004572 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4a12      	ldr	r2, [pc, #72]	; (80045ac <prvInitialiseTaskLists+0x60>)
 8004564:	4413      	add	r3, r2
 8004566:	4618      	mov	r0, r3
 8004568:	f7fe fc6c 	bl	8002e44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3301      	adds	r3, #1
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b37      	cmp	r3, #55	; 0x37
 8004576:	d9ef      	bls.n	8004558 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004578:	480d      	ldr	r0, [pc, #52]	; (80045b0 <prvInitialiseTaskLists+0x64>)
 800457a:	f7fe fc63 	bl	8002e44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800457e:	480d      	ldr	r0, [pc, #52]	; (80045b4 <prvInitialiseTaskLists+0x68>)
 8004580:	f7fe fc60 	bl	8002e44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004584:	480c      	ldr	r0, [pc, #48]	; (80045b8 <prvInitialiseTaskLists+0x6c>)
 8004586:	f7fe fc5d 	bl	8002e44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800458a:	480c      	ldr	r0, [pc, #48]	; (80045bc <prvInitialiseTaskLists+0x70>)
 800458c:	f7fe fc5a 	bl	8002e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004590:	480b      	ldr	r0, [pc, #44]	; (80045c0 <prvInitialiseTaskLists+0x74>)
 8004592:	f7fe fc57 	bl	8002e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004596:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <prvInitialiseTaskLists+0x78>)
 8004598:	4a05      	ldr	r2, [pc, #20]	; (80045b0 <prvInitialiseTaskLists+0x64>)
 800459a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800459c:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <prvInitialiseTaskLists+0x7c>)
 800459e:	4a05      	ldr	r2, [pc, #20]	; (80045b4 <prvInitialiseTaskLists+0x68>)
 80045a0:	601a      	str	r2, [r3, #0]
}
 80045a2:	bf00      	nop
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000880 	.word	0x20000880
 80045b0:	20000ce0 	.word	0x20000ce0
 80045b4:	20000cf4 	.word	0x20000cf4
 80045b8:	20000d10 	.word	0x20000d10
 80045bc:	20000d24 	.word	0x20000d24
 80045c0:	20000d3c 	.word	0x20000d3c
 80045c4:	20000d08 	.word	0x20000d08
 80045c8:	20000d0c 	.word	0x20000d0c

080045cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045d2:	e019      	b.n	8004608 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80045d4:	f000 fdd6 	bl	8005184 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d8:	4b10      	ldr	r3, [pc, #64]	; (800461c <prvCheckTasksWaitingTermination+0x50>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3304      	adds	r3, #4
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fe fcb7 	bl	8002f58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80045ea:	4b0d      	ldr	r3, [pc, #52]	; (8004620 <prvCheckTasksWaitingTermination+0x54>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	4a0b      	ldr	r2, [pc, #44]	; (8004620 <prvCheckTasksWaitingTermination+0x54>)
 80045f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045f4:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <prvCheckTasksWaitingTermination+0x58>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	4a0a      	ldr	r2, [pc, #40]	; (8004624 <prvCheckTasksWaitingTermination+0x58>)
 80045fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045fe:	f000 fdf1 	bl	80051e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f810 	bl	8004628 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004608:	4b06      	ldr	r3, [pc, #24]	; (8004624 <prvCheckTasksWaitingTermination+0x58>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e1      	bne.n	80045d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004610:	bf00      	nop
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000d24 	.word	0x20000d24
 8004620:	20000d50 	.word	0x20000d50
 8004624:	20000d38 	.word	0x20000d38

08004628 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004636:	2b00      	cmp	r3, #0
 8004638:	d108      	bne.n	800464c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	4618      	mov	r0, r3
 8004640:	f000 ff8e 	bl	8005560 <vPortFree>
				vPortFree( pxTCB );
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 ff8b 	bl	8005560 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800464a:	e018      	b.n	800467e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004652:	2b01      	cmp	r3, #1
 8004654:	d103      	bne.n	800465e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 ff82 	bl	8005560 <vPortFree>
	}
 800465c:	e00f      	b.n	800467e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004664:	2b02      	cmp	r3, #2
 8004666:	d00a      	beq.n	800467e <prvDeleteTCB+0x56>
	__asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	60fb      	str	r3, [r7, #12]
}
 800467a:	bf00      	nop
 800467c:	e7fe      	b.n	800467c <prvDeleteTCB+0x54>
	}
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800468e:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <prvResetNextTaskUnblockTime+0x38>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d104      	bne.n	80046a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <prvResetNextTaskUnblockTime+0x3c>)
 800469a:	f04f 32ff 	mov.w	r2, #4294967295
 800469e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046a0:	e008      	b.n	80046b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046a2:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <prvResetNextTaskUnblockTime+0x38>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	4a04      	ldr	r2, [pc, #16]	; (80046c4 <prvResetNextTaskUnblockTime+0x3c>)
 80046b2:	6013      	str	r3, [r2, #0]
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	20000d08 	.word	0x20000d08
 80046c4:	20000d70 	.word	0x20000d70

080046c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80046ce:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <xTaskGetSchedulerState+0x34>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d102      	bne.n	80046dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80046d6:	2301      	movs	r3, #1
 80046d8:	607b      	str	r3, [r7, #4]
 80046da:	e008      	b.n	80046ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046dc:	4b08      	ldr	r3, [pc, #32]	; (8004700 <xTaskGetSchedulerState+0x38>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d102      	bne.n	80046ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80046e4:	2302      	movs	r3, #2
 80046e6:	607b      	str	r3, [r7, #4]
 80046e8:	e001      	b.n	80046ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80046ea:	2300      	movs	r3, #0
 80046ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80046ee:	687b      	ldr	r3, [r7, #4]
	}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	20000d5c 	.word	0x20000d5c
 8004700:	20000d78 	.word	0x20000d78

08004704 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d056      	beq.n	80047c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800471a:	4b2e      	ldr	r3, [pc, #184]	; (80047d4 <xTaskPriorityDisinherit+0xd0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	429a      	cmp	r2, r3
 8004722:	d00a      	beq.n	800473a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	60fb      	str	r3, [r7, #12]
}
 8004736:	bf00      	nop
 8004738:	e7fe      	b.n	8004738 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10a      	bne.n	8004758 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	60bb      	str	r3, [r7, #8]
}
 8004754:	bf00      	nop
 8004756:	e7fe      	b.n	8004756 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475c:	1e5a      	subs	r2, r3, #1
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476a:	429a      	cmp	r2, r3
 800476c:	d02c      	beq.n	80047c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004772:	2b00      	cmp	r3, #0
 8004774:	d128      	bne.n	80047c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	3304      	adds	r3, #4
 800477a:	4618      	mov	r0, r3
 800477c:	f7fe fbec 	bl	8002f58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004798:	4b0f      	ldr	r3, [pc, #60]	; (80047d8 <xTaskPriorityDisinherit+0xd4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	429a      	cmp	r2, r3
 800479e:	d903      	bls.n	80047a8 <xTaskPriorityDisinherit+0xa4>
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	4a0c      	ldr	r2, [pc, #48]	; (80047d8 <xTaskPriorityDisinherit+0xd4>)
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4a09      	ldr	r2, [pc, #36]	; (80047dc <xTaskPriorityDisinherit+0xd8>)
 80047b6:	441a      	add	r2, r3
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	3304      	adds	r3, #4
 80047bc:	4619      	mov	r1, r3
 80047be:	4610      	mov	r0, r2
 80047c0:	f7fe fb6d 	bl	8002e9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047c4:	2301      	movs	r3, #1
 80047c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047c8:	697b      	ldr	r3, [r7, #20]
	}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	2000087c 	.word	0x2000087c
 80047d8:	20000d58 	.word	0x20000d58
 80047dc:	20000880 	.word	0x20000880

080047e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047ea:	4b21      	ldr	r3, [pc, #132]	; (8004870 <prvAddCurrentTaskToDelayedList+0x90>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047f0:	4b20      	ldr	r3, [pc, #128]	; (8004874 <prvAddCurrentTaskToDelayedList+0x94>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3304      	adds	r3, #4
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe fbae 	bl	8002f58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004802:	d10a      	bne.n	800481a <prvAddCurrentTaskToDelayedList+0x3a>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d007      	beq.n	800481a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800480a:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <prvAddCurrentTaskToDelayedList+0x94>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3304      	adds	r3, #4
 8004810:	4619      	mov	r1, r3
 8004812:	4819      	ldr	r0, [pc, #100]	; (8004878 <prvAddCurrentTaskToDelayedList+0x98>)
 8004814:	f7fe fb43 	bl	8002e9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004818:	e026      	b.n	8004868 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4413      	add	r3, r2
 8004820:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004822:	4b14      	ldr	r3, [pc, #80]	; (8004874 <prvAddCurrentTaskToDelayedList+0x94>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	429a      	cmp	r2, r3
 8004830:	d209      	bcs.n	8004846 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <prvAddCurrentTaskToDelayedList+0x94>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3304      	adds	r3, #4
 800483c:	4619      	mov	r1, r3
 800483e:	4610      	mov	r0, r2
 8004840:	f7fe fb51 	bl	8002ee6 <vListInsert>
}
 8004844:	e010      	b.n	8004868 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004846:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <prvAddCurrentTaskToDelayedList+0x94>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3304      	adds	r3, #4
 8004850:	4619      	mov	r1, r3
 8004852:	4610      	mov	r0, r2
 8004854:	f7fe fb47 	bl	8002ee6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004858:	4b0a      	ldr	r3, [pc, #40]	; (8004884 <prvAddCurrentTaskToDelayedList+0xa4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	429a      	cmp	r2, r3
 8004860:	d202      	bcs.n	8004868 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004862:	4a08      	ldr	r2, [pc, #32]	; (8004884 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	6013      	str	r3, [r2, #0]
}
 8004868:	bf00      	nop
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20000d54 	.word	0x20000d54
 8004874:	2000087c 	.word	0x2000087c
 8004878:	20000d3c 	.word	0x20000d3c
 800487c:	20000d0c 	.word	0x20000d0c
 8004880:	20000d08 	.word	0x20000d08
 8004884:	20000d70 	.word	0x20000d70

08004888 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	; 0x28
 800488c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004892:	f000 fb07 	bl	8004ea4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004896:	4b1c      	ldr	r3, [pc, #112]	; (8004908 <xTimerCreateTimerTask+0x80>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d021      	beq.n	80048e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80048a6:	1d3a      	adds	r2, r7, #4
 80048a8:	f107 0108 	add.w	r1, r7, #8
 80048ac:	f107 030c 	add.w	r3, r7, #12
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fe faad 	bl	8002e10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	9202      	str	r2, [sp, #8]
 80048be:	9301      	str	r3, [sp, #4]
 80048c0:	2302      	movs	r3, #2
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	2300      	movs	r3, #0
 80048c6:	460a      	mov	r2, r1
 80048c8:	4910      	ldr	r1, [pc, #64]	; (800490c <xTimerCreateTimerTask+0x84>)
 80048ca:	4811      	ldr	r0, [pc, #68]	; (8004910 <xTimerCreateTimerTask+0x88>)
 80048cc:	f7ff f85a 	bl	8003984 <xTaskCreateStatic>
 80048d0:	4603      	mov	r3, r0
 80048d2:	4a10      	ldr	r2, [pc, #64]	; (8004914 <xTimerCreateTimerTask+0x8c>)
 80048d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80048d6:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <xTimerCreateTimerTask+0x8c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80048de:	2301      	movs	r3, #1
 80048e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10a      	bne.n	80048fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	613b      	str	r3, [r7, #16]
}
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80048fe:	697b      	ldr	r3, [r7, #20]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20000dac 	.word	0x20000dac
 800490c:	08006194 	.word	0x08006194
 8004910:	08004a4d 	.word	0x08004a4d
 8004914:	20000db0 	.word	0x20000db0

08004918 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08a      	sub	sp, #40	; 0x28
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004926:	2300      	movs	r3, #0
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	623b      	str	r3, [r7, #32]
}
 8004942:	bf00      	nop
 8004944:	e7fe      	b.n	8004944 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004946:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <xTimerGenericCommand+0x98>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d02a      	beq.n	80049a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b05      	cmp	r3, #5
 800495e:	dc18      	bgt.n	8004992 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004960:	f7ff feb2 	bl	80046c8 <xTaskGetSchedulerState>
 8004964:	4603      	mov	r3, r0
 8004966:	2b02      	cmp	r3, #2
 8004968:	d109      	bne.n	800497e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800496a:	4b11      	ldr	r3, [pc, #68]	; (80049b0 <xTimerGenericCommand+0x98>)
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	f107 0110 	add.w	r1, r7, #16
 8004972:	2300      	movs	r3, #0
 8004974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004976:	f7fe fc1d 	bl	80031b4 <xQueueGenericSend>
 800497a:	6278      	str	r0, [r7, #36]	; 0x24
 800497c:	e012      	b.n	80049a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800497e:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <xTimerGenericCommand+0x98>)
 8004980:	6818      	ldr	r0, [r3, #0]
 8004982:	f107 0110 	add.w	r1, r7, #16
 8004986:	2300      	movs	r3, #0
 8004988:	2200      	movs	r2, #0
 800498a:	f7fe fc13 	bl	80031b4 <xQueueGenericSend>
 800498e:	6278      	str	r0, [r7, #36]	; 0x24
 8004990:	e008      	b.n	80049a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004992:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <xTimerGenericCommand+0x98>)
 8004994:	6818      	ldr	r0, [r3, #0]
 8004996:	f107 0110 	add.w	r1, r7, #16
 800499a:	2300      	movs	r3, #0
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	f7fe fd07 	bl	80033b0 <xQueueGenericSendFromISR>
 80049a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3728      	adds	r7, #40	; 0x28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000dac 	.word	0x20000dac

080049b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049be:	4b22      	ldr	r3, [pc, #136]	; (8004a48 <prvProcessExpiredTimer+0x94>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	3304      	adds	r3, #4
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fe fac3 	bl	8002f58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d022      	beq.n	8004a26 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	699a      	ldr	r2, [r3, #24]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	18d1      	adds	r1, r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	6978      	ldr	r0, [r7, #20]
 80049ee:	f000 f8d1 	bl	8004b94 <prvInsertTimerInActiveList>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01f      	beq.n	8004a38 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049f8:	2300      	movs	r3, #0
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	2300      	movs	r3, #0
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	2100      	movs	r1, #0
 8004a02:	6978      	ldr	r0, [r7, #20]
 8004a04:	f7ff ff88 	bl	8004918 <xTimerGenericCommand>
 8004a08:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d113      	bne.n	8004a38 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	60fb      	str	r3, [r7, #12]
}
 8004a22:	bf00      	nop
 8004a24:	e7fe      	b.n	8004a24 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a2c:	f023 0301 	bic.w	r3, r3, #1
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	6978      	ldr	r0, [r7, #20]
 8004a3e:	4798      	blx	r3
}
 8004a40:	bf00      	nop
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20000da4 	.word	0x20000da4

08004a4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a54:	f107 0308 	add.w	r3, r7, #8
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 f857 	bl	8004b0c <prvGetNextExpireTime>
 8004a5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4619      	mov	r1, r3
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f803 	bl	8004a70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a6a:	f000 f8d5 	bl	8004c18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a6e:	e7f1      	b.n	8004a54 <prvTimerTask+0x8>

08004a70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a7a:	f7ff fa43 	bl	8003f04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a7e:	f107 0308 	add.w	r3, r7, #8
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f866 	bl	8004b54 <prvSampleTimeNow>
 8004a88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d130      	bne.n	8004af2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10a      	bne.n	8004aac <prvProcessTimerOrBlockTask+0x3c>
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d806      	bhi.n	8004aac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a9e:	f7ff fa3f 	bl	8003f20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004aa2:	68f9      	ldr	r1, [r7, #12]
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff ff85 	bl	80049b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004aaa:	e024      	b.n	8004af6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d008      	beq.n	8004ac4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ab2:	4b13      	ldr	r3, [pc, #76]	; (8004b00 <prvProcessTimerOrBlockTask+0x90>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <prvProcessTimerOrBlockTask+0x50>
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <prvProcessTimerOrBlockTask+0x52>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ac4:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <prvProcessTimerOrBlockTask+0x94>)
 8004ac6:	6818      	ldr	r0, [r3, #0]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	f7fe ff23 	bl	800391c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004ad6:	f7ff fa23 	bl	8003f20 <xTaskResumeAll>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ae0:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <prvProcessTimerOrBlockTask+0x98>)
 8004ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	f3bf 8f6f 	isb	sy
}
 8004af0:	e001      	b.n	8004af6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004af2:	f7ff fa15 	bl	8003f20 <xTaskResumeAll>
}
 8004af6:	bf00      	nop
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20000da8 	.word	0x20000da8
 8004b04:	20000dac 	.word	0x20000dac
 8004b08:	e000ed04 	.word	0xe000ed04

08004b0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b14:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <prvGetNextExpireTime+0x44>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <prvGetNextExpireTime+0x16>
 8004b1e:	2201      	movs	r2, #1
 8004b20:	e000      	b.n	8004b24 <prvGetNextExpireTime+0x18>
 8004b22:	2200      	movs	r2, #0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d105      	bne.n	8004b3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b30:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <prvGetNextExpireTime+0x44>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	e001      	b.n	8004b40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b40:	68fb      	ldr	r3, [r7, #12]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	20000da4 	.word	0x20000da4

08004b54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b5c:	f7ff fa7e 	bl	800405c <xTaskGetTickCount>
 8004b60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b62:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <prvSampleTimeNow+0x3c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d205      	bcs.n	8004b78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b6c:	f000 f936 	bl	8004ddc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	e002      	b.n	8004b7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b7e:	4a04      	ldr	r2, [pc, #16]	; (8004b90 <prvSampleTimeNow+0x3c>)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b84:	68fb      	ldr	r3, [r7, #12]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000db4 	.word	0x20000db4

08004b94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d812      	bhi.n	8004be0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	1ad2      	subs	r2, r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d302      	bcc.n	8004bce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	e01b      	b.n	8004c06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004bce:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <prvInsertTimerInActiveList+0x7c>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4610      	mov	r0, r2
 8004bda:	f7fe f984 	bl	8002ee6 <vListInsert>
 8004bde:	e012      	b.n	8004c06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d206      	bcs.n	8004bf6 <prvInsertTimerInActiveList+0x62>
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d302      	bcc.n	8004bf6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	e007      	b.n	8004c06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bf6:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <prvInsertTimerInActiveList+0x80>)
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4610      	mov	r0, r2
 8004c02:	f7fe f970 	bl	8002ee6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c06:	697b      	ldr	r3, [r7, #20]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20000da8 	.word	0x20000da8
 8004c14:	20000da4 	.word	0x20000da4

08004c18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08e      	sub	sp, #56	; 0x38
 8004c1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c1e:	e0ca      	b.n	8004db6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	da18      	bge.n	8004c58 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c26:	1d3b      	adds	r3, r7, #4
 8004c28:	3304      	adds	r3, #4
 8004c2a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10a      	bne.n	8004c48 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	61fb      	str	r3, [r7, #28]
}
 8004c44:	bf00      	nop
 8004c46:	e7fe      	b.n	8004c46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c4e:	6850      	ldr	r0, [r2, #4]
 8004c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c52:	6892      	ldr	r2, [r2, #8]
 8004c54:	4611      	mov	r1, r2
 8004c56:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f2c0 80ab 	blt.w	8004db6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d004      	beq.n	8004c76 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6e:	3304      	adds	r3, #4
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fe f971 	bl	8002f58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c76:	463b      	mov	r3, r7
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff ff6b 	bl	8004b54 <prvSampleTimeNow>
 8004c7e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b09      	cmp	r3, #9
 8004c84:	f200 8096 	bhi.w	8004db4 <prvProcessReceivedCommands+0x19c>
 8004c88:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <prvProcessReceivedCommands+0x78>)
 8004c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8e:	bf00      	nop
 8004c90:	08004cb9 	.word	0x08004cb9
 8004c94:	08004cb9 	.word	0x08004cb9
 8004c98:	08004cb9 	.word	0x08004cb9
 8004c9c:	08004d2d 	.word	0x08004d2d
 8004ca0:	08004d41 	.word	0x08004d41
 8004ca4:	08004d8b 	.word	0x08004d8b
 8004ca8:	08004cb9 	.word	0x08004cb9
 8004cac:	08004cb9 	.word	0x08004cb9
 8004cb0:	08004d2d 	.word	0x08004d2d
 8004cb4:	08004d41 	.word	0x08004d41
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cbe:	f043 0301 	orr.w	r3, r3, #1
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	18d1      	adds	r1, r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cd8:	f7ff ff5c 	bl	8004b94 <prvInsertTimerInActiveList>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d069      	beq.n	8004db6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ce8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d05e      	beq.n	8004db6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	441a      	add	r2, r3
 8004d00:	2300      	movs	r3, #0
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	2300      	movs	r3, #0
 8004d06:	2100      	movs	r1, #0
 8004d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d0a:	f7ff fe05 	bl	8004918 <xTimerGenericCommand>
 8004d0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d14f      	bne.n	8004db6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	61bb      	str	r3, [r7, #24]
}
 8004d28:	bf00      	nop
 8004d2a:	e7fe      	b.n	8004d2a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d32:	f023 0301 	bic.w	r3, r3, #1
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004d3e:	e03a      	b.n	8004db6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d46:	f043 0301 	orr.w	r3, r3, #1
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	617b      	str	r3, [r7, #20]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	699a      	ldr	r2, [r3, #24]
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	18d1      	adds	r1, r2, r3
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d84:	f7ff ff06 	bl	8004b94 <prvInsertTimerInActiveList>
					break;
 8004d88:	e015      	b.n	8004db6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d103      	bne.n	8004da0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d9a:	f000 fbe1 	bl	8005560 <vPortFree>
 8004d9e:	e00a      	b.n	8004db6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004da6:	f023 0301 	bic.w	r3, r3, #1
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004db2:	e000      	b.n	8004db6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004db4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004db6:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <prvProcessReceivedCommands+0x1c0>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	1d39      	adds	r1, r7, #4
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fe fb92 	bl	80034e8 <xQueueReceive>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f47f af2a 	bne.w	8004c20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	3730      	adds	r7, #48	; 0x30
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000dac 	.word	0x20000dac

08004ddc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004de2:	e048      	b.n	8004e76 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004de4:	4b2d      	ldr	r3, [pc, #180]	; (8004e9c <prvSwitchTimerLists+0xc0>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dee:	4b2b      	ldr	r3, [pc, #172]	; (8004e9c <prvSwitchTimerLists+0xc0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fe f8ab 	bl	8002f58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d02e      	beq.n	8004e76 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4413      	add	r3, r2
 8004e20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d90e      	bls.n	8004e48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e36:	4b19      	ldr	r3, [pc, #100]	; (8004e9c <prvSwitchTimerLists+0xc0>)
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4610      	mov	r0, r2
 8004e42:	f7fe f850 	bl	8002ee6 <vListInsert>
 8004e46:	e016      	b.n	8004e76 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e48:	2300      	movs	r3, #0
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	2100      	movs	r1, #0
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f7ff fd60 	bl	8004918 <xTimerGenericCommand>
 8004e58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	603b      	str	r3, [r7, #0]
}
 8004e72:	bf00      	nop
 8004e74:	e7fe      	b.n	8004e74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <prvSwitchTimerLists+0xc0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1b1      	bne.n	8004de4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e80:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <prvSwitchTimerLists+0xc0>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e86:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <prvSwitchTimerLists+0xc4>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a04      	ldr	r2, [pc, #16]	; (8004e9c <prvSwitchTimerLists+0xc0>)
 8004e8c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e8e:	4a04      	ldr	r2, [pc, #16]	; (8004ea0 <prvSwitchTimerLists+0xc4>)
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	6013      	str	r3, [r2, #0]
}
 8004e94:	bf00      	nop
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	20000da4 	.word	0x20000da4
 8004ea0:	20000da8 	.word	0x20000da8

08004ea4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004eaa:	f000 f96b 	bl	8005184 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004eae:	4b15      	ldr	r3, [pc, #84]	; (8004f04 <prvCheckForValidListAndQueue+0x60>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d120      	bne.n	8004ef8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004eb6:	4814      	ldr	r0, [pc, #80]	; (8004f08 <prvCheckForValidListAndQueue+0x64>)
 8004eb8:	f7fd ffc4 	bl	8002e44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ebc:	4813      	ldr	r0, [pc, #76]	; (8004f0c <prvCheckForValidListAndQueue+0x68>)
 8004ebe:	f7fd ffc1 	bl	8002e44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ec2:	4b13      	ldr	r3, [pc, #76]	; (8004f10 <prvCheckForValidListAndQueue+0x6c>)
 8004ec4:	4a10      	ldr	r2, [pc, #64]	; (8004f08 <prvCheckForValidListAndQueue+0x64>)
 8004ec6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ec8:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <prvCheckForValidListAndQueue+0x70>)
 8004eca:	4a10      	ldr	r2, [pc, #64]	; (8004f0c <prvCheckForValidListAndQueue+0x68>)
 8004ecc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ece:	2300      	movs	r3, #0
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <prvCheckForValidListAndQueue+0x74>)
 8004ed4:	4a11      	ldr	r2, [pc, #68]	; (8004f1c <prvCheckForValidListAndQueue+0x78>)
 8004ed6:	2110      	movs	r1, #16
 8004ed8:	200a      	movs	r0, #10
 8004eda:	f7fe f8cf 	bl	800307c <xQueueGenericCreateStatic>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4a08      	ldr	r2, [pc, #32]	; (8004f04 <prvCheckForValidListAndQueue+0x60>)
 8004ee2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ee4:	4b07      	ldr	r3, [pc, #28]	; (8004f04 <prvCheckForValidListAndQueue+0x60>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004eec:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <prvCheckForValidListAndQueue+0x60>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	490b      	ldr	r1, [pc, #44]	; (8004f20 <prvCheckForValidListAndQueue+0x7c>)
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fe fce8 	bl	80038c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ef8:	f000 f974 	bl	80051e4 <vPortExitCritical>
}
 8004efc:	bf00      	nop
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000dac 	.word	0x20000dac
 8004f08:	20000d7c 	.word	0x20000d7c
 8004f0c:	20000d90 	.word	0x20000d90
 8004f10:	20000da4 	.word	0x20000da4
 8004f14:	20000da8 	.word	0x20000da8
 8004f18:	20000e58 	.word	0x20000e58
 8004f1c:	20000db8 	.word	0x20000db8
 8004f20:	0800619c 	.word	0x0800619c

08004f24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	3b04      	subs	r3, #4
 8004f34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3b04      	subs	r3, #4
 8004f42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f023 0201 	bic.w	r2, r3, #1
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3b04      	subs	r3, #4
 8004f52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f54:	4a0c      	ldr	r2, [pc, #48]	; (8004f88 <pxPortInitialiseStack+0x64>)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3b14      	subs	r3, #20
 8004f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3b04      	subs	r3, #4
 8004f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f06f 0202 	mvn.w	r2, #2
 8004f72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3b20      	subs	r3, #32
 8004f78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	08004f8d 	.word	0x08004f8d

08004f8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f92:	2300      	movs	r3, #0
 8004f94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f96:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <prvTaskExitError+0x54>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9e:	d00a      	beq.n	8004fb6 <prvTaskExitError+0x2a>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	60fb      	str	r3, [r7, #12]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <prvTaskExitError+0x28>
	__asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	60bb      	str	r3, [r7, #8]
}
 8004fc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fca:	bf00      	nop
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0fc      	beq.n	8004fcc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fd2:	bf00      	nop
 8004fd4:	bf00      	nop
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	2000000c 	.word	0x2000000c
	...

08004ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <pxCurrentTCBConst2>)
 8004ff2:	6819      	ldr	r1, [r3, #0]
 8004ff4:	6808      	ldr	r0, [r1, #0]
 8004ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffa:	f380 8809 	msr	PSP, r0
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f380 8811 	msr	BASEPRI, r0
 800500a:	4770      	bx	lr
 800500c:	f3af 8000 	nop.w

08005010 <pxCurrentTCBConst2>:
 8005010:	2000087c 	.word	0x2000087c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop

08005018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005018:	4808      	ldr	r0, [pc, #32]	; (800503c <prvPortStartFirstTask+0x24>)
 800501a:	6800      	ldr	r0, [r0, #0]
 800501c:	6800      	ldr	r0, [r0, #0]
 800501e:	f380 8808 	msr	MSP, r0
 8005022:	f04f 0000 	mov.w	r0, #0
 8005026:	f380 8814 	msr	CONTROL, r0
 800502a:	b662      	cpsie	i
 800502c:	b661      	cpsie	f
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	df00      	svc	0
 8005038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800503a:	bf00      	nop
 800503c:	e000ed08 	.word	0xe000ed08

08005040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005046:	4b46      	ldr	r3, [pc, #280]	; (8005160 <xPortStartScheduler+0x120>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a46      	ldr	r2, [pc, #280]	; (8005164 <xPortStartScheduler+0x124>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d10a      	bne.n	8005066 <xPortStartScheduler+0x26>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	613b      	str	r3, [r7, #16]
}
 8005062:	bf00      	nop
 8005064:	e7fe      	b.n	8005064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005066:	4b3e      	ldr	r3, [pc, #248]	; (8005160 <xPortStartScheduler+0x120>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a3f      	ldr	r2, [pc, #252]	; (8005168 <xPortStartScheduler+0x128>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d10a      	bne.n	8005086 <xPortStartScheduler+0x46>
	__asm volatile
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	60fb      	str	r3, [r7, #12]
}
 8005082:	bf00      	nop
 8005084:	e7fe      	b.n	8005084 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005086:	4b39      	ldr	r3, [pc, #228]	; (800516c <xPortStartScheduler+0x12c>)
 8005088:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	b2db      	uxtb	r3, r3
 8005090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	22ff      	movs	r2, #255	; 0xff
 8005096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	4b31      	ldr	r3, [pc, #196]	; (8005170 <xPortStartScheduler+0x130>)
 80050ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050ae:	4b31      	ldr	r3, [pc, #196]	; (8005174 <xPortStartScheduler+0x134>)
 80050b0:	2207      	movs	r2, #7
 80050b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050b4:	e009      	b.n	80050ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80050b6:	4b2f      	ldr	r3, [pc, #188]	; (8005174 <xPortStartScheduler+0x134>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	4a2d      	ldr	r2, [pc, #180]	; (8005174 <xPortStartScheduler+0x134>)
 80050be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050ca:	78fb      	ldrb	r3, [r7, #3]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d2:	2b80      	cmp	r3, #128	; 0x80
 80050d4:	d0ef      	beq.n	80050b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050d6:	4b27      	ldr	r3, [pc, #156]	; (8005174 <xPortStartScheduler+0x134>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f1c3 0307 	rsb	r3, r3, #7
 80050de:	2b04      	cmp	r3, #4
 80050e0:	d00a      	beq.n	80050f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	60bb      	str	r3, [r7, #8]
}
 80050f4:	bf00      	nop
 80050f6:	e7fe      	b.n	80050f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050f8:	4b1e      	ldr	r3, [pc, #120]	; (8005174 <xPortStartScheduler+0x134>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	4a1d      	ldr	r2, [pc, #116]	; (8005174 <xPortStartScheduler+0x134>)
 8005100:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005102:	4b1c      	ldr	r3, [pc, #112]	; (8005174 <xPortStartScheduler+0x134>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800510a:	4a1a      	ldr	r2, [pc, #104]	; (8005174 <xPortStartScheduler+0x134>)
 800510c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	b2da      	uxtb	r2, r3
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005116:	4b18      	ldr	r3, [pc, #96]	; (8005178 <xPortStartScheduler+0x138>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a17      	ldr	r2, [pc, #92]	; (8005178 <xPortStartScheduler+0x138>)
 800511c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005120:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005122:	4b15      	ldr	r3, [pc, #84]	; (8005178 <xPortStartScheduler+0x138>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a14      	ldr	r2, [pc, #80]	; (8005178 <xPortStartScheduler+0x138>)
 8005128:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800512c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800512e:	f000 f8dd 	bl	80052ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005132:	4b12      	ldr	r3, [pc, #72]	; (800517c <xPortStartScheduler+0x13c>)
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005138:	f000 f8fc 	bl	8005334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800513c:	4b10      	ldr	r3, [pc, #64]	; (8005180 <xPortStartScheduler+0x140>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a0f      	ldr	r2, [pc, #60]	; (8005180 <xPortStartScheduler+0x140>)
 8005142:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005146:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005148:	f7ff ff66 	bl	8005018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800514c:	f7ff f850 	bl	80041f0 <vTaskSwitchContext>
	prvTaskExitError();
 8005150:	f7ff ff1c 	bl	8004f8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	e000ed00 	.word	0xe000ed00
 8005164:	410fc271 	.word	0x410fc271
 8005168:	410fc270 	.word	0x410fc270
 800516c:	e000e400 	.word	0xe000e400
 8005170:	20000ea8 	.word	0x20000ea8
 8005174:	20000eac 	.word	0x20000eac
 8005178:	e000ed20 	.word	0xe000ed20
 800517c:	2000000c 	.word	0x2000000c
 8005180:	e000ef34 	.word	0xe000ef34

08005184 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
	__asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	607b      	str	r3, [r7, #4]
}
 800519c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800519e:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <vPortEnterCritical+0x58>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3301      	adds	r3, #1
 80051a4:	4a0d      	ldr	r2, [pc, #52]	; (80051dc <vPortEnterCritical+0x58>)
 80051a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051a8:	4b0c      	ldr	r3, [pc, #48]	; (80051dc <vPortEnterCritical+0x58>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d10f      	bne.n	80051d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051b0:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <vPortEnterCritical+0x5c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	603b      	str	r3, [r7, #0]
}
 80051cc:	bf00      	nop
 80051ce:	e7fe      	b.n	80051ce <vPortEnterCritical+0x4a>
	}
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	2000000c 	.word	0x2000000c
 80051e0:	e000ed04 	.word	0xe000ed04

080051e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051ea:	4b12      	ldr	r3, [pc, #72]	; (8005234 <vPortExitCritical+0x50>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10a      	bne.n	8005208 <vPortExitCritical+0x24>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	607b      	str	r3, [r7, #4]
}
 8005204:	bf00      	nop
 8005206:	e7fe      	b.n	8005206 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005208:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <vPortExitCritical+0x50>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3b01      	subs	r3, #1
 800520e:	4a09      	ldr	r2, [pc, #36]	; (8005234 <vPortExitCritical+0x50>)
 8005210:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005212:	4b08      	ldr	r3, [pc, #32]	; (8005234 <vPortExitCritical+0x50>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d105      	bne.n	8005226 <vPortExitCritical+0x42>
 800521a:	2300      	movs	r3, #0
 800521c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	f383 8811 	msr	BASEPRI, r3
}
 8005224:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	2000000c 	.word	0x2000000c
	...

08005240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005240:	f3ef 8009 	mrs	r0, PSP
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	4b15      	ldr	r3, [pc, #84]	; (80052a0 <pxCurrentTCBConst>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	f01e 0f10 	tst.w	lr, #16
 8005250:	bf08      	it	eq
 8005252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525a:	6010      	str	r0, [r2, #0]
 800525c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005264:	f380 8811 	msr	BASEPRI, r0
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f7fe ffbe 	bl	80041f0 <vTaskSwitchContext>
 8005274:	f04f 0000 	mov.w	r0, #0
 8005278:	f380 8811 	msr	BASEPRI, r0
 800527c:	bc09      	pop	{r0, r3}
 800527e:	6819      	ldr	r1, [r3, #0]
 8005280:	6808      	ldr	r0, [r1, #0]
 8005282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005286:	f01e 0f10 	tst.w	lr, #16
 800528a:	bf08      	it	eq
 800528c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005290:	f380 8809 	msr	PSP, r0
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	f3af 8000 	nop.w

080052a0 <pxCurrentTCBConst>:
 80052a0:	2000087c 	.word	0x2000087c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop

080052a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	607b      	str	r3, [r7, #4]
}
 80052c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052c2:	f7fe fedb 	bl	800407c <xTaskIncrementTick>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <xPortSysTickHandler+0x40>)
 80052ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	2300      	movs	r3, #0
 80052d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	f383 8811 	msr	BASEPRI, r3
}
 80052de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052e0:	bf00      	nop
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	e000ed04 	.word	0xe000ed04

080052ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052f0:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <vPortSetupTimerInterrupt+0x34>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052f6:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <vPortSetupTimerInterrupt+0x38>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052fc:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <vPortSetupTimerInterrupt+0x3c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a0a      	ldr	r2, [pc, #40]	; (800532c <vPortSetupTimerInterrupt+0x40>)
 8005302:	fba2 2303 	umull	r2, r3, r2, r3
 8005306:	099b      	lsrs	r3, r3, #6
 8005308:	4a09      	ldr	r2, [pc, #36]	; (8005330 <vPortSetupTimerInterrupt+0x44>)
 800530a:	3b01      	subs	r3, #1
 800530c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800530e:	4b04      	ldr	r3, [pc, #16]	; (8005320 <vPortSetupTimerInterrupt+0x34>)
 8005310:	2207      	movs	r2, #7
 8005312:	601a      	str	r2, [r3, #0]
}
 8005314:	bf00      	nop
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	e000e010 	.word	0xe000e010
 8005324:	e000e018 	.word	0xe000e018
 8005328:	20000000 	.word	0x20000000
 800532c:	10624dd3 	.word	0x10624dd3
 8005330:	e000e014 	.word	0xe000e014

08005334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005344 <vPortEnableVFP+0x10>
 8005338:	6801      	ldr	r1, [r0, #0]
 800533a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800533e:	6001      	str	r1, [r0, #0]
 8005340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005342:	bf00      	nop
 8005344:	e000ed88 	.word	0xe000ed88

08005348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800534e:	f3ef 8305 	mrs	r3, IPSR
 8005352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b0f      	cmp	r3, #15
 8005358:	d914      	bls.n	8005384 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800535a:	4a17      	ldr	r2, [pc, #92]	; (80053b8 <vPortValidateInterruptPriority+0x70>)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005364:	4b15      	ldr	r3, [pc, #84]	; (80053bc <vPortValidateInterruptPriority+0x74>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	7afa      	ldrb	r2, [r7, #11]
 800536a:	429a      	cmp	r2, r3
 800536c:	d20a      	bcs.n	8005384 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	607b      	str	r3, [r7, #4]
}
 8005380:	bf00      	nop
 8005382:	e7fe      	b.n	8005382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005384:	4b0e      	ldr	r3, [pc, #56]	; (80053c0 <vPortValidateInterruptPriority+0x78>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800538c:	4b0d      	ldr	r3, [pc, #52]	; (80053c4 <vPortValidateInterruptPriority+0x7c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d90a      	bls.n	80053aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	603b      	str	r3, [r7, #0]
}
 80053a6:	bf00      	nop
 80053a8:	e7fe      	b.n	80053a8 <vPortValidateInterruptPriority+0x60>
	}
 80053aa:	bf00      	nop
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	e000e3f0 	.word	0xe000e3f0
 80053bc:	20000ea8 	.word	0x20000ea8
 80053c0:	e000ed0c 	.word	0xe000ed0c
 80053c4:	20000eac 	.word	0x20000eac

080053c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08a      	sub	sp, #40	; 0x28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053d0:	2300      	movs	r3, #0
 80053d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053d4:	f7fe fd96 	bl	8003f04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053d8:	4b5b      	ldr	r3, [pc, #364]	; (8005548 <pvPortMalloc+0x180>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053e0:	f000 f920 	bl	8005624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053e4:	4b59      	ldr	r3, [pc, #356]	; (800554c <pvPortMalloc+0x184>)
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f040 8093 	bne.w	8005518 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d01d      	beq.n	8005434 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80053f8:	2208      	movs	r2, #8
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4413      	add	r3, r2
 80053fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	2b00      	cmp	r3, #0
 8005408:	d014      	beq.n	8005434 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f023 0307 	bic.w	r3, r3, #7
 8005410:	3308      	adds	r3, #8
 8005412:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <pvPortMalloc+0x6c>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	617b      	str	r3, [r7, #20]
}
 8005430:	bf00      	nop
 8005432:	e7fe      	b.n	8005432 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d06e      	beq.n	8005518 <pvPortMalloc+0x150>
 800543a:	4b45      	ldr	r3, [pc, #276]	; (8005550 <pvPortMalloc+0x188>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	429a      	cmp	r2, r3
 8005442:	d869      	bhi.n	8005518 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005444:	4b43      	ldr	r3, [pc, #268]	; (8005554 <pvPortMalloc+0x18c>)
 8005446:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005448:	4b42      	ldr	r3, [pc, #264]	; (8005554 <pvPortMalloc+0x18c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800544e:	e004      	b.n	800545a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	d903      	bls.n	800546c <pvPortMalloc+0xa4>
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1f1      	bne.n	8005450 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800546c:	4b36      	ldr	r3, [pc, #216]	; (8005548 <pvPortMalloc+0x180>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005472:	429a      	cmp	r2, r3
 8005474:	d050      	beq.n	8005518 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2208      	movs	r2, #8
 800547c:	4413      	add	r3, r2
 800547e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	1ad2      	subs	r2, r2, r3
 8005490:	2308      	movs	r3, #8
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	429a      	cmp	r2, r3
 8005496:	d91f      	bls.n	80054d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4413      	add	r3, r2
 800549e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <pvPortMalloc+0xf8>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	613b      	str	r3, [r7, #16]
}
 80054bc:	bf00      	nop
 80054be:	e7fe      	b.n	80054be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	1ad2      	subs	r2, r2, r3
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054d2:	69b8      	ldr	r0, [r7, #24]
 80054d4:	f000 f908 	bl	80056e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054d8:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <pvPortMalloc+0x188>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	4a1b      	ldr	r2, [pc, #108]	; (8005550 <pvPortMalloc+0x188>)
 80054e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054e6:	4b1a      	ldr	r3, [pc, #104]	; (8005550 <pvPortMalloc+0x188>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <pvPortMalloc+0x190>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d203      	bcs.n	80054fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054f2:	4b17      	ldr	r3, [pc, #92]	; (8005550 <pvPortMalloc+0x188>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a18      	ldr	r2, [pc, #96]	; (8005558 <pvPortMalloc+0x190>)
 80054f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	4b13      	ldr	r3, [pc, #76]	; (800554c <pvPortMalloc+0x184>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	431a      	orrs	r2, r3
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800550e:	4b13      	ldr	r3, [pc, #76]	; (800555c <pvPortMalloc+0x194>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3301      	adds	r3, #1
 8005514:	4a11      	ldr	r2, [pc, #68]	; (800555c <pvPortMalloc+0x194>)
 8005516:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005518:	f7fe fd02 	bl	8003f20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <pvPortMalloc+0x174>
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	60fb      	str	r3, [r7, #12]
}
 8005538:	bf00      	nop
 800553a:	e7fe      	b.n	800553a <pvPortMalloc+0x172>
	return pvReturn;
 800553c:	69fb      	ldr	r3, [r7, #28]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3728      	adds	r7, #40	; 0x28
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20004ab8 	.word	0x20004ab8
 800554c:	20004acc 	.word	0x20004acc
 8005550:	20004abc 	.word	0x20004abc
 8005554:	20004ab0 	.word	0x20004ab0
 8005558:	20004ac0 	.word	0x20004ac0
 800555c:	20004ac4 	.word	0x20004ac4

08005560 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d04d      	beq.n	800560e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005572:	2308      	movs	r3, #8
 8005574:	425b      	negs	r3, r3
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4413      	add	r3, r2
 800557a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	4b24      	ldr	r3, [pc, #144]	; (8005618 <vPortFree+0xb8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4013      	ands	r3, r2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10a      	bne.n	80055a4 <vPortFree+0x44>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	60fb      	str	r3, [r7, #12]
}
 80055a0:	bf00      	nop
 80055a2:	e7fe      	b.n	80055a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <vPortFree+0x62>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	60bb      	str	r3, [r7, #8]
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	4b14      	ldr	r3, [pc, #80]	; (8005618 <vPortFree+0xb8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4013      	ands	r3, r2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01e      	beq.n	800560e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d11a      	bne.n	800560e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	4b0e      	ldr	r3, [pc, #56]	; (8005618 <vPortFree+0xb8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	43db      	mvns	r3, r3
 80055e2:	401a      	ands	r2, r3
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055e8:	f7fe fc8c 	bl	8003f04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	4b0a      	ldr	r3, [pc, #40]	; (800561c <vPortFree+0xbc>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4413      	add	r3, r2
 80055f6:	4a09      	ldr	r2, [pc, #36]	; (800561c <vPortFree+0xbc>)
 80055f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055fa:	6938      	ldr	r0, [r7, #16]
 80055fc:	f000 f874 	bl	80056e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005600:	4b07      	ldr	r3, [pc, #28]	; (8005620 <vPortFree+0xc0>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3301      	adds	r3, #1
 8005606:	4a06      	ldr	r2, [pc, #24]	; (8005620 <vPortFree+0xc0>)
 8005608:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800560a:	f7fe fc89 	bl	8003f20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800560e:	bf00      	nop
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20004acc 	.word	0x20004acc
 800561c:	20004abc 	.word	0x20004abc
 8005620:	20004ac8 	.word	0x20004ac8

08005624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800562a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800562e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005630:	4b27      	ldr	r3, [pc, #156]	; (80056d0 <prvHeapInit+0xac>)
 8005632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00c      	beq.n	8005658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	3307      	adds	r3, #7
 8005642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0307 	bic.w	r3, r3, #7
 800564a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	4a1f      	ldr	r2, [pc, #124]	; (80056d0 <prvHeapInit+0xac>)
 8005654:	4413      	add	r3, r2
 8005656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800565c:	4a1d      	ldr	r2, [pc, #116]	; (80056d4 <prvHeapInit+0xb0>)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005662:	4b1c      	ldr	r3, [pc, #112]	; (80056d4 <prvHeapInit+0xb0>)
 8005664:	2200      	movs	r2, #0
 8005666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	4413      	add	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005670:	2208      	movs	r2, #8
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	1a9b      	subs	r3, r3, r2
 8005676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 0307 	bic.w	r3, r3, #7
 800567e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4a15      	ldr	r2, [pc, #84]	; (80056d8 <prvHeapInit+0xb4>)
 8005684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005686:	4b14      	ldr	r3, [pc, #80]	; (80056d8 <prvHeapInit+0xb4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2200      	movs	r2, #0
 800568c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800568e:	4b12      	ldr	r3, [pc, #72]	; (80056d8 <prvHeapInit+0xb4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	1ad2      	subs	r2, r2, r3
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056a4:	4b0c      	ldr	r3, [pc, #48]	; (80056d8 <prvHeapInit+0xb4>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <prvHeapInit+0xb8>)
 80056b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	4a09      	ldr	r2, [pc, #36]	; (80056e0 <prvHeapInit+0xbc>)
 80056ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056bc:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <prvHeapInit+0xc0>)
 80056be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056c2:	601a      	str	r2, [r3, #0]
}
 80056c4:	bf00      	nop
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	20000eb0 	.word	0x20000eb0
 80056d4:	20004ab0 	.word	0x20004ab0
 80056d8:	20004ab8 	.word	0x20004ab8
 80056dc:	20004ac0 	.word	0x20004ac0
 80056e0:	20004abc 	.word	0x20004abc
 80056e4:	20004acc 	.word	0x20004acc

080056e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056f0:	4b28      	ldr	r3, [pc, #160]	; (8005794 <prvInsertBlockIntoFreeList+0xac>)
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	e002      	b.n	80056fc <prvInsertBlockIntoFreeList+0x14>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	429a      	cmp	r2, r3
 8005704:	d8f7      	bhi.n	80056f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	4413      	add	r3, r2
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	429a      	cmp	r2, r3
 8005716:	d108      	bne.n	800572a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	441a      	add	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	441a      	add	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d118      	bne.n	8005770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	4b15      	ldr	r3, [pc, #84]	; (8005798 <prvInsertBlockIntoFreeList+0xb0>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d00d      	beq.n	8005766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	441a      	add	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	e008      	b.n	8005778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005766:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <prvInsertBlockIntoFreeList+0xb0>)
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	e003      	b.n	8005778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	429a      	cmp	r2, r3
 800577e:	d002      	beq.n	8005786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005786:	bf00      	nop
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	20004ab0 	.word	0x20004ab0
 8005798:	20004ab8 	.word	0x20004ab8

0800579c <siprintf>:
 800579c:	b40e      	push	{r1, r2, r3}
 800579e:	b500      	push	{lr}
 80057a0:	b09c      	sub	sp, #112	; 0x70
 80057a2:	ab1d      	add	r3, sp, #116	; 0x74
 80057a4:	9002      	str	r0, [sp, #8]
 80057a6:	9006      	str	r0, [sp, #24]
 80057a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057ac:	4809      	ldr	r0, [pc, #36]	; (80057d4 <siprintf+0x38>)
 80057ae:	9107      	str	r1, [sp, #28]
 80057b0:	9104      	str	r1, [sp, #16]
 80057b2:	4909      	ldr	r1, [pc, #36]	; (80057d8 <siprintf+0x3c>)
 80057b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80057b8:	9105      	str	r1, [sp, #20]
 80057ba:	6800      	ldr	r0, [r0, #0]
 80057bc:	9301      	str	r3, [sp, #4]
 80057be:	a902      	add	r1, sp, #8
 80057c0:	f000 f9a0 	bl	8005b04 <_svfiprintf_r>
 80057c4:	9b02      	ldr	r3, [sp, #8]
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	b01c      	add	sp, #112	; 0x70
 80057cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80057d0:	b003      	add	sp, #12
 80057d2:	4770      	bx	lr
 80057d4:	2000005c 	.word	0x2000005c
 80057d8:	ffff0208 	.word	0xffff0208

080057dc <memset>:
 80057dc:	4402      	add	r2, r0
 80057de:	4603      	mov	r3, r0
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d100      	bne.n	80057e6 <memset+0xa>
 80057e4:	4770      	bx	lr
 80057e6:	f803 1b01 	strb.w	r1, [r3], #1
 80057ea:	e7f9      	b.n	80057e0 <memset+0x4>

080057ec <__errno>:
 80057ec:	4b01      	ldr	r3, [pc, #4]	; (80057f4 <__errno+0x8>)
 80057ee:	6818      	ldr	r0, [r3, #0]
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	2000005c 	.word	0x2000005c

080057f8 <__libc_init_array>:
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	4d0d      	ldr	r5, [pc, #52]	; (8005830 <__libc_init_array+0x38>)
 80057fc:	4c0d      	ldr	r4, [pc, #52]	; (8005834 <__libc_init_array+0x3c>)
 80057fe:	1b64      	subs	r4, r4, r5
 8005800:	10a4      	asrs	r4, r4, #2
 8005802:	2600      	movs	r6, #0
 8005804:	42a6      	cmp	r6, r4
 8005806:	d109      	bne.n	800581c <__libc_init_array+0x24>
 8005808:	4d0b      	ldr	r5, [pc, #44]	; (8005838 <__libc_init_array+0x40>)
 800580a:	4c0c      	ldr	r4, [pc, #48]	; (800583c <__libc_init_array+0x44>)
 800580c:	f000 fc6a 	bl	80060e4 <_init>
 8005810:	1b64      	subs	r4, r4, r5
 8005812:	10a4      	asrs	r4, r4, #2
 8005814:	2600      	movs	r6, #0
 8005816:	42a6      	cmp	r6, r4
 8005818:	d105      	bne.n	8005826 <__libc_init_array+0x2e>
 800581a:	bd70      	pop	{r4, r5, r6, pc}
 800581c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005820:	4798      	blx	r3
 8005822:	3601      	adds	r6, #1
 8005824:	e7ee      	b.n	8005804 <__libc_init_array+0xc>
 8005826:	f855 3b04 	ldr.w	r3, [r5], #4
 800582a:	4798      	blx	r3
 800582c:	3601      	adds	r6, #1
 800582e:	e7f2      	b.n	8005816 <__libc_init_array+0x1e>
 8005830:	08006240 	.word	0x08006240
 8005834:	08006240 	.word	0x08006240
 8005838:	08006240 	.word	0x08006240
 800583c:	08006244 	.word	0x08006244

08005840 <__retarget_lock_acquire_recursive>:
 8005840:	4770      	bx	lr

08005842 <__retarget_lock_release_recursive>:
 8005842:	4770      	bx	lr

08005844 <memcpy>:
 8005844:	440a      	add	r2, r1
 8005846:	4291      	cmp	r1, r2
 8005848:	f100 33ff 	add.w	r3, r0, #4294967295
 800584c:	d100      	bne.n	8005850 <memcpy+0xc>
 800584e:	4770      	bx	lr
 8005850:	b510      	push	{r4, lr}
 8005852:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005856:	f803 4f01 	strb.w	r4, [r3, #1]!
 800585a:	4291      	cmp	r1, r2
 800585c:	d1f9      	bne.n	8005852 <memcpy+0xe>
 800585e:	bd10      	pop	{r4, pc}

08005860 <_free_r>:
 8005860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005862:	2900      	cmp	r1, #0
 8005864:	d044      	beq.n	80058f0 <_free_r+0x90>
 8005866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800586a:	9001      	str	r0, [sp, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	f1a1 0404 	sub.w	r4, r1, #4
 8005872:	bfb8      	it	lt
 8005874:	18e4      	addlt	r4, r4, r3
 8005876:	f000 f8df 	bl	8005a38 <__malloc_lock>
 800587a:	4a1e      	ldr	r2, [pc, #120]	; (80058f4 <_free_r+0x94>)
 800587c:	9801      	ldr	r0, [sp, #4]
 800587e:	6813      	ldr	r3, [r2, #0]
 8005880:	b933      	cbnz	r3, 8005890 <_free_r+0x30>
 8005882:	6063      	str	r3, [r4, #4]
 8005884:	6014      	str	r4, [r2, #0]
 8005886:	b003      	add	sp, #12
 8005888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800588c:	f000 b8da 	b.w	8005a44 <__malloc_unlock>
 8005890:	42a3      	cmp	r3, r4
 8005892:	d908      	bls.n	80058a6 <_free_r+0x46>
 8005894:	6825      	ldr	r5, [r4, #0]
 8005896:	1961      	adds	r1, r4, r5
 8005898:	428b      	cmp	r3, r1
 800589a:	bf01      	itttt	eq
 800589c:	6819      	ldreq	r1, [r3, #0]
 800589e:	685b      	ldreq	r3, [r3, #4]
 80058a0:	1949      	addeq	r1, r1, r5
 80058a2:	6021      	streq	r1, [r4, #0]
 80058a4:	e7ed      	b.n	8005882 <_free_r+0x22>
 80058a6:	461a      	mov	r2, r3
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	b10b      	cbz	r3, 80058b0 <_free_r+0x50>
 80058ac:	42a3      	cmp	r3, r4
 80058ae:	d9fa      	bls.n	80058a6 <_free_r+0x46>
 80058b0:	6811      	ldr	r1, [r2, #0]
 80058b2:	1855      	adds	r5, r2, r1
 80058b4:	42a5      	cmp	r5, r4
 80058b6:	d10b      	bne.n	80058d0 <_free_r+0x70>
 80058b8:	6824      	ldr	r4, [r4, #0]
 80058ba:	4421      	add	r1, r4
 80058bc:	1854      	adds	r4, r2, r1
 80058be:	42a3      	cmp	r3, r4
 80058c0:	6011      	str	r1, [r2, #0]
 80058c2:	d1e0      	bne.n	8005886 <_free_r+0x26>
 80058c4:	681c      	ldr	r4, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	6053      	str	r3, [r2, #4]
 80058ca:	440c      	add	r4, r1
 80058cc:	6014      	str	r4, [r2, #0]
 80058ce:	e7da      	b.n	8005886 <_free_r+0x26>
 80058d0:	d902      	bls.n	80058d8 <_free_r+0x78>
 80058d2:	230c      	movs	r3, #12
 80058d4:	6003      	str	r3, [r0, #0]
 80058d6:	e7d6      	b.n	8005886 <_free_r+0x26>
 80058d8:	6825      	ldr	r5, [r4, #0]
 80058da:	1961      	adds	r1, r4, r5
 80058dc:	428b      	cmp	r3, r1
 80058de:	bf04      	itt	eq
 80058e0:	6819      	ldreq	r1, [r3, #0]
 80058e2:	685b      	ldreq	r3, [r3, #4]
 80058e4:	6063      	str	r3, [r4, #4]
 80058e6:	bf04      	itt	eq
 80058e8:	1949      	addeq	r1, r1, r5
 80058ea:	6021      	streq	r1, [r4, #0]
 80058ec:	6054      	str	r4, [r2, #4]
 80058ee:	e7ca      	b.n	8005886 <_free_r+0x26>
 80058f0:	b003      	add	sp, #12
 80058f2:	bd30      	pop	{r4, r5, pc}
 80058f4:	20004c10 	.word	0x20004c10

080058f8 <sbrk_aligned>:
 80058f8:	b570      	push	{r4, r5, r6, lr}
 80058fa:	4e0e      	ldr	r6, [pc, #56]	; (8005934 <sbrk_aligned+0x3c>)
 80058fc:	460c      	mov	r4, r1
 80058fe:	6831      	ldr	r1, [r6, #0]
 8005900:	4605      	mov	r5, r0
 8005902:	b911      	cbnz	r1, 800590a <sbrk_aligned+0x12>
 8005904:	f000 fba6 	bl	8006054 <_sbrk_r>
 8005908:	6030      	str	r0, [r6, #0]
 800590a:	4621      	mov	r1, r4
 800590c:	4628      	mov	r0, r5
 800590e:	f000 fba1 	bl	8006054 <_sbrk_r>
 8005912:	1c43      	adds	r3, r0, #1
 8005914:	d00a      	beq.n	800592c <sbrk_aligned+0x34>
 8005916:	1cc4      	adds	r4, r0, #3
 8005918:	f024 0403 	bic.w	r4, r4, #3
 800591c:	42a0      	cmp	r0, r4
 800591e:	d007      	beq.n	8005930 <sbrk_aligned+0x38>
 8005920:	1a21      	subs	r1, r4, r0
 8005922:	4628      	mov	r0, r5
 8005924:	f000 fb96 	bl	8006054 <_sbrk_r>
 8005928:	3001      	adds	r0, #1
 800592a:	d101      	bne.n	8005930 <sbrk_aligned+0x38>
 800592c:	f04f 34ff 	mov.w	r4, #4294967295
 8005930:	4620      	mov	r0, r4
 8005932:	bd70      	pop	{r4, r5, r6, pc}
 8005934:	20004c14 	.word	0x20004c14

08005938 <_malloc_r>:
 8005938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800593c:	1ccd      	adds	r5, r1, #3
 800593e:	f025 0503 	bic.w	r5, r5, #3
 8005942:	3508      	adds	r5, #8
 8005944:	2d0c      	cmp	r5, #12
 8005946:	bf38      	it	cc
 8005948:	250c      	movcc	r5, #12
 800594a:	2d00      	cmp	r5, #0
 800594c:	4607      	mov	r7, r0
 800594e:	db01      	blt.n	8005954 <_malloc_r+0x1c>
 8005950:	42a9      	cmp	r1, r5
 8005952:	d905      	bls.n	8005960 <_malloc_r+0x28>
 8005954:	230c      	movs	r3, #12
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	2600      	movs	r6, #0
 800595a:	4630      	mov	r0, r6
 800595c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005960:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005a34 <_malloc_r+0xfc>
 8005964:	f000 f868 	bl	8005a38 <__malloc_lock>
 8005968:	f8d8 3000 	ldr.w	r3, [r8]
 800596c:	461c      	mov	r4, r3
 800596e:	bb5c      	cbnz	r4, 80059c8 <_malloc_r+0x90>
 8005970:	4629      	mov	r1, r5
 8005972:	4638      	mov	r0, r7
 8005974:	f7ff ffc0 	bl	80058f8 <sbrk_aligned>
 8005978:	1c43      	adds	r3, r0, #1
 800597a:	4604      	mov	r4, r0
 800597c:	d155      	bne.n	8005a2a <_malloc_r+0xf2>
 800597e:	f8d8 4000 	ldr.w	r4, [r8]
 8005982:	4626      	mov	r6, r4
 8005984:	2e00      	cmp	r6, #0
 8005986:	d145      	bne.n	8005a14 <_malloc_r+0xdc>
 8005988:	2c00      	cmp	r4, #0
 800598a:	d048      	beq.n	8005a1e <_malloc_r+0xe6>
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	4631      	mov	r1, r6
 8005990:	4638      	mov	r0, r7
 8005992:	eb04 0903 	add.w	r9, r4, r3
 8005996:	f000 fb5d 	bl	8006054 <_sbrk_r>
 800599a:	4581      	cmp	r9, r0
 800599c:	d13f      	bne.n	8005a1e <_malloc_r+0xe6>
 800599e:	6821      	ldr	r1, [r4, #0]
 80059a0:	1a6d      	subs	r5, r5, r1
 80059a2:	4629      	mov	r1, r5
 80059a4:	4638      	mov	r0, r7
 80059a6:	f7ff ffa7 	bl	80058f8 <sbrk_aligned>
 80059aa:	3001      	adds	r0, #1
 80059ac:	d037      	beq.n	8005a1e <_malloc_r+0xe6>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	442b      	add	r3, r5
 80059b2:	6023      	str	r3, [r4, #0]
 80059b4:	f8d8 3000 	ldr.w	r3, [r8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d038      	beq.n	8005a2e <_malloc_r+0xf6>
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	42a2      	cmp	r2, r4
 80059c0:	d12b      	bne.n	8005a1a <_malloc_r+0xe2>
 80059c2:	2200      	movs	r2, #0
 80059c4:	605a      	str	r2, [r3, #4]
 80059c6:	e00f      	b.n	80059e8 <_malloc_r+0xb0>
 80059c8:	6822      	ldr	r2, [r4, #0]
 80059ca:	1b52      	subs	r2, r2, r5
 80059cc:	d41f      	bmi.n	8005a0e <_malloc_r+0xd6>
 80059ce:	2a0b      	cmp	r2, #11
 80059d0:	d917      	bls.n	8005a02 <_malloc_r+0xca>
 80059d2:	1961      	adds	r1, r4, r5
 80059d4:	42a3      	cmp	r3, r4
 80059d6:	6025      	str	r5, [r4, #0]
 80059d8:	bf18      	it	ne
 80059da:	6059      	strne	r1, [r3, #4]
 80059dc:	6863      	ldr	r3, [r4, #4]
 80059de:	bf08      	it	eq
 80059e0:	f8c8 1000 	streq.w	r1, [r8]
 80059e4:	5162      	str	r2, [r4, r5]
 80059e6:	604b      	str	r3, [r1, #4]
 80059e8:	4638      	mov	r0, r7
 80059ea:	f104 060b 	add.w	r6, r4, #11
 80059ee:	f000 f829 	bl	8005a44 <__malloc_unlock>
 80059f2:	f026 0607 	bic.w	r6, r6, #7
 80059f6:	1d23      	adds	r3, r4, #4
 80059f8:	1af2      	subs	r2, r6, r3
 80059fa:	d0ae      	beq.n	800595a <_malloc_r+0x22>
 80059fc:	1b9b      	subs	r3, r3, r6
 80059fe:	50a3      	str	r3, [r4, r2]
 8005a00:	e7ab      	b.n	800595a <_malloc_r+0x22>
 8005a02:	42a3      	cmp	r3, r4
 8005a04:	6862      	ldr	r2, [r4, #4]
 8005a06:	d1dd      	bne.n	80059c4 <_malloc_r+0x8c>
 8005a08:	f8c8 2000 	str.w	r2, [r8]
 8005a0c:	e7ec      	b.n	80059e8 <_malloc_r+0xb0>
 8005a0e:	4623      	mov	r3, r4
 8005a10:	6864      	ldr	r4, [r4, #4]
 8005a12:	e7ac      	b.n	800596e <_malloc_r+0x36>
 8005a14:	4634      	mov	r4, r6
 8005a16:	6876      	ldr	r6, [r6, #4]
 8005a18:	e7b4      	b.n	8005984 <_malloc_r+0x4c>
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	e7cc      	b.n	80059b8 <_malloc_r+0x80>
 8005a1e:	230c      	movs	r3, #12
 8005a20:	603b      	str	r3, [r7, #0]
 8005a22:	4638      	mov	r0, r7
 8005a24:	f000 f80e 	bl	8005a44 <__malloc_unlock>
 8005a28:	e797      	b.n	800595a <_malloc_r+0x22>
 8005a2a:	6025      	str	r5, [r4, #0]
 8005a2c:	e7dc      	b.n	80059e8 <_malloc_r+0xb0>
 8005a2e:	605b      	str	r3, [r3, #4]
 8005a30:	deff      	udf	#255	; 0xff
 8005a32:	bf00      	nop
 8005a34:	20004c10 	.word	0x20004c10

08005a38 <__malloc_lock>:
 8005a38:	4801      	ldr	r0, [pc, #4]	; (8005a40 <__malloc_lock+0x8>)
 8005a3a:	f7ff bf01 	b.w	8005840 <__retarget_lock_acquire_recursive>
 8005a3e:	bf00      	nop
 8005a40:	20004c0c 	.word	0x20004c0c

08005a44 <__malloc_unlock>:
 8005a44:	4801      	ldr	r0, [pc, #4]	; (8005a4c <__malloc_unlock+0x8>)
 8005a46:	f7ff befc 	b.w	8005842 <__retarget_lock_release_recursive>
 8005a4a:	bf00      	nop
 8005a4c:	20004c0c 	.word	0x20004c0c

08005a50 <__ssputs_r>:
 8005a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a54:	688e      	ldr	r6, [r1, #8]
 8005a56:	461f      	mov	r7, r3
 8005a58:	42be      	cmp	r6, r7
 8005a5a:	680b      	ldr	r3, [r1, #0]
 8005a5c:	4682      	mov	sl, r0
 8005a5e:	460c      	mov	r4, r1
 8005a60:	4690      	mov	r8, r2
 8005a62:	d82c      	bhi.n	8005abe <__ssputs_r+0x6e>
 8005a64:	898a      	ldrh	r2, [r1, #12]
 8005a66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a6a:	d026      	beq.n	8005aba <__ssputs_r+0x6a>
 8005a6c:	6965      	ldr	r5, [r4, #20]
 8005a6e:	6909      	ldr	r1, [r1, #16]
 8005a70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a74:	eba3 0901 	sub.w	r9, r3, r1
 8005a78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a7c:	1c7b      	adds	r3, r7, #1
 8005a7e:	444b      	add	r3, r9
 8005a80:	106d      	asrs	r5, r5, #1
 8005a82:	429d      	cmp	r5, r3
 8005a84:	bf38      	it	cc
 8005a86:	461d      	movcc	r5, r3
 8005a88:	0553      	lsls	r3, r2, #21
 8005a8a:	d527      	bpl.n	8005adc <__ssputs_r+0x8c>
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	f7ff ff53 	bl	8005938 <_malloc_r>
 8005a92:	4606      	mov	r6, r0
 8005a94:	b360      	cbz	r0, 8005af0 <__ssputs_r+0xa0>
 8005a96:	6921      	ldr	r1, [r4, #16]
 8005a98:	464a      	mov	r2, r9
 8005a9a:	f7ff fed3 	bl	8005844 <memcpy>
 8005a9e:	89a3      	ldrh	r3, [r4, #12]
 8005aa0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa8:	81a3      	strh	r3, [r4, #12]
 8005aaa:	6126      	str	r6, [r4, #16]
 8005aac:	6165      	str	r5, [r4, #20]
 8005aae:	444e      	add	r6, r9
 8005ab0:	eba5 0509 	sub.w	r5, r5, r9
 8005ab4:	6026      	str	r6, [r4, #0]
 8005ab6:	60a5      	str	r5, [r4, #8]
 8005ab8:	463e      	mov	r6, r7
 8005aba:	42be      	cmp	r6, r7
 8005abc:	d900      	bls.n	8005ac0 <__ssputs_r+0x70>
 8005abe:	463e      	mov	r6, r7
 8005ac0:	6820      	ldr	r0, [r4, #0]
 8005ac2:	4632      	mov	r2, r6
 8005ac4:	4641      	mov	r1, r8
 8005ac6:	f000 faab 	bl	8006020 <memmove>
 8005aca:	68a3      	ldr	r3, [r4, #8]
 8005acc:	1b9b      	subs	r3, r3, r6
 8005ace:	60a3      	str	r3, [r4, #8]
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	4433      	add	r3, r6
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005adc:	462a      	mov	r2, r5
 8005ade:	f000 fac9 	bl	8006074 <_realloc_r>
 8005ae2:	4606      	mov	r6, r0
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d1e0      	bne.n	8005aaa <__ssputs_r+0x5a>
 8005ae8:	6921      	ldr	r1, [r4, #16]
 8005aea:	4650      	mov	r0, sl
 8005aec:	f7ff feb8 	bl	8005860 <_free_r>
 8005af0:	230c      	movs	r3, #12
 8005af2:	f8ca 3000 	str.w	r3, [sl]
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005afc:	81a3      	strh	r3, [r4, #12]
 8005afe:	f04f 30ff 	mov.w	r0, #4294967295
 8005b02:	e7e9      	b.n	8005ad8 <__ssputs_r+0x88>

08005b04 <_svfiprintf_r>:
 8005b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b08:	4698      	mov	r8, r3
 8005b0a:	898b      	ldrh	r3, [r1, #12]
 8005b0c:	061b      	lsls	r3, r3, #24
 8005b0e:	b09d      	sub	sp, #116	; 0x74
 8005b10:	4607      	mov	r7, r0
 8005b12:	460d      	mov	r5, r1
 8005b14:	4614      	mov	r4, r2
 8005b16:	d50e      	bpl.n	8005b36 <_svfiprintf_r+0x32>
 8005b18:	690b      	ldr	r3, [r1, #16]
 8005b1a:	b963      	cbnz	r3, 8005b36 <_svfiprintf_r+0x32>
 8005b1c:	2140      	movs	r1, #64	; 0x40
 8005b1e:	f7ff ff0b 	bl	8005938 <_malloc_r>
 8005b22:	6028      	str	r0, [r5, #0]
 8005b24:	6128      	str	r0, [r5, #16]
 8005b26:	b920      	cbnz	r0, 8005b32 <_svfiprintf_r+0x2e>
 8005b28:	230c      	movs	r3, #12
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b30:	e0d0      	b.n	8005cd4 <_svfiprintf_r+0x1d0>
 8005b32:	2340      	movs	r3, #64	; 0x40
 8005b34:	616b      	str	r3, [r5, #20]
 8005b36:	2300      	movs	r3, #0
 8005b38:	9309      	str	r3, [sp, #36]	; 0x24
 8005b3a:	2320      	movs	r3, #32
 8005b3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b40:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b44:	2330      	movs	r3, #48	; 0x30
 8005b46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005cec <_svfiprintf_r+0x1e8>
 8005b4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b4e:	f04f 0901 	mov.w	r9, #1
 8005b52:	4623      	mov	r3, r4
 8005b54:	469a      	mov	sl, r3
 8005b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b5a:	b10a      	cbz	r2, 8005b60 <_svfiprintf_r+0x5c>
 8005b5c:	2a25      	cmp	r2, #37	; 0x25
 8005b5e:	d1f9      	bne.n	8005b54 <_svfiprintf_r+0x50>
 8005b60:	ebba 0b04 	subs.w	fp, sl, r4
 8005b64:	d00b      	beq.n	8005b7e <_svfiprintf_r+0x7a>
 8005b66:	465b      	mov	r3, fp
 8005b68:	4622      	mov	r2, r4
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	4638      	mov	r0, r7
 8005b6e:	f7ff ff6f 	bl	8005a50 <__ssputs_r>
 8005b72:	3001      	adds	r0, #1
 8005b74:	f000 80a9 	beq.w	8005cca <_svfiprintf_r+0x1c6>
 8005b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b7a:	445a      	add	r2, fp
 8005b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 80a1 	beq.w	8005cca <_svfiprintf_r+0x1c6>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b92:	f10a 0a01 	add.w	sl, sl, #1
 8005b96:	9304      	str	r3, [sp, #16]
 8005b98:	9307      	str	r3, [sp, #28]
 8005b9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b9e:	931a      	str	r3, [sp, #104]	; 0x68
 8005ba0:	4654      	mov	r4, sl
 8005ba2:	2205      	movs	r2, #5
 8005ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba8:	4850      	ldr	r0, [pc, #320]	; (8005cec <_svfiprintf_r+0x1e8>)
 8005baa:	f7fa fb39 	bl	8000220 <memchr>
 8005bae:	9a04      	ldr	r2, [sp, #16]
 8005bb0:	b9d8      	cbnz	r0, 8005bea <_svfiprintf_r+0xe6>
 8005bb2:	06d0      	lsls	r0, r2, #27
 8005bb4:	bf44      	itt	mi
 8005bb6:	2320      	movmi	r3, #32
 8005bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bbc:	0711      	lsls	r1, r2, #28
 8005bbe:	bf44      	itt	mi
 8005bc0:	232b      	movmi	r3, #43	; 0x2b
 8005bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8005bca:	2b2a      	cmp	r3, #42	; 0x2a
 8005bcc:	d015      	beq.n	8005bfa <_svfiprintf_r+0xf6>
 8005bce:	9a07      	ldr	r2, [sp, #28]
 8005bd0:	4654      	mov	r4, sl
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	f04f 0c0a 	mov.w	ip, #10
 8005bd8:	4621      	mov	r1, r4
 8005bda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bde:	3b30      	subs	r3, #48	; 0x30
 8005be0:	2b09      	cmp	r3, #9
 8005be2:	d94d      	bls.n	8005c80 <_svfiprintf_r+0x17c>
 8005be4:	b1b0      	cbz	r0, 8005c14 <_svfiprintf_r+0x110>
 8005be6:	9207      	str	r2, [sp, #28]
 8005be8:	e014      	b.n	8005c14 <_svfiprintf_r+0x110>
 8005bea:	eba0 0308 	sub.w	r3, r0, r8
 8005bee:	fa09 f303 	lsl.w	r3, r9, r3
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	9304      	str	r3, [sp, #16]
 8005bf6:	46a2      	mov	sl, r4
 8005bf8:	e7d2      	b.n	8005ba0 <_svfiprintf_r+0x9c>
 8005bfa:	9b03      	ldr	r3, [sp, #12]
 8005bfc:	1d19      	adds	r1, r3, #4
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	9103      	str	r1, [sp, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	bfbb      	ittet	lt
 8005c06:	425b      	neglt	r3, r3
 8005c08:	f042 0202 	orrlt.w	r2, r2, #2
 8005c0c:	9307      	strge	r3, [sp, #28]
 8005c0e:	9307      	strlt	r3, [sp, #28]
 8005c10:	bfb8      	it	lt
 8005c12:	9204      	strlt	r2, [sp, #16]
 8005c14:	7823      	ldrb	r3, [r4, #0]
 8005c16:	2b2e      	cmp	r3, #46	; 0x2e
 8005c18:	d10c      	bne.n	8005c34 <_svfiprintf_r+0x130>
 8005c1a:	7863      	ldrb	r3, [r4, #1]
 8005c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c1e:	d134      	bne.n	8005c8a <_svfiprintf_r+0x186>
 8005c20:	9b03      	ldr	r3, [sp, #12]
 8005c22:	1d1a      	adds	r2, r3, #4
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	9203      	str	r2, [sp, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	bfb8      	it	lt
 8005c2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c30:	3402      	adds	r4, #2
 8005c32:	9305      	str	r3, [sp, #20]
 8005c34:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005cfc <_svfiprintf_r+0x1f8>
 8005c38:	7821      	ldrb	r1, [r4, #0]
 8005c3a:	2203      	movs	r2, #3
 8005c3c:	4650      	mov	r0, sl
 8005c3e:	f7fa faef 	bl	8000220 <memchr>
 8005c42:	b138      	cbz	r0, 8005c54 <_svfiprintf_r+0x150>
 8005c44:	9b04      	ldr	r3, [sp, #16]
 8005c46:	eba0 000a 	sub.w	r0, r0, sl
 8005c4a:	2240      	movs	r2, #64	; 0x40
 8005c4c:	4082      	lsls	r2, r0
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	3401      	adds	r4, #1
 8005c52:	9304      	str	r3, [sp, #16]
 8005c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c58:	4825      	ldr	r0, [pc, #148]	; (8005cf0 <_svfiprintf_r+0x1ec>)
 8005c5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c5e:	2206      	movs	r2, #6
 8005c60:	f7fa fade 	bl	8000220 <memchr>
 8005c64:	2800      	cmp	r0, #0
 8005c66:	d038      	beq.n	8005cda <_svfiprintf_r+0x1d6>
 8005c68:	4b22      	ldr	r3, [pc, #136]	; (8005cf4 <_svfiprintf_r+0x1f0>)
 8005c6a:	bb1b      	cbnz	r3, 8005cb4 <_svfiprintf_r+0x1b0>
 8005c6c:	9b03      	ldr	r3, [sp, #12]
 8005c6e:	3307      	adds	r3, #7
 8005c70:	f023 0307 	bic.w	r3, r3, #7
 8005c74:	3308      	adds	r3, #8
 8005c76:	9303      	str	r3, [sp, #12]
 8005c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c7a:	4433      	add	r3, r6
 8005c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c7e:	e768      	b.n	8005b52 <_svfiprintf_r+0x4e>
 8005c80:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c84:	460c      	mov	r4, r1
 8005c86:	2001      	movs	r0, #1
 8005c88:	e7a6      	b.n	8005bd8 <_svfiprintf_r+0xd4>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	3401      	adds	r4, #1
 8005c8e:	9305      	str	r3, [sp, #20]
 8005c90:	4619      	mov	r1, r3
 8005c92:	f04f 0c0a 	mov.w	ip, #10
 8005c96:	4620      	mov	r0, r4
 8005c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c9c:	3a30      	subs	r2, #48	; 0x30
 8005c9e:	2a09      	cmp	r2, #9
 8005ca0:	d903      	bls.n	8005caa <_svfiprintf_r+0x1a6>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0c6      	beq.n	8005c34 <_svfiprintf_r+0x130>
 8005ca6:	9105      	str	r1, [sp, #20]
 8005ca8:	e7c4      	b.n	8005c34 <_svfiprintf_r+0x130>
 8005caa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cae:	4604      	mov	r4, r0
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e7f0      	b.n	8005c96 <_svfiprintf_r+0x192>
 8005cb4:	ab03      	add	r3, sp, #12
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	462a      	mov	r2, r5
 8005cba:	4b0f      	ldr	r3, [pc, #60]	; (8005cf8 <_svfiprintf_r+0x1f4>)
 8005cbc:	a904      	add	r1, sp, #16
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	f3af 8000 	nop.w
 8005cc4:	1c42      	adds	r2, r0, #1
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	d1d6      	bne.n	8005c78 <_svfiprintf_r+0x174>
 8005cca:	89ab      	ldrh	r3, [r5, #12]
 8005ccc:	065b      	lsls	r3, r3, #25
 8005cce:	f53f af2d 	bmi.w	8005b2c <_svfiprintf_r+0x28>
 8005cd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cd4:	b01d      	add	sp, #116	; 0x74
 8005cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cda:	ab03      	add	r3, sp, #12
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	462a      	mov	r2, r5
 8005ce0:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <_svfiprintf_r+0x1f4>)
 8005ce2:	a904      	add	r1, sp, #16
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	f000 f879 	bl	8005ddc <_printf_i>
 8005cea:	e7eb      	b.n	8005cc4 <_svfiprintf_r+0x1c0>
 8005cec:	08006204 	.word	0x08006204
 8005cf0:	0800620e 	.word	0x0800620e
 8005cf4:	00000000 	.word	0x00000000
 8005cf8:	08005a51 	.word	0x08005a51
 8005cfc:	0800620a 	.word	0x0800620a

08005d00 <_printf_common>:
 8005d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d04:	4616      	mov	r6, r2
 8005d06:	4699      	mov	r9, r3
 8005d08:	688a      	ldr	r2, [r1, #8]
 8005d0a:	690b      	ldr	r3, [r1, #16]
 8005d0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d10:	4293      	cmp	r3, r2
 8005d12:	bfb8      	it	lt
 8005d14:	4613      	movlt	r3, r2
 8005d16:	6033      	str	r3, [r6, #0]
 8005d18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d1c:	4607      	mov	r7, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	b10a      	cbz	r2, 8005d26 <_printf_common+0x26>
 8005d22:	3301      	adds	r3, #1
 8005d24:	6033      	str	r3, [r6, #0]
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	0699      	lsls	r1, r3, #26
 8005d2a:	bf42      	ittt	mi
 8005d2c:	6833      	ldrmi	r3, [r6, #0]
 8005d2e:	3302      	addmi	r3, #2
 8005d30:	6033      	strmi	r3, [r6, #0]
 8005d32:	6825      	ldr	r5, [r4, #0]
 8005d34:	f015 0506 	ands.w	r5, r5, #6
 8005d38:	d106      	bne.n	8005d48 <_printf_common+0x48>
 8005d3a:	f104 0a19 	add.w	sl, r4, #25
 8005d3e:	68e3      	ldr	r3, [r4, #12]
 8005d40:	6832      	ldr	r2, [r6, #0]
 8005d42:	1a9b      	subs	r3, r3, r2
 8005d44:	42ab      	cmp	r3, r5
 8005d46:	dc26      	bgt.n	8005d96 <_printf_common+0x96>
 8005d48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d4c:	1e13      	subs	r3, r2, #0
 8005d4e:	6822      	ldr	r2, [r4, #0]
 8005d50:	bf18      	it	ne
 8005d52:	2301      	movne	r3, #1
 8005d54:	0692      	lsls	r2, r2, #26
 8005d56:	d42b      	bmi.n	8005db0 <_printf_common+0xb0>
 8005d58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d5c:	4649      	mov	r1, r9
 8005d5e:	4638      	mov	r0, r7
 8005d60:	47c0      	blx	r8
 8005d62:	3001      	adds	r0, #1
 8005d64:	d01e      	beq.n	8005da4 <_printf_common+0xa4>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	6922      	ldr	r2, [r4, #16]
 8005d6a:	f003 0306 	and.w	r3, r3, #6
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	bf02      	ittt	eq
 8005d72:	68e5      	ldreq	r5, [r4, #12]
 8005d74:	6833      	ldreq	r3, [r6, #0]
 8005d76:	1aed      	subeq	r5, r5, r3
 8005d78:	68a3      	ldr	r3, [r4, #8]
 8005d7a:	bf0c      	ite	eq
 8005d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d80:	2500      	movne	r5, #0
 8005d82:	4293      	cmp	r3, r2
 8005d84:	bfc4      	itt	gt
 8005d86:	1a9b      	subgt	r3, r3, r2
 8005d88:	18ed      	addgt	r5, r5, r3
 8005d8a:	2600      	movs	r6, #0
 8005d8c:	341a      	adds	r4, #26
 8005d8e:	42b5      	cmp	r5, r6
 8005d90:	d11a      	bne.n	8005dc8 <_printf_common+0xc8>
 8005d92:	2000      	movs	r0, #0
 8005d94:	e008      	b.n	8005da8 <_printf_common+0xa8>
 8005d96:	2301      	movs	r3, #1
 8005d98:	4652      	mov	r2, sl
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	4638      	mov	r0, r7
 8005d9e:	47c0      	blx	r8
 8005da0:	3001      	adds	r0, #1
 8005da2:	d103      	bne.n	8005dac <_printf_common+0xac>
 8005da4:	f04f 30ff 	mov.w	r0, #4294967295
 8005da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dac:	3501      	adds	r5, #1
 8005dae:	e7c6      	b.n	8005d3e <_printf_common+0x3e>
 8005db0:	18e1      	adds	r1, r4, r3
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	2030      	movs	r0, #48	; 0x30
 8005db6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dba:	4422      	add	r2, r4
 8005dbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dc4:	3302      	adds	r3, #2
 8005dc6:	e7c7      	b.n	8005d58 <_printf_common+0x58>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	4622      	mov	r2, r4
 8005dcc:	4649      	mov	r1, r9
 8005dce:	4638      	mov	r0, r7
 8005dd0:	47c0      	blx	r8
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	d0e6      	beq.n	8005da4 <_printf_common+0xa4>
 8005dd6:	3601      	adds	r6, #1
 8005dd8:	e7d9      	b.n	8005d8e <_printf_common+0x8e>
	...

08005ddc <_printf_i>:
 8005ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005de0:	7e0f      	ldrb	r7, [r1, #24]
 8005de2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005de4:	2f78      	cmp	r7, #120	; 0x78
 8005de6:	4691      	mov	r9, r2
 8005de8:	4680      	mov	r8, r0
 8005dea:	460c      	mov	r4, r1
 8005dec:	469a      	mov	sl, r3
 8005dee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005df2:	d807      	bhi.n	8005e04 <_printf_i+0x28>
 8005df4:	2f62      	cmp	r7, #98	; 0x62
 8005df6:	d80a      	bhi.n	8005e0e <_printf_i+0x32>
 8005df8:	2f00      	cmp	r7, #0
 8005dfa:	f000 80d4 	beq.w	8005fa6 <_printf_i+0x1ca>
 8005dfe:	2f58      	cmp	r7, #88	; 0x58
 8005e00:	f000 80c0 	beq.w	8005f84 <_printf_i+0x1a8>
 8005e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e0c:	e03a      	b.n	8005e84 <_printf_i+0xa8>
 8005e0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e12:	2b15      	cmp	r3, #21
 8005e14:	d8f6      	bhi.n	8005e04 <_printf_i+0x28>
 8005e16:	a101      	add	r1, pc, #4	; (adr r1, 8005e1c <_printf_i+0x40>)
 8005e18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e1c:	08005e75 	.word	0x08005e75
 8005e20:	08005e89 	.word	0x08005e89
 8005e24:	08005e05 	.word	0x08005e05
 8005e28:	08005e05 	.word	0x08005e05
 8005e2c:	08005e05 	.word	0x08005e05
 8005e30:	08005e05 	.word	0x08005e05
 8005e34:	08005e89 	.word	0x08005e89
 8005e38:	08005e05 	.word	0x08005e05
 8005e3c:	08005e05 	.word	0x08005e05
 8005e40:	08005e05 	.word	0x08005e05
 8005e44:	08005e05 	.word	0x08005e05
 8005e48:	08005f8d 	.word	0x08005f8d
 8005e4c:	08005eb5 	.word	0x08005eb5
 8005e50:	08005f47 	.word	0x08005f47
 8005e54:	08005e05 	.word	0x08005e05
 8005e58:	08005e05 	.word	0x08005e05
 8005e5c:	08005faf 	.word	0x08005faf
 8005e60:	08005e05 	.word	0x08005e05
 8005e64:	08005eb5 	.word	0x08005eb5
 8005e68:	08005e05 	.word	0x08005e05
 8005e6c:	08005e05 	.word	0x08005e05
 8005e70:	08005f4f 	.word	0x08005f4f
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	1d1a      	adds	r2, r3, #4
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	602a      	str	r2, [r5, #0]
 8005e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e84:	2301      	movs	r3, #1
 8005e86:	e09f      	b.n	8005fc8 <_printf_i+0x1ec>
 8005e88:	6820      	ldr	r0, [r4, #0]
 8005e8a:	682b      	ldr	r3, [r5, #0]
 8005e8c:	0607      	lsls	r7, r0, #24
 8005e8e:	f103 0104 	add.w	r1, r3, #4
 8005e92:	6029      	str	r1, [r5, #0]
 8005e94:	d501      	bpl.n	8005e9a <_printf_i+0xbe>
 8005e96:	681e      	ldr	r6, [r3, #0]
 8005e98:	e003      	b.n	8005ea2 <_printf_i+0xc6>
 8005e9a:	0646      	lsls	r6, r0, #25
 8005e9c:	d5fb      	bpl.n	8005e96 <_printf_i+0xba>
 8005e9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005ea2:	2e00      	cmp	r6, #0
 8005ea4:	da03      	bge.n	8005eae <_printf_i+0xd2>
 8005ea6:	232d      	movs	r3, #45	; 0x2d
 8005ea8:	4276      	negs	r6, r6
 8005eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eae:	485a      	ldr	r0, [pc, #360]	; (8006018 <_printf_i+0x23c>)
 8005eb0:	230a      	movs	r3, #10
 8005eb2:	e012      	b.n	8005eda <_printf_i+0xfe>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	6820      	ldr	r0, [r4, #0]
 8005eb8:	1d19      	adds	r1, r3, #4
 8005eba:	6029      	str	r1, [r5, #0]
 8005ebc:	0605      	lsls	r5, r0, #24
 8005ebe:	d501      	bpl.n	8005ec4 <_printf_i+0xe8>
 8005ec0:	681e      	ldr	r6, [r3, #0]
 8005ec2:	e002      	b.n	8005eca <_printf_i+0xee>
 8005ec4:	0641      	lsls	r1, r0, #25
 8005ec6:	d5fb      	bpl.n	8005ec0 <_printf_i+0xe4>
 8005ec8:	881e      	ldrh	r6, [r3, #0]
 8005eca:	4853      	ldr	r0, [pc, #332]	; (8006018 <_printf_i+0x23c>)
 8005ecc:	2f6f      	cmp	r7, #111	; 0x6f
 8005ece:	bf0c      	ite	eq
 8005ed0:	2308      	moveq	r3, #8
 8005ed2:	230a      	movne	r3, #10
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005eda:	6865      	ldr	r5, [r4, #4]
 8005edc:	60a5      	str	r5, [r4, #8]
 8005ede:	2d00      	cmp	r5, #0
 8005ee0:	bfa2      	ittt	ge
 8005ee2:	6821      	ldrge	r1, [r4, #0]
 8005ee4:	f021 0104 	bicge.w	r1, r1, #4
 8005ee8:	6021      	strge	r1, [r4, #0]
 8005eea:	b90e      	cbnz	r6, 8005ef0 <_printf_i+0x114>
 8005eec:	2d00      	cmp	r5, #0
 8005eee:	d04b      	beq.n	8005f88 <_printf_i+0x1ac>
 8005ef0:	4615      	mov	r5, r2
 8005ef2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ef6:	fb03 6711 	mls	r7, r3, r1, r6
 8005efa:	5dc7      	ldrb	r7, [r0, r7]
 8005efc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f00:	4637      	mov	r7, r6
 8005f02:	42bb      	cmp	r3, r7
 8005f04:	460e      	mov	r6, r1
 8005f06:	d9f4      	bls.n	8005ef2 <_printf_i+0x116>
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d10b      	bne.n	8005f24 <_printf_i+0x148>
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	07de      	lsls	r6, r3, #31
 8005f10:	d508      	bpl.n	8005f24 <_printf_i+0x148>
 8005f12:	6923      	ldr	r3, [r4, #16]
 8005f14:	6861      	ldr	r1, [r4, #4]
 8005f16:	4299      	cmp	r1, r3
 8005f18:	bfde      	ittt	le
 8005f1a:	2330      	movle	r3, #48	; 0x30
 8005f1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f24:	1b52      	subs	r2, r2, r5
 8005f26:	6122      	str	r2, [r4, #16]
 8005f28:	f8cd a000 	str.w	sl, [sp]
 8005f2c:	464b      	mov	r3, r9
 8005f2e:	aa03      	add	r2, sp, #12
 8005f30:	4621      	mov	r1, r4
 8005f32:	4640      	mov	r0, r8
 8005f34:	f7ff fee4 	bl	8005d00 <_printf_common>
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d14a      	bne.n	8005fd2 <_printf_i+0x1f6>
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	b004      	add	sp, #16
 8005f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	f043 0320 	orr.w	r3, r3, #32
 8005f4c:	6023      	str	r3, [r4, #0]
 8005f4e:	4833      	ldr	r0, [pc, #204]	; (800601c <_printf_i+0x240>)
 8005f50:	2778      	movs	r7, #120	; 0x78
 8005f52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	6829      	ldr	r1, [r5, #0]
 8005f5a:	061f      	lsls	r7, r3, #24
 8005f5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f60:	d402      	bmi.n	8005f68 <_printf_i+0x18c>
 8005f62:	065f      	lsls	r7, r3, #25
 8005f64:	bf48      	it	mi
 8005f66:	b2b6      	uxthmi	r6, r6
 8005f68:	07df      	lsls	r7, r3, #31
 8005f6a:	bf48      	it	mi
 8005f6c:	f043 0320 	orrmi.w	r3, r3, #32
 8005f70:	6029      	str	r1, [r5, #0]
 8005f72:	bf48      	it	mi
 8005f74:	6023      	strmi	r3, [r4, #0]
 8005f76:	b91e      	cbnz	r6, 8005f80 <_printf_i+0x1a4>
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	f023 0320 	bic.w	r3, r3, #32
 8005f7e:	6023      	str	r3, [r4, #0]
 8005f80:	2310      	movs	r3, #16
 8005f82:	e7a7      	b.n	8005ed4 <_printf_i+0xf8>
 8005f84:	4824      	ldr	r0, [pc, #144]	; (8006018 <_printf_i+0x23c>)
 8005f86:	e7e4      	b.n	8005f52 <_printf_i+0x176>
 8005f88:	4615      	mov	r5, r2
 8005f8a:	e7bd      	b.n	8005f08 <_printf_i+0x12c>
 8005f8c:	682b      	ldr	r3, [r5, #0]
 8005f8e:	6826      	ldr	r6, [r4, #0]
 8005f90:	6961      	ldr	r1, [r4, #20]
 8005f92:	1d18      	adds	r0, r3, #4
 8005f94:	6028      	str	r0, [r5, #0]
 8005f96:	0635      	lsls	r5, r6, #24
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	d501      	bpl.n	8005fa0 <_printf_i+0x1c4>
 8005f9c:	6019      	str	r1, [r3, #0]
 8005f9e:	e002      	b.n	8005fa6 <_printf_i+0x1ca>
 8005fa0:	0670      	lsls	r0, r6, #25
 8005fa2:	d5fb      	bpl.n	8005f9c <_printf_i+0x1c0>
 8005fa4:	8019      	strh	r1, [r3, #0]
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	6123      	str	r3, [r4, #16]
 8005faa:	4615      	mov	r5, r2
 8005fac:	e7bc      	b.n	8005f28 <_printf_i+0x14c>
 8005fae:	682b      	ldr	r3, [r5, #0]
 8005fb0:	1d1a      	adds	r2, r3, #4
 8005fb2:	602a      	str	r2, [r5, #0]
 8005fb4:	681d      	ldr	r5, [r3, #0]
 8005fb6:	6862      	ldr	r2, [r4, #4]
 8005fb8:	2100      	movs	r1, #0
 8005fba:	4628      	mov	r0, r5
 8005fbc:	f7fa f930 	bl	8000220 <memchr>
 8005fc0:	b108      	cbz	r0, 8005fc6 <_printf_i+0x1ea>
 8005fc2:	1b40      	subs	r0, r0, r5
 8005fc4:	6060      	str	r0, [r4, #4]
 8005fc6:	6863      	ldr	r3, [r4, #4]
 8005fc8:	6123      	str	r3, [r4, #16]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fd0:	e7aa      	b.n	8005f28 <_printf_i+0x14c>
 8005fd2:	6923      	ldr	r3, [r4, #16]
 8005fd4:	462a      	mov	r2, r5
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	4640      	mov	r0, r8
 8005fda:	47d0      	blx	sl
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d0ad      	beq.n	8005f3c <_printf_i+0x160>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	079b      	lsls	r3, r3, #30
 8005fe4:	d413      	bmi.n	800600e <_printf_i+0x232>
 8005fe6:	68e0      	ldr	r0, [r4, #12]
 8005fe8:	9b03      	ldr	r3, [sp, #12]
 8005fea:	4298      	cmp	r0, r3
 8005fec:	bfb8      	it	lt
 8005fee:	4618      	movlt	r0, r3
 8005ff0:	e7a6      	b.n	8005f40 <_printf_i+0x164>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	4632      	mov	r2, r6
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	4640      	mov	r0, r8
 8005ffa:	47d0      	blx	sl
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d09d      	beq.n	8005f3c <_printf_i+0x160>
 8006000:	3501      	adds	r5, #1
 8006002:	68e3      	ldr	r3, [r4, #12]
 8006004:	9903      	ldr	r1, [sp, #12]
 8006006:	1a5b      	subs	r3, r3, r1
 8006008:	42ab      	cmp	r3, r5
 800600a:	dcf2      	bgt.n	8005ff2 <_printf_i+0x216>
 800600c:	e7eb      	b.n	8005fe6 <_printf_i+0x20a>
 800600e:	2500      	movs	r5, #0
 8006010:	f104 0619 	add.w	r6, r4, #25
 8006014:	e7f5      	b.n	8006002 <_printf_i+0x226>
 8006016:	bf00      	nop
 8006018:	08006215 	.word	0x08006215
 800601c:	08006226 	.word	0x08006226

08006020 <memmove>:
 8006020:	4288      	cmp	r0, r1
 8006022:	b510      	push	{r4, lr}
 8006024:	eb01 0402 	add.w	r4, r1, r2
 8006028:	d902      	bls.n	8006030 <memmove+0x10>
 800602a:	4284      	cmp	r4, r0
 800602c:	4623      	mov	r3, r4
 800602e:	d807      	bhi.n	8006040 <memmove+0x20>
 8006030:	1e43      	subs	r3, r0, #1
 8006032:	42a1      	cmp	r1, r4
 8006034:	d008      	beq.n	8006048 <memmove+0x28>
 8006036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800603a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800603e:	e7f8      	b.n	8006032 <memmove+0x12>
 8006040:	4402      	add	r2, r0
 8006042:	4601      	mov	r1, r0
 8006044:	428a      	cmp	r2, r1
 8006046:	d100      	bne.n	800604a <memmove+0x2a>
 8006048:	bd10      	pop	{r4, pc}
 800604a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800604e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006052:	e7f7      	b.n	8006044 <memmove+0x24>

08006054 <_sbrk_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	4d06      	ldr	r5, [pc, #24]	; (8006070 <_sbrk_r+0x1c>)
 8006058:	2300      	movs	r3, #0
 800605a:	4604      	mov	r4, r0
 800605c:	4608      	mov	r0, r1
 800605e:	602b      	str	r3, [r5, #0]
 8006060:	f7fa fe22 	bl	8000ca8 <_sbrk>
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	d102      	bne.n	800606e <_sbrk_r+0x1a>
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	b103      	cbz	r3, 800606e <_sbrk_r+0x1a>
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	bd38      	pop	{r3, r4, r5, pc}
 8006070:	20004c08 	.word	0x20004c08

08006074 <_realloc_r>:
 8006074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006078:	4680      	mov	r8, r0
 800607a:	4614      	mov	r4, r2
 800607c:	460e      	mov	r6, r1
 800607e:	b921      	cbnz	r1, 800608a <_realloc_r+0x16>
 8006080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006084:	4611      	mov	r1, r2
 8006086:	f7ff bc57 	b.w	8005938 <_malloc_r>
 800608a:	b92a      	cbnz	r2, 8006098 <_realloc_r+0x24>
 800608c:	f7ff fbe8 	bl	8005860 <_free_r>
 8006090:	4625      	mov	r5, r4
 8006092:	4628      	mov	r0, r5
 8006094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006098:	f000 f81b 	bl	80060d2 <_malloc_usable_size_r>
 800609c:	4284      	cmp	r4, r0
 800609e:	4607      	mov	r7, r0
 80060a0:	d802      	bhi.n	80060a8 <_realloc_r+0x34>
 80060a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80060a6:	d812      	bhi.n	80060ce <_realloc_r+0x5a>
 80060a8:	4621      	mov	r1, r4
 80060aa:	4640      	mov	r0, r8
 80060ac:	f7ff fc44 	bl	8005938 <_malloc_r>
 80060b0:	4605      	mov	r5, r0
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d0ed      	beq.n	8006092 <_realloc_r+0x1e>
 80060b6:	42bc      	cmp	r4, r7
 80060b8:	4622      	mov	r2, r4
 80060ba:	4631      	mov	r1, r6
 80060bc:	bf28      	it	cs
 80060be:	463a      	movcs	r2, r7
 80060c0:	f7ff fbc0 	bl	8005844 <memcpy>
 80060c4:	4631      	mov	r1, r6
 80060c6:	4640      	mov	r0, r8
 80060c8:	f7ff fbca 	bl	8005860 <_free_r>
 80060cc:	e7e1      	b.n	8006092 <_realloc_r+0x1e>
 80060ce:	4635      	mov	r5, r6
 80060d0:	e7df      	b.n	8006092 <_realloc_r+0x1e>

080060d2 <_malloc_usable_size_r>:
 80060d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060d6:	1f18      	subs	r0, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	bfbc      	itt	lt
 80060dc:	580b      	ldrlt	r3, [r1, r0]
 80060de:	18c0      	addlt	r0, r0, r3
 80060e0:	4770      	bx	lr
	...

080060e4 <_init>:
 80060e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e6:	bf00      	nop
 80060e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ea:	bc08      	pop	{r3}
 80060ec:	469e      	mov	lr, r3
 80060ee:	4770      	bx	lr

080060f0 <_fini>:
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f2:	bf00      	nop
 80060f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f6:	bc08      	pop	{r3}
 80060f8:	469e      	mov	lr, r3
 80060fa:	4770      	bx	lr
