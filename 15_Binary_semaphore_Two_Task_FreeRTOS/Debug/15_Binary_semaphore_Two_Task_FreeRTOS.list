
15_Binary_semaphore_Two_Task_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006484  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08006654  08006654  00016654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006864  08006864  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006864  08006864  00016864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800686c  0800686c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800686c  0800686c  0001686c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006870  08006870  00016870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b78  2000006c  080068e0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004be4  080068e0  00024be4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001239e  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ce5  00000000  00000000  0003247d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  00035168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc3  00000000  00000000  000360c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000440f  00000000  00000000  00036c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012117  00000000  00000000  0003b09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d42cc  00000000  00000000  0004d1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a58  00000000  00000000  00121480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  00125ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800663c 	.word	0x0800663c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	0800663c 	.word	0x0800663c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <SlaveDoWork>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SlaveDoWork(unsigned int passId)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	sprintf(mymesage," Slave task working on Passed Id: %d \r\n",passId);
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	4907      	ldr	r1, [pc, #28]	; (80005d4 <SlaveDoWork+0x28>)
 80005b8:	4807      	ldr	r0, [pc, #28]	; (80005d8 <SlaveDoWork+0x2c>)
 80005ba:	f004 ff81 	bl	80054c0 <siprintf>
	printf(mymesage);
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <SlaveDoWork+0x2c>)
 80005c0:	f004 ff6c 	bl	800549c <iprintf>
	vTaskDelay(passId);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f003 f887 	bl	80036d8 <vTaskDelay>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	0800666c 	.word	0x0800666c
 80005d8:	200000dc 	.word	0x200000dc

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	xQueue = xQueueCreate(1, sizeof(unsigned int));
 80005e0:	2200      	movs	r2, #0
 80005e2:	2104      	movs	r1, #4
 80005e4:	2001      	movs	r0, #1
 80005e6:	f002 f96b 	bl	80028c0 <xQueueGenericCreate>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a24      	ldr	r2, [pc, #144]	; (8000680 <main+0xa4>)
 80005ee:	6013      	str	r3, [r2, #0]

	vSemaphoreCreateBinary(xSempahore);
 80005f0:	2203      	movs	r2, #3
 80005f2:	2100      	movs	r1, #0
 80005f4:	2001      	movs	r0, #1
 80005f6:	f002 f963 	bl	80028c0 <xQueueGenericCreate>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <main+0xa8>)
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <main+0xa8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d006      	beq.n	8000616 <main+0x3a>
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <main+0xa8>)
 800060a:	6818      	ldr	r0, [r3, #0]
 800060c:	2300      	movs	r3, #0
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	f002 f9b3 	bl	800297c <xQueueGenericSend>

	if((xQueue != NULL) && (xSempahore != NULL))
 8000616:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <main+0xa4>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d00b      	beq.n	8000636 <main+0x5a>
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <main+0xa8>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d007      	beq.n	8000636 <main+0x5a>
	{
		sprintf(mymesage,"Semphore and queue task are created");
 8000626:	4918      	ldr	r1, [pc, #96]	; (8000688 <main+0xac>)
 8000628:	4818      	ldr	r0, [pc, #96]	; (800068c <main+0xb0>)
 800062a:	f004 ff49 	bl	80054c0 <siprintf>
		printf(mymesage);
 800062e:	4817      	ldr	r0, [pc, #92]	; (800068c <main+0xb0>)
 8000630:	f004 ff34 	bl	800549c <iprintf>
 8000634:	e006      	b.n	8000644 <main+0x68>
	}
	else
	{
		sprintf(mymesage,"Semphore and queue task are not created");
 8000636:	4916      	ldr	r1, [pc, #88]	; (8000690 <main+0xb4>)
 8000638:	4814      	ldr	r0, [pc, #80]	; (800068c <main+0xb0>)
 800063a:	f004 ff41 	bl	80054c0 <siprintf>
		printf(mymesage);
 800063e:	4813      	ldr	r0, [pc, #76]	; (800068c <main+0xb0>)
 8000640:	f004 ff2c 	bl	800549c <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fb1e 	bl	8000c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f830 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f8b8 	bl	80007c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000650:	f000 f88c 	bl	800076c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000654:	f001 fe74 	bl	8002340 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(Master, NULL, &defaultTask_attributes);
 8000658:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <main+0xb8>)
 800065a:	2100      	movs	r1, #0
 800065c:	480e      	ldr	r0, [pc, #56]	; (8000698 <main+0xbc>)
 800065e:	f001 feb9 	bl	80023d4 <osThreadNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a0d      	ldr	r2, [pc, #52]	; (800069c <main+0xc0>)
 8000666:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(Slave, NULL, &myTask02_attributes);
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <main+0xc4>)
 800066a:	2100      	movs	r1, #0
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <main+0xc8>)
 800066e:	f001 feb1 	bl	80023d4 <osThreadNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <main+0xcc>)
 8000676:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000678:	f001 fe86 	bl	8002388 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067c:	e7fe      	b.n	800067c <main+0xa0>
 800067e:	bf00      	nop
 8000680:	200000d4 	.word	0x200000d4
 8000684:	200000d8 	.word	0x200000d8
 8000688:	08006694 	.word	0x08006694
 800068c:	200000dc 	.word	0x200000dc
 8000690:	080066b8 	.word	0x080066b8
 8000694:	08006724 	.word	0x08006724
 8000698:	080008ad 	.word	0x080008ad
 800069c:	200000cc 	.word	0x200000cc
 80006a0:	08006748 	.word	0x08006748
 80006a4:	080008f1 	.word	0x080008f1
 80006a8:	200000d0 	.word	0x200000d0

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	2234      	movs	r2, #52	; 0x34
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f004 ff63 	bl	8005586 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <SystemClock_Config+0xb8>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a22      	ldr	r2, [pc, #136]	; (8000764 <SystemClock_Config+0xb8>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <SystemClock_Config+0xb8>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ec:	2300      	movs	r3, #0
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <SystemClock_Config+0xbc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f8:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <SystemClock_Config+0xbc>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <SystemClock_Config+0xbc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	2302      	movs	r3, #2
 800070e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000714:	2310      	movs	r3, #16
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000718:	2300      	movs	r3, #0
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4618      	mov	r0, r3
 8000722:	f001 f879 	bl	8001818 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800072c:	f000 f90c 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fda0 	bl	8001290 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000756:	f000 f8f7 	bl	8000948 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000772:	4a12      	ldr	r2, [pc, #72]	; (80007bc <MX_USART2_UART_Init+0x50>)
 8000774:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000778:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800077c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_USART2_UART_Init+0x4c>)
 80007a4:	f001 fad6 	bl	8001d54 <HAL_UART_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ae:	f000 f8cb 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000088 	.word	0x20000088
 80007bc:	40004400 	.word	0x40004400

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b30      	ldr	r3, [pc, #192]	; (800089c <MX_GPIO_Init+0xdc>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a2f      	ldr	r2, [pc, #188]	; (800089c <MX_GPIO_Init+0xdc>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b2d      	ldr	r3, [pc, #180]	; (800089c <MX_GPIO_Init+0xdc>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b29      	ldr	r3, [pc, #164]	; (800089c <MX_GPIO_Init+0xdc>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a28      	ldr	r2, [pc, #160]	; (800089c <MX_GPIO_Init+0xdc>)
 80007fc:	f043 0320 	orr.w	r3, r3, #32
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b26      	ldr	r3, [pc, #152]	; (800089c <MX_GPIO_Init+0xdc>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0320 	and.w	r3, r3, #32
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	4b22      	ldr	r3, [pc, #136]	; (800089c <MX_GPIO_Init+0xdc>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a21      	ldr	r2, [pc, #132]	; (800089c <MX_GPIO_Init+0xdc>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b1f      	ldr	r3, [pc, #124]	; (800089c <MX_GPIO_Init+0xdc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000830:	481b      	ldr	r0, [pc, #108]	; (80008a0 <MX_GPIO_Init+0xe0>)
 8000832:	f000 fd13 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2107      	movs	r1, #7
 800083a:	481a      	ldr	r0, [pc, #104]	; (80008a4 <MX_GPIO_Init+0xe4>)
 800083c:	f000 fd0e 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000840:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000844:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4619      	mov	r1, r3
 8000858:	4811      	ldr	r0, [pc, #68]	; (80008a0 <MX_GPIO_Init+0xe0>)
 800085a:	f000 fb6b 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800085e:	2307      	movs	r3, #7
 8000860:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	4619      	mov	r1, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <MX_GPIO_Init+0xe4>)
 8000876:	f000 fb5d 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800087a:	2302      	movs	r3, #2
 800087c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <MX_GPIO_Init+0xe8>)
 8000890:	f000 fb50 	bl	8000f34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020800 	.word	0x40020800
 80008a4:	40021400 	.word	0x40021400
 80008a8:	40020000 	.word	0x40020000

080008ac <Master>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void Master(void *argument)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	unsigned int xMasterPassId;
	portBASE_TYPE xStatus;

	xSemaphoreGive(xSempahore); // aktif etmek için bunu tanımlamamız gerekiyor
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <Master+0x3c>)
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	2300      	movs	r3, #0
 80008ba:	2200      	movs	r2, #0
 80008bc:	2100      	movs	r1, #0
 80008be:	f002 f85d 	bl	800297c <xQueueGenericSend>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  xMasterPassId = (rand()  &  0x1FF);
 80008c2:	f004 fceb 	bl	800529c <rand>
 80008c6:	4603      	mov	r3, r0
 80008c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80008cc:	60bb      	str	r3, [r7, #8]

	  xStatus = xQueueReceive(xQueue, &xMasterPassId, 0);
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <Master+0x40>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f107 0108 	add.w	r1, r7, #8
 80008d6:	2200      	movs	r2, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f002 f9e9 	bl	8002cb0 <xQueueReceive>
 80008de:	60f8      	str	r0, [r7, #12]
    osDelay(1);
 80008e0:	2001      	movs	r0, #1
 80008e2:	f001 fe09 	bl	80024f8 <osDelay>
	  xMasterPassId = (rand()  &  0x1FF);
 80008e6:	e7ec      	b.n	80008c2 <Master+0x16>
 80008e8:	200000d8 	.word	0x200000d8
 80008ec:	200000d4 	.word	0x200000d4

080008f0 <Slave>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void Slave(void *argument)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xStatus;
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(xSempahore,0);
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <Slave+0x48>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f002 fab6 	bl	8002e70 <xQueueSemaphoreTake>
	  xStatus = xQueueReceive(xQueue, &xSlavePassId, 0);
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <Slave+0x4c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f107 0108 	add.w	r1, r7, #8
 800090c:	2200      	movs	r2, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f002 f9ce 	bl	8002cb0 <xQueueReceive>
 8000914:	60f8      	str	r0, [r7, #12]

	  if(xStatus != pdPASS)
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d004      	beq.n	8000926 <Slave+0x36>
	  {
		  sprintf(mymesage,"Slave Task : Queu is empty, noting to do \r\n");
 800091c:	4908      	ldr	r1, [pc, #32]	; (8000940 <Slave+0x50>)
 800091e:	4809      	ldr	r0, [pc, #36]	; (8000944 <Slave+0x54>)
 8000920:	f004 fdce 	bl	80054c0 <siprintf>
 8000924:	e003      	b.n	800092e <Slave+0x3e>
	  }
	  else
	  {
		  SlaveDoWork(xSlavePassId);
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fe3f 	bl	80005ac <SlaveDoWork>
	  }

    osDelay(1);
 800092e:	2001      	movs	r0, #1
 8000930:	f001 fde2 	bl	80024f8 <osDelay>
	  xSemaphoreTake(xSempahore,0);
 8000934:	e7e0      	b.n	80008f8 <Slave+0x8>
 8000936:	bf00      	nop
 8000938:	200000d8 	.word	0x200000d8
 800093c:	200000d4 	.word	0x200000d4
 8000940:	080066e0 	.word	0x080066e0
 8000944:	200000dc 	.word	0x200000dc

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_MspInit+0x54>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a11      	ldr	r2, [pc, #68]	; (80009a8 <HAL_MspInit+0x54>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_MspInit+0x54>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_MspInit+0x54>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <HAL_MspInit+0x54>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_MspInit+0x54>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	210f      	movs	r1, #15
 8000996:	f06f 0001 	mvn.w	r0, #1
 800099a:	f000 faa2 	bl	8000ee2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <HAL_UART_MspInit+0x84>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d12b      	bne.n	8000a26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a06:	230c      	movs	r3, #12
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a16:	2307      	movs	r3, #7
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <HAL_UART_MspInit+0x8c>)
 8000a22:	f000 fa87 	bl	8000f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a26:	bf00      	nop
 8000a28:	3728      	adds	r7, #40	; 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40004400 	.word	0x40004400
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020000 	.word	0x40020000

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6c:	f000 f95c 	bl	8000d28 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a70:	f003 faae 	bl	8003fd0 <xTaskGetSchedulerState>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d001      	beq.n	8000a7e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a7a:	f004 f995 	bl	8004da8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  return 1;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_kill>:

int _kill(int pid, int sig)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a9c:	f004 fdc2 	bl	8005624 <__errno>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2216      	movs	r2, #22
 8000aa4:	601a      	str	r2, [r3, #0]
  return -1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <_exit>:

void _exit (int status)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000aba:	f04f 31ff 	mov.w	r1, #4294967295
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff ffe7 	bl	8000a92 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ac4:	e7fe      	b.n	8000ac4 <_exit+0x12>

08000ac6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	60f8      	str	r0, [r7, #12]
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	e00a      	b.n	8000aee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ad8:	f3af 8000 	nop.w
 8000adc:	4601      	mov	r1, r0
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	60ba      	str	r2, [r7, #8]
 8000ae4:	b2ca      	uxtb	r2, r1
 8000ae6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	3301      	adds	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	dbf0      	blt.n	8000ad8 <_read+0x12>
  }

  return len;
 8000af6:	687b      	ldr	r3, [r7, #4]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e009      	b.n	8000b26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	60ba      	str	r2, [r7, #8]
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	3301      	adds	r3, #1
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	dbf1      	blt.n	8000b12 <_write+0x12>
  }
  return len;
 8000b2e:	687b      	ldr	r3, [r7, #4]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <_close>:

int _close(int file)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b60:	605a      	str	r2, [r3, #4]
  return 0;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <_isatty>:

int _isatty(int file)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b78:	2301      	movs	r3, #1
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b085      	sub	sp, #20
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba8:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <_sbrk+0x5c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <_sbrk+0x60>)
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <_sbrk+0x64>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <_sbrk+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d207      	bcs.n	8000be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd0:	f004 fd28 	bl	8005624 <__errno>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	e009      	b.n	8000bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <_sbrk+0x64>)
 8000bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20020000 	.word	0x20020000
 8000c00:	00000400 	.word	0x00000400
 8000c04:	20000140 	.word	0x20000140
 8000c08:	20004be8 	.word	0x20004be8

08000c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c36:	490e      	ldr	r1, [pc, #56]	; (8000c70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c4c:	4c0b      	ldr	r4, [pc, #44]	; (8000c7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c5a:	f7ff ffd7 	bl	8000c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f004 fce7 	bl	8005630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c62:	f7ff fcbb 	bl	80005dc <main>
  bx  lr    
 8000c66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c74:	08006874 	.word	0x08006874
  ldr r2, =_sbss
 8000c78:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c7c:	20004be4 	.word	0x20004be4

08000c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC_IRQHandler>
	...

08000c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <HAL_Init+0x40>)
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_Init+0x40>)
 8000c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <HAL_Init+0x40>)
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f90d 	bl	8000ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb2:	200f      	movs	r0, #15
 8000cb4:	f000 f808 	bl	8000cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb8:	f7ff fe4c 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023c00 	.word	0x40023c00

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x54>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x58>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f917 	bl	8000f1a <HAL_SYSTICK_Config>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00e      	b.n	8000d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d80a      	bhi.n	8000d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f000 f8ed 	bl	8000ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <HAL_InitTick+0x5c>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e000      	b.n	8000d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000004 	.word	0x20000004

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	20000144 	.word	0x20000144

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000144 	.word	0x20000144

08000d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f003 0307 	and.w	r3, r3, #7
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0a      	blt.n	8000df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	490c      	ldr	r1, [pc, #48]	; (8000e18 <__NVIC_SetPriority+0x4c>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df4:	e00a      	b.n	8000e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4908      	ldr	r1, [pc, #32]	; (8000e1c <__NVIC_SetPriority+0x50>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b04      	subs	r3, #4
 8000e04:	0112      	lsls	r2, r2, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	761a      	strb	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f1c3 0307 	rsb	r3, r3, #7
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4
 8000e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d902      	bls.n	8000e50 <NVIC_EncodePriority+0x30>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3b03      	subs	r3, #3
 8000e4e:	e000      	b.n	8000e52 <NVIC_EncodePriority+0x32>
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43d9      	mvns	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	4313      	orrs	r3, r2
         );
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3724      	adds	r7, #36	; 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e98:	d301      	bcc.n	8000e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00f      	b.n	8000ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <SysTick_Config+0x40>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f7ff ff8e 	bl	8000dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <SysTick_Config+0x40>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <SysTick_Config+0x40>)
 8000eb8:	2207      	movs	r2, #7
 8000eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	e000e010 	.word	0xe000e010

08000ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ff47 	bl	8000d68 <__NVIC_SetPriorityGrouping>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef4:	f7ff ff5c 	bl	8000db0 <__NVIC_GetPriorityGrouping>
 8000ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	6978      	ldr	r0, [r7, #20]
 8000f00:	f7ff ff8e 	bl	8000e20 <NVIC_EncodePriority>
 8000f04:	4602      	mov	r2, r0
 8000f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff5d 	bl	8000dcc <__NVIC_SetPriority>
}
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ffb0 	bl	8000e88 <SysTick_Config>
 8000f28:	4603      	mov	r3, r0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	; 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	e165      	b.n	800121c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f50:	2201      	movs	r2, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	f040 8154 	bne.w	8001216 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d005      	beq.n	8000f86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d130      	bne.n	8000fe8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	091b      	lsrs	r3, r3, #4
 8000fd2:	f003 0201 	and.w	r2, r3, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d017      	beq.n	8001024 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d123      	bne.n	8001078 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	08da      	lsrs	r2, r3, #3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3208      	adds	r2, #8
 8001038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	220f      	movs	r2, #15
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	691a      	ldr	r2, [r3, #16]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	08da      	lsrs	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3208      	adds	r2, #8
 8001072:	69b9      	ldr	r1, [r7, #24]
 8001074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0203 	and.w	r2, r3, #3
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 80ae 	beq.w	8001216 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b5d      	ldr	r3, [pc, #372]	; (8001234 <HAL_GPIO_Init+0x300>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a5c      	ldr	r2, [pc, #368]	; (8001234 <HAL_GPIO_Init+0x300>)
 80010c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ca:	4b5a      	ldr	r3, [pc, #360]	; (8001234 <HAL_GPIO_Init+0x300>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d6:	4a58      	ldr	r2, [pc, #352]	; (8001238 <HAL_GPIO_Init+0x304>)
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	089b      	lsrs	r3, r3, #2
 80010dc:	3302      	adds	r3, #2
 80010de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	220f      	movs	r2, #15
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4f      	ldr	r2, [pc, #316]	; (800123c <HAL_GPIO_Init+0x308>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d025      	beq.n	800114e <HAL_GPIO_Init+0x21a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4e      	ldr	r2, [pc, #312]	; (8001240 <HAL_GPIO_Init+0x30c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d01f      	beq.n	800114a <HAL_GPIO_Init+0x216>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4d      	ldr	r2, [pc, #308]	; (8001244 <HAL_GPIO_Init+0x310>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d019      	beq.n	8001146 <HAL_GPIO_Init+0x212>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4c      	ldr	r2, [pc, #304]	; (8001248 <HAL_GPIO_Init+0x314>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d013      	beq.n	8001142 <HAL_GPIO_Init+0x20e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4b      	ldr	r2, [pc, #300]	; (800124c <HAL_GPIO_Init+0x318>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d00d      	beq.n	800113e <HAL_GPIO_Init+0x20a>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4a      	ldr	r2, [pc, #296]	; (8001250 <HAL_GPIO_Init+0x31c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d007      	beq.n	800113a <HAL_GPIO_Init+0x206>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a49      	ldr	r2, [pc, #292]	; (8001254 <HAL_GPIO_Init+0x320>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d101      	bne.n	8001136 <HAL_GPIO_Init+0x202>
 8001132:	2306      	movs	r3, #6
 8001134:	e00c      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 8001136:	2307      	movs	r3, #7
 8001138:	e00a      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 800113a:	2305      	movs	r3, #5
 800113c:	e008      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 800113e:	2304      	movs	r3, #4
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 8001142:	2303      	movs	r3, #3
 8001144:	e004      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 8001146:	2302      	movs	r3, #2
 8001148:	e002      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 800114e:	2300      	movs	r3, #0
 8001150:	69fa      	ldr	r2, [r7, #28]
 8001152:	f002 0203 	and.w	r2, r2, #3
 8001156:	0092      	lsls	r2, r2, #2
 8001158:	4093      	lsls	r3, r2
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001160:	4935      	ldr	r1, [pc, #212]	; (8001238 <HAL_GPIO_Init+0x304>)
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	3302      	adds	r3, #2
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800116e:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <HAL_GPIO_Init+0x324>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001192:	4a31      	ldr	r2, [pc, #196]	; (8001258 <HAL_GPIO_Init+0x324>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001198:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <HAL_GPIO_Init+0x324>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011bc:	4a26      	ldr	r2, [pc, #152]	; (8001258 <HAL_GPIO_Init+0x324>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011c2:	4b25      	ldr	r3, [pc, #148]	; (8001258 <HAL_GPIO_Init+0x324>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011e6:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <HAL_GPIO_Init+0x324>)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <HAL_GPIO_Init+0x324>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001210:	4a11      	ldr	r2, [pc, #68]	; (8001258 <HAL_GPIO_Init+0x324>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3301      	adds	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	2b0f      	cmp	r3, #15
 8001220:	f67f ae96 	bls.w	8000f50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40013800 	.word	0x40013800
 800123c:	40020000 	.word	0x40020000
 8001240:	40020400 	.word	0x40020400
 8001244:	40020800 	.word	0x40020800
 8001248:	40020c00 	.word	0x40020c00
 800124c:	40021000 	.word	0x40021000
 8001250:	40021400 	.word	0x40021400
 8001254:	40021800 	.word	0x40021800
 8001258:	40013c00 	.word	0x40013c00

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
 8001268:	4613      	mov	r3, r2
 800126a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001278:	e003      	b.n	8001282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	041a      	lsls	r2, r3, #16
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	619a      	str	r2, [r3, #24]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e0cc      	b.n	800143e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012a4:	4b68      	ldr	r3, [pc, #416]	; (8001448 <HAL_RCC_ClockConfig+0x1b8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 030f 	and.w	r3, r3, #15
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d90c      	bls.n	80012cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b2:	4b65      	ldr	r3, [pc, #404]	; (8001448 <HAL_RCC_ClockConfig+0x1b8>)
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ba:	4b63      	ldr	r3, [pc, #396]	; (8001448 <HAL_RCC_ClockConfig+0x1b8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d001      	beq.n	80012cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e0b8      	b.n	800143e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d020      	beq.n	800131a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d005      	beq.n	80012f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012e4:	4b59      	ldr	r3, [pc, #356]	; (800144c <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	4a58      	ldr	r2, [pc, #352]	; (800144c <HAL_RCC_ClockConfig+0x1bc>)
 80012ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012fc:	4b53      	ldr	r3, [pc, #332]	; (800144c <HAL_RCC_ClockConfig+0x1bc>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	4a52      	ldr	r2, [pc, #328]	; (800144c <HAL_RCC_ClockConfig+0x1bc>)
 8001302:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001308:	4b50      	ldr	r3, [pc, #320]	; (800144c <HAL_RCC_ClockConfig+0x1bc>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	494d      	ldr	r1, [pc, #308]	; (800144c <HAL_RCC_ClockConfig+0x1bc>)
 8001316:	4313      	orrs	r3, r2
 8001318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d044      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d107      	bne.n	800133e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132e:	4b47      	ldr	r3, [pc, #284]	; (800144c <HAL_RCC_ClockConfig+0x1bc>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d119      	bne.n	800136e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e07f      	b.n	800143e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d003      	beq.n	800134e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800134a:	2b03      	cmp	r3, #3
 800134c:	d107      	bne.n	800135e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800134e:	4b3f      	ldr	r3, [pc, #252]	; (800144c <HAL_RCC_ClockConfig+0x1bc>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d109      	bne.n	800136e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e06f      	b.n	800143e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135e:	4b3b      	ldr	r3, [pc, #236]	; (800144c <HAL_RCC_ClockConfig+0x1bc>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e067      	b.n	800143e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800136e:	4b37      	ldr	r3, [pc, #220]	; (800144c <HAL_RCC_ClockConfig+0x1bc>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f023 0203 	bic.w	r2, r3, #3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	4934      	ldr	r1, [pc, #208]	; (800144c <HAL_RCC_ClockConfig+0x1bc>)
 800137c:	4313      	orrs	r3, r2
 800137e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001380:	f7ff fce6 	bl	8000d50 <HAL_GetTick>
 8001384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001386:	e00a      	b.n	800139e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001388:	f7ff fce2 	bl	8000d50 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	f241 3288 	movw	r2, #5000	; 0x1388
 8001396:	4293      	cmp	r3, r2
 8001398:	d901      	bls.n	800139e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e04f      	b.n	800143e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800139e:	4b2b      	ldr	r3, [pc, #172]	; (800144c <HAL_RCC_ClockConfig+0x1bc>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 020c 	and.w	r2, r3, #12
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d1eb      	bne.n	8001388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <HAL_RCC_ClockConfig+0x1b8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 030f 	and.w	r3, r3, #15
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d20c      	bcs.n	80013d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013be:	4b22      	ldr	r3, [pc, #136]	; (8001448 <HAL_RCC_ClockConfig+0x1b8>)
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c6:	4b20      	ldr	r3, [pc, #128]	; (8001448 <HAL_RCC_ClockConfig+0x1b8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d001      	beq.n	80013d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e032      	b.n	800143e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d008      	beq.n	80013f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013e4:	4b19      	ldr	r3, [pc, #100]	; (800144c <HAL_RCC_ClockConfig+0x1bc>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	4916      	ldr	r1, [pc, #88]	; (800144c <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0308 	and.w	r3, r3, #8
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d009      	beq.n	8001416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_RCC_ClockConfig+0x1bc>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	490e      	ldr	r1, [pc, #56]	; (800144c <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	4313      	orrs	r3, r2
 8001414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001416:	f000 f855 	bl	80014c4 <HAL_RCC_GetSysClockFreq>
 800141a:	4602      	mov	r2, r0
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	091b      	lsrs	r3, r3, #4
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	490a      	ldr	r1, [pc, #40]	; (8001450 <HAL_RCC_ClockConfig+0x1c0>)
 8001428:	5ccb      	ldrb	r3, [r1, r3]
 800142a:	fa22 f303 	lsr.w	r3, r2, r3
 800142e:	4a09      	ldr	r2, [pc, #36]	; (8001454 <HAL_RCC_ClockConfig+0x1c4>)
 8001430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_RCC_ClockConfig+0x1c8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fc46 	bl	8000cc8 <HAL_InitTick>

  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023c00 	.word	0x40023c00
 800144c:	40023800 	.word	0x40023800
 8001450:	0800676c 	.word	0x0800676c
 8001454:	20000000 	.word	0x20000000
 8001458:	20000004 	.word	0x20000004

0800145c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <HAL_RCC_GetHCLKFreq+0x14>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000000 	.word	0x20000000

08001474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001478:	f7ff fff0 	bl	800145c <HAL_RCC_GetHCLKFreq>
 800147c:	4602      	mov	r2, r0
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	0a9b      	lsrs	r3, r3, #10
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	4903      	ldr	r1, [pc, #12]	; (8001498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800148a:	5ccb      	ldrb	r3, [r1, r3]
 800148c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	0800677c 	.word	0x0800677c

0800149c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014a0:	f7ff ffdc 	bl	800145c <HAL_RCC_GetHCLKFreq>
 80014a4:	4602      	mov	r2, r0
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	0b5b      	lsrs	r3, r3, #13
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	4903      	ldr	r1, [pc, #12]	; (80014c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014b2:	5ccb      	ldrb	r3, [r1, r3]
 80014b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40023800 	.word	0x40023800
 80014c0:	0800677c 	.word	0x0800677c

080014c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014c8:	b0a6      	sub	sp, #152	; 0x98
 80014ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014ea:	4bc8      	ldr	r3, [pc, #800]	; (800180c <HAL_RCC_GetSysClockFreq+0x348>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b0c      	cmp	r3, #12
 80014f4:	f200 817e 	bhi.w	80017f4 <HAL_RCC_GetSysClockFreq+0x330>
 80014f8:	a201      	add	r2, pc, #4	; (adr r2, 8001500 <HAL_RCC_GetSysClockFreq+0x3c>)
 80014fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fe:	bf00      	nop
 8001500:	08001535 	.word	0x08001535
 8001504:	080017f5 	.word	0x080017f5
 8001508:	080017f5 	.word	0x080017f5
 800150c:	080017f5 	.word	0x080017f5
 8001510:	0800153d 	.word	0x0800153d
 8001514:	080017f5 	.word	0x080017f5
 8001518:	080017f5 	.word	0x080017f5
 800151c:	080017f5 	.word	0x080017f5
 8001520:	08001545 	.word	0x08001545
 8001524:	080017f5 	.word	0x080017f5
 8001528:	080017f5 	.word	0x080017f5
 800152c:	080017f5 	.word	0x080017f5
 8001530:	080016af 	.word	0x080016af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001534:	4bb6      	ldr	r3, [pc, #728]	; (8001810 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001536:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800153a:	e15f      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800153c:	4bb5      	ldr	r3, [pc, #724]	; (8001814 <HAL_RCC_GetSysClockFreq+0x350>)
 800153e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001542:	e15b      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001544:	4bb1      	ldr	r3, [pc, #708]	; (800180c <HAL_RCC_GetSysClockFreq+0x348>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800154c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001550:	4bae      	ldr	r3, [pc, #696]	; (800180c <HAL_RCC_GetSysClockFreq+0x348>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d031      	beq.n	80015c0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800155c:	4bab      	ldr	r3, [pc, #684]	; (800180c <HAL_RCC_GetSysClockFreq+0x348>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	099b      	lsrs	r3, r3, #6
 8001562:	2200      	movs	r2, #0
 8001564:	66bb      	str	r3, [r7, #104]	; 0x68
 8001566:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001568:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800156a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800156e:	663b      	str	r3, [r7, #96]	; 0x60
 8001570:	2300      	movs	r3, #0
 8001572:	667b      	str	r3, [r7, #100]	; 0x64
 8001574:	4ba7      	ldr	r3, [pc, #668]	; (8001814 <HAL_RCC_GetSysClockFreq+0x350>)
 8001576:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800157a:	462a      	mov	r2, r5
 800157c:	fb03 f202 	mul.w	r2, r3, r2
 8001580:	2300      	movs	r3, #0
 8001582:	4621      	mov	r1, r4
 8001584:	fb01 f303 	mul.w	r3, r1, r3
 8001588:	4413      	add	r3, r2
 800158a:	4aa2      	ldr	r2, [pc, #648]	; (8001814 <HAL_RCC_GetSysClockFreq+0x350>)
 800158c:	4621      	mov	r1, r4
 800158e:	fba1 1202 	umull	r1, r2, r1, r2
 8001592:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001594:	460a      	mov	r2, r1
 8001596:	67ba      	str	r2, [r7, #120]	; 0x78
 8001598:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800159a:	4413      	add	r3, r2
 800159c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800159e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015a2:	2200      	movs	r2, #0
 80015a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80015a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80015a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80015ac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80015b0:	f7fe fe7e 	bl	80002b0 <__aeabi_uldivmod>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4613      	mov	r3, r2
 80015ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80015be:	e064      	b.n	800168a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c0:	4b92      	ldr	r3, [pc, #584]	; (800180c <HAL_RCC_GetSysClockFreq+0x348>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	099b      	lsrs	r3, r3, #6
 80015c6:	2200      	movs	r2, #0
 80015c8:	653b      	str	r3, [r7, #80]	; 0x50
 80015ca:	657a      	str	r2, [r7, #84]	; 0x54
 80015cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80015d4:	2300      	movs	r3, #0
 80015d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015d8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80015dc:	4622      	mov	r2, r4
 80015de:	462b      	mov	r3, r5
 80015e0:	f04f 0000 	mov.w	r0, #0
 80015e4:	f04f 0100 	mov.w	r1, #0
 80015e8:	0159      	lsls	r1, r3, #5
 80015ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015ee:	0150      	lsls	r0, r2, #5
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4621      	mov	r1, r4
 80015f6:	1a51      	subs	r1, r2, r1
 80015f8:	6139      	str	r1, [r7, #16]
 80015fa:	4629      	mov	r1, r5
 80015fc:	eb63 0301 	sbc.w	r3, r3, r1
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	f04f 0300 	mov.w	r3, #0
 800160a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800160e:	4659      	mov	r1, fp
 8001610:	018b      	lsls	r3, r1, #6
 8001612:	4651      	mov	r1, sl
 8001614:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001618:	4651      	mov	r1, sl
 800161a:	018a      	lsls	r2, r1, #6
 800161c:	4651      	mov	r1, sl
 800161e:	ebb2 0801 	subs.w	r8, r2, r1
 8001622:	4659      	mov	r1, fp
 8001624:	eb63 0901 	sbc.w	r9, r3, r1
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001634:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001638:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800163c:	4690      	mov	r8, r2
 800163e:	4699      	mov	r9, r3
 8001640:	4623      	mov	r3, r4
 8001642:	eb18 0303 	adds.w	r3, r8, r3
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	462b      	mov	r3, r5
 800164a:	eb49 0303 	adc.w	r3, r9, r3
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800165c:	4629      	mov	r1, r5
 800165e:	028b      	lsls	r3, r1, #10
 8001660:	4621      	mov	r1, r4
 8001662:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001666:	4621      	mov	r1, r4
 8001668:	028a      	lsls	r2, r1, #10
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001672:	2200      	movs	r2, #0
 8001674:	643b      	str	r3, [r7, #64]	; 0x40
 8001676:	647a      	str	r2, [r7, #68]	; 0x44
 8001678:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800167c:	f7fe fe18 	bl	80002b0 <__aeabi_uldivmod>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4613      	mov	r3, r2
 8001686:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800168a:	4b60      	ldr	r3, [pc, #384]	; (800180c <HAL_RCC_GetSysClockFreq+0x348>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	0c1b      	lsrs	r3, r3, #16
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	3301      	adds	r3, #1
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800169c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80016a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80016ac:	e0a6      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016ae:	4b57      	ldr	r3, [pc, #348]	; (800180c <HAL_RCC_GetSysClockFreq+0x348>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016ba:	4b54      	ldr	r3, [pc, #336]	; (800180c <HAL_RCC_GetSysClockFreq+0x348>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d02a      	beq.n	800171c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c6:	4b51      	ldr	r3, [pc, #324]	; (800180c <HAL_RCC_GetSysClockFreq+0x348>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	099b      	lsrs	r3, r3, #6
 80016cc:	2200      	movs	r2, #0
 80016ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80016d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80016d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016d8:	2100      	movs	r1, #0
 80016da:	4b4e      	ldr	r3, [pc, #312]	; (8001814 <HAL_RCC_GetSysClockFreq+0x350>)
 80016dc:	fb03 f201 	mul.w	r2, r3, r1
 80016e0:	2300      	movs	r3, #0
 80016e2:	fb00 f303 	mul.w	r3, r0, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	4a4a      	ldr	r2, [pc, #296]	; (8001814 <HAL_RCC_GetSysClockFreq+0x350>)
 80016ea:	fba0 1202 	umull	r1, r2, r0, r2
 80016ee:	677a      	str	r2, [r7, #116]	; 0x74
 80016f0:	460a      	mov	r2, r1
 80016f2:	673a      	str	r2, [r7, #112]	; 0x70
 80016f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80016f6:	4413      	add	r3, r2
 80016f8:	677b      	str	r3, [r7, #116]	; 0x74
 80016fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016fe:	2200      	movs	r2, #0
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
 8001702:	637a      	str	r2, [r7, #52]	; 0x34
 8001704:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001708:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800170c:	f7fe fdd0 	bl	80002b0 <__aeabi_uldivmod>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4613      	mov	r3, r2
 8001716:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800171a:	e05b      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171c:	4b3b      	ldr	r3, [pc, #236]	; (800180c <HAL_RCC_GetSysClockFreq+0x348>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	099b      	lsrs	r3, r3, #6
 8001722:	2200      	movs	r2, #0
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
 8001726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800172e:	623b      	str	r3, [r7, #32]
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
 8001734:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001738:	4642      	mov	r2, r8
 800173a:	464b      	mov	r3, r9
 800173c:	f04f 0000 	mov.w	r0, #0
 8001740:	f04f 0100 	mov.w	r1, #0
 8001744:	0159      	lsls	r1, r3, #5
 8001746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800174a:	0150      	lsls	r0, r2, #5
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4641      	mov	r1, r8
 8001752:	ebb2 0a01 	subs.w	sl, r2, r1
 8001756:	4649      	mov	r1, r9
 8001758:	eb63 0b01 	sbc.w	fp, r3, r1
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001768:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800176c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001770:	ebb2 040a 	subs.w	r4, r2, sl
 8001774:	eb63 050b 	sbc.w	r5, r3, fp
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	00eb      	lsls	r3, r5, #3
 8001782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001786:	00e2      	lsls	r2, r4, #3
 8001788:	4614      	mov	r4, r2
 800178a:	461d      	mov	r5, r3
 800178c:	4643      	mov	r3, r8
 800178e:	18e3      	adds	r3, r4, r3
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	464b      	mov	r3, r9
 8001794:	eb45 0303 	adc.w	r3, r5, r3
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017a6:	4629      	mov	r1, r5
 80017a8:	028b      	lsls	r3, r1, #10
 80017aa:	4621      	mov	r1, r4
 80017ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017b0:	4621      	mov	r1, r4
 80017b2:	028a      	lsls	r2, r1, #10
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017bc:	2200      	movs	r2, #0
 80017be:	61bb      	str	r3, [r7, #24]
 80017c0:	61fa      	str	r2, [r7, #28]
 80017c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017c6:	f7fe fd73 	bl	80002b0 <__aeabi_uldivmod>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4613      	mov	r3, r2
 80017d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <HAL_RCC_GetSysClockFreq+0x348>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	0f1b      	lsrs	r3, r3, #28
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80017e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80017e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80017f2:	e003      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_RCC_GetSysClockFreq+0x34c>)
 80017f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80017fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001800:	4618      	mov	r0, r3
 8001802:	3798      	adds	r7, #152	; 0x98
 8001804:	46bd      	mov	sp, r7
 8001806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	00f42400 	.word	0x00f42400
 8001814:	017d7840 	.word	0x017d7840

08001818 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e28d      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8083 	beq.w	800193e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001838:	4b94      	ldr	r3, [pc, #592]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	2b04      	cmp	r3, #4
 8001842:	d019      	beq.n	8001878 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001844:	4b91      	ldr	r3, [pc, #580]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800184c:	2b08      	cmp	r3, #8
 800184e:	d106      	bne.n	800185e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001850:	4b8e      	ldr	r3, [pc, #568]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800185c:	d00c      	beq.n	8001878 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800185e:	4b8b      	ldr	r3, [pc, #556]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001866:	2b0c      	cmp	r3, #12
 8001868:	d112      	bne.n	8001890 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800186a:	4b88      	ldr	r3, [pc, #544]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001876:	d10b      	bne.n	8001890 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001878:	4b84      	ldr	r3, [pc, #528]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d05b      	beq.n	800193c <HAL_RCC_OscConfig+0x124>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d157      	bne.n	800193c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e25a      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001898:	d106      	bne.n	80018a8 <HAL_RCC_OscConfig+0x90>
 800189a:	4b7c      	ldr	r3, [pc, #496]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a7b      	ldr	r2, [pc, #492]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e01d      	b.n	80018e4 <HAL_RCC_OscConfig+0xcc>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0xb4>
 80018b2:	4b76      	ldr	r3, [pc, #472]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a75      	ldr	r2, [pc, #468]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80018b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b73      	ldr	r3, [pc, #460]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a72      	ldr	r2, [pc, #456]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e00b      	b.n	80018e4 <HAL_RCC_OscConfig+0xcc>
 80018cc:	4b6f      	ldr	r3, [pc, #444]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a6e      	ldr	r2, [pc, #440]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80018d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b6c      	ldr	r3, [pc, #432]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a6b      	ldr	r2, [pc, #428]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80018de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d013      	beq.n	8001914 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff fa30 	bl	8000d50 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f4:	f7ff fa2c 	bl	8000d50 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e21f      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	4b61      	ldr	r3, [pc, #388]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0xdc>
 8001912:	e014      	b.n	800193e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7ff fa1c 	bl	8000d50 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800191c:	f7ff fa18 	bl	8000d50 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b64      	cmp	r3, #100	; 0x64
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e20b      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192e:	4b57      	ldr	r3, [pc, #348]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x104>
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d06f      	beq.n	8001a2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800194a:	4b50      	ldr	r3, [pc, #320]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b00      	cmp	r3, #0
 8001954:	d017      	beq.n	8001986 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001956:	4b4d      	ldr	r3, [pc, #308]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800195e:	2b08      	cmp	r3, #8
 8001960:	d105      	bne.n	800196e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001962:	4b4a      	ldr	r3, [pc, #296]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800196e:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001976:	2b0c      	cmp	r3, #12
 8001978:	d11c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800197a:	4b44      	ldr	r3, [pc, #272]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d116      	bne.n	80019b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001986:	4b41      	ldr	r3, [pc, #260]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <HAL_RCC_OscConfig+0x186>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d001      	beq.n	800199e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e1d3      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199e:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4937      	ldr	r1, [pc, #220]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	e03a      	b.n	8001a2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d020      	beq.n	80019fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019bc:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <HAL_RCC_OscConfig+0x278>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7ff f9c5 	bl	8000d50 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ca:	f7ff f9c1 	bl	8000d50 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e1b4      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019dc:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e8:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4925      	ldr	r1, [pc, #148]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]
 80019fc:	e015      	b.n	8001a2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fe:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <HAL_RCC_OscConfig+0x278>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff f9a4 	bl	8000d50 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a0c:	f7ff f9a0 	bl	8000d50 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e193      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d036      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d016      	beq.n	8001a6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_RCC_OscConfig+0x27c>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a44:	f7ff f984 	bl	8000d50 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff f980 	bl	8000d50 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e173      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x234>
 8001a6a:	e01b      	b.n	8001aa4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_RCC_OscConfig+0x27c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a72:	f7ff f96d 	bl	8000d50 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a78:	e00e      	b.n	8001a98 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7a:	f7ff f969 	bl	8000d50 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d907      	bls.n	8001a98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e15c      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	42470000 	.word	0x42470000
 8001a94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a98:	4b8a      	ldr	r3, [pc, #552]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1ea      	bne.n	8001a7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 8097 	beq.w	8001be0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab6:	4b83      	ldr	r3, [pc, #524]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10f      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	4b7f      	ldr	r3, [pc, #508]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a7e      	ldr	r2, [pc, #504]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b7c      	ldr	r3, [pc, #496]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae2:	4b79      	ldr	r3, [pc, #484]	; (8001cc8 <HAL_RCC_OscConfig+0x4b0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d118      	bne.n	8001b20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aee:	4b76      	ldr	r3, [pc, #472]	; (8001cc8 <HAL_RCC_OscConfig+0x4b0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a75      	ldr	r2, [pc, #468]	; (8001cc8 <HAL_RCC_OscConfig+0x4b0>)
 8001af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afa:	f7ff f929 	bl	8000d50 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b02:	f7ff f925 	bl	8000d50 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e118      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b14:	4b6c      	ldr	r3, [pc, #432]	; (8001cc8 <HAL_RCC_OscConfig+0x4b0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d106      	bne.n	8001b36 <HAL_RCC_OscConfig+0x31e>
 8001b28:	4b66      	ldr	r3, [pc, #408]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2c:	4a65      	ldr	r2, [pc, #404]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6713      	str	r3, [r2, #112]	; 0x70
 8001b34:	e01c      	b.n	8001b70 <HAL_RCC_OscConfig+0x358>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b05      	cmp	r3, #5
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x340>
 8001b3e:	4b61      	ldr	r3, [pc, #388]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b42:	4a60      	ldr	r2, [pc, #384]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4a:	4b5e      	ldr	r3, [pc, #376]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4e:	4a5d      	ldr	r2, [pc, #372]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6713      	str	r3, [r2, #112]	; 0x70
 8001b56:	e00b      	b.n	8001b70 <HAL_RCC_OscConfig+0x358>
 8001b58:	4b5a      	ldr	r3, [pc, #360]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5c:	4a59      	ldr	r2, [pc, #356]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b5e:	f023 0301 	bic.w	r3, r3, #1
 8001b62:	6713      	str	r3, [r2, #112]	; 0x70
 8001b64:	4b57      	ldr	r3, [pc, #348]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b68:	4a56      	ldr	r2, [pc, #344]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b6a:	f023 0304 	bic.w	r3, r3, #4
 8001b6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d015      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b78:	f7ff f8ea 	bl	8000d50 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b80:	f7ff f8e6 	bl	8000d50 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e0d7      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b96:	4b4b      	ldr	r3, [pc, #300]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0ee      	beq.n	8001b80 <HAL_RCC_OscConfig+0x368>
 8001ba2:	e014      	b.n	8001bce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7ff f8d4 	bl	8000d50 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bac:	f7ff f8d0 	bl	8000d50 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e0c1      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc2:	4b40      	ldr	r3, [pc, #256]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1ee      	bne.n	8001bac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d105      	bne.n	8001be0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd4:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	4a3a      	ldr	r2, [pc, #232]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80ad 	beq.w	8001d44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bea:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d060      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d145      	bne.n	8001c8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfe:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <HAL_RCC_OscConfig+0x4b4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff f8a4 	bl	8000d50 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7ff f8a0 	bl	8000d50 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e093      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69da      	ldr	r2, [r3, #28]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	019b      	lsls	r3, r3, #6
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	085b      	lsrs	r3, r3, #1
 8001c42:	3b01      	subs	r3, #1
 8001c44:	041b      	lsls	r3, r3, #16
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	061b      	lsls	r3, r3, #24
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	071b      	lsls	r3, r3, #28
 8001c56:	491b      	ldr	r1, [pc, #108]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_RCC_OscConfig+0x4b4>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff f875 	bl	8000d50 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7ff f871 	bl	8000d50 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e064      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x452>
 8001c88:	e05c      	b.n	8001d44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_RCC_OscConfig+0x4b4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7ff f85e 	bl	8000d50 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c98:	f7ff f85a 	bl	8000d50 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e04d      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x480>
 8001cb6:	e045      	b.n	8001d44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d107      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e040      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <HAL_RCC_OscConfig+0x538>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d030      	beq.n	8001d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d129      	bne.n	8001d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d122      	bne.n	8001d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d00:	4013      	ands	r3, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d119      	bne.n	8001d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d16:	085b      	lsrs	r3, r3, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d10f      	bne.n	8001d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800

08001d54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e03f      	b.n	8001de6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d106      	bne.n	8001d80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7fe fe16 	bl	80009ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2224      	movs	r2, #36	; 0x24
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f829 	bl	8001df0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695a      	ldr	r2, [r3, #20]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001df4:	b0c0      	sub	sp, #256	; 0x100
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e0c:	68d9      	ldr	r1, [r3, #12]
 8001e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	ea40 0301 	orr.w	r3, r0, r1
 8001e18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	431a      	orrs	r2, r3
 8001e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001e48:	f021 010c 	bic.w	r1, r1, #12
 8001e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e56:	430b      	orrs	r3, r1
 8001e58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e6a:	6999      	ldr	r1, [r3, #24]
 8001e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	ea40 0301 	orr.w	r3, r0, r1
 8001e76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4b8f      	ldr	r3, [pc, #572]	; (80020bc <UART_SetConfig+0x2cc>)
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d005      	beq.n	8001e90 <UART_SetConfig+0xa0>
 8001e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b8d      	ldr	r3, [pc, #564]	; (80020c0 <UART_SetConfig+0x2d0>)
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d104      	bne.n	8001e9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e90:	f7ff fb04 	bl	800149c <HAL_RCC_GetPCLK2Freq>
 8001e94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001e98:	e003      	b.n	8001ea2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e9a:	f7ff faeb 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
 8001e9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eac:	f040 810c 	bne.w	80020c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001eba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001ebe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001ec2:	4622      	mov	r2, r4
 8001ec4:	462b      	mov	r3, r5
 8001ec6:	1891      	adds	r1, r2, r2
 8001ec8:	65b9      	str	r1, [r7, #88]	; 0x58
 8001eca:	415b      	adcs	r3, r3
 8001ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ece:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	eb12 0801 	adds.w	r8, r2, r1
 8001ed8:	4629      	mov	r1, r5
 8001eda:	eb43 0901 	adc.w	r9, r3, r1
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ef2:	4690      	mov	r8, r2
 8001ef4:	4699      	mov	r9, r3
 8001ef6:	4623      	mov	r3, r4
 8001ef8:	eb18 0303 	adds.w	r3, r8, r3
 8001efc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001f00:	462b      	mov	r3, r5
 8001f02:	eb49 0303 	adc.w	r3, r9, r3
 8001f06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001f1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001f1e:	460b      	mov	r3, r1
 8001f20:	18db      	adds	r3, r3, r3
 8001f22:	653b      	str	r3, [r7, #80]	; 0x50
 8001f24:	4613      	mov	r3, r2
 8001f26:	eb42 0303 	adc.w	r3, r2, r3
 8001f2a:	657b      	str	r3, [r7, #84]	; 0x54
 8001f2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001f34:	f7fe f9bc 	bl	80002b0 <__aeabi_uldivmod>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4b61      	ldr	r3, [pc, #388]	; (80020c4 <UART_SetConfig+0x2d4>)
 8001f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	011c      	lsls	r4, r3, #4
 8001f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001f54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001f58:	4642      	mov	r2, r8
 8001f5a:	464b      	mov	r3, r9
 8001f5c:	1891      	adds	r1, r2, r2
 8001f5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001f60:	415b      	adcs	r3, r3
 8001f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f68:	4641      	mov	r1, r8
 8001f6a:	eb12 0a01 	adds.w	sl, r2, r1
 8001f6e:	4649      	mov	r1, r9
 8001f70:	eb43 0b01 	adc.w	fp, r3, r1
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f88:	4692      	mov	sl, r2
 8001f8a:	469b      	mov	fp, r3
 8001f8c:	4643      	mov	r3, r8
 8001f8e:	eb1a 0303 	adds.w	r3, sl, r3
 8001f92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f96:	464b      	mov	r3, r9
 8001f98:	eb4b 0303 	adc.w	r3, fp, r3
 8001f9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001fac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001fb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	18db      	adds	r3, r3, r3
 8001fb8:	643b      	str	r3, [r7, #64]	; 0x40
 8001fba:	4613      	mov	r3, r2
 8001fbc:	eb42 0303 	adc.w	r3, r2, r3
 8001fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8001fc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001fca:	f7fe f971 	bl	80002b0 <__aeabi_uldivmod>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <UART_SetConfig+0x2d4>)
 8001fd6:	fba3 2301 	umull	r2, r3, r3, r1
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	2264      	movs	r2, #100	; 0x64
 8001fde:	fb02 f303 	mul.w	r3, r2, r3
 8001fe2:	1acb      	subs	r3, r1, r3
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001fea:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <UART_SetConfig+0x2d4>)
 8001fec:	fba3 2302 	umull	r2, r3, r3, r2
 8001ff0:	095b      	lsrs	r3, r3, #5
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001ff8:	441c      	add	r4, r3
 8001ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ffe:	2200      	movs	r2, #0
 8002000:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002004:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002008:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800200c:	4642      	mov	r2, r8
 800200e:	464b      	mov	r3, r9
 8002010:	1891      	adds	r1, r2, r2
 8002012:	63b9      	str	r1, [r7, #56]	; 0x38
 8002014:	415b      	adcs	r3, r3
 8002016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800201c:	4641      	mov	r1, r8
 800201e:	1851      	adds	r1, r2, r1
 8002020:	6339      	str	r1, [r7, #48]	; 0x30
 8002022:	4649      	mov	r1, r9
 8002024:	414b      	adcs	r3, r1
 8002026:	637b      	str	r3, [r7, #52]	; 0x34
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002034:	4659      	mov	r1, fp
 8002036:	00cb      	lsls	r3, r1, #3
 8002038:	4651      	mov	r1, sl
 800203a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800203e:	4651      	mov	r1, sl
 8002040:	00ca      	lsls	r2, r1, #3
 8002042:	4610      	mov	r0, r2
 8002044:	4619      	mov	r1, r3
 8002046:	4603      	mov	r3, r0
 8002048:	4642      	mov	r2, r8
 800204a:	189b      	adds	r3, r3, r2
 800204c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002050:	464b      	mov	r3, r9
 8002052:	460a      	mov	r2, r1
 8002054:	eb42 0303 	adc.w	r3, r2, r3
 8002058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800205c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002068:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800206c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002070:	460b      	mov	r3, r1
 8002072:	18db      	adds	r3, r3, r3
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
 8002076:	4613      	mov	r3, r2
 8002078:	eb42 0303 	adc.w	r3, r2, r3
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800207e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002082:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002086:	f7fe f913 	bl	80002b0 <__aeabi_uldivmod>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <UART_SetConfig+0x2d4>)
 8002090:	fba3 1302 	umull	r1, r3, r3, r2
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	2164      	movs	r1, #100	; 0x64
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	3332      	adds	r3, #50	; 0x32
 80020a2:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <UART_SetConfig+0x2d4>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	095b      	lsrs	r3, r3, #5
 80020aa:	f003 0207 	and.w	r2, r3, #7
 80020ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4422      	add	r2, r4
 80020b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80020b8:	e106      	b.n	80022c8 <UART_SetConfig+0x4d8>
 80020ba:	bf00      	nop
 80020bc:	40011000 	.word	0x40011000
 80020c0:	40011400 	.word	0x40011400
 80020c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020cc:	2200      	movs	r2, #0
 80020ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80020d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80020da:	4642      	mov	r2, r8
 80020dc:	464b      	mov	r3, r9
 80020de:	1891      	adds	r1, r2, r2
 80020e0:	6239      	str	r1, [r7, #32]
 80020e2:	415b      	adcs	r3, r3
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
 80020e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020ea:	4641      	mov	r1, r8
 80020ec:	1854      	adds	r4, r2, r1
 80020ee:	4649      	mov	r1, r9
 80020f0:	eb43 0501 	adc.w	r5, r3, r1
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	f04f 0300 	mov.w	r3, #0
 80020fc:	00eb      	lsls	r3, r5, #3
 80020fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002102:	00e2      	lsls	r2, r4, #3
 8002104:	4614      	mov	r4, r2
 8002106:	461d      	mov	r5, r3
 8002108:	4643      	mov	r3, r8
 800210a:	18e3      	adds	r3, r4, r3
 800210c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002110:	464b      	mov	r3, r9
 8002112:	eb45 0303 	adc.w	r3, r5, r3
 8002116:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800211a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002126:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002136:	4629      	mov	r1, r5
 8002138:	008b      	lsls	r3, r1, #2
 800213a:	4621      	mov	r1, r4
 800213c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002140:	4621      	mov	r1, r4
 8002142:	008a      	lsls	r2, r1, #2
 8002144:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002148:	f7fe f8b2 	bl	80002b0 <__aeabi_uldivmod>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4b60      	ldr	r3, [pc, #384]	; (80022d4 <UART_SetConfig+0x4e4>)
 8002152:	fba3 2302 	umull	r2, r3, r3, r2
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	011c      	lsls	r4, r3, #4
 800215a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800215e:	2200      	movs	r2, #0
 8002160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002164:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002168:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800216c:	4642      	mov	r2, r8
 800216e:	464b      	mov	r3, r9
 8002170:	1891      	adds	r1, r2, r2
 8002172:	61b9      	str	r1, [r7, #24]
 8002174:	415b      	adcs	r3, r3
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800217c:	4641      	mov	r1, r8
 800217e:	1851      	adds	r1, r2, r1
 8002180:	6139      	str	r1, [r7, #16]
 8002182:	4649      	mov	r1, r9
 8002184:	414b      	adcs	r3, r1
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002194:	4659      	mov	r1, fp
 8002196:	00cb      	lsls	r3, r1, #3
 8002198:	4651      	mov	r1, sl
 800219a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800219e:	4651      	mov	r1, sl
 80021a0:	00ca      	lsls	r2, r1, #3
 80021a2:	4610      	mov	r0, r2
 80021a4:	4619      	mov	r1, r3
 80021a6:	4603      	mov	r3, r0
 80021a8:	4642      	mov	r2, r8
 80021aa:	189b      	adds	r3, r3, r2
 80021ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021b0:	464b      	mov	r3, r9
 80021b2:	460a      	mov	r2, r1
 80021b4:	eb42 0303 	adc.w	r3, r2, r3
 80021b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80021c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80021d4:	4649      	mov	r1, r9
 80021d6:	008b      	lsls	r3, r1, #2
 80021d8:	4641      	mov	r1, r8
 80021da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021de:	4641      	mov	r1, r8
 80021e0:	008a      	lsls	r2, r1, #2
 80021e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80021e6:	f7fe f863 	bl	80002b0 <__aeabi_uldivmod>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4611      	mov	r1, r2
 80021f0:	4b38      	ldr	r3, [pc, #224]	; (80022d4 <UART_SetConfig+0x4e4>)
 80021f2:	fba3 2301 	umull	r2, r3, r3, r1
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	2264      	movs	r2, #100	; 0x64
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	1acb      	subs	r3, r1, r3
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	3332      	adds	r3, #50	; 0x32
 8002204:	4a33      	ldr	r2, [pc, #204]	; (80022d4 <UART_SetConfig+0x4e4>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002210:	441c      	add	r4, r3
 8002212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002216:	2200      	movs	r2, #0
 8002218:	673b      	str	r3, [r7, #112]	; 0x70
 800221a:	677a      	str	r2, [r7, #116]	; 0x74
 800221c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002220:	4642      	mov	r2, r8
 8002222:	464b      	mov	r3, r9
 8002224:	1891      	adds	r1, r2, r2
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	415b      	adcs	r3, r3
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002230:	4641      	mov	r1, r8
 8002232:	1851      	adds	r1, r2, r1
 8002234:	6039      	str	r1, [r7, #0]
 8002236:	4649      	mov	r1, r9
 8002238:	414b      	adcs	r3, r1
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002248:	4659      	mov	r1, fp
 800224a:	00cb      	lsls	r3, r1, #3
 800224c:	4651      	mov	r1, sl
 800224e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002252:	4651      	mov	r1, sl
 8002254:	00ca      	lsls	r2, r1, #3
 8002256:	4610      	mov	r0, r2
 8002258:	4619      	mov	r1, r3
 800225a:	4603      	mov	r3, r0
 800225c:	4642      	mov	r2, r8
 800225e:	189b      	adds	r3, r3, r2
 8002260:	66bb      	str	r3, [r7, #104]	; 0x68
 8002262:	464b      	mov	r3, r9
 8002264:	460a      	mov	r2, r1
 8002266:	eb42 0303 	adc.w	r3, r2, r3
 800226a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800226c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	663b      	str	r3, [r7, #96]	; 0x60
 8002276:	667a      	str	r2, [r7, #100]	; 0x64
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002284:	4649      	mov	r1, r9
 8002286:	008b      	lsls	r3, r1, #2
 8002288:	4641      	mov	r1, r8
 800228a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800228e:	4641      	mov	r1, r8
 8002290:	008a      	lsls	r2, r1, #2
 8002292:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002296:	f7fe f80b 	bl	80002b0 <__aeabi_uldivmod>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <UART_SetConfig+0x4e4>)
 80022a0:	fba3 1302 	umull	r1, r3, r3, r2
 80022a4:	095b      	lsrs	r3, r3, #5
 80022a6:	2164      	movs	r1, #100	; 0x64
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	3332      	adds	r3, #50	; 0x32
 80022b2:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <UART_SetConfig+0x4e4>)
 80022b4:	fba2 2303 	umull	r2, r3, r2, r3
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	f003 020f 	and.w	r2, r3, #15
 80022be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4422      	add	r2, r4
 80022c6:	609a      	str	r2, [r3, #8]
}
 80022c8:	bf00      	nop
 80022ca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80022ce:	46bd      	mov	sp, r7
 80022d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022d4:	51eb851f 	.word	0x51eb851f

080022d8 <__NVIC_SetPriority>:
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	db0a      	blt.n	8002302 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	490c      	ldr	r1, [pc, #48]	; (8002324 <__NVIC_SetPriority+0x4c>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	0112      	lsls	r2, r2, #4
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	440b      	add	r3, r1
 80022fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002300:	e00a      	b.n	8002318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4908      	ldr	r1, [pc, #32]	; (8002328 <__NVIC_SetPriority+0x50>)
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	3b04      	subs	r3, #4
 8002310:	0112      	lsls	r2, r2, #4
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	440b      	add	r3, r1
 8002316:	761a      	strb	r2, [r3, #24]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000e100 	.word	0xe000e100
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002330:	2100      	movs	r1, #0
 8002332:	f06f 0004 	mvn.w	r0, #4
 8002336:	f7ff ffcf 	bl	80022d8 <__NVIC_SetPriority>
#endif
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002346:	f3ef 8305 	mrs	r3, IPSR
 800234a:	603b      	str	r3, [r7, #0]
  return(result);
 800234c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002352:	f06f 0305 	mvn.w	r3, #5
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	e00c      	b.n	8002374 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <osKernelInitialize+0x44>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d105      	bne.n	800236e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <osKernelInitialize+0x44>)
 8002364:	2201      	movs	r2, #1
 8002366:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002368:	2300      	movs	r3, #0
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	e002      	b.n	8002374 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800236e:	f04f 33ff 	mov.w	r3, #4294967295
 8002372:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002374:	687b      	ldr	r3, [r7, #4]
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000148 	.word	0x20000148

08002388 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800238e:	f3ef 8305 	mrs	r3, IPSR
 8002392:	603b      	str	r3, [r7, #0]
  return(result);
 8002394:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800239a:	f06f 0305 	mvn.w	r3, #5
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	e010      	b.n	80023c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <osKernelStart+0x48>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d109      	bne.n	80023be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80023aa:	f7ff ffbf 	bl	800232c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80023ae:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <osKernelStart+0x48>)
 80023b0:	2202      	movs	r2, #2
 80023b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80023b4:	f001 f9c4 	bl	8003740 <vTaskStartScheduler>
      stat = osOK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	e002      	b.n	80023c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80023c4:	687b      	ldr	r3, [r7, #4]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000148 	.word	0x20000148

080023d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08e      	sub	sp, #56	; 0x38
 80023d8:	af04      	add	r7, sp, #16
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023e4:	f3ef 8305 	mrs	r3, IPSR
 80023e8:	617b      	str	r3, [r7, #20]
  return(result);
 80023ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d17e      	bne.n	80024ee <osThreadNew+0x11a>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d07b      	beq.n	80024ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80023fa:	2318      	movs	r3, #24
 80023fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002402:	f04f 33ff 	mov.w	r3, #4294967295
 8002406:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d045      	beq.n	800249a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <osThreadNew+0x48>
        name = attr->name;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <osThreadNew+0x6e>
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2b38      	cmp	r3, #56	; 0x38
 8002434:	d805      	bhi.n	8002442 <osThreadNew+0x6e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <osThreadNew+0x72>
        return (NULL);
 8002442:	2300      	movs	r3, #0
 8002444:	e054      	b.n	80024f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00e      	beq.n	800247c <osThreadNew+0xa8>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b5b      	cmp	r3, #91	; 0x5b
 8002464:	d90a      	bls.n	800247c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800246a:	2b00      	cmp	r3, #0
 800246c:	d006      	beq.n	800247c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <osThreadNew+0xa8>
        mem = 1;
 8002476:	2301      	movs	r3, #1
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	e010      	b.n	800249e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10c      	bne.n	800249e <osThreadNew+0xca>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d108      	bne.n	800249e <osThreadNew+0xca>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d104      	bne.n	800249e <osThreadNew+0xca>
          mem = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	e001      	b.n	800249e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d110      	bne.n	80024c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024ac:	9202      	str	r2, [sp, #8]
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	6a3a      	ldr	r2, [r7, #32]
 80024b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 ff6a 	bl	8003394 <xTaskCreateStatic>
 80024c0:	4603      	mov	r3, r0
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	e013      	b.n	80024ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d110      	bne.n	80024ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	f107 0310 	add.w	r3, r7, #16
 80024d4:	9301      	str	r3, [sp, #4]
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 ffb5 	bl	800344e <xTaskCreate>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d001      	beq.n	80024ee <osThreadNew+0x11a>
            hTask = NULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80024ee:	693b      	ldr	r3, [r7, #16]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3728      	adds	r7, #40	; 0x28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002500:	f3ef 8305 	mrs	r3, IPSR
 8002504:	60bb      	str	r3, [r7, #8]
  return(result);
 8002506:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <osDelay+0x1c>
    stat = osErrorISR;
 800250c:	f06f 0305 	mvn.w	r3, #5
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	e007      	b.n	8002524 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <osDelay+0x2c>
      vTaskDelay(ticks);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f001 f8da 	bl	80036d8 <vTaskDelay>
    }
  }

  return (stat);
 8002524:	68fb      	ldr	r3, [r7, #12]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4a07      	ldr	r2, [pc, #28]	; (800255c <vApplicationGetIdleTaskMemory+0x2c>)
 8002540:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4a06      	ldr	r2, [pc, #24]	; (8002560 <vApplicationGetIdleTaskMemory+0x30>)
 8002546:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2280      	movs	r2, #128	; 0x80
 800254c:	601a      	str	r2, [r3, #0]
}
 800254e:	bf00      	nop
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	2000014c 	.word	0x2000014c
 8002560:	200001a8 	.word	0x200001a8

08002564 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4a07      	ldr	r2, [pc, #28]	; (8002590 <vApplicationGetTimerTaskMemory+0x2c>)
 8002574:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	4a06      	ldr	r2, [pc, #24]	; (8002594 <vApplicationGetTimerTaskMemory+0x30>)
 800257a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002582:	601a      	str	r2, [r3, #0]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	200003a8 	.word	0x200003a8
 8002594:	20000404 	.word	0x20000404

08002598 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f103 0208 	add.w	r2, r3, #8
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295
 80025b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f103 0208 	add.w	r2, r3, #8
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f103 0208 	add.w	r2, r3, #8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025f2:	b480      	push	{r7}
 80025f4:	b085      	sub	sp, #20
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	601a      	str	r2, [r3, #0]
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800263a:	b480      	push	{r7}
 800263c:	b085      	sub	sp, #20
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002650:	d103      	bne.n	800265a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	e00c      	b.n	8002674 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3308      	adds	r3, #8
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	e002      	b.n	8002668 <vListInsert+0x2e>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	429a      	cmp	r2, r3
 8002672:	d2f6      	bcs.n	8002662 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	601a      	str	r2, [r3, #0]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6892      	ldr	r2, [r2, #8]
 80026c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6852      	ldr	r2, [r2, #4]
 80026cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d103      	bne.n	80026e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	1e5a      	subs	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002718:	f383 8811 	msr	BASEPRI, r3
 800271c:	f3bf 8f6f 	isb	sy
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002726:	bf00      	nop
 8002728:	e7fe      	b.n	8002728 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800272a:	f002 faab 	bl	8004c84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002736:	68f9      	ldr	r1, [r7, #12]
 8002738:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	441a      	add	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275a:	3b01      	subs	r3, #1
 800275c:	68f9      	ldr	r1, [r7, #12]
 800275e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	441a      	add	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	22ff      	movs	r2, #255	; 0xff
 800276e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	22ff      	movs	r2, #255	; 0xff
 8002776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d114      	bne.n	80027aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01a      	beq.n	80027be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3310      	adds	r3, #16
 800278c:	4618      	mov	r0, r3
 800278e:	f001 fa61 	bl	8003c54 <xTaskRemoveFromEventList>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d012      	beq.n	80027be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <xQueueGenericReset+0xcc>)
 800279a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	f3bf 8f4f 	dsb	sy
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	e009      	b.n	80027be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	3310      	adds	r3, #16
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fef2 	bl	8002598 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	3324      	adds	r3, #36	; 0x24
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff feed 	bl	8002598 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027be:	f002 fa91 	bl	8004ce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027c2:	2301      	movs	r3, #1
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	e000ed04 	.word	0xe000ed04

080027d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08e      	sub	sp, #56	; 0x38
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027f6:	bf00      	nop
 80027f8:	e7fe      	b.n	80027f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002812:	bf00      	nop
 8002814:	e7fe      	b.n	8002814 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <xQueueGenericCreateStatic+0x52>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <xQueueGenericCreateStatic+0x56>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <xQueueGenericCreateStatic+0x58>
 8002826:	2300      	movs	r3, #0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10a      	bne.n	8002842 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800282c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002830:	f383 8811 	msr	BASEPRI, r3
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	623b      	str	r3, [r7, #32]
}
 800283e:	bf00      	nop
 8002840:	e7fe      	b.n	8002840 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d102      	bne.n	800284e <xQueueGenericCreateStatic+0x7e>
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <xQueueGenericCreateStatic+0x82>
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <xQueueGenericCreateStatic+0x84>
 8002852:	2300      	movs	r3, #0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10a      	bne.n	800286e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285c:	f383 8811 	msr	BASEPRI, r3
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	61fb      	str	r3, [r7, #28]
}
 800286a:	bf00      	nop
 800286c:	e7fe      	b.n	800286c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800286e:	2350      	movs	r3, #80	; 0x50
 8002870:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2b50      	cmp	r3, #80	; 0x50
 8002876:	d00a      	beq.n	800288e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	61bb      	str	r3, [r7, #24]
}
 800288a:	bf00      	nop
 800288c:	e7fe      	b.n	800288c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800288e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00d      	beq.n	80028b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80028a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	4613      	mov	r3, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f83f 	bl	8002934 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3730      	adds	r7, #48	; 0x30
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	; 0x28
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	4613      	mov	r3, r2
 80028cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10a      	bne.n	80028ea <xQueueGenericCreate+0x2a>
	__asm volatile
 80028d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d8:	f383 8811 	msr	BASEPRI, r3
 80028dc:	f3bf 8f6f 	isb	sy
 80028e0:	f3bf 8f4f 	dsb	sy
 80028e4:	613b      	str	r3, [r7, #16]
}
 80028e6:	bf00      	nop
 80028e8:	e7fe      	b.n	80028e8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	fb02 f303 	mul.w	r3, r2, r3
 80028f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	3350      	adds	r3, #80	; 0x50
 80028f8:	4618      	mov	r0, r3
 80028fa:	f002 fae5 	bl	8004ec8 <pvPortMalloc>
 80028fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d011      	beq.n	800292a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	3350      	adds	r3, #80	; 0x50
 800290e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002918:	79fa      	ldrb	r2, [r7, #7]
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	4613      	mov	r3, r2
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 f805 	bl	8002934 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800292a:	69bb      	ldr	r3, [r7, #24]
	}
 800292c:	4618      	mov	r0, r3
 800292e:	3720      	adds	r7, #32
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d103      	bne.n	8002950 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	e002      	b.n	8002956 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002962:	2101      	movs	r1, #1
 8002964:	69b8      	ldr	r0, [r7, #24]
 8002966:	f7ff fecb 	bl	8002700 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08e      	sub	sp, #56	; 0x38
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800298a:	2300      	movs	r3, #0
 800298c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <xQueueGenericSend+0x32>
	__asm volatile
 8002998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299c:	f383 8811 	msr	BASEPRI, r3
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029aa:	bf00      	nop
 80029ac:	e7fe      	b.n	80029ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d103      	bne.n	80029bc <xQueueGenericSend+0x40>
 80029b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <xQueueGenericSend+0x44>
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <xQueueGenericSend+0x46>
 80029c0:	2300      	movs	r3, #0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10a      	bne.n	80029dc <xQueueGenericSend+0x60>
	__asm volatile
 80029c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ca:	f383 8811 	msr	BASEPRI, r3
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	f3bf 8f4f 	dsb	sy
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029d8:	bf00      	nop
 80029da:	e7fe      	b.n	80029da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d103      	bne.n	80029ea <xQueueGenericSend+0x6e>
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <xQueueGenericSend+0x72>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <xQueueGenericSend+0x74>
 80029ee:	2300      	movs	r3, #0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <xQueueGenericSend+0x8e>
	__asm volatile
 80029f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f8:	f383 8811 	msr	BASEPRI, r3
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	623b      	str	r3, [r7, #32]
}
 8002a06:	bf00      	nop
 8002a08:	e7fe      	b.n	8002a08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a0a:	f001 fae1 	bl	8003fd0 <xTaskGetSchedulerState>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d102      	bne.n	8002a1a <xQueueGenericSend+0x9e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <xQueueGenericSend+0xa2>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <xQueueGenericSend+0xa4>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10a      	bne.n	8002a3a <xQueueGenericSend+0xbe>
	__asm volatile
 8002a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	61fb      	str	r3, [r7, #28]
}
 8002a36:	bf00      	nop
 8002a38:	e7fe      	b.n	8002a38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a3a:	f002 f923 	bl	8004c84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d302      	bcc.n	8002a50 <xQueueGenericSend+0xd4>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d129      	bne.n	8002aa4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a56:	f000 fb2f 	bl	80030b8 <prvCopyDataToQueue>
 8002a5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d010      	beq.n	8002a86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	3324      	adds	r3, #36	; 0x24
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f001 f8f3 	bl	8003c54 <xTaskRemoveFromEventList>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d013      	beq.n	8002a9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a74:	4b3f      	ldr	r3, [pc, #252]	; (8002b74 <xQueueGenericSend+0x1f8>)
 8002a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	e00a      	b.n	8002a9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d007      	beq.n	8002a9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a8c:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <xQueueGenericSend+0x1f8>)
 8002a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a9c:	f002 f922 	bl	8004ce4 <vPortExitCritical>
				return pdPASS;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e063      	b.n	8002b6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d103      	bne.n	8002ab2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002aaa:	f002 f91b 	bl	8004ce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e05c      	b.n	8002b6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d106      	bne.n	8002ac6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	4618      	mov	r0, r3
 8002abe:	f001 f92d 	bl	8003d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ac6:	f002 f90d 	bl	8004ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002aca:	f000 fe9f 	bl	800380c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ace:	f002 f8d9 	bl	8004c84 <vPortEnterCritical>
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ad8:	b25b      	sxtb	r3, r3
 8002ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ade:	d103      	bne.n	8002ae8 <xQueueGenericSend+0x16c>
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aee:	b25b      	sxtb	r3, r3
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af4:	d103      	bne.n	8002afe <xQueueGenericSend+0x182>
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002afe:	f002 f8f1 	bl	8004ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b02:	1d3a      	adds	r2, r7, #4
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f001 f91c 	bl	8003d48 <xTaskCheckForTimeOut>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d124      	bne.n	8002b60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b18:	f000 fbc6 	bl	80032a8 <prvIsQueueFull>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d018      	beq.n	8002b54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b24:	3310      	adds	r3, #16
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f001 f842 	bl	8003bb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b32:	f000 fb51 	bl	80031d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b36:	f000 fe77 	bl	8003828 <xTaskResumeAll>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f47f af7c 	bne.w	8002a3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002b42:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <xQueueGenericSend+0x1f8>)
 8002b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	e772      	b.n	8002a3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b56:	f000 fb3f 	bl	80031d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b5a:	f000 fe65 	bl	8003828 <xTaskResumeAll>
 8002b5e:	e76c      	b.n	8002a3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b62:	f000 fb39 	bl	80031d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b66:	f000 fe5f 	bl	8003828 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3738      	adds	r7, #56	; 0x38
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	e000ed04 	.word	0xe000ed04

08002b78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b090      	sub	sp, #64	; 0x40
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10a      	bne.n	8002ba6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b94:	f383 8811 	msr	BASEPRI, r3
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	f3bf 8f4f 	dsb	sy
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ba2:	bf00      	nop
 8002ba4:	e7fe      	b.n	8002ba4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d103      	bne.n	8002bb4 <xQueueGenericSendFromISR+0x3c>
 8002bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <xQueueGenericSendFromISR+0x40>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <xQueueGenericSendFromISR+0x42>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10a      	bne.n	8002bd4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc2:	f383 8811 	msr	BASEPRI, r3
 8002bc6:	f3bf 8f6f 	isb	sy
 8002bca:	f3bf 8f4f 	dsb	sy
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bd0:	bf00      	nop
 8002bd2:	e7fe      	b.n	8002bd2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d103      	bne.n	8002be2 <xQueueGenericSendFromISR+0x6a>
 8002bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <xQueueGenericSendFromISR+0x6e>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <xQueueGenericSendFromISR+0x70>
 8002be6:	2300      	movs	r3, #0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10a      	bne.n	8002c02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf0:	f383 8811 	msr	BASEPRI, r3
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	623b      	str	r3, [r7, #32]
}
 8002bfe:	bf00      	nop
 8002c00:	e7fe      	b.n	8002c00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c02:	f002 f921 	bl	8004e48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c06:	f3ef 8211 	mrs	r2, BASEPRI
 8002c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0e:	f383 8811 	msr	BASEPRI, r3
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	61fa      	str	r2, [r7, #28]
 8002c1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d302      	bcc.n	8002c34 <xQueueGenericSendFromISR+0xbc>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d12f      	bne.n	8002c94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	68b9      	ldr	r1, [r7, #8]
 8002c48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c4a:	f000 fa35 	bl	80030b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c56:	d112      	bne.n	8002c7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d016      	beq.n	8002c8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c62:	3324      	adds	r3, #36	; 0x24
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fff5 	bl	8003c54 <xTaskRemoveFromEventList>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00e      	beq.n	8002c8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	e007      	b.n	8002c8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c82:	3301      	adds	r3, #1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	b25a      	sxtb	r2, r3
 8002c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002c92:	e001      	b.n	8002c98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002ca2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3740      	adds	r7, #64	; 0x40
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08c      	sub	sp, #48	; 0x30
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10a      	bne.n	8002ce0 <xQueueReceive+0x30>
	__asm volatile
 8002cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cce:	f383 8811 	msr	BASEPRI, r3
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	623b      	str	r3, [r7, #32]
}
 8002cdc:	bf00      	nop
 8002cde:	e7fe      	b.n	8002cde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d103      	bne.n	8002cee <xQueueReceive+0x3e>
 8002ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <xQueueReceive+0x42>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <xQueueReceive+0x44>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10a      	bne.n	8002d0e <xQueueReceive+0x5e>
	__asm volatile
 8002cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfc:	f383 8811 	msr	BASEPRI, r3
 8002d00:	f3bf 8f6f 	isb	sy
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	61fb      	str	r3, [r7, #28]
}
 8002d0a:	bf00      	nop
 8002d0c:	e7fe      	b.n	8002d0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d0e:	f001 f95f 	bl	8003fd0 <xTaskGetSchedulerState>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <xQueueReceive+0x6e>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <xQueueReceive+0x72>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <xQueueReceive+0x74>
 8002d22:	2300      	movs	r3, #0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <xQueueReceive+0x8e>
	__asm volatile
 8002d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	61bb      	str	r3, [r7, #24]
}
 8002d3a:	bf00      	nop
 8002d3c:	e7fe      	b.n	8002d3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d3e:	f001 ffa1 	bl	8004c84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01f      	beq.n	8002d8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d52:	f000 fa1b 	bl	800318c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	1e5a      	subs	r2, r3, #1
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00f      	beq.n	8002d86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	3310      	adds	r3, #16
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 ff72 	bl	8003c54 <xTaskRemoveFromEventList>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d76:	4b3d      	ldr	r3, [pc, #244]	; (8002e6c <xQueueReceive+0x1bc>)
 8002d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d86:	f001 ffad 	bl	8004ce4 <vPortExitCritical>
				return pdPASS;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e069      	b.n	8002e62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d103      	bne.n	8002d9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d94:	f001 ffa6 	bl	8004ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	e062      	b.n	8002e62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002da2:	f107 0310 	add.w	r3, r7, #16
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 ffb8 	bl	8003d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002dac:	2301      	movs	r3, #1
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002db0:	f001 ff98 	bl	8004ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002db4:	f000 fd2a 	bl	800380c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002db8:	f001 ff64 	bl	8004c84 <vPortEnterCritical>
 8002dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dc2:	b25b      	sxtb	r3, r3
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d103      	bne.n	8002dd2 <xQueueReceive+0x122>
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dd8:	b25b      	sxtb	r3, r3
 8002dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dde:	d103      	bne.n	8002de8 <xQueueReceive+0x138>
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002de8:	f001 ff7c 	bl	8004ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dec:	1d3a      	adds	r2, r7, #4
 8002dee:	f107 0310 	add.w	r3, r7, #16
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 ffa7 	bl	8003d48 <xTaskCheckForTimeOut>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d123      	bne.n	8002e48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e02:	f000 fa3b 	bl	800327c <prvIsQueueEmpty>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d017      	beq.n	8002e3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	3324      	adds	r3, #36	; 0x24
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fecd 	bl	8003bb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e1c:	f000 f9dc 	bl	80031d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e20:	f000 fd02 	bl	8003828 <xTaskResumeAll>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d189      	bne.n	8002d3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <xQueueReceive+0x1bc>)
 8002e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	e780      	b.n	8002d3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e3e:	f000 f9cb 	bl	80031d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e42:	f000 fcf1 	bl	8003828 <xTaskResumeAll>
 8002e46:	e77a      	b.n	8002d3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e4a:	f000 f9c5 	bl	80031d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e4e:	f000 fceb 	bl	8003828 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e54:	f000 fa12 	bl	800327c <prvIsQueueEmpty>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f43f af6f 	beq.w	8002d3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3730      	adds	r7, #48	; 0x30
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	e000ed04 	.word	0xe000ed04

08002e70 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08e      	sub	sp, #56	; 0x38
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	623b      	str	r3, [r7, #32]
}
 8002e9e:	bf00      	nop
 8002ea0:	e7fe      	b.n	8002ea0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	61fb      	str	r3, [r7, #28]
}
 8002ebc:	bf00      	nop
 8002ebe:	e7fe      	b.n	8002ebe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ec0:	f001 f886 	bl	8003fd0 <xTaskGetSchedulerState>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d102      	bne.n	8002ed0 <xQueueSemaphoreTake+0x60>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <xQueueSemaphoreTake+0x64>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <xQueueSemaphoreTake+0x66>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10a      	bne.n	8002ef0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	61bb      	str	r3, [r7, #24]
}
 8002eec:	bf00      	nop
 8002eee:	e7fe      	b.n	8002eee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ef0:	f001 fec8 	bl	8004c84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d024      	beq.n	8002f4a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	1e5a      	subs	r2, r3, #1
 8002f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f06:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d104      	bne.n	8002f1a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002f10:	f001 f9d4 	bl	80042bc <pvTaskIncrementMutexHeldCount>
 8002f14:	4602      	mov	r2, r0
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00f      	beq.n	8002f42 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f24:	3310      	adds	r3, #16
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fe94 	bl	8003c54 <xTaskRemoveFromEventList>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f32:	4b54      	ldr	r3, [pc, #336]	; (8003084 <xQueueSemaphoreTake+0x214>)
 8002f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f42:	f001 fecf 	bl	8004ce4 <vPortExitCritical>
				return pdPASS;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e097      	b.n	800307a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d111      	bne.n	8002f74 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5a:	f383 8811 	msr	BASEPRI, r3
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	617b      	str	r3, [r7, #20]
}
 8002f68:	bf00      	nop
 8002f6a:	e7fe      	b.n	8002f6a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002f6c:	f001 feba 	bl	8004ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e082      	b.n	800307a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f7a:	f107 030c 	add.w	r3, r7, #12
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fecc 	bl	8003d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f84:	2301      	movs	r3, #1
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f88:	f001 feac 	bl	8004ce4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f8c:	f000 fc3e 	bl	800380c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f90:	f001 fe78 	bl	8004c84 <vPortEnterCritical>
 8002f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f9a:	b25b      	sxtb	r3, r3
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa0:	d103      	bne.n	8002faa <xQueueSemaphoreTake+0x13a>
 8002fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fb0:	b25b      	sxtb	r3, r3
 8002fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb6:	d103      	bne.n	8002fc0 <xQueueSemaphoreTake+0x150>
 8002fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fc0:	f001 fe90 	bl	8004ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fc4:	463a      	mov	r2, r7
 8002fc6:	f107 030c 	add.w	r3, r7, #12
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 febb 	bl	8003d48 <xTaskCheckForTimeOut>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d132      	bne.n	800303e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fda:	f000 f94f 	bl	800327c <prvIsQueueEmpty>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d026      	beq.n	8003032 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d109      	bne.n	8003000 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002fec:	f001 fe4a 	bl	8004c84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 f809 	bl	800400c <xTaskPriorityInherit>
 8002ffa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002ffc:	f001 fe72 	bl	8004ce4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003002:	3324      	adds	r3, #36	; 0x24
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fdd3 	bl	8003bb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800300e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003010:	f000 f8e2 	bl	80031d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003014:	f000 fc08 	bl	8003828 <xTaskResumeAll>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	f47f af68 	bne.w	8002ef0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003020:	4b18      	ldr	r3, [pc, #96]	; (8003084 <xQueueSemaphoreTake+0x214>)
 8003022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	e75e      	b.n	8002ef0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003032:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003034:	f000 f8d0 	bl	80031d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003038:	f000 fbf6 	bl	8003828 <xTaskResumeAll>
 800303c:	e758      	b.n	8002ef0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800303e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003040:	f000 f8ca 	bl	80031d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003044:	f000 fbf0 	bl	8003828 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003048:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800304a:	f000 f917 	bl	800327c <prvIsQueueEmpty>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	f43f af4d 	beq.w	8002ef0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00d      	beq.n	8003078 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800305c:	f001 fe12 	bl	8004c84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003060:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003062:	f000 f811 	bl	8003088 <prvGetDisinheritPriorityAfterTimeout>
 8003066:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800306e:	4618      	mov	r0, r3
 8003070:	f001 f8a2 	bl	80041b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003074:	f001 fe36 	bl	8004ce4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003078:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800307a:	4618      	mov	r0, r3
 800307c:	3738      	adds	r7, #56	; 0x38
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	e000ed04 	.word	0xe000ed04

08003088 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	2b00      	cmp	r3, #0
 8003096:	d006      	beq.n	80030a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	e001      	b.n	80030aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80030aa:	68fb      	ldr	r3, [r7, #12]
	}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10d      	bne.n	80030f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d14d      	bne.n	800317a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fffa 	bl	80040dc <xTaskPriorityDisinherit>
 80030e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	e043      	b.n	800317a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d119      	bne.n	800312c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6858      	ldr	r0, [r3, #4]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	461a      	mov	r2, r3
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	f002 fabb 	bl	800567e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	441a      	add	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	429a      	cmp	r2, r3
 8003120:	d32b      	bcc.n	800317a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	e026      	b.n	800317a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	68d8      	ldr	r0, [r3, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	461a      	mov	r2, r3
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	f002 faa1 	bl	800567e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	425b      	negs	r3, r3
 8003146:	441a      	add	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d207      	bcs.n	8003168 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	425b      	negs	r3, r3
 8003162:	441a      	add	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d105      	bne.n	800317a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	3b01      	subs	r3, #1
 8003178:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003182:	697b      	ldr	r3, [r7, #20]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d018      	beq.n	80031d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	441a      	add	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d303      	bcc.n	80031c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68d9      	ldr	r1, [r3, #12]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	461a      	mov	r2, r3
 80031ca:	6838      	ldr	r0, [r7, #0]
 80031cc:	f002 fa57 	bl	800567e <memcpy>
	}
}
 80031d0:	bf00      	nop
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80031e0:	f001 fd50 	bl	8004c84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031ec:	e011      	b.n	8003212 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d012      	beq.n	800321c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3324      	adds	r3, #36	; 0x24
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fd2a 	bl	8003c54 <xTaskRemoveFromEventList>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003206:	f000 fe01 	bl	8003e0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	3b01      	subs	r3, #1
 800320e:	b2db      	uxtb	r3, r3
 8003210:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003216:	2b00      	cmp	r3, #0
 8003218:	dce9      	bgt.n	80031ee <prvUnlockQueue+0x16>
 800321a:	e000      	b.n	800321e <prvUnlockQueue+0x46>
					break;
 800321c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	22ff      	movs	r2, #255	; 0xff
 8003222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003226:	f001 fd5d 	bl	8004ce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800322a:	f001 fd2b 	bl	8004c84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003234:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003236:	e011      	b.n	800325c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d012      	beq.n	8003266 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3310      	adds	r3, #16
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fd05 	bl	8003c54 <xTaskRemoveFromEventList>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003250:	f000 fddc 	bl	8003e0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003254:	7bbb      	ldrb	r3, [r7, #14]
 8003256:	3b01      	subs	r3, #1
 8003258:	b2db      	uxtb	r3, r3
 800325a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800325c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003260:	2b00      	cmp	r3, #0
 8003262:	dce9      	bgt.n	8003238 <prvUnlockQueue+0x60>
 8003264:	e000      	b.n	8003268 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003266:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	22ff      	movs	r2, #255	; 0xff
 800326c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003270:	f001 fd38 	bl	8004ce4 <vPortExitCritical>
}
 8003274:	bf00      	nop
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003284:	f001 fcfe 	bl	8004c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	2b00      	cmp	r3, #0
 800328e:	d102      	bne.n	8003296 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003290:	2301      	movs	r3, #1
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	e001      	b.n	800329a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800329a:	f001 fd23 	bl	8004ce4 <vPortExitCritical>

	return xReturn;
 800329e:	68fb      	ldr	r3, [r7, #12]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032b0:	f001 fce8 	bl	8004c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032bc:	429a      	cmp	r2, r3
 80032be:	d102      	bne.n	80032c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80032c0:	2301      	movs	r3, #1
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	e001      	b.n	80032ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032ca:	f001 fd0b 	bl	8004ce4 <vPortExitCritical>

	return xReturn;
 80032ce:	68fb      	ldr	r3, [r7, #12]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	e014      	b.n	8003312 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80032e8:	4a0f      	ldr	r2, [pc, #60]	; (8003328 <vQueueAddToRegistry+0x50>)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10b      	bne.n	800330c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80032f4:	490c      	ldr	r1, [pc, #48]	; (8003328 <vQueueAddToRegistry+0x50>)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80032fe:	4a0a      	ldr	r2, [pc, #40]	; (8003328 <vQueueAddToRegistry+0x50>)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800330a:	e006      	b.n	800331a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	3301      	adds	r3, #1
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b07      	cmp	r3, #7
 8003316:	d9e7      	bls.n	80032e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003318:	bf00      	nop
 800331a:	bf00      	nop
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	20000804 	.word	0x20000804

0800332c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800333c:	f001 fca2 	bl	8004c84 <vPortEnterCritical>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003346:	b25b      	sxtb	r3, r3
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334c:	d103      	bne.n	8003356 <vQueueWaitForMessageRestricted+0x2a>
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800335c:	b25b      	sxtb	r3, r3
 800335e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003362:	d103      	bne.n	800336c <vQueueWaitForMessageRestricted+0x40>
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800336c:	f001 fcba 	bl	8004ce4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003374:	2b00      	cmp	r3, #0
 8003376:	d106      	bne.n	8003386 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	3324      	adds	r3, #36	; 0x24
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fc3b 	bl	8003bfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003386:	6978      	ldr	r0, [r7, #20]
 8003388:	f7ff ff26 	bl	80031d8 <prvUnlockQueue>
	}
 800338c:	bf00      	nop
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08e      	sub	sp, #56	; 0x38
 8003398:	af04      	add	r7, sp, #16
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80033a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <xTaskCreateStatic+0x2a>
	__asm volatile
 80033a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	623b      	str	r3, [r7, #32]
}
 80033ba:	bf00      	nop
 80033bc:	e7fe      	b.n	80033bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80033be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10a      	bne.n	80033da <xTaskCreateStatic+0x46>
	__asm volatile
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	61fb      	str	r3, [r7, #28]
}
 80033d6:	bf00      	nop
 80033d8:	e7fe      	b.n	80033d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80033da:	235c      	movs	r3, #92	; 0x5c
 80033dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	2b5c      	cmp	r3, #92	; 0x5c
 80033e2:	d00a      	beq.n	80033fa <xTaskCreateStatic+0x66>
	__asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	61bb      	str	r3, [r7, #24]
}
 80033f6:	bf00      	nop
 80033f8:	e7fe      	b.n	80033f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80033fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d01e      	beq.n	8003440 <xTaskCreateStatic+0xac>
 8003402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01b      	beq.n	8003440 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003410:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	2202      	movs	r2, #2
 8003416:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800341a:	2300      	movs	r3, #0
 800341c:	9303      	str	r3, [sp, #12]
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	9302      	str	r3, [sp, #8]
 8003422:	f107 0314 	add.w	r3, r7, #20
 8003426:	9301      	str	r3, [sp, #4]
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f850 	bl	80034d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003438:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800343a:	f000 f8dd 	bl	80035f8 <prvAddNewTaskToReadyList>
 800343e:	e001      	b.n	8003444 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003444:	697b      	ldr	r3, [r7, #20]
	}
 8003446:	4618      	mov	r0, r3
 8003448:	3728      	adds	r7, #40	; 0x28
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800344e:	b580      	push	{r7, lr}
 8003450:	b08c      	sub	sp, #48	; 0x30
 8003452:	af04      	add	r7, sp, #16
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	603b      	str	r3, [r7, #0]
 800345a:	4613      	mov	r3, r2
 800345c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4618      	mov	r0, r3
 8003464:	f001 fd30 	bl	8004ec8 <pvPortMalloc>
 8003468:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00e      	beq.n	800348e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003470:	205c      	movs	r0, #92	; 0x5c
 8003472:	f001 fd29 	bl	8004ec8 <pvPortMalloc>
 8003476:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
 8003484:	e005      	b.n	8003492 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003486:	6978      	ldr	r0, [r7, #20]
 8003488:	f001 fdea 	bl	8005060 <vPortFree>
 800348c:	e001      	b.n	8003492 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800348e:	2300      	movs	r3, #0
 8003490:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d017      	beq.n	80034c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034a0:	88fa      	ldrh	r2, [r7, #6]
 80034a2:	2300      	movs	r3, #0
 80034a4:	9303      	str	r3, [sp, #12]
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	9302      	str	r3, [sp, #8]
 80034aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f80e 	bl	80034d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034bc:	69f8      	ldr	r0, [r7, #28]
 80034be:	f000 f89b 	bl	80035f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034c2:	2301      	movs	r3, #1
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	e002      	b.n	80034ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034c8:	f04f 33ff 	mov.w	r3, #4294967295
 80034cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80034ce:	69bb      	ldr	r3, [r7, #24]
	}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3720      	adds	r7, #32
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	461a      	mov	r2, r3
 80034f0:	21a5      	movs	r1, #165	; 0xa5
 80034f2:	f002 f848 	bl	8005586 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003500:	3b01      	subs	r3, #1
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	f023 0307 	bic.w	r3, r3, #7
 800350e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <prvInitialiseNewTask+0x58>
	__asm volatile
 800351a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	617b      	str	r3, [r7, #20]
}
 800352c:	bf00      	nop
 800352e:	e7fe      	b.n	800352e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d01f      	beq.n	8003576 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
 800353a:	e012      	b.n	8003562 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	4413      	add	r3, r2
 8003542:	7819      	ldrb	r1, [r3, #0]
 8003544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	4413      	add	r3, r2
 800354a:	3334      	adds	r3, #52	; 0x34
 800354c:	460a      	mov	r2, r1
 800354e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	4413      	add	r3, r2
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d006      	beq.n	800356a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	3301      	adds	r3, #1
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	2b0f      	cmp	r3, #15
 8003566:	d9e9      	bls.n	800353c <prvInitialiseNewTask+0x64>
 8003568:	e000      	b.n	800356c <prvInitialiseNewTask+0x94>
			{
				break;
 800356a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003574:	e003      	b.n	800357e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003580:	2b37      	cmp	r3, #55	; 0x37
 8003582:	d901      	bls.n	8003588 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003584:	2337      	movs	r3, #55	; 0x37
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800358c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800358e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003592:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	2200      	movs	r2, #0
 8003598:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359c:	3304      	adds	r3, #4
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff f81a 	bl	80025d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	3318      	adds	r3, #24
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff f815 	bl	80025d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80035c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c6:	2200      	movs	r2, #0
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	68f9      	ldr	r1, [r7, #12]
 80035d6:	69b8      	ldr	r0, [r7, #24]
 80035d8:	f001 fa26 	bl	8004a28 <pxPortInitialiseStack>
 80035dc:	4602      	mov	r2, r0
 80035de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80035e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035ee:	bf00      	nop
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003600:	f001 fb40 	bl	8004c84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003604:	4b2d      	ldr	r3, [pc, #180]	; (80036bc <prvAddNewTaskToReadyList+0xc4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3301      	adds	r3, #1
 800360a:	4a2c      	ldr	r2, [pc, #176]	; (80036bc <prvAddNewTaskToReadyList+0xc4>)
 800360c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800360e:	4b2c      	ldr	r3, [pc, #176]	; (80036c0 <prvAddNewTaskToReadyList+0xc8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003616:	4a2a      	ldr	r2, [pc, #168]	; (80036c0 <prvAddNewTaskToReadyList+0xc8>)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800361c:	4b27      	ldr	r3, [pc, #156]	; (80036bc <prvAddNewTaskToReadyList+0xc4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d110      	bne.n	8003646 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003624:	f000 fc16 	bl	8003e54 <prvInitialiseTaskLists>
 8003628:	e00d      	b.n	8003646 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800362a:	4b26      	ldr	r3, [pc, #152]	; (80036c4 <prvAddNewTaskToReadyList+0xcc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003632:	4b23      	ldr	r3, [pc, #140]	; (80036c0 <prvAddNewTaskToReadyList+0xc8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	429a      	cmp	r2, r3
 800363e:	d802      	bhi.n	8003646 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003640:	4a1f      	ldr	r2, [pc, #124]	; (80036c0 <prvAddNewTaskToReadyList+0xc8>)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003646:	4b20      	ldr	r3, [pc, #128]	; (80036c8 <prvAddNewTaskToReadyList+0xd0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3301      	adds	r3, #1
 800364c:	4a1e      	ldr	r2, [pc, #120]	; (80036c8 <prvAddNewTaskToReadyList+0xd0>)
 800364e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003650:	4b1d      	ldr	r3, [pc, #116]	; (80036c8 <prvAddNewTaskToReadyList+0xd0>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365c:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <prvAddNewTaskToReadyList+0xd4>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d903      	bls.n	800366c <prvAddNewTaskToReadyList+0x74>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	4a18      	ldr	r2, [pc, #96]	; (80036cc <prvAddNewTaskToReadyList+0xd4>)
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4a15      	ldr	r2, [pc, #84]	; (80036d0 <prvAddNewTaskToReadyList+0xd8>)
 800367a:	441a      	add	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3304      	adds	r3, #4
 8003680:	4619      	mov	r1, r3
 8003682:	4610      	mov	r0, r2
 8003684:	f7fe ffb5 	bl	80025f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003688:	f001 fb2c 	bl	8004ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800368c:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <prvAddNewTaskToReadyList+0xcc>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00e      	beq.n	80036b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003694:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <prvAddNewTaskToReadyList+0xc8>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	429a      	cmp	r2, r3
 80036a0:	d207      	bcs.n	80036b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <prvAddNewTaskToReadyList+0xdc>)
 80036a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000d18 	.word	0x20000d18
 80036c0:	20000844 	.word	0x20000844
 80036c4:	20000d24 	.word	0x20000d24
 80036c8:	20000d34 	.word	0x20000d34
 80036cc:	20000d20 	.word	0x20000d20
 80036d0:	20000848 	.word	0x20000848
 80036d4:	e000ed04 	.word	0xe000ed04

080036d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d017      	beq.n	800371a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80036ea:	4b13      	ldr	r3, [pc, #76]	; (8003738 <vTaskDelay+0x60>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <vTaskDelay+0x30>
	__asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	60bb      	str	r3, [r7, #8]
}
 8003704:	bf00      	nop
 8003706:	e7fe      	b.n	8003706 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003708:	f000 f880 	bl	800380c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800370c:	2100      	movs	r1, #0
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fde8 	bl	80042e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003714:	f000 f888 	bl	8003828 <xTaskResumeAll>
 8003718:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d107      	bne.n	8003730 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003720:	4b06      	ldr	r3, [pc, #24]	; (800373c <vTaskDelay+0x64>)
 8003722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20000d40 	.word	0x20000d40
 800373c:	e000ed04 	.word	0xe000ed04

08003740 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	; 0x28
 8003744:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003746:	2300      	movs	r3, #0
 8003748:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800374a:	2300      	movs	r3, #0
 800374c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800374e:	463a      	mov	r2, r7
 8003750:	1d39      	adds	r1, r7, #4
 8003752:	f107 0308 	add.w	r3, r7, #8
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe feea 	bl	8002530 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800375c:	6839      	ldr	r1, [r7, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	9202      	str	r2, [sp, #8]
 8003764:	9301      	str	r3, [sp, #4]
 8003766:	2300      	movs	r3, #0
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	2300      	movs	r3, #0
 800376c:	460a      	mov	r2, r1
 800376e:	4921      	ldr	r1, [pc, #132]	; (80037f4 <vTaskStartScheduler+0xb4>)
 8003770:	4821      	ldr	r0, [pc, #132]	; (80037f8 <vTaskStartScheduler+0xb8>)
 8003772:	f7ff fe0f 	bl	8003394 <xTaskCreateStatic>
 8003776:	4603      	mov	r3, r0
 8003778:	4a20      	ldr	r2, [pc, #128]	; (80037fc <vTaskStartScheduler+0xbc>)
 800377a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800377c:	4b1f      	ldr	r3, [pc, #124]	; (80037fc <vTaskStartScheduler+0xbc>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003784:	2301      	movs	r3, #1
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	e001      	b.n	800378e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d102      	bne.n	800379a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003794:	f000 fdfa 	bl	800438c <xTimerCreateTimerTask>
 8003798:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d116      	bne.n	80037ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	613b      	str	r3, [r7, #16]
}
 80037b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80037b4:	4b12      	ldr	r3, [pc, #72]	; (8003800 <vTaskStartScheduler+0xc0>)
 80037b6:	f04f 32ff 	mov.w	r2, #4294967295
 80037ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80037bc:	4b11      	ldr	r3, [pc, #68]	; (8003804 <vTaskStartScheduler+0xc4>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80037c2:	4b11      	ldr	r3, [pc, #68]	; (8003808 <vTaskStartScheduler+0xc8>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80037c8:	f001 f9ba 	bl	8004b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80037cc:	e00e      	b.n	80037ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d10a      	bne.n	80037ec <vTaskStartScheduler+0xac>
	__asm volatile
 80037d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037da:	f383 8811 	msr	BASEPRI, r3
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	60fb      	str	r3, [r7, #12]
}
 80037e8:	bf00      	nop
 80037ea:	e7fe      	b.n	80037ea <vTaskStartScheduler+0xaa>
}
 80037ec:	bf00      	nop
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	0800670c 	.word	0x0800670c
 80037f8:	08003e25 	.word	0x08003e25
 80037fc:	20000d3c 	.word	0x20000d3c
 8003800:	20000d38 	.word	0x20000d38
 8003804:	20000d24 	.word	0x20000d24
 8003808:	20000d1c 	.word	0x20000d1c

0800380c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003810:	4b04      	ldr	r3, [pc, #16]	; (8003824 <vTaskSuspendAll+0x18>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3301      	adds	r3, #1
 8003816:	4a03      	ldr	r2, [pc, #12]	; (8003824 <vTaskSuspendAll+0x18>)
 8003818:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800381a:	bf00      	nop
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	20000d40 	.word	0x20000d40

08003828 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003832:	2300      	movs	r3, #0
 8003834:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003836:	4b42      	ldr	r3, [pc, #264]	; (8003940 <xTaskResumeAll+0x118>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10a      	bne.n	8003854 <xTaskResumeAll+0x2c>
	__asm volatile
 800383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	603b      	str	r3, [r7, #0]
}
 8003850:	bf00      	nop
 8003852:	e7fe      	b.n	8003852 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003854:	f001 fa16 	bl	8004c84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003858:	4b39      	ldr	r3, [pc, #228]	; (8003940 <xTaskResumeAll+0x118>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3b01      	subs	r3, #1
 800385e:	4a38      	ldr	r2, [pc, #224]	; (8003940 <xTaskResumeAll+0x118>)
 8003860:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003862:	4b37      	ldr	r3, [pc, #220]	; (8003940 <xTaskResumeAll+0x118>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d162      	bne.n	8003930 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800386a:	4b36      	ldr	r3, [pc, #216]	; (8003944 <xTaskResumeAll+0x11c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d05e      	beq.n	8003930 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003872:	e02f      	b.n	80038d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003874:	4b34      	ldr	r3, [pc, #208]	; (8003948 <xTaskResumeAll+0x120>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3318      	adds	r3, #24
 8003880:	4618      	mov	r0, r3
 8003882:	f7fe ff13 	bl	80026ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3304      	adds	r3, #4
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe ff0e 	bl	80026ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003894:	4b2d      	ldr	r3, [pc, #180]	; (800394c <xTaskResumeAll+0x124>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d903      	bls.n	80038a4 <xTaskResumeAll+0x7c>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	4a2a      	ldr	r2, [pc, #168]	; (800394c <xTaskResumeAll+0x124>)
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4a27      	ldr	r2, [pc, #156]	; (8003950 <xTaskResumeAll+0x128>)
 80038b2:	441a      	add	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3304      	adds	r3, #4
 80038b8:	4619      	mov	r1, r3
 80038ba:	4610      	mov	r0, r2
 80038bc:	f7fe fe99 	bl	80025f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c4:	4b23      	ldr	r3, [pc, #140]	; (8003954 <xTaskResumeAll+0x12c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d302      	bcc.n	80038d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80038ce:	4b22      	ldr	r3, [pc, #136]	; (8003958 <xTaskResumeAll+0x130>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038d4:	4b1c      	ldr	r3, [pc, #112]	; (8003948 <xTaskResumeAll+0x120>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1cb      	bne.n	8003874 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038e2:	f000 fb55 	bl	8003f90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80038e6:	4b1d      	ldr	r3, [pc, #116]	; (800395c <xTaskResumeAll+0x134>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d010      	beq.n	8003914 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038f2:	f000 f847 	bl	8003984 <xTaskIncrementTick>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80038fc:	4b16      	ldr	r3, [pc, #88]	; (8003958 <xTaskResumeAll+0x130>)
 80038fe:	2201      	movs	r2, #1
 8003900:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3b01      	subs	r3, #1
 8003906:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f1      	bne.n	80038f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800390e:	4b13      	ldr	r3, [pc, #76]	; (800395c <xTaskResumeAll+0x134>)
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003914:	4b10      	ldr	r3, [pc, #64]	; (8003958 <xTaskResumeAll+0x130>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d009      	beq.n	8003930 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800391c:	2301      	movs	r3, #1
 800391e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003920:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <xTaskResumeAll+0x138>)
 8003922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003930:	f001 f9d8 	bl	8004ce4 <vPortExitCritical>

	return xAlreadyYielded;
 8003934:	68bb      	ldr	r3, [r7, #8]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000d40 	.word	0x20000d40
 8003944:	20000d18 	.word	0x20000d18
 8003948:	20000cd8 	.word	0x20000cd8
 800394c:	20000d20 	.word	0x20000d20
 8003950:	20000848 	.word	0x20000848
 8003954:	20000844 	.word	0x20000844
 8003958:	20000d2c 	.word	0x20000d2c
 800395c:	20000d28 	.word	0x20000d28
 8003960:	e000ed04 	.word	0xe000ed04

08003964 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800396a:	4b05      	ldr	r3, [pc, #20]	; (8003980 <xTaskGetTickCount+0x1c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003970:	687b      	ldr	r3, [r7, #4]
}
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000d1c 	.word	0x20000d1c

08003984 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800398e:	4b4f      	ldr	r3, [pc, #316]	; (8003acc <xTaskIncrementTick+0x148>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	f040 808f 	bne.w	8003ab6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003998:	4b4d      	ldr	r3, [pc, #308]	; (8003ad0 <xTaskIncrementTick+0x14c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3301      	adds	r3, #1
 800399e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039a0:	4a4b      	ldr	r2, [pc, #300]	; (8003ad0 <xTaskIncrementTick+0x14c>)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d120      	bne.n	80039ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80039ac:	4b49      	ldr	r3, [pc, #292]	; (8003ad4 <xTaskIncrementTick+0x150>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <xTaskIncrementTick+0x48>
	__asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	603b      	str	r3, [r7, #0]
}
 80039c8:	bf00      	nop
 80039ca:	e7fe      	b.n	80039ca <xTaskIncrementTick+0x46>
 80039cc:	4b41      	ldr	r3, [pc, #260]	; (8003ad4 <xTaskIncrementTick+0x150>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	4b41      	ldr	r3, [pc, #260]	; (8003ad8 <xTaskIncrementTick+0x154>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a3f      	ldr	r2, [pc, #252]	; (8003ad4 <xTaskIncrementTick+0x150>)
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4a3f      	ldr	r2, [pc, #252]	; (8003ad8 <xTaskIncrementTick+0x154>)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	4b3e      	ldr	r3, [pc, #248]	; (8003adc <xTaskIncrementTick+0x158>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3301      	adds	r3, #1
 80039e6:	4a3d      	ldr	r2, [pc, #244]	; (8003adc <xTaskIncrementTick+0x158>)
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	f000 fad1 	bl	8003f90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039ee:	4b3c      	ldr	r3, [pc, #240]	; (8003ae0 <xTaskIncrementTick+0x15c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d349      	bcc.n	8003a8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039f8:	4b36      	ldr	r3, [pc, #216]	; (8003ad4 <xTaskIncrementTick+0x150>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d104      	bne.n	8003a0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a02:	4b37      	ldr	r3, [pc, #220]	; (8003ae0 <xTaskIncrementTick+0x15c>)
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295
 8003a08:	601a      	str	r2, [r3, #0]
					break;
 8003a0a:	e03f      	b.n	8003a8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a0c:	4b31      	ldr	r3, [pc, #196]	; (8003ad4 <xTaskIncrementTick+0x150>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d203      	bcs.n	8003a2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a24:	4a2e      	ldr	r2, [pc, #184]	; (8003ae0 <xTaskIncrementTick+0x15c>)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a2a:	e02f      	b.n	8003a8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe fe3b 	bl	80026ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	3318      	adds	r3, #24
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe fe32 	bl	80026ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4c:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <xTaskIncrementTick+0x160>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d903      	bls.n	8003a5c <xTaskIncrementTick+0xd8>
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	4a22      	ldr	r2, [pc, #136]	; (8003ae4 <xTaskIncrementTick+0x160>)
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4a1f      	ldr	r2, [pc, #124]	; (8003ae8 <xTaskIncrementTick+0x164>)
 8003a6a:	441a      	add	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	4610      	mov	r0, r2
 8003a74:	f7fe fdbd 	bl	80025f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7c:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <xTaskIncrementTick+0x168>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d3b8      	bcc.n	80039f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003a86:	2301      	movs	r3, #1
 8003a88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a8a:	e7b5      	b.n	80039f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a8c:	4b17      	ldr	r3, [pc, #92]	; (8003aec <xTaskIncrementTick+0x168>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a92:	4915      	ldr	r1, [pc, #84]	; (8003ae8 <xTaskIncrementTick+0x164>)
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d901      	bls.n	8003aa8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003aa8:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <xTaskIncrementTick+0x16c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d007      	beq.n	8003ac0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	e004      	b.n	8003ac0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ab6:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <xTaskIncrementTick+0x170>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3301      	adds	r3, #1
 8003abc:	4a0d      	ldr	r2, [pc, #52]	; (8003af4 <xTaskIncrementTick+0x170>)
 8003abe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003ac0:	697b      	ldr	r3, [r7, #20]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000d40 	.word	0x20000d40
 8003ad0:	20000d1c 	.word	0x20000d1c
 8003ad4:	20000cd0 	.word	0x20000cd0
 8003ad8:	20000cd4 	.word	0x20000cd4
 8003adc:	20000d30 	.word	0x20000d30
 8003ae0:	20000d38 	.word	0x20000d38
 8003ae4:	20000d20 	.word	0x20000d20
 8003ae8:	20000848 	.word	0x20000848
 8003aec:	20000844 	.word	0x20000844
 8003af0:	20000d2c 	.word	0x20000d2c
 8003af4:	20000d28 	.word	0x20000d28

08003af8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003afe:	4b28      	ldr	r3, [pc, #160]	; (8003ba0 <vTaskSwitchContext+0xa8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b06:	4b27      	ldr	r3, [pc, #156]	; (8003ba4 <vTaskSwitchContext+0xac>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b0c:	e041      	b.n	8003b92 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003b0e:	4b25      	ldr	r3, [pc, #148]	; (8003ba4 <vTaskSwitchContext+0xac>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b14:	4b24      	ldr	r3, [pc, #144]	; (8003ba8 <vTaskSwitchContext+0xb0>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	e010      	b.n	8003b3e <vTaskSwitchContext+0x46>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <vTaskSwitchContext+0x40>
	__asm volatile
 8003b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b26:	f383 8811 	msr	BASEPRI, r3
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	607b      	str	r3, [r7, #4]
}
 8003b34:	bf00      	nop
 8003b36:	e7fe      	b.n	8003b36 <vTaskSwitchContext+0x3e>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	491b      	ldr	r1, [pc, #108]	; (8003bac <vTaskSwitchContext+0xb4>)
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4613      	mov	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0e4      	beq.n	8003b1c <vTaskSwitchContext+0x24>
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4a13      	ldr	r2, [pc, #76]	; (8003bac <vTaskSwitchContext+0xb4>)
 8003b5e:	4413      	add	r3, r2
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	605a      	str	r2, [r3, #4]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	3308      	adds	r3, #8
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d104      	bne.n	8003b82 <vTaskSwitchContext+0x8a>
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <vTaskSwitchContext+0xb8>)
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	4a06      	ldr	r2, [pc, #24]	; (8003ba8 <vTaskSwitchContext+0xb0>)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6013      	str	r3, [r2, #0]
}
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000d40 	.word	0x20000d40
 8003ba4:	20000d2c 	.word	0x20000d2c
 8003ba8:	20000d20 	.word	0x20000d20
 8003bac:	20000848 	.word	0x20000848
 8003bb0:	20000844 	.word	0x20000844

08003bb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	60fb      	str	r3, [r7, #12]
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bda:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <vTaskPlaceOnEventList+0x44>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3318      	adds	r3, #24
 8003be0:	4619      	mov	r1, r3
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fe fd29 	bl	800263a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003be8:	2101      	movs	r1, #1
 8003bea:	6838      	ldr	r0, [r7, #0]
 8003bec:	f000 fb7a 	bl	80042e4 <prvAddCurrentTaskToDelayedList>
}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20000844 	.word	0x20000844

08003bfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	617b      	str	r3, [r7, #20]
}
 8003c20:	bf00      	nop
 8003c22:	e7fe      	b.n	8003c22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c24:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <vTaskPlaceOnEventListRestricted+0x54>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3318      	adds	r3, #24
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f7fe fce0 	bl	80025f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003c38:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	68b8      	ldr	r0, [r7, #8]
 8003c42:	f000 fb4f 	bl	80042e4 <prvAddCurrentTaskToDelayedList>
	}
 8003c46:	bf00      	nop
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000844 	.word	0x20000844

08003c54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10a      	bne.n	8003c80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	60fb      	str	r3, [r7, #12]
}
 8003c7c:	bf00      	nop
 8003c7e:	e7fe      	b.n	8003c7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	3318      	adds	r3, #24
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe fd11 	bl	80026ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c8a:	4b1e      	ldr	r3, [pc, #120]	; (8003d04 <xTaskRemoveFromEventList+0xb0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d11d      	bne.n	8003cce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	3304      	adds	r3, #4
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fe fd08 	bl	80026ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca0:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <xTaskRemoveFromEventList+0xb4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d903      	bls.n	8003cb0 <xTaskRemoveFromEventList+0x5c>
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	4a16      	ldr	r2, [pc, #88]	; (8003d08 <xTaskRemoveFromEventList+0xb4>)
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4a13      	ldr	r2, [pc, #76]	; (8003d0c <xTaskRemoveFromEventList+0xb8>)
 8003cbe:	441a      	add	r2, r3
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f7fe fc93 	bl	80025f2 <vListInsertEnd>
 8003ccc:	e005      	b.n	8003cda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	3318      	adds	r3, #24
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	480e      	ldr	r0, [pc, #56]	; (8003d10 <xTaskRemoveFromEventList+0xbc>)
 8003cd6:	f7fe fc8c 	bl	80025f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cde:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <xTaskRemoveFromEventList+0xc0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d905      	bls.n	8003cf4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <xTaskRemoveFromEventList+0xc4>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	e001      	b.n	8003cf8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003cf8:	697b      	ldr	r3, [r7, #20]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000d40 	.word	0x20000d40
 8003d08:	20000d20 	.word	0x20000d20
 8003d0c:	20000848 	.word	0x20000848
 8003d10:	20000cd8 	.word	0x20000cd8
 8003d14:	20000844 	.word	0x20000844
 8003d18:	20000d2c 	.word	0x20000d2c

08003d1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d24:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <vTaskInternalSetTimeOutState+0x24>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <vTaskInternalSetTimeOutState+0x28>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	605a      	str	r2, [r3, #4]
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	20000d30 	.word	0x20000d30
 8003d44:	20000d1c 	.word	0x20000d1c

08003d48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	613b      	str	r3, [r7, #16]
}
 8003d6a:	bf00      	nop
 8003d6c:	e7fe      	b.n	8003d6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	60fb      	str	r3, [r7, #12]
}
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003d8a:	f000 ff7b 	bl	8004c84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d8e:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <xTaskCheckForTimeOut+0xbc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d102      	bne.n	8003dae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	e023      	b.n	8003df6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4b15      	ldr	r3, [pc, #84]	; (8003e08 <xTaskCheckForTimeOut+0xc0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d007      	beq.n	8003dca <xTaskCheckForTimeOut+0x82>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d302      	bcc.n	8003dca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	61fb      	str	r3, [r7, #28]
 8003dc8:	e015      	b.n	8003df6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d20b      	bcs.n	8003dec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	1ad2      	subs	r2, r2, r3
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff ff9b 	bl	8003d1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
 8003dea:	e004      	b.n	8003df6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003df2:	2301      	movs	r3, #1
 8003df4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003df6:	f000 ff75 	bl	8004ce4 <vPortExitCritical>

	return xReturn;
 8003dfa:	69fb      	ldr	r3, [r7, #28]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	20000d1c 	.word	0x20000d1c
 8003e08:	20000d30 	.word	0x20000d30

08003e0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e10:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <vTaskMissedYield+0x14>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
}
 8003e16:	bf00      	nop
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	20000d2c 	.word	0x20000d2c

08003e24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e2c:	f000 f852 	bl	8003ed4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <prvIdleTask+0x28>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d9f9      	bls.n	8003e2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <prvIdleTask+0x2c>)
 8003e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e48:	e7f0      	b.n	8003e2c <prvIdleTask+0x8>
 8003e4a:	bf00      	nop
 8003e4c:	20000848 	.word	0x20000848
 8003e50:	e000ed04 	.word	0xe000ed04

08003e54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	e00c      	b.n	8003e7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4a12      	ldr	r2, [pc, #72]	; (8003eb4 <prvInitialiseTaskLists+0x60>)
 8003e6c:	4413      	add	r3, r2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe fb92 	bl	8002598 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3301      	adds	r3, #1
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b37      	cmp	r3, #55	; 0x37
 8003e7e:	d9ef      	bls.n	8003e60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e80:	480d      	ldr	r0, [pc, #52]	; (8003eb8 <prvInitialiseTaskLists+0x64>)
 8003e82:	f7fe fb89 	bl	8002598 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e86:	480d      	ldr	r0, [pc, #52]	; (8003ebc <prvInitialiseTaskLists+0x68>)
 8003e88:	f7fe fb86 	bl	8002598 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e8c:	480c      	ldr	r0, [pc, #48]	; (8003ec0 <prvInitialiseTaskLists+0x6c>)
 8003e8e:	f7fe fb83 	bl	8002598 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e92:	480c      	ldr	r0, [pc, #48]	; (8003ec4 <prvInitialiseTaskLists+0x70>)
 8003e94:	f7fe fb80 	bl	8002598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e98:	480b      	ldr	r0, [pc, #44]	; (8003ec8 <prvInitialiseTaskLists+0x74>)
 8003e9a:	f7fe fb7d 	bl	8002598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <prvInitialiseTaskLists+0x78>)
 8003ea0:	4a05      	ldr	r2, [pc, #20]	; (8003eb8 <prvInitialiseTaskLists+0x64>)
 8003ea2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <prvInitialiseTaskLists+0x7c>)
 8003ea6:	4a05      	ldr	r2, [pc, #20]	; (8003ebc <prvInitialiseTaskLists+0x68>)
 8003ea8:	601a      	str	r2, [r3, #0]
}
 8003eaa:	bf00      	nop
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000848 	.word	0x20000848
 8003eb8:	20000ca8 	.word	0x20000ca8
 8003ebc:	20000cbc 	.word	0x20000cbc
 8003ec0:	20000cd8 	.word	0x20000cd8
 8003ec4:	20000cec 	.word	0x20000cec
 8003ec8:	20000d04 	.word	0x20000d04
 8003ecc:	20000cd0 	.word	0x20000cd0
 8003ed0:	20000cd4 	.word	0x20000cd4

08003ed4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003eda:	e019      	b.n	8003f10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003edc:	f000 fed2 	bl	8004c84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ee0:	4b10      	ldr	r3, [pc, #64]	; (8003f24 <prvCheckTasksWaitingTermination+0x50>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fe fbdd 	bl	80026ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <prvCheckTasksWaitingTermination+0x54>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	4a0b      	ldr	r2, [pc, #44]	; (8003f28 <prvCheckTasksWaitingTermination+0x54>)
 8003efa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003efc:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <prvCheckTasksWaitingTermination+0x58>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3b01      	subs	r3, #1
 8003f02:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <prvCheckTasksWaitingTermination+0x58>)
 8003f04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f06:	f000 feed 	bl	8004ce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f810 	bl	8003f30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f10:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <prvCheckTasksWaitingTermination+0x58>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1e1      	bne.n	8003edc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000cec 	.word	0x20000cec
 8003f28:	20000d18 	.word	0x20000d18
 8003f2c:	20000d00 	.word	0x20000d00

08003f30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d108      	bne.n	8003f54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 f88a 	bl	8005060 <vPortFree>
				vPortFree( pxTCB );
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f001 f887 	bl	8005060 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f52:	e018      	b.n	8003f86 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d103      	bne.n	8003f66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f001 f87e 	bl	8005060 <vPortFree>
	}
 8003f64:	e00f      	b.n	8003f86 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d00a      	beq.n	8003f86 <prvDeleteTCB+0x56>
	__asm volatile
 8003f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	60fb      	str	r3, [r7, #12]
}
 8003f82:	bf00      	nop
 8003f84:	e7fe      	b.n	8003f84 <prvDeleteTCB+0x54>
	}
 8003f86:	bf00      	nop
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f96:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <prvResetNextTaskUnblockTime+0x38>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d104      	bne.n	8003faa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fa0:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <prvResetNextTaskUnblockTime+0x3c>)
 8003fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fa8:	e008      	b.n	8003fbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003faa:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <prvResetNextTaskUnblockTime+0x38>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <prvResetNextTaskUnblockTime+0x3c>)
 8003fba:	6013      	str	r3, [r2, #0]
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	20000cd0 	.word	0x20000cd0
 8003fcc:	20000d38 	.word	0x20000d38

08003fd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <xTaskGetSchedulerState+0x34>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d102      	bne.n	8003fe4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	607b      	str	r3, [r7, #4]
 8003fe2:	e008      	b.n	8003ff6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fe4:	4b08      	ldr	r3, [pc, #32]	; (8004008 <xTaskGetSchedulerState+0x38>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fec:	2302      	movs	r3, #2
 8003fee:	607b      	str	r3, [r7, #4]
 8003ff0:	e001      	b.n	8003ff6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ff6:	687b      	ldr	r3, [r7, #4]
	}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	20000d24 	.word	0x20000d24
 8004008:	20000d40 	.word	0x20000d40

0800400c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d051      	beq.n	80040c6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004026:	4b2a      	ldr	r3, [pc, #168]	; (80040d0 <xTaskPriorityInherit+0xc4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	429a      	cmp	r2, r3
 800402e:	d241      	bcs.n	80040b4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	2b00      	cmp	r3, #0
 8004036:	db06      	blt.n	8004046 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004038:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <xTaskPriorityInherit+0xc4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	6959      	ldr	r1, [r3, #20]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4a1f      	ldr	r2, [pc, #124]	; (80040d4 <xTaskPriorityInherit+0xc8>)
 8004058:	4413      	add	r3, r2
 800405a:	4299      	cmp	r1, r3
 800405c:	d122      	bne.n	80040a4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	3304      	adds	r3, #4
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe fb22 	bl	80026ac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004068:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <xTaskPriorityInherit+0xc4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004076:	4b18      	ldr	r3, [pc, #96]	; (80040d8 <xTaskPriorityInherit+0xcc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d903      	bls.n	8004086 <xTaskPriorityInherit+0x7a>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	4a15      	ldr	r2, [pc, #84]	; (80040d8 <xTaskPriorityInherit+0xcc>)
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4a10      	ldr	r2, [pc, #64]	; (80040d4 <xTaskPriorityInherit+0xc8>)
 8004094:	441a      	add	r2, r3
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	3304      	adds	r3, #4
 800409a:	4619      	mov	r1, r3
 800409c:	4610      	mov	r0, r2
 800409e:	f7fe faa8 	bl	80025f2 <vListInsertEnd>
 80040a2:	e004      	b.n	80040ae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80040a4:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <xTaskPriorityInherit+0xc4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80040ae:	2301      	movs	r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	e008      	b.n	80040c6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <xTaskPriorityInherit+0xc4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	429a      	cmp	r2, r3
 80040c0:	d201      	bcs.n	80040c6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80040c2:	2301      	movs	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040c6:	68fb      	ldr	r3, [r7, #12]
	}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20000844 	.word	0x20000844
 80040d4:	20000848 	.word	0x20000848
 80040d8:	20000d20 	.word	0x20000d20

080040dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d056      	beq.n	80041a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80040f2:	4b2e      	ldr	r3, [pc, #184]	; (80041ac <xTaskPriorityDisinherit+0xd0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d00a      	beq.n	8004112 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	60fb      	str	r3, [r7, #12]
}
 800410e:	bf00      	nop
 8004110:	e7fe      	b.n	8004110 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10a      	bne.n	8004130 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	60bb      	str	r3, [r7, #8]
}
 800412c:	bf00      	nop
 800412e:	e7fe      	b.n	800412e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004134:	1e5a      	subs	r2, r3, #1
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004142:	429a      	cmp	r2, r3
 8004144:	d02c      	beq.n	80041a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800414a:	2b00      	cmp	r3, #0
 800414c:	d128      	bne.n	80041a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	3304      	adds	r3, #4
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe faaa 	bl	80026ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004170:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <xTaskPriorityDisinherit+0xd4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d903      	bls.n	8004180 <xTaskPriorityDisinherit+0xa4>
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	4a0c      	ldr	r2, [pc, #48]	; (80041b0 <xTaskPriorityDisinherit+0xd4>)
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4a09      	ldr	r2, [pc, #36]	; (80041b4 <xTaskPriorityDisinherit+0xd8>)
 800418e:	441a      	add	r2, r3
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	3304      	adds	r3, #4
 8004194:	4619      	mov	r1, r3
 8004196:	4610      	mov	r0, r2
 8004198:	f7fe fa2b 	bl	80025f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800419c:	2301      	movs	r3, #1
 800419e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041a0:	697b      	ldr	r3, [r7, #20]
	}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000844 	.word	0x20000844
 80041b0:	20000d20 	.word	0x20000d20
 80041b4:	20000848 	.word	0x20000848

080041b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80041c6:	2301      	movs	r3, #1
 80041c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d06a      	beq.n	80042a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	60fb      	str	r3, [r7, #12]
}
 80041ea:	bf00      	nop
 80041ec:	e7fe      	b.n	80041ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d902      	bls.n	80041fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	61fb      	str	r3, [r7, #28]
 80041fc:	e002      	b.n	8004204 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004202:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	69fa      	ldr	r2, [r7, #28]
 800420a:	429a      	cmp	r2, r3
 800420c:	d04b      	beq.n	80042a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	429a      	cmp	r2, r3
 8004216:	d146      	bne.n	80042a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004218:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	429a      	cmp	r2, r3
 8004220:	d10a      	bne.n	8004238 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	60bb      	str	r3, [r7, #8]
}
 8004234:	bf00      	nop
 8004236:	e7fe      	b.n	8004236 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	2b00      	cmp	r3, #0
 800424a:	db04      	blt.n	8004256 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	6959      	ldr	r1, [r3, #20]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4a13      	ldr	r2, [pc, #76]	; (80042b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004266:	4413      	add	r3, r2
 8004268:	4299      	cmp	r1, r3
 800426a:	d11c      	bne.n	80042a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	3304      	adds	r3, #4
 8004270:	4618      	mov	r0, r3
 8004272:	f7fe fa1b 	bl	80026ac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427a:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d903      	bls.n	800428a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	4a0c      	ldr	r2, [pc, #48]	; (80042b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4a07      	ldr	r2, [pc, #28]	; (80042b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004298:	441a      	add	r2, r3
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	3304      	adds	r3, #4
 800429e:	4619      	mov	r1, r3
 80042a0:	4610      	mov	r0, r2
 80042a2:	f7fe f9a6 	bl	80025f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042a6:	bf00      	nop
 80042a8:	3720      	adds	r7, #32
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20000844 	.word	0x20000844
 80042b4:	20000848 	.word	0x20000848
 80042b8:	20000d20 	.word	0x20000d20

080042bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80042c0:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d004      	beq.n	80042d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042ce:	3201      	adds	r2, #1
 80042d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80042d2:	4b03      	ldr	r3, [pc, #12]	; (80042e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80042d4:	681b      	ldr	r3, [r3, #0]
	}
 80042d6:	4618      	mov	r0, r3
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	20000844 	.word	0x20000844

080042e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042ee:	4b21      	ldr	r3, [pc, #132]	; (8004374 <prvAddCurrentTaskToDelayedList+0x90>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042f4:	4b20      	ldr	r3, [pc, #128]	; (8004378 <prvAddCurrentTaskToDelayedList+0x94>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3304      	adds	r3, #4
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fe f9d6 	bl	80026ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d10a      	bne.n	800431e <prvAddCurrentTaskToDelayedList+0x3a>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800430e:	4b1a      	ldr	r3, [pc, #104]	; (8004378 <prvAddCurrentTaskToDelayedList+0x94>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3304      	adds	r3, #4
 8004314:	4619      	mov	r1, r3
 8004316:	4819      	ldr	r0, [pc, #100]	; (800437c <prvAddCurrentTaskToDelayedList+0x98>)
 8004318:	f7fe f96b 	bl	80025f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800431c:	e026      	b.n	800436c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4413      	add	r3, r2
 8004324:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004326:	4b14      	ldr	r3, [pc, #80]	; (8004378 <prvAddCurrentTaskToDelayedList+0x94>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	429a      	cmp	r2, r3
 8004334:	d209      	bcs.n	800434a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004336:	4b12      	ldr	r3, [pc, #72]	; (8004380 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4b0f      	ldr	r3, [pc, #60]	; (8004378 <prvAddCurrentTaskToDelayedList+0x94>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3304      	adds	r3, #4
 8004340:	4619      	mov	r1, r3
 8004342:	4610      	mov	r0, r2
 8004344:	f7fe f979 	bl	800263a <vListInsert>
}
 8004348:	e010      	b.n	800436c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800434a:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <prvAddCurrentTaskToDelayedList+0xa0>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <prvAddCurrentTaskToDelayedList+0x94>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3304      	adds	r3, #4
 8004354:	4619      	mov	r1, r3
 8004356:	4610      	mov	r0, r2
 8004358:	f7fe f96f 	bl	800263a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800435c:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <prvAddCurrentTaskToDelayedList+0xa4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	429a      	cmp	r2, r3
 8004364:	d202      	bcs.n	800436c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004366:	4a08      	ldr	r2, [pc, #32]	; (8004388 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	6013      	str	r3, [r2, #0]
}
 800436c:	bf00      	nop
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20000d1c 	.word	0x20000d1c
 8004378:	20000844 	.word	0x20000844
 800437c:	20000d04 	.word	0x20000d04
 8004380:	20000cd4 	.word	0x20000cd4
 8004384:	20000cd0 	.word	0x20000cd0
 8004388:	20000d38 	.word	0x20000d38

0800438c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	; 0x28
 8004390:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004396:	f000 fb07 	bl	80049a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800439a:	4b1c      	ldr	r3, [pc, #112]	; (800440c <xTimerCreateTimerTask+0x80>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d021      	beq.n	80043e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80043aa:	1d3a      	adds	r2, r7, #4
 80043ac:	f107 0108 	add.w	r1, r7, #8
 80043b0:	f107 030c 	add.w	r3, r7, #12
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fe f8d5 	bl	8002564 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	9202      	str	r2, [sp, #8]
 80043c2:	9301      	str	r3, [sp, #4]
 80043c4:	2302      	movs	r3, #2
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	2300      	movs	r3, #0
 80043ca:	460a      	mov	r2, r1
 80043cc:	4910      	ldr	r1, [pc, #64]	; (8004410 <xTimerCreateTimerTask+0x84>)
 80043ce:	4811      	ldr	r0, [pc, #68]	; (8004414 <xTimerCreateTimerTask+0x88>)
 80043d0:	f7fe ffe0 	bl	8003394 <xTaskCreateStatic>
 80043d4:	4603      	mov	r3, r0
 80043d6:	4a10      	ldr	r2, [pc, #64]	; (8004418 <xTimerCreateTimerTask+0x8c>)
 80043d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80043da:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <xTimerCreateTimerTask+0x8c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80043e2:	2301      	movs	r3, #1
 80043e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10a      	bne.n	8004402 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80043ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	613b      	str	r3, [r7, #16]
}
 80043fe:	bf00      	nop
 8004400:	e7fe      	b.n	8004400 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004402:	697b      	ldr	r3, [r7, #20]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000d74 	.word	0x20000d74
 8004410:	08006714 	.word	0x08006714
 8004414:	08004551 	.word	0x08004551
 8004418:	20000d78 	.word	0x20000d78

0800441c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	; 0x28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800442a:	2300      	movs	r3, #0
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10a      	bne.n	800444a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	623b      	str	r3, [r7, #32]
}
 8004446:	bf00      	nop
 8004448:	e7fe      	b.n	8004448 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800444a:	4b1a      	ldr	r3, [pc, #104]	; (80044b4 <xTimerGenericCommand+0x98>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d02a      	beq.n	80044a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b05      	cmp	r3, #5
 8004462:	dc18      	bgt.n	8004496 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004464:	f7ff fdb4 	bl	8003fd0 <xTaskGetSchedulerState>
 8004468:	4603      	mov	r3, r0
 800446a:	2b02      	cmp	r3, #2
 800446c:	d109      	bne.n	8004482 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800446e:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <xTimerGenericCommand+0x98>)
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	f107 0110 	add.w	r1, r7, #16
 8004476:	2300      	movs	r3, #0
 8004478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800447a:	f7fe fa7f 	bl	800297c <xQueueGenericSend>
 800447e:	6278      	str	r0, [r7, #36]	; 0x24
 8004480:	e012      	b.n	80044a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004482:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <xTimerGenericCommand+0x98>)
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	f107 0110 	add.w	r1, r7, #16
 800448a:	2300      	movs	r3, #0
 800448c:	2200      	movs	r2, #0
 800448e:	f7fe fa75 	bl	800297c <xQueueGenericSend>
 8004492:	6278      	str	r0, [r7, #36]	; 0x24
 8004494:	e008      	b.n	80044a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004496:	4b07      	ldr	r3, [pc, #28]	; (80044b4 <xTimerGenericCommand+0x98>)
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	f107 0110 	add.w	r1, r7, #16
 800449e:	2300      	movs	r3, #0
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	f7fe fb69 	bl	8002b78 <xQueueGenericSendFromISR>
 80044a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3728      	adds	r7, #40	; 0x28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	20000d74 	.word	0x20000d74

080044b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af02      	add	r7, sp, #8
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044c2:	4b22      	ldr	r3, [pc, #136]	; (800454c <prvProcessExpiredTimer+0x94>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	3304      	adds	r3, #4
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fe f8eb 	bl	80026ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d022      	beq.n	800452a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	699a      	ldr	r2, [r3, #24]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	18d1      	adds	r1, r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	6978      	ldr	r0, [r7, #20]
 80044f2:	f000 f8d1 	bl	8004698 <prvInsertTimerInActiveList>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01f      	beq.n	800453c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044fc:	2300      	movs	r3, #0
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	2300      	movs	r3, #0
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	2100      	movs	r1, #0
 8004506:	6978      	ldr	r0, [r7, #20]
 8004508:	f7ff ff88 	bl	800441c <xTimerGenericCommand>
 800450c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d113      	bne.n	800453c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	60fb      	str	r3, [r7, #12]
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004530:	f023 0301 	bic.w	r3, r3, #1
 8004534:	b2da      	uxtb	r2, r3
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	6978      	ldr	r0, [r7, #20]
 8004542:	4798      	blx	r3
}
 8004544:	bf00      	nop
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20000d6c 	.word	0x20000d6c

08004550 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004558:	f107 0308 	add.w	r3, r7, #8
 800455c:	4618      	mov	r0, r3
 800455e:	f000 f857 	bl	8004610 <prvGetNextExpireTime>
 8004562:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4619      	mov	r1, r3
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f803 	bl	8004574 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800456e:	f000 f8d5 	bl	800471c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004572:	e7f1      	b.n	8004558 <prvTimerTask+0x8>

08004574 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800457e:	f7ff f945 	bl	800380c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004582:	f107 0308 	add.w	r3, r7, #8
 8004586:	4618      	mov	r0, r3
 8004588:	f000 f866 	bl	8004658 <prvSampleTimeNow>
 800458c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d130      	bne.n	80045f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10a      	bne.n	80045b0 <prvProcessTimerOrBlockTask+0x3c>
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d806      	bhi.n	80045b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80045a2:	f7ff f941 	bl	8003828 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80045a6:	68f9      	ldr	r1, [r7, #12]
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff ff85 	bl	80044b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80045ae:	e024      	b.n	80045fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80045b6:	4b13      	ldr	r3, [pc, #76]	; (8004604 <prvProcessTimerOrBlockTask+0x90>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <prvProcessTimerOrBlockTask+0x50>
 80045c0:	2301      	movs	r3, #1
 80045c2:	e000      	b.n	80045c6 <prvProcessTimerOrBlockTask+0x52>
 80045c4:	2300      	movs	r3, #0
 80045c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80045c8:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <prvProcessTimerOrBlockTask+0x94>)
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	4619      	mov	r1, r3
 80045d6:	f7fe fea9 	bl	800332c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80045da:	f7ff f925 	bl	8003828 <xTaskResumeAll>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10a      	bne.n	80045fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80045e4:	4b09      	ldr	r3, [pc, #36]	; (800460c <prvProcessTimerOrBlockTask+0x98>)
 80045e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	f3bf 8f6f 	isb	sy
}
 80045f4:	e001      	b.n	80045fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80045f6:	f7ff f917 	bl	8003828 <xTaskResumeAll>
}
 80045fa:	bf00      	nop
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20000d70 	.word	0x20000d70
 8004608:	20000d74 	.word	0x20000d74
 800460c:	e000ed04 	.word	0xe000ed04

08004610 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004618:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <prvGetNextExpireTime+0x44>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <prvGetNextExpireTime+0x16>
 8004622:	2201      	movs	r2, #1
 8004624:	e000      	b.n	8004628 <prvGetNextExpireTime+0x18>
 8004626:	2200      	movs	r2, #0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d105      	bne.n	8004640 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004634:	4b07      	ldr	r3, [pc, #28]	; (8004654 <prvGetNextExpireTime+0x44>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	e001      	b.n	8004644 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004644:	68fb      	ldr	r3, [r7, #12]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	20000d6c 	.word	0x20000d6c

08004658 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004660:	f7ff f980 	bl	8003964 <xTaskGetTickCount>
 8004664:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004666:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <prvSampleTimeNow+0x3c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	429a      	cmp	r2, r3
 800466e:	d205      	bcs.n	800467c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004670:	f000 f936 	bl	80048e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	e002      	b.n	8004682 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004682:	4a04      	ldr	r2, [pc, #16]	; (8004694 <prvSampleTimeNow+0x3c>)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004688:	68fb      	ldr	r3, [r7, #12]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000d7c 	.word	0x20000d7c

08004698 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d812      	bhi.n	80046e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	1ad2      	subs	r2, r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d302      	bcc.n	80046d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80046cc:	2301      	movs	r3, #1
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	e01b      	b.n	800470a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80046d2:	4b10      	ldr	r3, [pc, #64]	; (8004714 <prvInsertTimerInActiveList+0x7c>)
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3304      	adds	r3, #4
 80046da:	4619      	mov	r1, r3
 80046dc:	4610      	mov	r0, r2
 80046de:	f7fd ffac 	bl	800263a <vListInsert>
 80046e2:	e012      	b.n	800470a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d206      	bcs.n	80046fa <prvInsertTimerInActiveList+0x62>
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d302      	bcc.n	80046fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80046f4:	2301      	movs	r3, #1
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	e007      	b.n	800470a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046fa:	4b07      	ldr	r3, [pc, #28]	; (8004718 <prvInsertTimerInActiveList+0x80>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	3304      	adds	r3, #4
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f7fd ff98 	bl	800263a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800470a:	697b      	ldr	r3, [r7, #20]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	20000d70 	.word	0x20000d70
 8004718:	20000d6c 	.word	0x20000d6c

0800471c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08e      	sub	sp, #56	; 0x38
 8004720:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004722:	e0ca      	b.n	80048ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	da18      	bge.n	800475c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800472a:	1d3b      	adds	r3, r7, #4
 800472c:	3304      	adds	r3, #4
 800472e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10a      	bne.n	800474c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	61fb      	str	r3, [r7, #28]
}
 8004748:	bf00      	nop
 800474a:	e7fe      	b.n	800474a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800474c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004752:	6850      	ldr	r0, [r2, #4]
 8004754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004756:	6892      	ldr	r2, [r2, #8]
 8004758:	4611      	mov	r1, r2
 800475a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	f2c0 80ab 	blt.w	80048ba <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d004      	beq.n	800477a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	3304      	adds	r3, #4
 8004774:	4618      	mov	r0, r3
 8004776:	f7fd ff99 	bl	80026ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800477a:	463b      	mov	r3, r7
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff ff6b 	bl	8004658 <prvSampleTimeNow>
 8004782:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b09      	cmp	r3, #9
 8004788:	f200 8096 	bhi.w	80048b8 <prvProcessReceivedCommands+0x19c>
 800478c:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <prvProcessReceivedCommands+0x78>)
 800478e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004792:	bf00      	nop
 8004794:	080047bd 	.word	0x080047bd
 8004798:	080047bd 	.word	0x080047bd
 800479c:	080047bd 	.word	0x080047bd
 80047a0:	08004831 	.word	0x08004831
 80047a4:	08004845 	.word	0x08004845
 80047a8:	0800488f 	.word	0x0800488f
 80047ac:	080047bd 	.word	0x080047bd
 80047b0:	080047bd 	.word	0x080047bd
 80047b4:	08004831 	.word	0x08004831
 80047b8:	08004845 	.word	0x08004845
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	18d1      	adds	r1, r2, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047dc:	f7ff ff5c 	bl	8004698 <prvInsertTimerInActiveList>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d069      	beq.n	80048ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d05e      	beq.n	80048ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	441a      	add	r2, r3
 8004804:	2300      	movs	r3, #0
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	2300      	movs	r3, #0
 800480a:	2100      	movs	r1, #0
 800480c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800480e:	f7ff fe05 	bl	800441c <xTimerGenericCommand>
 8004812:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d14f      	bne.n	80048ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	61bb      	str	r3, [r7, #24]
}
 800482c:	bf00      	nop
 800482e:	e7fe      	b.n	800482e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004836:	f023 0301 	bic.w	r3, r3, #1
 800483a:	b2da      	uxtb	r2, r3
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004842:	e03a      	b.n	80048ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800484a:	f043 0301 	orr.w	r3, r3, #1
 800484e:	b2da      	uxtb	r2, r3
 8004850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	617b      	str	r3, [r7, #20]
}
 8004876:	bf00      	nop
 8004878:	e7fe      	b.n	8004878 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487c:	699a      	ldr	r2, [r3, #24]
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	18d1      	adds	r1, r2, r3
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004888:	f7ff ff06 	bl	8004698 <prvInsertTimerInActiveList>
					break;
 800488c:	e015      	b.n	80048ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800488e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d103      	bne.n	80048a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800489c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800489e:	f000 fbdf 	bl	8005060 <vPortFree>
 80048a2:	e00a      	b.n	80048ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80048b6:	e000      	b.n	80048ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80048b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048ba:	4b08      	ldr	r3, [pc, #32]	; (80048dc <prvProcessReceivedCommands+0x1c0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	1d39      	adds	r1, r7, #4
 80048c0:	2200      	movs	r2, #0
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fe f9f4 	bl	8002cb0 <xQueueReceive>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f47f af2a 	bne.w	8004724 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80048d0:	bf00      	nop
 80048d2:	bf00      	nop
 80048d4:	3730      	adds	r7, #48	; 0x30
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000d74 	.word	0x20000d74

080048e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048e6:	e048      	b.n	800497a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048e8:	4b2d      	ldr	r3, [pc, #180]	; (80049a0 <prvSwitchTimerLists+0xc0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048f2:	4b2b      	ldr	r3, [pc, #172]	; (80049a0 <prvSwitchTimerLists+0xc0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	3304      	adds	r3, #4
 8004900:	4618      	mov	r0, r3
 8004902:	f7fd fed3 	bl	80026ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d02e      	beq.n	800497a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4413      	add	r3, r2
 8004924:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	429a      	cmp	r2, r3
 800492c:	d90e      	bls.n	800494c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800493a:	4b19      	ldr	r3, [pc, #100]	; (80049a0 <prvSwitchTimerLists+0xc0>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3304      	adds	r3, #4
 8004942:	4619      	mov	r1, r3
 8004944:	4610      	mov	r0, r2
 8004946:	f7fd fe78 	bl	800263a <vListInsert>
 800494a:	e016      	b.n	800497a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800494c:	2300      	movs	r3, #0
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	2300      	movs	r3, #0
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	2100      	movs	r1, #0
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f7ff fd60 	bl	800441c <xTimerGenericCommand>
 800495c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10a      	bne.n	800497a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	603b      	str	r3, [r7, #0]
}
 8004976:	bf00      	nop
 8004978:	e7fe      	b.n	8004978 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800497a:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <prvSwitchTimerLists+0xc0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1b1      	bne.n	80048e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <prvSwitchTimerLists+0xc0>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <prvSwitchTimerLists+0xc4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a04      	ldr	r2, [pc, #16]	; (80049a0 <prvSwitchTimerLists+0xc0>)
 8004990:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004992:	4a04      	ldr	r2, [pc, #16]	; (80049a4 <prvSwitchTimerLists+0xc4>)
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	6013      	str	r3, [r2, #0]
}
 8004998:	bf00      	nop
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	20000d6c 	.word	0x20000d6c
 80049a4:	20000d70 	.word	0x20000d70

080049a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80049ae:	f000 f969 	bl	8004c84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80049b2:	4b15      	ldr	r3, [pc, #84]	; (8004a08 <prvCheckForValidListAndQueue+0x60>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d120      	bne.n	80049fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80049ba:	4814      	ldr	r0, [pc, #80]	; (8004a0c <prvCheckForValidListAndQueue+0x64>)
 80049bc:	f7fd fdec 	bl	8002598 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80049c0:	4813      	ldr	r0, [pc, #76]	; (8004a10 <prvCheckForValidListAndQueue+0x68>)
 80049c2:	f7fd fde9 	bl	8002598 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80049c6:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <prvCheckForValidListAndQueue+0x6c>)
 80049c8:	4a10      	ldr	r2, [pc, #64]	; (8004a0c <prvCheckForValidListAndQueue+0x64>)
 80049ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80049cc:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <prvCheckForValidListAndQueue+0x70>)
 80049ce:	4a10      	ldr	r2, [pc, #64]	; (8004a10 <prvCheckForValidListAndQueue+0x68>)
 80049d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80049d2:	2300      	movs	r3, #0
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <prvCheckForValidListAndQueue+0x74>)
 80049d8:	4a11      	ldr	r2, [pc, #68]	; (8004a20 <prvCheckForValidListAndQueue+0x78>)
 80049da:	2110      	movs	r1, #16
 80049dc:	200a      	movs	r0, #10
 80049de:	f7fd fef7 	bl	80027d0 <xQueueGenericCreateStatic>
 80049e2:	4603      	mov	r3, r0
 80049e4:	4a08      	ldr	r2, [pc, #32]	; (8004a08 <prvCheckForValidListAndQueue+0x60>)
 80049e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80049e8:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <prvCheckForValidListAndQueue+0x60>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <prvCheckForValidListAndQueue+0x60>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	490b      	ldr	r1, [pc, #44]	; (8004a24 <prvCheckForValidListAndQueue+0x7c>)
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fe fc6e 	bl	80032d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049fc:	f000 f972 	bl	8004ce4 <vPortExitCritical>
}
 8004a00:	bf00      	nop
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000d74 	.word	0x20000d74
 8004a0c:	20000d44 	.word	0x20000d44
 8004a10:	20000d58 	.word	0x20000d58
 8004a14:	20000d6c 	.word	0x20000d6c
 8004a18:	20000d70 	.word	0x20000d70
 8004a1c:	20000e20 	.word	0x20000e20
 8004a20:	20000d80 	.word	0x20000d80
 8004a24:	0800671c 	.word	0x0800671c

08004a28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	3b04      	subs	r3, #4
 8004a38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	3b04      	subs	r3, #4
 8004a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f023 0201 	bic.w	r2, r3, #1
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	3b04      	subs	r3, #4
 8004a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a58:	4a0c      	ldr	r2, [pc, #48]	; (8004a8c <pxPortInitialiseStack+0x64>)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3b14      	subs	r3, #20
 8004a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	3b04      	subs	r3, #4
 8004a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f06f 0202 	mvn.w	r2, #2
 8004a76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3b20      	subs	r3, #32
 8004a7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	08004a91 	.word	0x08004a91

08004a90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a96:	2300      	movs	r3, #0
 8004a98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a9a:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <prvTaskExitError+0x54>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa2:	d00a      	beq.n	8004aba <prvTaskExitError+0x2a>
	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	60fb      	str	r3, [r7, #12]
}
 8004ab6:	bf00      	nop
 8004ab8:	e7fe      	b.n	8004ab8 <prvTaskExitError+0x28>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	60bb      	str	r3, [r7, #8]
}
 8004acc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ace:	bf00      	nop
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0fc      	beq.n	8004ad0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ad6:	bf00      	nop
 8004ad8:	bf00      	nop
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	2000000c 	.word	0x2000000c
	...

08004af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004af0:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <pxCurrentTCBConst2>)
 8004af2:	6819      	ldr	r1, [r3, #0]
 8004af4:	6808      	ldr	r0, [r1, #0]
 8004af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afa:	f380 8809 	msr	PSP, r0
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f04f 0000 	mov.w	r0, #0
 8004b06:	f380 8811 	msr	BASEPRI, r0
 8004b0a:	4770      	bx	lr
 8004b0c:	f3af 8000 	nop.w

08004b10 <pxCurrentTCBConst2>:
 8004b10:	20000844 	.word	0x20000844
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop

08004b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b18:	4808      	ldr	r0, [pc, #32]	; (8004b3c <prvPortStartFirstTask+0x24>)
 8004b1a:	6800      	ldr	r0, [r0, #0]
 8004b1c:	6800      	ldr	r0, [r0, #0]
 8004b1e:	f380 8808 	msr	MSP, r0
 8004b22:	f04f 0000 	mov.w	r0, #0
 8004b26:	f380 8814 	msr	CONTROL, r0
 8004b2a:	b662      	cpsie	i
 8004b2c:	b661      	cpsie	f
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	df00      	svc	0
 8004b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b3a:	bf00      	nop
 8004b3c:	e000ed08 	.word	0xe000ed08

08004b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b46:	4b46      	ldr	r3, [pc, #280]	; (8004c60 <xPortStartScheduler+0x120>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a46      	ldr	r2, [pc, #280]	; (8004c64 <xPortStartScheduler+0x124>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d10a      	bne.n	8004b66 <xPortStartScheduler+0x26>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	613b      	str	r3, [r7, #16]
}
 8004b62:	bf00      	nop
 8004b64:	e7fe      	b.n	8004b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b66:	4b3e      	ldr	r3, [pc, #248]	; (8004c60 <xPortStartScheduler+0x120>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a3f      	ldr	r2, [pc, #252]	; (8004c68 <xPortStartScheduler+0x128>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d10a      	bne.n	8004b86 <xPortStartScheduler+0x46>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	60fb      	str	r3, [r7, #12]
}
 8004b82:	bf00      	nop
 8004b84:	e7fe      	b.n	8004b84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b86:	4b39      	ldr	r3, [pc, #228]	; (8004c6c <xPortStartScheduler+0x12c>)
 8004b88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	22ff      	movs	r2, #255	; 0xff
 8004b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	4b31      	ldr	r3, [pc, #196]	; (8004c70 <xPortStartScheduler+0x130>)
 8004bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bae:	4b31      	ldr	r3, [pc, #196]	; (8004c74 <xPortStartScheduler+0x134>)
 8004bb0:	2207      	movs	r2, #7
 8004bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bb4:	e009      	b.n	8004bca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004bb6:	4b2f      	ldr	r3, [pc, #188]	; (8004c74 <xPortStartScheduler+0x134>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	4a2d      	ldr	r2, [pc, #180]	; (8004c74 <xPortStartScheduler+0x134>)
 8004bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bc0:	78fb      	ldrb	r3, [r7, #3]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d0ef      	beq.n	8004bb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bd6:	4b27      	ldr	r3, [pc, #156]	; (8004c74 <xPortStartScheduler+0x134>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f1c3 0307 	rsb	r3, r3, #7
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d00a      	beq.n	8004bf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	60bb      	str	r3, [r7, #8]
}
 8004bf4:	bf00      	nop
 8004bf6:	e7fe      	b.n	8004bf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bf8:	4b1e      	ldr	r3, [pc, #120]	; (8004c74 <xPortStartScheduler+0x134>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	021b      	lsls	r3, r3, #8
 8004bfe:	4a1d      	ldr	r2, [pc, #116]	; (8004c74 <xPortStartScheduler+0x134>)
 8004c00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c02:	4b1c      	ldr	r3, [pc, #112]	; (8004c74 <xPortStartScheduler+0x134>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c0a:	4a1a      	ldr	r2, [pc, #104]	; (8004c74 <xPortStartScheduler+0x134>)
 8004c0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c16:	4b18      	ldr	r3, [pc, #96]	; (8004c78 <xPortStartScheduler+0x138>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <xPortStartScheduler+0x138>)
 8004c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c22:	4b15      	ldr	r3, [pc, #84]	; (8004c78 <xPortStartScheduler+0x138>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a14      	ldr	r2, [pc, #80]	; (8004c78 <xPortStartScheduler+0x138>)
 8004c28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c2e:	f000 f8dd 	bl	8004dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c32:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <xPortStartScheduler+0x13c>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c38:	f000 f8fc 	bl	8004e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c3c:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <xPortStartScheduler+0x140>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a0f      	ldr	r2, [pc, #60]	; (8004c80 <xPortStartScheduler+0x140>)
 8004c42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c48:	f7ff ff66 	bl	8004b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c4c:	f7fe ff54 	bl	8003af8 <vTaskSwitchContext>
	prvTaskExitError();
 8004c50:	f7ff ff1e 	bl	8004a90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	e000ed00 	.word	0xe000ed00
 8004c64:	410fc271 	.word	0x410fc271
 8004c68:	410fc270 	.word	0x410fc270
 8004c6c:	e000e400 	.word	0xe000e400
 8004c70:	20000e70 	.word	0x20000e70
 8004c74:	20000e74 	.word	0x20000e74
 8004c78:	e000ed20 	.word	0xe000ed20
 8004c7c:	2000000c 	.word	0x2000000c
 8004c80:	e000ef34 	.word	0xe000ef34

08004c84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	607b      	str	r3, [r7, #4]
}
 8004c9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c9e:	4b0f      	ldr	r3, [pc, #60]	; (8004cdc <vPortEnterCritical+0x58>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	4a0d      	ldr	r2, [pc, #52]	; (8004cdc <vPortEnterCritical+0x58>)
 8004ca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ca8:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <vPortEnterCritical+0x58>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d10f      	bne.n	8004cd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <vPortEnterCritical+0x5c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	603b      	str	r3, [r7, #0]
}
 8004ccc:	bf00      	nop
 8004cce:	e7fe      	b.n	8004cce <vPortEnterCritical+0x4a>
	}
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	2000000c 	.word	0x2000000c
 8004ce0:	e000ed04 	.word	0xe000ed04

08004ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004cea:	4b12      	ldr	r3, [pc, #72]	; (8004d34 <vPortExitCritical+0x50>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10a      	bne.n	8004d08 <vPortExitCritical+0x24>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	607b      	str	r3, [r7, #4]
}
 8004d04:	bf00      	nop
 8004d06:	e7fe      	b.n	8004d06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d08:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <vPortExitCritical+0x50>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <vPortExitCritical+0x50>)
 8004d10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d12:	4b08      	ldr	r3, [pc, #32]	; (8004d34 <vPortExitCritical+0x50>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d105      	bne.n	8004d26 <vPortExitCritical+0x42>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	f383 8811 	msr	BASEPRI, r3
}
 8004d24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	2000000c 	.word	0x2000000c
	...

08004d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d40:	f3ef 8009 	mrs	r0, PSP
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	4b15      	ldr	r3, [pc, #84]	; (8004da0 <pxCurrentTCBConst>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	f01e 0f10 	tst.w	lr, #16
 8004d50:	bf08      	it	eq
 8004d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d5a:	6010      	str	r0, [r2, #0]
 8004d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d64:	f380 8811 	msr	BASEPRI, r0
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f7fe fec2 	bl	8003af8 <vTaskSwitchContext>
 8004d74:	f04f 0000 	mov.w	r0, #0
 8004d78:	f380 8811 	msr	BASEPRI, r0
 8004d7c:	bc09      	pop	{r0, r3}
 8004d7e:	6819      	ldr	r1, [r3, #0]
 8004d80:	6808      	ldr	r0, [r1, #0]
 8004d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d86:	f01e 0f10 	tst.w	lr, #16
 8004d8a:	bf08      	it	eq
 8004d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d90:	f380 8809 	msr	PSP, r0
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	f3af 8000 	nop.w

08004da0 <pxCurrentTCBConst>:
 8004da0:	20000844 	.word	0x20000844
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004da4:	bf00      	nop
 8004da6:	bf00      	nop

08004da8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	607b      	str	r3, [r7, #4]
}
 8004dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004dc2:	f7fe fddf 	bl	8003984 <xTaskIncrementTick>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <xPortSysTickHandler+0x40>)
 8004dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	f383 8811 	msr	BASEPRI, r3
}
 8004dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	e000ed04 	.word	0xe000ed04

08004dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004df0:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <vPortSetupTimerInterrupt+0x34>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004df6:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <vPortSetupTimerInterrupt+0x38>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dfc:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <vPortSetupTimerInterrupt+0x3c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a0a      	ldr	r2, [pc, #40]	; (8004e2c <vPortSetupTimerInterrupt+0x40>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	099b      	lsrs	r3, r3, #6
 8004e08:	4a09      	ldr	r2, [pc, #36]	; (8004e30 <vPortSetupTimerInterrupt+0x44>)
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e0e:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <vPortSetupTimerInterrupt+0x34>)
 8004e10:	2207      	movs	r2, #7
 8004e12:	601a      	str	r2, [r3, #0]
}
 8004e14:	bf00      	nop
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	e000e010 	.word	0xe000e010
 8004e24:	e000e018 	.word	0xe000e018
 8004e28:	20000000 	.word	0x20000000
 8004e2c:	10624dd3 	.word	0x10624dd3
 8004e30:	e000e014 	.word	0xe000e014

08004e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e44 <vPortEnableVFP+0x10>
 8004e38:	6801      	ldr	r1, [r0, #0]
 8004e3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e3e:	6001      	str	r1, [r0, #0]
 8004e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e42:	bf00      	nop
 8004e44:	e000ed88 	.word	0xe000ed88

08004e48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e4e:	f3ef 8305 	mrs	r3, IPSR
 8004e52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b0f      	cmp	r3, #15
 8004e58:	d914      	bls.n	8004e84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e5a:	4a17      	ldr	r2, [pc, #92]	; (8004eb8 <vPortValidateInterruptPriority+0x70>)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e64:	4b15      	ldr	r3, [pc, #84]	; (8004ebc <vPortValidateInterruptPriority+0x74>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	7afa      	ldrb	r2, [r7, #11]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d20a      	bcs.n	8004e84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	607b      	str	r3, [r7, #4]
}
 8004e80:	bf00      	nop
 8004e82:	e7fe      	b.n	8004e82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e84:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <vPortValidateInterruptPriority+0x78>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e8c:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <vPortValidateInterruptPriority+0x7c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d90a      	bls.n	8004eaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e98:	f383 8811 	msr	BASEPRI, r3
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	603b      	str	r3, [r7, #0]
}
 8004ea6:	bf00      	nop
 8004ea8:	e7fe      	b.n	8004ea8 <vPortValidateInterruptPriority+0x60>
	}
 8004eaa:	bf00      	nop
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	e000e3f0 	.word	0xe000e3f0
 8004ebc:	20000e70 	.word	0x20000e70
 8004ec0:	e000ed0c 	.word	0xe000ed0c
 8004ec4:	20000e74 	.word	0x20000e74

08004ec8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	; 0x28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ed4:	f7fe fc9a 	bl	800380c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ed8:	4b5b      	ldr	r3, [pc, #364]	; (8005048 <pvPortMalloc+0x180>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ee0:	f000 f920 	bl	8005124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ee4:	4b59      	ldr	r3, [pc, #356]	; (800504c <pvPortMalloc+0x184>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f040 8093 	bne.w	8005018 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01d      	beq.n	8004f34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004ef8:	2208      	movs	r2, #8
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4413      	add	r3, r2
 8004efe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d014      	beq.n	8004f34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f023 0307 	bic.w	r3, r3, #7
 8004f10:	3308      	adds	r3, #8
 8004f12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <pvPortMalloc+0x6c>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	617b      	str	r3, [r7, #20]
}
 8004f30:	bf00      	nop
 8004f32:	e7fe      	b.n	8004f32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d06e      	beq.n	8005018 <pvPortMalloc+0x150>
 8004f3a:	4b45      	ldr	r3, [pc, #276]	; (8005050 <pvPortMalloc+0x188>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d869      	bhi.n	8005018 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f44:	4b43      	ldr	r3, [pc, #268]	; (8005054 <pvPortMalloc+0x18c>)
 8004f46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f48:	4b42      	ldr	r3, [pc, #264]	; (8005054 <pvPortMalloc+0x18c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f4e:	e004      	b.n	8004f5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d903      	bls.n	8004f6c <pvPortMalloc+0xa4>
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f1      	bne.n	8004f50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f6c:	4b36      	ldr	r3, [pc, #216]	; (8005048 <pvPortMalloc+0x180>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d050      	beq.n	8005018 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2208      	movs	r2, #8
 8004f7c:	4413      	add	r3, r2
 8004f7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	1ad2      	subs	r2, r2, r3
 8004f90:	2308      	movs	r3, #8
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d91f      	bls.n	8004fd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <pvPortMalloc+0xf8>
	__asm volatile
 8004faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	613b      	str	r3, [r7, #16]
}
 8004fbc:	bf00      	nop
 8004fbe:	e7fe      	b.n	8004fbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	1ad2      	subs	r2, r2, r3
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fd2:	69b8      	ldr	r0, [r7, #24]
 8004fd4:	f000 f908 	bl	80051e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fd8:	4b1d      	ldr	r3, [pc, #116]	; (8005050 <pvPortMalloc+0x188>)
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	4a1b      	ldr	r2, [pc, #108]	; (8005050 <pvPortMalloc+0x188>)
 8004fe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fe6:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <pvPortMalloc+0x188>)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <pvPortMalloc+0x190>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d203      	bcs.n	8004ffa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ff2:	4b17      	ldr	r3, [pc, #92]	; (8005050 <pvPortMalloc+0x188>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a18      	ldr	r2, [pc, #96]	; (8005058 <pvPortMalloc+0x190>)
 8004ff8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	4b13      	ldr	r3, [pc, #76]	; (800504c <pvPortMalloc+0x184>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	431a      	orrs	r2, r3
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800500e:	4b13      	ldr	r3, [pc, #76]	; (800505c <pvPortMalloc+0x194>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3301      	adds	r3, #1
 8005014:	4a11      	ldr	r2, [pc, #68]	; (800505c <pvPortMalloc+0x194>)
 8005016:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005018:	f7fe fc06 	bl	8003828 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <pvPortMalloc+0x174>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	60fb      	str	r3, [r7, #12]
}
 8005038:	bf00      	nop
 800503a:	e7fe      	b.n	800503a <pvPortMalloc+0x172>
	return pvReturn;
 800503c:	69fb      	ldr	r3, [r7, #28]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3728      	adds	r7, #40	; 0x28
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20004a80 	.word	0x20004a80
 800504c:	20004a94 	.word	0x20004a94
 8005050:	20004a84 	.word	0x20004a84
 8005054:	20004a78 	.word	0x20004a78
 8005058:	20004a88 	.word	0x20004a88
 800505c:	20004a8c 	.word	0x20004a8c

08005060 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d04d      	beq.n	800510e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005072:	2308      	movs	r3, #8
 8005074:	425b      	negs	r3, r3
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4413      	add	r3, r2
 800507a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	4b24      	ldr	r3, [pc, #144]	; (8005118 <vPortFree+0xb8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4013      	ands	r3, r2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10a      	bne.n	80050a4 <vPortFree+0x44>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	60fb      	str	r3, [r7, #12]
}
 80050a0:	bf00      	nop
 80050a2:	e7fe      	b.n	80050a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <vPortFree+0x62>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	60bb      	str	r3, [r7, #8]
}
 80050be:	bf00      	nop
 80050c0:	e7fe      	b.n	80050c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	4b14      	ldr	r3, [pc, #80]	; (8005118 <vPortFree+0xb8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4013      	ands	r3, r2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01e      	beq.n	800510e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d11a      	bne.n	800510e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	4b0e      	ldr	r3, [pc, #56]	; (8005118 <vPortFree+0xb8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	43db      	mvns	r3, r3
 80050e2:	401a      	ands	r2, r3
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050e8:	f7fe fb90 	bl	800380c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	4b0a      	ldr	r3, [pc, #40]	; (800511c <vPortFree+0xbc>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4413      	add	r3, r2
 80050f6:	4a09      	ldr	r2, [pc, #36]	; (800511c <vPortFree+0xbc>)
 80050f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050fa:	6938      	ldr	r0, [r7, #16]
 80050fc:	f000 f874 	bl	80051e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005100:	4b07      	ldr	r3, [pc, #28]	; (8005120 <vPortFree+0xc0>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3301      	adds	r3, #1
 8005106:	4a06      	ldr	r2, [pc, #24]	; (8005120 <vPortFree+0xc0>)
 8005108:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800510a:	f7fe fb8d 	bl	8003828 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800510e:	bf00      	nop
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20004a94 	.word	0x20004a94
 800511c:	20004a84 	.word	0x20004a84
 8005120:	20004a90 	.word	0x20004a90

08005124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800512a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800512e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005130:	4b27      	ldr	r3, [pc, #156]	; (80051d0 <prvHeapInit+0xac>)
 8005132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00c      	beq.n	8005158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	3307      	adds	r3, #7
 8005142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0307 	bic.w	r3, r3, #7
 800514a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	4a1f      	ldr	r2, [pc, #124]	; (80051d0 <prvHeapInit+0xac>)
 8005154:	4413      	add	r3, r2
 8005156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800515c:	4a1d      	ldr	r2, [pc, #116]	; (80051d4 <prvHeapInit+0xb0>)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005162:	4b1c      	ldr	r3, [pc, #112]	; (80051d4 <prvHeapInit+0xb0>)
 8005164:	2200      	movs	r2, #0
 8005166:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	4413      	add	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005170:	2208      	movs	r2, #8
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1a9b      	subs	r3, r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0307 	bic.w	r3, r3, #7
 800517e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4a15      	ldr	r2, [pc, #84]	; (80051d8 <prvHeapInit+0xb4>)
 8005184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005186:	4b14      	ldr	r3, [pc, #80]	; (80051d8 <prvHeapInit+0xb4>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2200      	movs	r2, #0
 800518c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800518e:	4b12      	ldr	r3, [pc, #72]	; (80051d8 <prvHeapInit+0xb4>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	1ad2      	subs	r2, r2, r3
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051a4:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <prvHeapInit+0xb4>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	4a0a      	ldr	r2, [pc, #40]	; (80051dc <prvHeapInit+0xb8>)
 80051b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	4a09      	ldr	r2, [pc, #36]	; (80051e0 <prvHeapInit+0xbc>)
 80051ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051bc:	4b09      	ldr	r3, [pc, #36]	; (80051e4 <prvHeapInit+0xc0>)
 80051be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051c2:	601a      	str	r2, [r3, #0]
}
 80051c4:	bf00      	nop
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	20000e78 	.word	0x20000e78
 80051d4:	20004a78 	.word	0x20004a78
 80051d8:	20004a80 	.word	0x20004a80
 80051dc:	20004a88 	.word	0x20004a88
 80051e0:	20004a84 	.word	0x20004a84
 80051e4:	20004a94 	.word	0x20004a94

080051e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051f0:	4b28      	ldr	r3, [pc, #160]	; (8005294 <prvInsertBlockIntoFreeList+0xac>)
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	e002      	b.n	80051fc <prvInsertBlockIntoFreeList+0x14>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	429a      	cmp	r2, r3
 8005204:	d8f7      	bhi.n	80051f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	4413      	add	r3, r2
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	429a      	cmp	r2, r3
 8005216:	d108      	bne.n	800522a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	441a      	add	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	441a      	add	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	429a      	cmp	r2, r3
 800523c:	d118      	bne.n	8005270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4b15      	ldr	r3, [pc, #84]	; (8005298 <prvInsertBlockIntoFreeList+0xb0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d00d      	beq.n	8005266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	441a      	add	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	e008      	b.n	8005278 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005266:	4b0c      	ldr	r3, [pc, #48]	; (8005298 <prvInsertBlockIntoFreeList+0xb0>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	e003      	b.n	8005278 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	429a      	cmp	r2, r3
 800527e:	d002      	beq.n	8005286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005286:	bf00      	nop
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	20004a78 	.word	0x20004a78
 8005298:	20004a80 	.word	0x20004a80

0800529c <rand>:
 800529c:	4b16      	ldr	r3, [pc, #88]	; (80052f8 <rand+0x5c>)
 800529e:	b510      	push	{r4, lr}
 80052a0:	681c      	ldr	r4, [r3, #0]
 80052a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80052a4:	b9b3      	cbnz	r3, 80052d4 <rand+0x38>
 80052a6:	2018      	movs	r0, #24
 80052a8:	f000 fa62 	bl	8005770 <malloc>
 80052ac:	4602      	mov	r2, r0
 80052ae:	6320      	str	r0, [r4, #48]	; 0x30
 80052b0:	b920      	cbnz	r0, 80052bc <rand+0x20>
 80052b2:	4b12      	ldr	r3, [pc, #72]	; (80052fc <rand+0x60>)
 80052b4:	4812      	ldr	r0, [pc, #72]	; (8005300 <rand+0x64>)
 80052b6:	2152      	movs	r1, #82	; 0x52
 80052b8:	f000 f9f0 	bl	800569c <__assert_func>
 80052bc:	4911      	ldr	r1, [pc, #68]	; (8005304 <rand+0x68>)
 80052be:	4b12      	ldr	r3, [pc, #72]	; (8005308 <rand+0x6c>)
 80052c0:	e9c0 1300 	strd	r1, r3, [r0]
 80052c4:	4b11      	ldr	r3, [pc, #68]	; (800530c <rand+0x70>)
 80052c6:	6083      	str	r3, [r0, #8]
 80052c8:	230b      	movs	r3, #11
 80052ca:	8183      	strh	r3, [r0, #12]
 80052cc:	2100      	movs	r1, #0
 80052ce:	2001      	movs	r0, #1
 80052d0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80052d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80052d6:	480e      	ldr	r0, [pc, #56]	; (8005310 <rand+0x74>)
 80052d8:	690b      	ldr	r3, [r1, #16]
 80052da:	694c      	ldr	r4, [r1, #20]
 80052dc:	4a0d      	ldr	r2, [pc, #52]	; (8005314 <rand+0x78>)
 80052de:	4358      	muls	r0, r3
 80052e0:	fb02 0004 	mla	r0, r2, r4, r0
 80052e4:	fba3 3202 	umull	r3, r2, r3, r2
 80052e8:	3301      	adds	r3, #1
 80052ea:	eb40 0002 	adc.w	r0, r0, r2
 80052ee:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80052f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80052f6:	bd10      	pop	{r4, pc}
 80052f8:	20000068 	.word	0x20000068
 80052fc:	08006784 	.word	0x08006784
 8005300:	0800679b 	.word	0x0800679b
 8005304:	abcd330e 	.word	0xabcd330e
 8005308:	e66d1234 	.word	0xe66d1234
 800530c:	0005deec 	.word	0x0005deec
 8005310:	5851f42d 	.word	0x5851f42d
 8005314:	4c957f2d 	.word	0x4c957f2d

08005318 <std>:
 8005318:	2300      	movs	r3, #0
 800531a:	b510      	push	{r4, lr}
 800531c:	4604      	mov	r4, r0
 800531e:	e9c0 3300 	strd	r3, r3, [r0]
 8005322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005326:	6083      	str	r3, [r0, #8]
 8005328:	8181      	strh	r1, [r0, #12]
 800532a:	6643      	str	r3, [r0, #100]	; 0x64
 800532c:	81c2      	strh	r2, [r0, #14]
 800532e:	6183      	str	r3, [r0, #24]
 8005330:	4619      	mov	r1, r3
 8005332:	2208      	movs	r2, #8
 8005334:	305c      	adds	r0, #92	; 0x5c
 8005336:	f000 f926 	bl	8005586 <memset>
 800533a:	4b0d      	ldr	r3, [pc, #52]	; (8005370 <std+0x58>)
 800533c:	6263      	str	r3, [r4, #36]	; 0x24
 800533e:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <std+0x5c>)
 8005340:	62a3      	str	r3, [r4, #40]	; 0x28
 8005342:	4b0d      	ldr	r3, [pc, #52]	; (8005378 <std+0x60>)
 8005344:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005346:	4b0d      	ldr	r3, [pc, #52]	; (800537c <std+0x64>)
 8005348:	6323      	str	r3, [r4, #48]	; 0x30
 800534a:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <std+0x68>)
 800534c:	6224      	str	r4, [r4, #32]
 800534e:	429c      	cmp	r4, r3
 8005350:	d006      	beq.n	8005360 <std+0x48>
 8005352:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005356:	4294      	cmp	r4, r2
 8005358:	d002      	beq.n	8005360 <std+0x48>
 800535a:	33d0      	adds	r3, #208	; 0xd0
 800535c:	429c      	cmp	r4, r3
 800535e:	d105      	bne.n	800536c <std+0x54>
 8005360:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005368:	f000 b986 	b.w	8005678 <__retarget_lock_init_recursive>
 800536c:	bd10      	pop	{r4, pc}
 800536e:	bf00      	nop
 8005370:	08005501 	.word	0x08005501
 8005374:	08005523 	.word	0x08005523
 8005378:	0800555b 	.word	0x0800555b
 800537c:	0800557f 	.word	0x0800557f
 8005380:	20004a98 	.word	0x20004a98

08005384 <stdio_exit_handler>:
 8005384:	4a02      	ldr	r2, [pc, #8]	; (8005390 <stdio_exit_handler+0xc>)
 8005386:	4903      	ldr	r1, [pc, #12]	; (8005394 <stdio_exit_handler+0x10>)
 8005388:	4803      	ldr	r0, [pc, #12]	; (8005398 <stdio_exit_handler+0x14>)
 800538a:	f000 b869 	b.w	8005460 <_fwalk_sglue>
 800538e:	bf00      	nop
 8005390:	20000010 	.word	0x20000010
 8005394:	0800623d 	.word	0x0800623d
 8005398:	2000001c 	.word	0x2000001c

0800539c <cleanup_stdio>:
 800539c:	6841      	ldr	r1, [r0, #4]
 800539e:	4b0c      	ldr	r3, [pc, #48]	; (80053d0 <cleanup_stdio+0x34>)
 80053a0:	4299      	cmp	r1, r3
 80053a2:	b510      	push	{r4, lr}
 80053a4:	4604      	mov	r4, r0
 80053a6:	d001      	beq.n	80053ac <cleanup_stdio+0x10>
 80053a8:	f000 ff48 	bl	800623c <_fflush_r>
 80053ac:	68a1      	ldr	r1, [r4, #8]
 80053ae:	4b09      	ldr	r3, [pc, #36]	; (80053d4 <cleanup_stdio+0x38>)
 80053b0:	4299      	cmp	r1, r3
 80053b2:	d002      	beq.n	80053ba <cleanup_stdio+0x1e>
 80053b4:	4620      	mov	r0, r4
 80053b6:	f000 ff41 	bl	800623c <_fflush_r>
 80053ba:	68e1      	ldr	r1, [r4, #12]
 80053bc:	4b06      	ldr	r3, [pc, #24]	; (80053d8 <cleanup_stdio+0x3c>)
 80053be:	4299      	cmp	r1, r3
 80053c0:	d004      	beq.n	80053cc <cleanup_stdio+0x30>
 80053c2:	4620      	mov	r0, r4
 80053c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c8:	f000 bf38 	b.w	800623c <_fflush_r>
 80053cc:	bd10      	pop	{r4, pc}
 80053ce:	bf00      	nop
 80053d0:	20004a98 	.word	0x20004a98
 80053d4:	20004b00 	.word	0x20004b00
 80053d8:	20004b68 	.word	0x20004b68

080053dc <global_stdio_init.part.0>:
 80053dc:	b510      	push	{r4, lr}
 80053de:	4b0b      	ldr	r3, [pc, #44]	; (800540c <global_stdio_init.part.0+0x30>)
 80053e0:	4c0b      	ldr	r4, [pc, #44]	; (8005410 <global_stdio_init.part.0+0x34>)
 80053e2:	4a0c      	ldr	r2, [pc, #48]	; (8005414 <global_stdio_init.part.0+0x38>)
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	4620      	mov	r0, r4
 80053e8:	2200      	movs	r2, #0
 80053ea:	2104      	movs	r1, #4
 80053ec:	f7ff ff94 	bl	8005318 <std>
 80053f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80053f4:	2201      	movs	r2, #1
 80053f6:	2109      	movs	r1, #9
 80053f8:	f7ff ff8e 	bl	8005318 <std>
 80053fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005400:	2202      	movs	r2, #2
 8005402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005406:	2112      	movs	r1, #18
 8005408:	f7ff bf86 	b.w	8005318 <std>
 800540c:	20004bd0 	.word	0x20004bd0
 8005410:	20004a98 	.word	0x20004a98
 8005414:	08005385 	.word	0x08005385

08005418 <__sfp_lock_acquire>:
 8005418:	4801      	ldr	r0, [pc, #4]	; (8005420 <__sfp_lock_acquire+0x8>)
 800541a:	f000 b92e 	b.w	800567a <__retarget_lock_acquire_recursive>
 800541e:	bf00      	nop
 8005420:	20004bd9 	.word	0x20004bd9

08005424 <__sfp_lock_release>:
 8005424:	4801      	ldr	r0, [pc, #4]	; (800542c <__sfp_lock_release+0x8>)
 8005426:	f000 b929 	b.w	800567c <__retarget_lock_release_recursive>
 800542a:	bf00      	nop
 800542c:	20004bd9 	.word	0x20004bd9

08005430 <__sinit>:
 8005430:	b510      	push	{r4, lr}
 8005432:	4604      	mov	r4, r0
 8005434:	f7ff fff0 	bl	8005418 <__sfp_lock_acquire>
 8005438:	6a23      	ldr	r3, [r4, #32]
 800543a:	b11b      	cbz	r3, 8005444 <__sinit+0x14>
 800543c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005440:	f7ff bff0 	b.w	8005424 <__sfp_lock_release>
 8005444:	4b04      	ldr	r3, [pc, #16]	; (8005458 <__sinit+0x28>)
 8005446:	6223      	str	r3, [r4, #32]
 8005448:	4b04      	ldr	r3, [pc, #16]	; (800545c <__sinit+0x2c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1f5      	bne.n	800543c <__sinit+0xc>
 8005450:	f7ff ffc4 	bl	80053dc <global_stdio_init.part.0>
 8005454:	e7f2      	b.n	800543c <__sinit+0xc>
 8005456:	bf00      	nop
 8005458:	0800539d 	.word	0x0800539d
 800545c:	20004bd0 	.word	0x20004bd0

08005460 <_fwalk_sglue>:
 8005460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005464:	4607      	mov	r7, r0
 8005466:	4688      	mov	r8, r1
 8005468:	4614      	mov	r4, r2
 800546a:	2600      	movs	r6, #0
 800546c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005470:	f1b9 0901 	subs.w	r9, r9, #1
 8005474:	d505      	bpl.n	8005482 <_fwalk_sglue+0x22>
 8005476:	6824      	ldr	r4, [r4, #0]
 8005478:	2c00      	cmp	r4, #0
 800547a:	d1f7      	bne.n	800546c <_fwalk_sglue+0xc>
 800547c:	4630      	mov	r0, r6
 800547e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005482:	89ab      	ldrh	r3, [r5, #12]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d907      	bls.n	8005498 <_fwalk_sglue+0x38>
 8005488:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800548c:	3301      	adds	r3, #1
 800548e:	d003      	beq.n	8005498 <_fwalk_sglue+0x38>
 8005490:	4629      	mov	r1, r5
 8005492:	4638      	mov	r0, r7
 8005494:	47c0      	blx	r8
 8005496:	4306      	orrs	r6, r0
 8005498:	3568      	adds	r5, #104	; 0x68
 800549a:	e7e9      	b.n	8005470 <_fwalk_sglue+0x10>

0800549c <iprintf>:
 800549c:	b40f      	push	{r0, r1, r2, r3}
 800549e:	b507      	push	{r0, r1, r2, lr}
 80054a0:	4906      	ldr	r1, [pc, #24]	; (80054bc <iprintf+0x20>)
 80054a2:	ab04      	add	r3, sp, #16
 80054a4:	6808      	ldr	r0, [r1, #0]
 80054a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80054aa:	6881      	ldr	r1, [r0, #8]
 80054ac:	9301      	str	r3, [sp, #4]
 80054ae:	f000 fb95 	bl	8005bdc <_vfiprintf_r>
 80054b2:	b003      	add	sp, #12
 80054b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80054b8:	b004      	add	sp, #16
 80054ba:	4770      	bx	lr
 80054bc:	20000068 	.word	0x20000068

080054c0 <siprintf>:
 80054c0:	b40e      	push	{r1, r2, r3}
 80054c2:	b500      	push	{lr}
 80054c4:	b09c      	sub	sp, #112	; 0x70
 80054c6:	ab1d      	add	r3, sp, #116	; 0x74
 80054c8:	9002      	str	r0, [sp, #8]
 80054ca:	9006      	str	r0, [sp, #24]
 80054cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054d0:	4809      	ldr	r0, [pc, #36]	; (80054f8 <siprintf+0x38>)
 80054d2:	9107      	str	r1, [sp, #28]
 80054d4:	9104      	str	r1, [sp, #16]
 80054d6:	4909      	ldr	r1, [pc, #36]	; (80054fc <siprintf+0x3c>)
 80054d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80054dc:	9105      	str	r1, [sp, #20]
 80054de:	6800      	ldr	r0, [r0, #0]
 80054e0:	9301      	str	r3, [sp, #4]
 80054e2:	a902      	add	r1, sp, #8
 80054e4:	f000 fa52 	bl	800598c <_svfiprintf_r>
 80054e8:	9b02      	ldr	r3, [sp, #8]
 80054ea:	2200      	movs	r2, #0
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	b01c      	add	sp, #112	; 0x70
 80054f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054f4:	b003      	add	sp, #12
 80054f6:	4770      	bx	lr
 80054f8:	20000068 	.word	0x20000068
 80054fc:	ffff0208 	.word	0xffff0208

08005500 <__sread>:
 8005500:	b510      	push	{r4, lr}
 8005502:	460c      	mov	r4, r1
 8005504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005508:	f000 f868 	bl	80055dc <_read_r>
 800550c:	2800      	cmp	r0, #0
 800550e:	bfab      	itete	ge
 8005510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005512:	89a3      	ldrhlt	r3, [r4, #12]
 8005514:	181b      	addge	r3, r3, r0
 8005516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800551a:	bfac      	ite	ge
 800551c:	6563      	strge	r3, [r4, #84]	; 0x54
 800551e:	81a3      	strhlt	r3, [r4, #12]
 8005520:	bd10      	pop	{r4, pc}

08005522 <__swrite>:
 8005522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005526:	461f      	mov	r7, r3
 8005528:	898b      	ldrh	r3, [r1, #12]
 800552a:	05db      	lsls	r3, r3, #23
 800552c:	4605      	mov	r5, r0
 800552e:	460c      	mov	r4, r1
 8005530:	4616      	mov	r6, r2
 8005532:	d505      	bpl.n	8005540 <__swrite+0x1e>
 8005534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005538:	2302      	movs	r3, #2
 800553a:	2200      	movs	r2, #0
 800553c:	f000 f83c 	bl	80055b8 <_lseek_r>
 8005540:	89a3      	ldrh	r3, [r4, #12]
 8005542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800554a:	81a3      	strh	r3, [r4, #12]
 800554c:	4632      	mov	r2, r6
 800554e:	463b      	mov	r3, r7
 8005550:	4628      	mov	r0, r5
 8005552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005556:	f000 b853 	b.w	8005600 <_write_r>

0800555a <__sseek>:
 800555a:	b510      	push	{r4, lr}
 800555c:	460c      	mov	r4, r1
 800555e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005562:	f000 f829 	bl	80055b8 <_lseek_r>
 8005566:	1c43      	adds	r3, r0, #1
 8005568:	89a3      	ldrh	r3, [r4, #12]
 800556a:	bf15      	itete	ne
 800556c:	6560      	strne	r0, [r4, #84]	; 0x54
 800556e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005572:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005576:	81a3      	strheq	r3, [r4, #12]
 8005578:	bf18      	it	ne
 800557a:	81a3      	strhne	r3, [r4, #12]
 800557c:	bd10      	pop	{r4, pc}

0800557e <__sclose>:
 800557e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005582:	f000 b809 	b.w	8005598 <_close_r>

08005586 <memset>:
 8005586:	4402      	add	r2, r0
 8005588:	4603      	mov	r3, r0
 800558a:	4293      	cmp	r3, r2
 800558c:	d100      	bne.n	8005590 <memset+0xa>
 800558e:	4770      	bx	lr
 8005590:	f803 1b01 	strb.w	r1, [r3], #1
 8005594:	e7f9      	b.n	800558a <memset+0x4>
	...

08005598 <_close_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	4d06      	ldr	r5, [pc, #24]	; (80055b4 <_close_r+0x1c>)
 800559c:	2300      	movs	r3, #0
 800559e:	4604      	mov	r4, r0
 80055a0:	4608      	mov	r0, r1
 80055a2:	602b      	str	r3, [r5, #0]
 80055a4:	f7fb fac8 	bl	8000b38 <_close>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	d102      	bne.n	80055b2 <_close_r+0x1a>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	b103      	cbz	r3, 80055b2 <_close_r+0x1a>
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	bd38      	pop	{r3, r4, r5, pc}
 80055b4:	20004bd4 	.word	0x20004bd4

080055b8 <_lseek_r>:
 80055b8:	b538      	push	{r3, r4, r5, lr}
 80055ba:	4d07      	ldr	r5, [pc, #28]	; (80055d8 <_lseek_r+0x20>)
 80055bc:	4604      	mov	r4, r0
 80055be:	4608      	mov	r0, r1
 80055c0:	4611      	mov	r1, r2
 80055c2:	2200      	movs	r2, #0
 80055c4:	602a      	str	r2, [r5, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	f7fb fadd 	bl	8000b86 <_lseek>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	d102      	bne.n	80055d6 <_lseek_r+0x1e>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	b103      	cbz	r3, 80055d6 <_lseek_r+0x1e>
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	20004bd4 	.word	0x20004bd4

080055dc <_read_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	4d07      	ldr	r5, [pc, #28]	; (80055fc <_read_r+0x20>)
 80055e0:	4604      	mov	r4, r0
 80055e2:	4608      	mov	r0, r1
 80055e4:	4611      	mov	r1, r2
 80055e6:	2200      	movs	r2, #0
 80055e8:	602a      	str	r2, [r5, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	f7fb fa6b 	bl	8000ac6 <_read>
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	d102      	bne.n	80055fa <_read_r+0x1e>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	b103      	cbz	r3, 80055fa <_read_r+0x1e>
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
 80055fc:	20004bd4 	.word	0x20004bd4

08005600 <_write_r>:
 8005600:	b538      	push	{r3, r4, r5, lr}
 8005602:	4d07      	ldr	r5, [pc, #28]	; (8005620 <_write_r+0x20>)
 8005604:	4604      	mov	r4, r0
 8005606:	4608      	mov	r0, r1
 8005608:	4611      	mov	r1, r2
 800560a:	2200      	movs	r2, #0
 800560c:	602a      	str	r2, [r5, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	f7fb fa76 	bl	8000b00 <_write>
 8005614:	1c43      	adds	r3, r0, #1
 8005616:	d102      	bne.n	800561e <_write_r+0x1e>
 8005618:	682b      	ldr	r3, [r5, #0]
 800561a:	b103      	cbz	r3, 800561e <_write_r+0x1e>
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	bd38      	pop	{r3, r4, r5, pc}
 8005620:	20004bd4 	.word	0x20004bd4

08005624 <__errno>:
 8005624:	4b01      	ldr	r3, [pc, #4]	; (800562c <__errno+0x8>)
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	20000068 	.word	0x20000068

08005630 <__libc_init_array>:
 8005630:	b570      	push	{r4, r5, r6, lr}
 8005632:	4d0d      	ldr	r5, [pc, #52]	; (8005668 <__libc_init_array+0x38>)
 8005634:	4c0d      	ldr	r4, [pc, #52]	; (800566c <__libc_init_array+0x3c>)
 8005636:	1b64      	subs	r4, r4, r5
 8005638:	10a4      	asrs	r4, r4, #2
 800563a:	2600      	movs	r6, #0
 800563c:	42a6      	cmp	r6, r4
 800563e:	d109      	bne.n	8005654 <__libc_init_array+0x24>
 8005640:	4d0b      	ldr	r5, [pc, #44]	; (8005670 <__libc_init_array+0x40>)
 8005642:	4c0c      	ldr	r4, [pc, #48]	; (8005674 <__libc_init_array+0x44>)
 8005644:	f000 fffa 	bl	800663c <_init>
 8005648:	1b64      	subs	r4, r4, r5
 800564a:	10a4      	asrs	r4, r4, #2
 800564c:	2600      	movs	r6, #0
 800564e:	42a6      	cmp	r6, r4
 8005650:	d105      	bne.n	800565e <__libc_init_array+0x2e>
 8005652:	bd70      	pop	{r4, r5, r6, pc}
 8005654:	f855 3b04 	ldr.w	r3, [r5], #4
 8005658:	4798      	blx	r3
 800565a:	3601      	adds	r6, #1
 800565c:	e7ee      	b.n	800563c <__libc_init_array+0xc>
 800565e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005662:	4798      	blx	r3
 8005664:	3601      	adds	r6, #1
 8005666:	e7f2      	b.n	800564e <__libc_init_array+0x1e>
 8005668:	0800686c 	.word	0x0800686c
 800566c:	0800686c 	.word	0x0800686c
 8005670:	0800686c 	.word	0x0800686c
 8005674:	08006870 	.word	0x08006870

08005678 <__retarget_lock_init_recursive>:
 8005678:	4770      	bx	lr

0800567a <__retarget_lock_acquire_recursive>:
 800567a:	4770      	bx	lr

0800567c <__retarget_lock_release_recursive>:
 800567c:	4770      	bx	lr

0800567e <memcpy>:
 800567e:	440a      	add	r2, r1
 8005680:	4291      	cmp	r1, r2
 8005682:	f100 33ff 	add.w	r3, r0, #4294967295
 8005686:	d100      	bne.n	800568a <memcpy+0xc>
 8005688:	4770      	bx	lr
 800568a:	b510      	push	{r4, lr}
 800568c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005690:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005694:	4291      	cmp	r1, r2
 8005696:	d1f9      	bne.n	800568c <memcpy+0xe>
 8005698:	bd10      	pop	{r4, pc}
	...

0800569c <__assert_func>:
 800569c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800569e:	4614      	mov	r4, r2
 80056a0:	461a      	mov	r2, r3
 80056a2:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <__assert_func+0x2c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4605      	mov	r5, r0
 80056a8:	68d8      	ldr	r0, [r3, #12]
 80056aa:	b14c      	cbz	r4, 80056c0 <__assert_func+0x24>
 80056ac:	4b07      	ldr	r3, [pc, #28]	; (80056cc <__assert_func+0x30>)
 80056ae:	9100      	str	r1, [sp, #0]
 80056b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80056b4:	4906      	ldr	r1, [pc, #24]	; (80056d0 <__assert_func+0x34>)
 80056b6:	462b      	mov	r3, r5
 80056b8:	f000 fde8 	bl	800628c <fiprintf>
 80056bc:	f000 feb8 	bl	8006430 <abort>
 80056c0:	4b04      	ldr	r3, [pc, #16]	; (80056d4 <__assert_func+0x38>)
 80056c2:	461c      	mov	r4, r3
 80056c4:	e7f3      	b.n	80056ae <__assert_func+0x12>
 80056c6:	bf00      	nop
 80056c8:	20000068 	.word	0x20000068
 80056cc:	080067f3 	.word	0x080067f3
 80056d0:	08006800 	.word	0x08006800
 80056d4:	0800682e 	.word	0x0800682e

080056d8 <_free_r>:
 80056d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056da:	2900      	cmp	r1, #0
 80056dc:	d044      	beq.n	8005768 <_free_r+0x90>
 80056de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056e2:	9001      	str	r0, [sp, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f1a1 0404 	sub.w	r4, r1, #4
 80056ea:	bfb8      	it	lt
 80056ec:	18e4      	addlt	r4, r4, r3
 80056ee:	f000 f8e7 	bl	80058c0 <__malloc_lock>
 80056f2:	4a1e      	ldr	r2, [pc, #120]	; (800576c <_free_r+0x94>)
 80056f4:	9801      	ldr	r0, [sp, #4]
 80056f6:	6813      	ldr	r3, [r2, #0]
 80056f8:	b933      	cbnz	r3, 8005708 <_free_r+0x30>
 80056fa:	6063      	str	r3, [r4, #4]
 80056fc:	6014      	str	r4, [r2, #0]
 80056fe:	b003      	add	sp, #12
 8005700:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005704:	f000 b8e2 	b.w	80058cc <__malloc_unlock>
 8005708:	42a3      	cmp	r3, r4
 800570a:	d908      	bls.n	800571e <_free_r+0x46>
 800570c:	6825      	ldr	r5, [r4, #0]
 800570e:	1961      	adds	r1, r4, r5
 8005710:	428b      	cmp	r3, r1
 8005712:	bf01      	itttt	eq
 8005714:	6819      	ldreq	r1, [r3, #0]
 8005716:	685b      	ldreq	r3, [r3, #4]
 8005718:	1949      	addeq	r1, r1, r5
 800571a:	6021      	streq	r1, [r4, #0]
 800571c:	e7ed      	b.n	80056fa <_free_r+0x22>
 800571e:	461a      	mov	r2, r3
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	b10b      	cbz	r3, 8005728 <_free_r+0x50>
 8005724:	42a3      	cmp	r3, r4
 8005726:	d9fa      	bls.n	800571e <_free_r+0x46>
 8005728:	6811      	ldr	r1, [r2, #0]
 800572a:	1855      	adds	r5, r2, r1
 800572c:	42a5      	cmp	r5, r4
 800572e:	d10b      	bne.n	8005748 <_free_r+0x70>
 8005730:	6824      	ldr	r4, [r4, #0]
 8005732:	4421      	add	r1, r4
 8005734:	1854      	adds	r4, r2, r1
 8005736:	42a3      	cmp	r3, r4
 8005738:	6011      	str	r1, [r2, #0]
 800573a:	d1e0      	bne.n	80056fe <_free_r+0x26>
 800573c:	681c      	ldr	r4, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	6053      	str	r3, [r2, #4]
 8005742:	440c      	add	r4, r1
 8005744:	6014      	str	r4, [r2, #0]
 8005746:	e7da      	b.n	80056fe <_free_r+0x26>
 8005748:	d902      	bls.n	8005750 <_free_r+0x78>
 800574a:	230c      	movs	r3, #12
 800574c:	6003      	str	r3, [r0, #0]
 800574e:	e7d6      	b.n	80056fe <_free_r+0x26>
 8005750:	6825      	ldr	r5, [r4, #0]
 8005752:	1961      	adds	r1, r4, r5
 8005754:	428b      	cmp	r3, r1
 8005756:	bf04      	itt	eq
 8005758:	6819      	ldreq	r1, [r3, #0]
 800575a:	685b      	ldreq	r3, [r3, #4]
 800575c:	6063      	str	r3, [r4, #4]
 800575e:	bf04      	itt	eq
 8005760:	1949      	addeq	r1, r1, r5
 8005762:	6021      	streq	r1, [r4, #0]
 8005764:	6054      	str	r4, [r2, #4]
 8005766:	e7ca      	b.n	80056fe <_free_r+0x26>
 8005768:	b003      	add	sp, #12
 800576a:	bd30      	pop	{r4, r5, pc}
 800576c:	20004bdc 	.word	0x20004bdc

08005770 <malloc>:
 8005770:	4b02      	ldr	r3, [pc, #8]	; (800577c <malloc+0xc>)
 8005772:	4601      	mov	r1, r0
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	f000 b823 	b.w	80057c0 <_malloc_r>
 800577a:	bf00      	nop
 800577c:	20000068 	.word	0x20000068

08005780 <sbrk_aligned>:
 8005780:	b570      	push	{r4, r5, r6, lr}
 8005782:	4e0e      	ldr	r6, [pc, #56]	; (80057bc <sbrk_aligned+0x3c>)
 8005784:	460c      	mov	r4, r1
 8005786:	6831      	ldr	r1, [r6, #0]
 8005788:	4605      	mov	r5, r0
 800578a:	b911      	cbnz	r1, 8005792 <sbrk_aligned+0x12>
 800578c:	f000 fe40 	bl	8006410 <_sbrk_r>
 8005790:	6030      	str	r0, [r6, #0]
 8005792:	4621      	mov	r1, r4
 8005794:	4628      	mov	r0, r5
 8005796:	f000 fe3b 	bl	8006410 <_sbrk_r>
 800579a:	1c43      	adds	r3, r0, #1
 800579c:	d00a      	beq.n	80057b4 <sbrk_aligned+0x34>
 800579e:	1cc4      	adds	r4, r0, #3
 80057a0:	f024 0403 	bic.w	r4, r4, #3
 80057a4:	42a0      	cmp	r0, r4
 80057a6:	d007      	beq.n	80057b8 <sbrk_aligned+0x38>
 80057a8:	1a21      	subs	r1, r4, r0
 80057aa:	4628      	mov	r0, r5
 80057ac:	f000 fe30 	bl	8006410 <_sbrk_r>
 80057b0:	3001      	adds	r0, #1
 80057b2:	d101      	bne.n	80057b8 <sbrk_aligned+0x38>
 80057b4:	f04f 34ff 	mov.w	r4, #4294967295
 80057b8:	4620      	mov	r0, r4
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	20004be0 	.word	0x20004be0

080057c0 <_malloc_r>:
 80057c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057c4:	1ccd      	adds	r5, r1, #3
 80057c6:	f025 0503 	bic.w	r5, r5, #3
 80057ca:	3508      	adds	r5, #8
 80057cc:	2d0c      	cmp	r5, #12
 80057ce:	bf38      	it	cc
 80057d0:	250c      	movcc	r5, #12
 80057d2:	2d00      	cmp	r5, #0
 80057d4:	4607      	mov	r7, r0
 80057d6:	db01      	blt.n	80057dc <_malloc_r+0x1c>
 80057d8:	42a9      	cmp	r1, r5
 80057da:	d905      	bls.n	80057e8 <_malloc_r+0x28>
 80057dc:	230c      	movs	r3, #12
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	2600      	movs	r6, #0
 80057e2:	4630      	mov	r0, r6
 80057e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80058bc <_malloc_r+0xfc>
 80057ec:	f000 f868 	bl	80058c0 <__malloc_lock>
 80057f0:	f8d8 3000 	ldr.w	r3, [r8]
 80057f4:	461c      	mov	r4, r3
 80057f6:	bb5c      	cbnz	r4, 8005850 <_malloc_r+0x90>
 80057f8:	4629      	mov	r1, r5
 80057fa:	4638      	mov	r0, r7
 80057fc:	f7ff ffc0 	bl	8005780 <sbrk_aligned>
 8005800:	1c43      	adds	r3, r0, #1
 8005802:	4604      	mov	r4, r0
 8005804:	d155      	bne.n	80058b2 <_malloc_r+0xf2>
 8005806:	f8d8 4000 	ldr.w	r4, [r8]
 800580a:	4626      	mov	r6, r4
 800580c:	2e00      	cmp	r6, #0
 800580e:	d145      	bne.n	800589c <_malloc_r+0xdc>
 8005810:	2c00      	cmp	r4, #0
 8005812:	d048      	beq.n	80058a6 <_malloc_r+0xe6>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	4631      	mov	r1, r6
 8005818:	4638      	mov	r0, r7
 800581a:	eb04 0903 	add.w	r9, r4, r3
 800581e:	f000 fdf7 	bl	8006410 <_sbrk_r>
 8005822:	4581      	cmp	r9, r0
 8005824:	d13f      	bne.n	80058a6 <_malloc_r+0xe6>
 8005826:	6821      	ldr	r1, [r4, #0]
 8005828:	1a6d      	subs	r5, r5, r1
 800582a:	4629      	mov	r1, r5
 800582c:	4638      	mov	r0, r7
 800582e:	f7ff ffa7 	bl	8005780 <sbrk_aligned>
 8005832:	3001      	adds	r0, #1
 8005834:	d037      	beq.n	80058a6 <_malloc_r+0xe6>
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	442b      	add	r3, r5
 800583a:	6023      	str	r3, [r4, #0]
 800583c:	f8d8 3000 	ldr.w	r3, [r8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d038      	beq.n	80058b6 <_malloc_r+0xf6>
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	42a2      	cmp	r2, r4
 8005848:	d12b      	bne.n	80058a2 <_malloc_r+0xe2>
 800584a:	2200      	movs	r2, #0
 800584c:	605a      	str	r2, [r3, #4]
 800584e:	e00f      	b.n	8005870 <_malloc_r+0xb0>
 8005850:	6822      	ldr	r2, [r4, #0]
 8005852:	1b52      	subs	r2, r2, r5
 8005854:	d41f      	bmi.n	8005896 <_malloc_r+0xd6>
 8005856:	2a0b      	cmp	r2, #11
 8005858:	d917      	bls.n	800588a <_malloc_r+0xca>
 800585a:	1961      	adds	r1, r4, r5
 800585c:	42a3      	cmp	r3, r4
 800585e:	6025      	str	r5, [r4, #0]
 8005860:	bf18      	it	ne
 8005862:	6059      	strne	r1, [r3, #4]
 8005864:	6863      	ldr	r3, [r4, #4]
 8005866:	bf08      	it	eq
 8005868:	f8c8 1000 	streq.w	r1, [r8]
 800586c:	5162      	str	r2, [r4, r5]
 800586e:	604b      	str	r3, [r1, #4]
 8005870:	4638      	mov	r0, r7
 8005872:	f104 060b 	add.w	r6, r4, #11
 8005876:	f000 f829 	bl	80058cc <__malloc_unlock>
 800587a:	f026 0607 	bic.w	r6, r6, #7
 800587e:	1d23      	adds	r3, r4, #4
 8005880:	1af2      	subs	r2, r6, r3
 8005882:	d0ae      	beq.n	80057e2 <_malloc_r+0x22>
 8005884:	1b9b      	subs	r3, r3, r6
 8005886:	50a3      	str	r3, [r4, r2]
 8005888:	e7ab      	b.n	80057e2 <_malloc_r+0x22>
 800588a:	42a3      	cmp	r3, r4
 800588c:	6862      	ldr	r2, [r4, #4]
 800588e:	d1dd      	bne.n	800584c <_malloc_r+0x8c>
 8005890:	f8c8 2000 	str.w	r2, [r8]
 8005894:	e7ec      	b.n	8005870 <_malloc_r+0xb0>
 8005896:	4623      	mov	r3, r4
 8005898:	6864      	ldr	r4, [r4, #4]
 800589a:	e7ac      	b.n	80057f6 <_malloc_r+0x36>
 800589c:	4634      	mov	r4, r6
 800589e:	6876      	ldr	r6, [r6, #4]
 80058a0:	e7b4      	b.n	800580c <_malloc_r+0x4c>
 80058a2:	4613      	mov	r3, r2
 80058a4:	e7cc      	b.n	8005840 <_malloc_r+0x80>
 80058a6:	230c      	movs	r3, #12
 80058a8:	603b      	str	r3, [r7, #0]
 80058aa:	4638      	mov	r0, r7
 80058ac:	f000 f80e 	bl	80058cc <__malloc_unlock>
 80058b0:	e797      	b.n	80057e2 <_malloc_r+0x22>
 80058b2:	6025      	str	r5, [r4, #0]
 80058b4:	e7dc      	b.n	8005870 <_malloc_r+0xb0>
 80058b6:	605b      	str	r3, [r3, #4]
 80058b8:	deff      	udf	#255	; 0xff
 80058ba:	bf00      	nop
 80058bc:	20004bdc 	.word	0x20004bdc

080058c0 <__malloc_lock>:
 80058c0:	4801      	ldr	r0, [pc, #4]	; (80058c8 <__malloc_lock+0x8>)
 80058c2:	f7ff beda 	b.w	800567a <__retarget_lock_acquire_recursive>
 80058c6:	bf00      	nop
 80058c8:	20004bd8 	.word	0x20004bd8

080058cc <__malloc_unlock>:
 80058cc:	4801      	ldr	r0, [pc, #4]	; (80058d4 <__malloc_unlock+0x8>)
 80058ce:	f7ff bed5 	b.w	800567c <__retarget_lock_release_recursive>
 80058d2:	bf00      	nop
 80058d4:	20004bd8 	.word	0x20004bd8

080058d8 <__ssputs_r>:
 80058d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058dc:	688e      	ldr	r6, [r1, #8]
 80058de:	461f      	mov	r7, r3
 80058e0:	42be      	cmp	r6, r7
 80058e2:	680b      	ldr	r3, [r1, #0]
 80058e4:	4682      	mov	sl, r0
 80058e6:	460c      	mov	r4, r1
 80058e8:	4690      	mov	r8, r2
 80058ea:	d82c      	bhi.n	8005946 <__ssputs_r+0x6e>
 80058ec:	898a      	ldrh	r2, [r1, #12]
 80058ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058f2:	d026      	beq.n	8005942 <__ssputs_r+0x6a>
 80058f4:	6965      	ldr	r5, [r4, #20]
 80058f6:	6909      	ldr	r1, [r1, #16]
 80058f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058fc:	eba3 0901 	sub.w	r9, r3, r1
 8005900:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005904:	1c7b      	adds	r3, r7, #1
 8005906:	444b      	add	r3, r9
 8005908:	106d      	asrs	r5, r5, #1
 800590a:	429d      	cmp	r5, r3
 800590c:	bf38      	it	cc
 800590e:	461d      	movcc	r5, r3
 8005910:	0553      	lsls	r3, r2, #21
 8005912:	d527      	bpl.n	8005964 <__ssputs_r+0x8c>
 8005914:	4629      	mov	r1, r5
 8005916:	f7ff ff53 	bl	80057c0 <_malloc_r>
 800591a:	4606      	mov	r6, r0
 800591c:	b360      	cbz	r0, 8005978 <__ssputs_r+0xa0>
 800591e:	6921      	ldr	r1, [r4, #16]
 8005920:	464a      	mov	r2, r9
 8005922:	f7ff feac 	bl	800567e <memcpy>
 8005926:	89a3      	ldrh	r3, [r4, #12]
 8005928:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800592c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005930:	81a3      	strh	r3, [r4, #12]
 8005932:	6126      	str	r6, [r4, #16]
 8005934:	6165      	str	r5, [r4, #20]
 8005936:	444e      	add	r6, r9
 8005938:	eba5 0509 	sub.w	r5, r5, r9
 800593c:	6026      	str	r6, [r4, #0]
 800593e:	60a5      	str	r5, [r4, #8]
 8005940:	463e      	mov	r6, r7
 8005942:	42be      	cmp	r6, r7
 8005944:	d900      	bls.n	8005948 <__ssputs_r+0x70>
 8005946:	463e      	mov	r6, r7
 8005948:	6820      	ldr	r0, [r4, #0]
 800594a:	4632      	mov	r2, r6
 800594c:	4641      	mov	r1, r8
 800594e:	f000 fd45 	bl	80063dc <memmove>
 8005952:	68a3      	ldr	r3, [r4, #8]
 8005954:	1b9b      	subs	r3, r3, r6
 8005956:	60a3      	str	r3, [r4, #8]
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	4433      	add	r3, r6
 800595c:	6023      	str	r3, [r4, #0]
 800595e:	2000      	movs	r0, #0
 8005960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005964:	462a      	mov	r2, r5
 8005966:	f000 fd6a 	bl	800643e <_realloc_r>
 800596a:	4606      	mov	r6, r0
 800596c:	2800      	cmp	r0, #0
 800596e:	d1e0      	bne.n	8005932 <__ssputs_r+0x5a>
 8005970:	6921      	ldr	r1, [r4, #16]
 8005972:	4650      	mov	r0, sl
 8005974:	f7ff feb0 	bl	80056d8 <_free_r>
 8005978:	230c      	movs	r3, #12
 800597a:	f8ca 3000 	str.w	r3, [sl]
 800597e:	89a3      	ldrh	r3, [r4, #12]
 8005980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005984:	81a3      	strh	r3, [r4, #12]
 8005986:	f04f 30ff 	mov.w	r0, #4294967295
 800598a:	e7e9      	b.n	8005960 <__ssputs_r+0x88>

0800598c <_svfiprintf_r>:
 800598c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005990:	4698      	mov	r8, r3
 8005992:	898b      	ldrh	r3, [r1, #12]
 8005994:	061b      	lsls	r3, r3, #24
 8005996:	b09d      	sub	sp, #116	; 0x74
 8005998:	4607      	mov	r7, r0
 800599a:	460d      	mov	r5, r1
 800599c:	4614      	mov	r4, r2
 800599e:	d50e      	bpl.n	80059be <_svfiprintf_r+0x32>
 80059a0:	690b      	ldr	r3, [r1, #16]
 80059a2:	b963      	cbnz	r3, 80059be <_svfiprintf_r+0x32>
 80059a4:	2140      	movs	r1, #64	; 0x40
 80059a6:	f7ff ff0b 	bl	80057c0 <_malloc_r>
 80059aa:	6028      	str	r0, [r5, #0]
 80059ac:	6128      	str	r0, [r5, #16]
 80059ae:	b920      	cbnz	r0, 80059ba <_svfiprintf_r+0x2e>
 80059b0:	230c      	movs	r3, #12
 80059b2:	603b      	str	r3, [r7, #0]
 80059b4:	f04f 30ff 	mov.w	r0, #4294967295
 80059b8:	e0d0      	b.n	8005b5c <_svfiprintf_r+0x1d0>
 80059ba:	2340      	movs	r3, #64	; 0x40
 80059bc:	616b      	str	r3, [r5, #20]
 80059be:	2300      	movs	r3, #0
 80059c0:	9309      	str	r3, [sp, #36]	; 0x24
 80059c2:	2320      	movs	r3, #32
 80059c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80059cc:	2330      	movs	r3, #48	; 0x30
 80059ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005b74 <_svfiprintf_r+0x1e8>
 80059d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059d6:	f04f 0901 	mov.w	r9, #1
 80059da:	4623      	mov	r3, r4
 80059dc:	469a      	mov	sl, r3
 80059de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059e2:	b10a      	cbz	r2, 80059e8 <_svfiprintf_r+0x5c>
 80059e4:	2a25      	cmp	r2, #37	; 0x25
 80059e6:	d1f9      	bne.n	80059dc <_svfiprintf_r+0x50>
 80059e8:	ebba 0b04 	subs.w	fp, sl, r4
 80059ec:	d00b      	beq.n	8005a06 <_svfiprintf_r+0x7a>
 80059ee:	465b      	mov	r3, fp
 80059f0:	4622      	mov	r2, r4
 80059f2:	4629      	mov	r1, r5
 80059f4:	4638      	mov	r0, r7
 80059f6:	f7ff ff6f 	bl	80058d8 <__ssputs_r>
 80059fa:	3001      	adds	r0, #1
 80059fc:	f000 80a9 	beq.w	8005b52 <_svfiprintf_r+0x1c6>
 8005a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a02:	445a      	add	r2, fp
 8005a04:	9209      	str	r2, [sp, #36]	; 0x24
 8005a06:	f89a 3000 	ldrb.w	r3, [sl]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 80a1 	beq.w	8005b52 <_svfiprintf_r+0x1c6>
 8005a10:	2300      	movs	r3, #0
 8005a12:	f04f 32ff 	mov.w	r2, #4294967295
 8005a16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a1a:	f10a 0a01 	add.w	sl, sl, #1
 8005a1e:	9304      	str	r3, [sp, #16]
 8005a20:	9307      	str	r3, [sp, #28]
 8005a22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a26:	931a      	str	r3, [sp, #104]	; 0x68
 8005a28:	4654      	mov	r4, sl
 8005a2a:	2205      	movs	r2, #5
 8005a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a30:	4850      	ldr	r0, [pc, #320]	; (8005b74 <_svfiprintf_r+0x1e8>)
 8005a32:	f7fa fbed 	bl	8000210 <memchr>
 8005a36:	9a04      	ldr	r2, [sp, #16]
 8005a38:	b9d8      	cbnz	r0, 8005a72 <_svfiprintf_r+0xe6>
 8005a3a:	06d0      	lsls	r0, r2, #27
 8005a3c:	bf44      	itt	mi
 8005a3e:	2320      	movmi	r3, #32
 8005a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a44:	0711      	lsls	r1, r2, #28
 8005a46:	bf44      	itt	mi
 8005a48:	232b      	movmi	r3, #43	; 0x2b
 8005a4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a52:	2b2a      	cmp	r3, #42	; 0x2a
 8005a54:	d015      	beq.n	8005a82 <_svfiprintf_r+0xf6>
 8005a56:	9a07      	ldr	r2, [sp, #28]
 8005a58:	4654      	mov	r4, sl
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	f04f 0c0a 	mov.w	ip, #10
 8005a60:	4621      	mov	r1, r4
 8005a62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a66:	3b30      	subs	r3, #48	; 0x30
 8005a68:	2b09      	cmp	r3, #9
 8005a6a:	d94d      	bls.n	8005b08 <_svfiprintf_r+0x17c>
 8005a6c:	b1b0      	cbz	r0, 8005a9c <_svfiprintf_r+0x110>
 8005a6e:	9207      	str	r2, [sp, #28]
 8005a70:	e014      	b.n	8005a9c <_svfiprintf_r+0x110>
 8005a72:	eba0 0308 	sub.w	r3, r0, r8
 8005a76:	fa09 f303 	lsl.w	r3, r9, r3
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	9304      	str	r3, [sp, #16]
 8005a7e:	46a2      	mov	sl, r4
 8005a80:	e7d2      	b.n	8005a28 <_svfiprintf_r+0x9c>
 8005a82:	9b03      	ldr	r3, [sp, #12]
 8005a84:	1d19      	adds	r1, r3, #4
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	9103      	str	r1, [sp, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	bfbb      	ittet	lt
 8005a8e:	425b      	neglt	r3, r3
 8005a90:	f042 0202 	orrlt.w	r2, r2, #2
 8005a94:	9307      	strge	r3, [sp, #28]
 8005a96:	9307      	strlt	r3, [sp, #28]
 8005a98:	bfb8      	it	lt
 8005a9a:	9204      	strlt	r2, [sp, #16]
 8005a9c:	7823      	ldrb	r3, [r4, #0]
 8005a9e:	2b2e      	cmp	r3, #46	; 0x2e
 8005aa0:	d10c      	bne.n	8005abc <_svfiprintf_r+0x130>
 8005aa2:	7863      	ldrb	r3, [r4, #1]
 8005aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8005aa6:	d134      	bne.n	8005b12 <_svfiprintf_r+0x186>
 8005aa8:	9b03      	ldr	r3, [sp, #12]
 8005aaa:	1d1a      	adds	r2, r3, #4
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	9203      	str	r2, [sp, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	bfb8      	it	lt
 8005ab4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ab8:	3402      	adds	r4, #2
 8005aba:	9305      	str	r3, [sp, #20]
 8005abc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005b84 <_svfiprintf_r+0x1f8>
 8005ac0:	7821      	ldrb	r1, [r4, #0]
 8005ac2:	2203      	movs	r2, #3
 8005ac4:	4650      	mov	r0, sl
 8005ac6:	f7fa fba3 	bl	8000210 <memchr>
 8005aca:	b138      	cbz	r0, 8005adc <_svfiprintf_r+0x150>
 8005acc:	9b04      	ldr	r3, [sp, #16]
 8005ace:	eba0 000a 	sub.w	r0, r0, sl
 8005ad2:	2240      	movs	r2, #64	; 0x40
 8005ad4:	4082      	lsls	r2, r0
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	3401      	adds	r4, #1
 8005ada:	9304      	str	r3, [sp, #16]
 8005adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ae0:	4825      	ldr	r0, [pc, #148]	; (8005b78 <_svfiprintf_r+0x1ec>)
 8005ae2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ae6:	2206      	movs	r2, #6
 8005ae8:	f7fa fb92 	bl	8000210 <memchr>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d038      	beq.n	8005b62 <_svfiprintf_r+0x1d6>
 8005af0:	4b22      	ldr	r3, [pc, #136]	; (8005b7c <_svfiprintf_r+0x1f0>)
 8005af2:	bb1b      	cbnz	r3, 8005b3c <_svfiprintf_r+0x1b0>
 8005af4:	9b03      	ldr	r3, [sp, #12]
 8005af6:	3307      	adds	r3, #7
 8005af8:	f023 0307 	bic.w	r3, r3, #7
 8005afc:	3308      	adds	r3, #8
 8005afe:	9303      	str	r3, [sp, #12]
 8005b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b02:	4433      	add	r3, r6
 8005b04:	9309      	str	r3, [sp, #36]	; 0x24
 8005b06:	e768      	b.n	80059da <_svfiprintf_r+0x4e>
 8005b08:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	2001      	movs	r0, #1
 8005b10:	e7a6      	b.n	8005a60 <_svfiprintf_r+0xd4>
 8005b12:	2300      	movs	r3, #0
 8005b14:	3401      	adds	r4, #1
 8005b16:	9305      	str	r3, [sp, #20]
 8005b18:	4619      	mov	r1, r3
 8005b1a:	f04f 0c0a 	mov.w	ip, #10
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b24:	3a30      	subs	r2, #48	; 0x30
 8005b26:	2a09      	cmp	r2, #9
 8005b28:	d903      	bls.n	8005b32 <_svfiprintf_r+0x1a6>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0c6      	beq.n	8005abc <_svfiprintf_r+0x130>
 8005b2e:	9105      	str	r1, [sp, #20]
 8005b30:	e7c4      	b.n	8005abc <_svfiprintf_r+0x130>
 8005b32:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b36:	4604      	mov	r4, r0
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e7f0      	b.n	8005b1e <_svfiprintf_r+0x192>
 8005b3c:	ab03      	add	r3, sp, #12
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	462a      	mov	r2, r5
 8005b42:	4b0f      	ldr	r3, [pc, #60]	; (8005b80 <_svfiprintf_r+0x1f4>)
 8005b44:	a904      	add	r1, sp, #16
 8005b46:	4638      	mov	r0, r7
 8005b48:	f3af 8000 	nop.w
 8005b4c:	1c42      	adds	r2, r0, #1
 8005b4e:	4606      	mov	r6, r0
 8005b50:	d1d6      	bne.n	8005b00 <_svfiprintf_r+0x174>
 8005b52:	89ab      	ldrh	r3, [r5, #12]
 8005b54:	065b      	lsls	r3, r3, #25
 8005b56:	f53f af2d 	bmi.w	80059b4 <_svfiprintf_r+0x28>
 8005b5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b5c:	b01d      	add	sp, #116	; 0x74
 8005b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b62:	ab03      	add	r3, sp, #12
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	462a      	mov	r2, r5
 8005b68:	4b05      	ldr	r3, [pc, #20]	; (8005b80 <_svfiprintf_r+0x1f4>)
 8005b6a:	a904      	add	r1, sp, #16
 8005b6c:	4638      	mov	r0, r7
 8005b6e:	f000 f9bd 	bl	8005eec <_printf_i>
 8005b72:	e7eb      	b.n	8005b4c <_svfiprintf_r+0x1c0>
 8005b74:	0800682f 	.word	0x0800682f
 8005b78:	08006839 	.word	0x08006839
 8005b7c:	00000000 	.word	0x00000000
 8005b80:	080058d9 	.word	0x080058d9
 8005b84:	08006835 	.word	0x08006835

08005b88 <__sfputc_r>:
 8005b88:	6893      	ldr	r3, [r2, #8]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	b410      	push	{r4}
 8005b90:	6093      	str	r3, [r2, #8]
 8005b92:	da08      	bge.n	8005ba6 <__sfputc_r+0x1e>
 8005b94:	6994      	ldr	r4, [r2, #24]
 8005b96:	42a3      	cmp	r3, r4
 8005b98:	db01      	blt.n	8005b9e <__sfputc_r+0x16>
 8005b9a:	290a      	cmp	r1, #10
 8005b9c:	d103      	bne.n	8005ba6 <__sfputc_r+0x1e>
 8005b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ba2:	f000 bb85 	b.w	80062b0 <__swbuf_r>
 8005ba6:	6813      	ldr	r3, [r2, #0]
 8005ba8:	1c58      	adds	r0, r3, #1
 8005baa:	6010      	str	r0, [r2, #0]
 8005bac:	7019      	strb	r1, [r3, #0]
 8005bae:	4608      	mov	r0, r1
 8005bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <__sfputs_r>:
 8005bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb8:	4606      	mov	r6, r0
 8005bba:	460f      	mov	r7, r1
 8005bbc:	4614      	mov	r4, r2
 8005bbe:	18d5      	adds	r5, r2, r3
 8005bc0:	42ac      	cmp	r4, r5
 8005bc2:	d101      	bne.n	8005bc8 <__sfputs_r+0x12>
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	e007      	b.n	8005bd8 <__sfputs_r+0x22>
 8005bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bcc:	463a      	mov	r2, r7
 8005bce:	4630      	mov	r0, r6
 8005bd0:	f7ff ffda 	bl	8005b88 <__sfputc_r>
 8005bd4:	1c43      	adds	r3, r0, #1
 8005bd6:	d1f3      	bne.n	8005bc0 <__sfputs_r+0xa>
 8005bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bdc <_vfiprintf_r>:
 8005bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be0:	460d      	mov	r5, r1
 8005be2:	b09d      	sub	sp, #116	; 0x74
 8005be4:	4614      	mov	r4, r2
 8005be6:	4698      	mov	r8, r3
 8005be8:	4606      	mov	r6, r0
 8005bea:	b118      	cbz	r0, 8005bf4 <_vfiprintf_r+0x18>
 8005bec:	6a03      	ldr	r3, [r0, #32]
 8005bee:	b90b      	cbnz	r3, 8005bf4 <_vfiprintf_r+0x18>
 8005bf0:	f7ff fc1e 	bl	8005430 <__sinit>
 8005bf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bf6:	07d9      	lsls	r1, r3, #31
 8005bf8:	d405      	bmi.n	8005c06 <_vfiprintf_r+0x2a>
 8005bfa:	89ab      	ldrh	r3, [r5, #12]
 8005bfc:	059a      	lsls	r2, r3, #22
 8005bfe:	d402      	bmi.n	8005c06 <_vfiprintf_r+0x2a>
 8005c00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c02:	f7ff fd3a 	bl	800567a <__retarget_lock_acquire_recursive>
 8005c06:	89ab      	ldrh	r3, [r5, #12]
 8005c08:	071b      	lsls	r3, r3, #28
 8005c0a:	d501      	bpl.n	8005c10 <_vfiprintf_r+0x34>
 8005c0c:	692b      	ldr	r3, [r5, #16]
 8005c0e:	b99b      	cbnz	r3, 8005c38 <_vfiprintf_r+0x5c>
 8005c10:	4629      	mov	r1, r5
 8005c12:	4630      	mov	r0, r6
 8005c14:	f000 fb8a 	bl	800632c <__swsetup_r>
 8005c18:	b170      	cbz	r0, 8005c38 <_vfiprintf_r+0x5c>
 8005c1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c1c:	07dc      	lsls	r4, r3, #31
 8005c1e:	d504      	bpl.n	8005c2a <_vfiprintf_r+0x4e>
 8005c20:	f04f 30ff 	mov.w	r0, #4294967295
 8005c24:	b01d      	add	sp, #116	; 0x74
 8005c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2a:	89ab      	ldrh	r3, [r5, #12]
 8005c2c:	0598      	lsls	r0, r3, #22
 8005c2e:	d4f7      	bmi.n	8005c20 <_vfiprintf_r+0x44>
 8005c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c32:	f7ff fd23 	bl	800567c <__retarget_lock_release_recursive>
 8005c36:	e7f3      	b.n	8005c20 <_vfiprintf_r+0x44>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c3c:	2320      	movs	r3, #32
 8005c3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c42:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c46:	2330      	movs	r3, #48	; 0x30
 8005c48:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005dfc <_vfiprintf_r+0x220>
 8005c4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c50:	f04f 0901 	mov.w	r9, #1
 8005c54:	4623      	mov	r3, r4
 8005c56:	469a      	mov	sl, r3
 8005c58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c5c:	b10a      	cbz	r2, 8005c62 <_vfiprintf_r+0x86>
 8005c5e:	2a25      	cmp	r2, #37	; 0x25
 8005c60:	d1f9      	bne.n	8005c56 <_vfiprintf_r+0x7a>
 8005c62:	ebba 0b04 	subs.w	fp, sl, r4
 8005c66:	d00b      	beq.n	8005c80 <_vfiprintf_r+0xa4>
 8005c68:	465b      	mov	r3, fp
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	4630      	mov	r0, r6
 8005c70:	f7ff ffa1 	bl	8005bb6 <__sfputs_r>
 8005c74:	3001      	adds	r0, #1
 8005c76:	f000 80a9 	beq.w	8005dcc <_vfiprintf_r+0x1f0>
 8005c7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c7c:	445a      	add	r2, fp
 8005c7e:	9209      	str	r2, [sp, #36]	; 0x24
 8005c80:	f89a 3000 	ldrb.w	r3, [sl]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 80a1 	beq.w	8005dcc <_vfiprintf_r+0x1f0>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c94:	f10a 0a01 	add.w	sl, sl, #1
 8005c98:	9304      	str	r3, [sp, #16]
 8005c9a:	9307      	str	r3, [sp, #28]
 8005c9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ca0:	931a      	str	r3, [sp, #104]	; 0x68
 8005ca2:	4654      	mov	r4, sl
 8005ca4:	2205      	movs	r2, #5
 8005ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005caa:	4854      	ldr	r0, [pc, #336]	; (8005dfc <_vfiprintf_r+0x220>)
 8005cac:	f7fa fab0 	bl	8000210 <memchr>
 8005cb0:	9a04      	ldr	r2, [sp, #16]
 8005cb2:	b9d8      	cbnz	r0, 8005cec <_vfiprintf_r+0x110>
 8005cb4:	06d1      	lsls	r1, r2, #27
 8005cb6:	bf44      	itt	mi
 8005cb8:	2320      	movmi	r3, #32
 8005cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cbe:	0713      	lsls	r3, r2, #28
 8005cc0:	bf44      	itt	mi
 8005cc2:	232b      	movmi	r3, #43	; 0x2b
 8005cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8005ccc:	2b2a      	cmp	r3, #42	; 0x2a
 8005cce:	d015      	beq.n	8005cfc <_vfiprintf_r+0x120>
 8005cd0:	9a07      	ldr	r2, [sp, #28]
 8005cd2:	4654      	mov	r4, sl
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	f04f 0c0a 	mov.w	ip, #10
 8005cda:	4621      	mov	r1, r4
 8005cdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ce0:	3b30      	subs	r3, #48	; 0x30
 8005ce2:	2b09      	cmp	r3, #9
 8005ce4:	d94d      	bls.n	8005d82 <_vfiprintf_r+0x1a6>
 8005ce6:	b1b0      	cbz	r0, 8005d16 <_vfiprintf_r+0x13a>
 8005ce8:	9207      	str	r2, [sp, #28]
 8005cea:	e014      	b.n	8005d16 <_vfiprintf_r+0x13a>
 8005cec:	eba0 0308 	sub.w	r3, r0, r8
 8005cf0:	fa09 f303 	lsl.w	r3, r9, r3
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	9304      	str	r3, [sp, #16]
 8005cf8:	46a2      	mov	sl, r4
 8005cfa:	e7d2      	b.n	8005ca2 <_vfiprintf_r+0xc6>
 8005cfc:	9b03      	ldr	r3, [sp, #12]
 8005cfe:	1d19      	adds	r1, r3, #4
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	9103      	str	r1, [sp, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	bfbb      	ittet	lt
 8005d08:	425b      	neglt	r3, r3
 8005d0a:	f042 0202 	orrlt.w	r2, r2, #2
 8005d0e:	9307      	strge	r3, [sp, #28]
 8005d10:	9307      	strlt	r3, [sp, #28]
 8005d12:	bfb8      	it	lt
 8005d14:	9204      	strlt	r2, [sp, #16]
 8005d16:	7823      	ldrb	r3, [r4, #0]
 8005d18:	2b2e      	cmp	r3, #46	; 0x2e
 8005d1a:	d10c      	bne.n	8005d36 <_vfiprintf_r+0x15a>
 8005d1c:	7863      	ldrb	r3, [r4, #1]
 8005d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8005d20:	d134      	bne.n	8005d8c <_vfiprintf_r+0x1b0>
 8005d22:	9b03      	ldr	r3, [sp, #12]
 8005d24:	1d1a      	adds	r2, r3, #4
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	9203      	str	r2, [sp, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	bfb8      	it	lt
 8005d2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d32:	3402      	adds	r4, #2
 8005d34:	9305      	str	r3, [sp, #20]
 8005d36:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005e0c <_vfiprintf_r+0x230>
 8005d3a:	7821      	ldrb	r1, [r4, #0]
 8005d3c:	2203      	movs	r2, #3
 8005d3e:	4650      	mov	r0, sl
 8005d40:	f7fa fa66 	bl	8000210 <memchr>
 8005d44:	b138      	cbz	r0, 8005d56 <_vfiprintf_r+0x17a>
 8005d46:	9b04      	ldr	r3, [sp, #16]
 8005d48:	eba0 000a 	sub.w	r0, r0, sl
 8005d4c:	2240      	movs	r2, #64	; 0x40
 8005d4e:	4082      	lsls	r2, r0
 8005d50:	4313      	orrs	r3, r2
 8005d52:	3401      	adds	r4, #1
 8005d54:	9304      	str	r3, [sp, #16]
 8005d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d5a:	4829      	ldr	r0, [pc, #164]	; (8005e00 <_vfiprintf_r+0x224>)
 8005d5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d60:	2206      	movs	r2, #6
 8005d62:	f7fa fa55 	bl	8000210 <memchr>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	d03f      	beq.n	8005dea <_vfiprintf_r+0x20e>
 8005d6a:	4b26      	ldr	r3, [pc, #152]	; (8005e04 <_vfiprintf_r+0x228>)
 8005d6c:	bb1b      	cbnz	r3, 8005db6 <_vfiprintf_r+0x1da>
 8005d6e:	9b03      	ldr	r3, [sp, #12]
 8005d70:	3307      	adds	r3, #7
 8005d72:	f023 0307 	bic.w	r3, r3, #7
 8005d76:	3308      	adds	r3, #8
 8005d78:	9303      	str	r3, [sp, #12]
 8005d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d7c:	443b      	add	r3, r7
 8005d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d80:	e768      	b.n	8005c54 <_vfiprintf_r+0x78>
 8005d82:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d86:	460c      	mov	r4, r1
 8005d88:	2001      	movs	r0, #1
 8005d8a:	e7a6      	b.n	8005cda <_vfiprintf_r+0xfe>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	3401      	adds	r4, #1
 8005d90:	9305      	str	r3, [sp, #20]
 8005d92:	4619      	mov	r1, r3
 8005d94:	f04f 0c0a 	mov.w	ip, #10
 8005d98:	4620      	mov	r0, r4
 8005d9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d9e:	3a30      	subs	r2, #48	; 0x30
 8005da0:	2a09      	cmp	r2, #9
 8005da2:	d903      	bls.n	8005dac <_vfiprintf_r+0x1d0>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d0c6      	beq.n	8005d36 <_vfiprintf_r+0x15a>
 8005da8:	9105      	str	r1, [sp, #20]
 8005daa:	e7c4      	b.n	8005d36 <_vfiprintf_r+0x15a>
 8005dac:	fb0c 2101 	mla	r1, ip, r1, r2
 8005db0:	4604      	mov	r4, r0
 8005db2:	2301      	movs	r3, #1
 8005db4:	e7f0      	b.n	8005d98 <_vfiprintf_r+0x1bc>
 8005db6:	ab03      	add	r3, sp, #12
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	462a      	mov	r2, r5
 8005dbc:	4b12      	ldr	r3, [pc, #72]	; (8005e08 <_vfiprintf_r+0x22c>)
 8005dbe:	a904      	add	r1, sp, #16
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	f3af 8000 	nop.w
 8005dc6:	4607      	mov	r7, r0
 8005dc8:	1c78      	adds	r0, r7, #1
 8005dca:	d1d6      	bne.n	8005d7a <_vfiprintf_r+0x19e>
 8005dcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dce:	07d9      	lsls	r1, r3, #31
 8005dd0:	d405      	bmi.n	8005dde <_vfiprintf_r+0x202>
 8005dd2:	89ab      	ldrh	r3, [r5, #12]
 8005dd4:	059a      	lsls	r2, r3, #22
 8005dd6:	d402      	bmi.n	8005dde <_vfiprintf_r+0x202>
 8005dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dda:	f7ff fc4f 	bl	800567c <__retarget_lock_release_recursive>
 8005dde:	89ab      	ldrh	r3, [r5, #12]
 8005de0:	065b      	lsls	r3, r3, #25
 8005de2:	f53f af1d 	bmi.w	8005c20 <_vfiprintf_r+0x44>
 8005de6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005de8:	e71c      	b.n	8005c24 <_vfiprintf_r+0x48>
 8005dea:	ab03      	add	r3, sp, #12
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	462a      	mov	r2, r5
 8005df0:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <_vfiprintf_r+0x22c>)
 8005df2:	a904      	add	r1, sp, #16
 8005df4:	4630      	mov	r0, r6
 8005df6:	f000 f879 	bl	8005eec <_printf_i>
 8005dfa:	e7e4      	b.n	8005dc6 <_vfiprintf_r+0x1ea>
 8005dfc:	0800682f 	.word	0x0800682f
 8005e00:	08006839 	.word	0x08006839
 8005e04:	00000000 	.word	0x00000000
 8005e08:	08005bb7 	.word	0x08005bb7
 8005e0c:	08006835 	.word	0x08006835

08005e10 <_printf_common>:
 8005e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e14:	4616      	mov	r6, r2
 8005e16:	4699      	mov	r9, r3
 8005e18:	688a      	ldr	r2, [r1, #8]
 8005e1a:	690b      	ldr	r3, [r1, #16]
 8005e1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e20:	4293      	cmp	r3, r2
 8005e22:	bfb8      	it	lt
 8005e24:	4613      	movlt	r3, r2
 8005e26:	6033      	str	r3, [r6, #0]
 8005e28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e2c:	4607      	mov	r7, r0
 8005e2e:	460c      	mov	r4, r1
 8005e30:	b10a      	cbz	r2, 8005e36 <_printf_common+0x26>
 8005e32:	3301      	adds	r3, #1
 8005e34:	6033      	str	r3, [r6, #0]
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	0699      	lsls	r1, r3, #26
 8005e3a:	bf42      	ittt	mi
 8005e3c:	6833      	ldrmi	r3, [r6, #0]
 8005e3e:	3302      	addmi	r3, #2
 8005e40:	6033      	strmi	r3, [r6, #0]
 8005e42:	6825      	ldr	r5, [r4, #0]
 8005e44:	f015 0506 	ands.w	r5, r5, #6
 8005e48:	d106      	bne.n	8005e58 <_printf_common+0x48>
 8005e4a:	f104 0a19 	add.w	sl, r4, #25
 8005e4e:	68e3      	ldr	r3, [r4, #12]
 8005e50:	6832      	ldr	r2, [r6, #0]
 8005e52:	1a9b      	subs	r3, r3, r2
 8005e54:	42ab      	cmp	r3, r5
 8005e56:	dc26      	bgt.n	8005ea6 <_printf_common+0x96>
 8005e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e5c:	1e13      	subs	r3, r2, #0
 8005e5e:	6822      	ldr	r2, [r4, #0]
 8005e60:	bf18      	it	ne
 8005e62:	2301      	movne	r3, #1
 8005e64:	0692      	lsls	r2, r2, #26
 8005e66:	d42b      	bmi.n	8005ec0 <_printf_common+0xb0>
 8005e68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	4638      	mov	r0, r7
 8005e70:	47c0      	blx	r8
 8005e72:	3001      	adds	r0, #1
 8005e74:	d01e      	beq.n	8005eb4 <_printf_common+0xa4>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	6922      	ldr	r2, [r4, #16]
 8005e7a:	f003 0306 	and.w	r3, r3, #6
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	bf02      	ittt	eq
 8005e82:	68e5      	ldreq	r5, [r4, #12]
 8005e84:	6833      	ldreq	r3, [r6, #0]
 8005e86:	1aed      	subeq	r5, r5, r3
 8005e88:	68a3      	ldr	r3, [r4, #8]
 8005e8a:	bf0c      	ite	eq
 8005e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e90:	2500      	movne	r5, #0
 8005e92:	4293      	cmp	r3, r2
 8005e94:	bfc4      	itt	gt
 8005e96:	1a9b      	subgt	r3, r3, r2
 8005e98:	18ed      	addgt	r5, r5, r3
 8005e9a:	2600      	movs	r6, #0
 8005e9c:	341a      	adds	r4, #26
 8005e9e:	42b5      	cmp	r5, r6
 8005ea0:	d11a      	bne.n	8005ed8 <_printf_common+0xc8>
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	e008      	b.n	8005eb8 <_printf_common+0xa8>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	4652      	mov	r2, sl
 8005eaa:	4649      	mov	r1, r9
 8005eac:	4638      	mov	r0, r7
 8005eae:	47c0      	blx	r8
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d103      	bne.n	8005ebc <_printf_common+0xac>
 8005eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ebc:	3501      	adds	r5, #1
 8005ebe:	e7c6      	b.n	8005e4e <_printf_common+0x3e>
 8005ec0:	18e1      	adds	r1, r4, r3
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	2030      	movs	r0, #48	; 0x30
 8005ec6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005eca:	4422      	add	r2, r4
 8005ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ed0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ed4:	3302      	adds	r3, #2
 8005ed6:	e7c7      	b.n	8005e68 <_printf_common+0x58>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	4622      	mov	r2, r4
 8005edc:	4649      	mov	r1, r9
 8005ede:	4638      	mov	r0, r7
 8005ee0:	47c0      	blx	r8
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	d0e6      	beq.n	8005eb4 <_printf_common+0xa4>
 8005ee6:	3601      	adds	r6, #1
 8005ee8:	e7d9      	b.n	8005e9e <_printf_common+0x8e>
	...

08005eec <_printf_i>:
 8005eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef0:	7e0f      	ldrb	r7, [r1, #24]
 8005ef2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ef4:	2f78      	cmp	r7, #120	; 0x78
 8005ef6:	4691      	mov	r9, r2
 8005ef8:	4680      	mov	r8, r0
 8005efa:	460c      	mov	r4, r1
 8005efc:	469a      	mov	sl, r3
 8005efe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f02:	d807      	bhi.n	8005f14 <_printf_i+0x28>
 8005f04:	2f62      	cmp	r7, #98	; 0x62
 8005f06:	d80a      	bhi.n	8005f1e <_printf_i+0x32>
 8005f08:	2f00      	cmp	r7, #0
 8005f0a:	f000 80d4 	beq.w	80060b6 <_printf_i+0x1ca>
 8005f0e:	2f58      	cmp	r7, #88	; 0x58
 8005f10:	f000 80c0 	beq.w	8006094 <_printf_i+0x1a8>
 8005f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f1c:	e03a      	b.n	8005f94 <_printf_i+0xa8>
 8005f1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f22:	2b15      	cmp	r3, #21
 8005f24:	d8f6      	bhi.n	8005f14 <_printf_i+0x28>
 8005f26:	a101      	add	r1, pc, #4	; (adr r1, 8005f2c <_printf_i+0x40>)
 8005f28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f2c:	08005f85 	.word	0x08005f85
 8005f30:	08005f99 	.word	0x08005f99
 8005f34:	08005f15 	.word	0x08005f15
 8005f38:	08005f15 	.word	0x08005f15
 8005f3c:	08005f15 	.word	0x08005f15
 8005f40:	08005f15 	.word	0x08005f15
 8005f44:	08005f99 	.word	0x08005f99
 8005f48:	08005f15 	.word	0x08005f15
 8005f4c:	08005f15 	.word	0x08005f15
 8005f50:	08005f15 	.word	0x08005f15
 8005f54:	08005f15 	.word	0x08005f15
 8005f58:	0800609d 	.word	0x0800609d
 8005f5c:	08005fc5 	.word	0x08005fc5
 8005f60:	08006057 	.word	0x08006057
 8005f64:	08005f15 	.word	0x08005f15
 8005f68:	08005f15 	.word	0x08005f15
 8005f6c:	080060bf 	.word	0x080060bf
 8005f70:	08005f15 	.word	0x08005f15
 8005f74:	08005fc5 	.word	0x08005fc5
 8005f78:	08005f15 	.word	0x08005f15
 8005f7c:	08005f15 	.word	0x08005f15
 8005f80:	0800605f 	.word	0x0800605f
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	1d1a      	adds	r2, r3, #4
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	602a      	str	r2, [r5, #0]
 8005f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f94:	2301      	movs	r3, #1
 8005f96:	e09f      	b.n	80060d8 <_printf_i+0x1ec>
 8005f98:	6820      	ldr	r0, [r4, #0]
 8005f9a:	682b      	ldr	r3, [r5, #0]
 8005f9c:	0607      	lsls	r7, r0, #24
 8005f9e:	f103 0104 	add.w	r1, r3, #4
 8005fa2:	6029      	str	r1, [r5, #0]
 8005fa4:	d501      	bpl.n	8005faa <_printf_i+0xbe>
 8005fa6:	681e      	ldr	r6, [r3, #0]
 8005fa8:	e003      	b.n	8005fb2 <_printf_i+0xc6>
 8005faa:	0646      	lsls	r6, r0, #25
 8005fac:	d5fb      	bpl.n	8005fa6 <_printf_i+0xba>
 8005fae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005fb2:	2e00      	cmp	r6, #0
 8005fb4:	da03      	bge.n	8005fbe <_printf_i+0xd2>
 8005fb6:	232d      	movs	r3, #45	; 0x2d
 8005fb8:	4276      	negs	r6, r6
 8005fba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fbe:	485a      	ldr	r0, [pc, #360]	; (8006128 <_printf_i+0x23c>)
 8005fc0:	230a      	movs	r3, #10
 8005fc2:	e012      	b.n	8005fea <_printf_i+0xfe>
 8005fc4:	682b      	ldr	r3, [r5, #0]
 8005fc6:	6820      	ldr	r0, [r4, #0]
 8005fc8:	1d19      	adds	r1, r3, #4
 8005fca:	6029      	str	r1, [r5, #0]
 8005fcc:	0605      	lsls	r5, r0, #24
 8005fce:	d501      	bpl.n	8005fd4 <_printf_i+0xe8>
 8005fd0:	681e      	ldr	r6, [r3, #0]
 8005fd2:	e002      	b.n	8005fda <_printf_i+0xee>
 8005fd4:	0641      	lsls	r1, r0, #25
 8005fd6:	d5fb      	bpl.n	8005fd0 <_printf_i+0xe4>
 8005fd8:	881e      	ldrh	r6, [r3, #0]
 8005fda:	4853      	ldr	r0, [pc, #332]	; (8006128 <_printf_i+0x23c>)
 8005fdc:	2f6f      	cmp	r7, #111	; 0x6f
 8005fde:	bf0c      	ite	eq
 8005fe0:	2308      	moveq	r3, #8
 8005fe2:	230a      	movne	r3, #10
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fea:	6865      	ldr	r5, [r4, #4]
 8005fec:	60a5      	str	r5, [r4, #8]
 8005fee:	2d00      	cmp	r5, #0
 8005ff0:	bfa2      	ittt	ge
 8005ff2:	6821      	ldrge	r1, [r4, #0]
 8005ff4:	f021 0104 	bicge.w	r1, r1, #4
 8005ff8:	6021      	strge	r1, [r4, #0]
 8005ffa:	b90e      	cbnz	r6, 8006000 <_printf_i+0x114>
 8005ffc:	2d00      	cmp	r5, #0
 8005ffe:	d04b      	beq.n	8006098 <_printf_i+0x1ac>
 8006000:	4615      	mov	r5, r2
 8006002:	fbb6 f1f3 	udiv	r1, r6, r3
 8006006:	fb03 6711 	mls	r7, r3, r1, r6
 800600a:	5dc7      	ldrb	r7, [r0, r7]
 800600c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006010:	4637      	mov	r7, r6
 8006012:	42bb      	cmp	r3, r7
 8006014:	460e      	mov	r6, r1
 8006016:	d9f4      	bls.n	8006002 <_printf_i+0x116>
 8006018:	2b08      	cmp	r3, #8
 800601a:	d10b      	bne.n	8006034 <_printf_i+0x148>
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	07de      	lsls	r6, r3, #31
 8006020:	d508      	bpl.n	8006034 <_printf_i+0x148>
 8006022:	6923      	ldr	r3, [r4, #16]
 8006024:	6861      	ldr	r1, [r4, #4]
 8006026:	4299      	cmp	r1, r3
 8006028:	bfde      	ittt	le
 800602a:	2330      	movle	r3, #48	; 0x30
 800602c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006030:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006034:	1b52      	subs	r2, r2, r5
 8006036:	6122      	str	r2, [r4, #16]
 8006038:	f8cd a000 	str.w	sl, [sp]
 800603c:	464b      	mov	r3, r9
 800603e:	aa03      	add	r2, sp, #12
 8006040:	4621      	mov	r1, r4
 8006042:	4640      	mov	r0, r8
 8006044:	f7ff fee4 	bl	8005e10 <_printf_common>
 8006048:	3001      	adds	r0, #1
 800604a:	d14a      	bne.n	80060e2 <_printf_i+0x1f6>
 800604c:	f04f 30ff 	mov.w	r0, #4294967295
 8006050:	b004      	add	sp, #16
 8006052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	f043 0320 	orr.w	r3, r3, #32
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	4833      	ldr	r0, [pc, #204]	; (800612c <_printf_i+0x240>)
 8006060:	2778      	movs	r7, #120	; 0x78
 8006062:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	6829      	ldr	r1, [r5, #0]
 800606a:	061f      	lsls	r7, r3, #24
 800606c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006070:	d402      	bmi.n	8006078 <_printf_i+0x18c>
 8006072:	065f      	lsls	r7, r3, #25
 8006074:	bf48      	it	mi
 8006076:	b2b6      	uxthmi	r6, r6
 8006078:	07df      	lsls	r7, r3, #31
 800607a:	bf48      	it	mi
 800607c:	f043 0320 	orrmi.w	r3, r3, #32
 8006080:	6029      	str	r1, [r5, #0]
 8006082:	bf48      	it	mi
 8006084:	6023      	strmi	r3, [r4, #0]
 8006086:	b91e      	cbnz	r6, 8006090 <_printf_i+0x1a4>
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	f023 0320 	bic.w	r3, r3, #32
 800608e:	6023      	str	r3, [r4, #0]
 8006090:	2310      	movs	r3, #16
 8006092:	e7a7      	b.n	8005fe4 <_printf_i+0xf8>
 8006094:	4824      	ldr	r0, [pc, #144]	; (8006128 <_printf_i+0x23c>)
 8006096:	e7e4      	b.n	8006062 <_printf_i+0x176>
 8006098:	4615      	mov	r5, r2
 800609a:	e7bd      	b.n	8006018 <_printf_i+0x12c>
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	6826      	ldr	r6, [r4, #0]
 80060a0:	6961      	ldr	r1, [r4, #20]
 80060a2:	1d18      	adds	r0, r3, #4
 80060a4:	6028      	str	r0, [r5, #0]
 80060a6:	0635      	lsls	r5, r6, #24
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	d501      	bpl.n	80060b0 <_printf_i+0x1c4>
 80060ac:	6019      	str	r1, [r3, #0]
 80060ae:	e002      	b.n	80060b6 <_printf_i+0x1ca>
 80060b0:	0670      	lsls	r0, r6, #25
 80060b2:	d5fb      	bpl.n	80060ac <_printf_i+0x1c0>
 80060b4:	8019      	strh	r1, [r3, #0]
 80060b6:	2300      	movs	r3, #0
 80060b8:	6123      	str	r3, [r4, #16]
 80060ba:	4615      	mov	r5, r2
 80060bc:	e7bc      	b.n	8006038 <_printf_i+0x14c>
 80060be:	682b      	ldr	r3, [r5, #0]
 80060c0:	1d1a      	adds	r2, r3, #4
 80060c2:	602a      	str	r2, [r5, #0]
 80060c4:	681d      	ldr	r5, [r3, #0]
 80060c6:	6862      	ldr	r2, [r4, #4]
 80060c8:	2100      	movs	r1, #0
 80060ca:	4628      	mov	r0, r5
 80060cc:	f7fa f8a0 	bl	8000210 <memchr>
 80060d0:	b108      	cbz	r0, 80060d6 <_printf_i+0x1ea>
 80060d2:	1b40      	subs	r0, r0, r5
 80060d4:	6060      	str	r0, [r4, #4]
 80060d6:	6863      	ldr	r3, [r4, #4]
 80060d8:	6123      	str	r3, [r4, #16]
 80060da:	2300      	movs	r3, #0
 80060dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060e0:	e7aa      	b.n	8006038 <_printf_i+0x14c>
 80060e2:	6923      	ldr	r3, [r4, #16]
 80060e4:	462a      	mov	r2, r5
 80060e6:	4649      	mov	r1, r9
 80060e8:	4640      	mov	r0, r8
 80060ea:	47d0      	blx	sl
 80060ec:	3001      	adds	r0, #1
 80060ee:	d0ad      	beq.n	800604c <_printf_i+0x160>
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	079b      	lsls	r3, r3, #30
 80060f4:	d413      	bmi.n	800611e <_printf_i+0x232>
 80060f6:	68e0      	ldr	r0, [r4, #12]
 80060f8:	9b03      	ldr	r3, [sp, #12]
 80060fa:	4298      	cmp	r0, r3
 80060fc:	bfb8      	it	lt
 80060fe:	4618      	movlt	r0, r3
 8006100:	e7a6      	b.n	8006050 <_printf_i+0x164>
 8006102:	2301      	movs	r3, #1
 8006104:	4632      	mov	r2, r6
 8006106:	4649      	mov	r1, r9
 8006108:	4640      	mov	r0, r8
 800610a:	47d0      	blx	sl
 800610c:	3001      	adds	r0, #1
 800610e:	d09d      	beq.n	800604c <_printf_i+0x160>
 8006110:	3501      	adds	r5, #1
 8006112:	68e3      	ldr	r3, [r4, #12]
 8006114:	9903      	ldr	r1, [sp, #12]
 8006116:	1a5b      	subs	r3, r3, r1
 8006118:	42ab      	cmp	r3, r5
 800611a:	dcf2      	bgt.n	8006102 <_printf_i+0x216>
 800611c:	e7eb      	b.n	80060f6 <_printf_i+0x20a>
 800611e:	2500      	movs	r5, #0
 8006120:	f104 0619 	add.w	r6, r4, #25
 8006124:	e7f5      	b.n	8006112 <_printf_i+0x226>
 8006126:	bf00      	nop
 8006128:	08006840 	.word	0x08006840
 800612c:	08006851 	.word	0x08006851

08006130 <__sflush_r>:
 8006130:	898a      	ldrh	r2, [r1, #12]
 8006132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006136:	4605      	mov	r5, r0
 8006138:	0710      	lsls	r0, r2, #28
 800613a:	460c      	mov	r4, r1
 800613c:	d458      	bmi.n	80061f0 <__sflush_r+0xc0>
 800613e:	684b      	ldr	r3, [r1, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	dc05      	bgt.n	8006150 <__sflush_r+0x20>
 8006144:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006146:	2b00      	cmp	r3, #0
 8006148:	dc02      	bgt.n	8006150 <__sflush_r+0x20>
 800614a:	2000      	movs	r0, #0
 800614c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006152:	2e00      	cmp	r6, #0
 8006154:	d0f9      	beq.n	800614a <__sflush_r+0x1a>
 8006156:	2300      	movs	r3, #0
 8006158:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800615c:	682f      	ldr	r7, [r5, #0]
 800615e:	6a21      	ldr	r1, [r4, #32]
 8006160:	602b      	str	r3, [r5, #0]
 8006162:	d032      	beq.n	80061ca <__sflush_r+0x9a>
 8006164:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006166:	89a3      	ldrh	r3, [r4, #12]
 8006168:	075a      	lsls	r2, r3, #29
 800616a:	d505      	bpl.n	8006178 <__sflush_r+0x48>
 800616c:	6863      	ldr	r3, [r4, #4]
 800616e:	1ac0      	subs	r0, r0, r3
 8006170:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006172:	b10b      	cbz	r3, 8006178 <__sflush_r+0x48>
 8006174:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006176:	1ac0      	subs	r0, r0, r3
 8006178:	2300      	movs	r3, #0
 800617a:	4602      	mov	r2, r0
 800617c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800617e:	6a21      	ldr	r1, [r4, #32]
 8006180:	4628      	mov	r0, r5
 8006182:	47b0      	blx	r6
 8006184:	1c43      	adds	r3, r0, #1
 8006186:	89a3      	ldrh	r3, [r4, #12]
 8006188:	d106      	bne.n	8006198 <__sflush_r+0x68>
 800618a:	6829      	ldr	r1, [r5, #0]
 800618c:	291d      	cmp	r1, #29
 800618e:	d82b      	bhi.n	80061e8 <__sflush_r+0xb8>
 8006190:	4a29      	ldr	r2, [pc, #164]	; (8006238 <__sflush_r+0x108>)
 8006192:	410a      	asrs	r2, r1
 8006194:	07d6      	lsls	r6, r2, #31
 8006196:	d427      	bmi.n	80061e8 <__sflush_r+0xb8>
 8006198:	2200      	movs	r2, #0
 800619a:	6062      	str	r2, [r4, #4]
 800619c:	04d9      	lsls	r1, r3, #19
 800619e:	6922      	ldr	r2, [r4, #16]
 80061a0:	6022      	str	r2, [r4, #0]
 80061a2:	d504      	bpl.n	80061ae <__sflush_r+0x7e>
 80061a4:	1c42      	adds	r2, r0, #1
 80061a6:	d101      	bne.n	80061ac <__sflush_r+0x7c>
 80061a8:	682b      	ldr	r3, [r5, #0]
 80061aa:	b903      	cbnz	r3, 80061ae <__sflush_r+0x7e>
 80061ac:	6560      	str	r0, [r4, #84]	; 0x54
 80061ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061b0:	602f      	str	r7, [r5, #0]
 80061b2:	2900      	cmp	r1, #0
 80061b4:	d0c9      	beq.n	800614a <__sflush_r+0x1a>
 80061b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061ba:	4299      	cmp	r1, r3
 80061bc:	d002      	beq.n	80061c4 <__sflush_r+0x94>
 80061be:	4628      	mov	r0, r5
 80061c0:	f7ff fa8a 	bl	80056d8 <_free_r>
 80061c4:	2000      	movs	r0, #0
 80061c6:	6360      	str	r0, [r4, #52]	; 0x34
 80061c8:	e7c0      	b.n	800614c <__sflush_r+0x1c>
 80061ca:	2301      	movs	r3, #1
 80061cc:	4628      	mov	r0, r5
 80061ce:	47b0      	blx	r6
 80061d0:	1c41      	adds	r1, r0, #1
 80061d2:	d1c8      	bne.n	8006166 <__sflush_r+0x36>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d0c5      	beq.n	8006166 <__sflush_r+0x36>
 80061da:	2b1d      	cmp	r3, #29
 80061dc:	d001      	beq.n	80061e2 <__sflush_r+0xb2>
 80061de:	2b16      	cmp	r3, #22
 80061e0:	d101      	bne.n	80061e6 <__sflush_r+0xb6>
 80061e2:	602f      	str	r7, [r5, #0]
 80061e4:	e7b1      	b.n	800614a <__sflush_r+0x1a>
 80061e6:	89a3      	ldrh	r3, [r4, #12]
 80061e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ec:	81a3      	strh	r3, [r4, #12]
 80061ee:	e7ad      	b.n	800614c <__sflush_r+0x1c>
 80061f0:	690f      	ldr	r7, [r1, #16]
 80061f2:	2f00      	cmp	r7, #0
 80061f4:	d0a9      	beq.n	800614a <__sflush_r+0x1a>
 80061f6:	0793      	lsls	r3, r2, #30
 80061f8:	680e      	ldr	r6, [r1, #0]
 80061fa:	bf08      	it	eq
 80061fc:	694b      	ldreq	r3, [r1, #20]
 80061fe:	600f      	str	r7, [r1, #0]
 8006200:	bf18      	it	ne
 8006202:	2300      	movne	r3, #0
 8006204:	eba6 0807 	sub.w	r8, r6, r7
 8006208:	608b      	str	r3, [r1, #8]
 800620a:	f1b8 0f00 	cmp.w	r8, #0
 800620e:	dd9c      	ble.n	800614a <__sflush_r+0x1a>
 8006210:	6a21      	ldr	r1, [r4, #32]
 8006212:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006214:	4643      	mov	r3, r8
 8006216:	463a      	mov	r2, r7
 8006218:	4628      	mov	r0, r5
 800621a:	47b0      	blx	r6
 800621c:	2800      	cmp	r0, #0
 800621e:	dc06      	bgt.n	800622e <__sflush_r+0xfe>
 8006220:	89a3      	ldrh	r3, [r4, #12]
 8006222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006226:	81a3      	strh	r3, [r4, #12]
 8006228:	f04f 30ff 	mov.w	r0, #4294967295
 800622c:	e78e      	b.n	800614c <__sflush_r+0x1c>
 800622e:	4407      	add	r7, r0
 8006230:	eba8 0800 	sub.w	r8, r8, r0
 8006234:	e7e9      	b.n	800620a <__sflush_r+0xda>
 8006236:	bf00      	nop
 8006238:	dfbffffe 	.word	0xdfbffffe

0800623c <_fflush_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	690b      	ldr	r3, [r1, #16]
 8006240:	4605      	mov	r5, r0
 8006242:	460c      	mov	r4, r1
 8006244:	b913      	cbnz	r3, 800624c <_fflush_r+0x10>
 8006246:	2500      	movs	r5, #0
 8006248:	4628      	mov	r0, r5
 800624a:	bd38      	pop	{r3, r4, r5, pc}
 800624c:	b118      	cbz	r0, 8006256 <_fflush_r+0x1a>
 800624e:	6a03      	ldr	r3, [r0, #32]
 8006250:	b90b      	cbnz	r3, 8006256 <_fflush_r+0x1a>
 8006252:	f7ff f8ed 	bl	8005430 <__sinit>
 8006256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0f3      	beq.n	8006246 <_fflush_r+0xa>
 800625e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006260:	07d0      	lsls	r0, r2, #31
 8006262:	d404      	bmi.n	800626e <_fflush_r+0x32>
 8006264:	0599      	lsls	r1, r3, #22
 8006266:	d402      	bmi.n	800626e <_fflush_r+0x32>
 8006268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800626a:	f7ff fa06 	bl	800567a <__retarget_lock_acquire_recursive>
 800626e:	4628      	mov	r0, r5
 8006270:	4621      	mov	r1, r4
 8006272:	f7ff ff5d 	bl	8006130 <__sflush_r>
 8006276:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006278:	07da      	lsls	r2, r3, #31
 800627a:	4605      	mov	r5, r0
 800627c:	d4e4      	bmi.n	8006248 <_fflush_r+0xc>
 800627e:	89a3      	ldrh	r3, [r4, #12]
 8006280:	059b      	lsls	r3, r3, #22
 8006282:	d4e1      	bmi.n	8006248 <_fflush_r+0xc>
 8006284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006286:	f7ff f9f9 	bl	800567c <__retarget_lock_release_recursive>
 800628a:	e7dd      	b.n	8006248 <_fflush_r+0xc>

0800628c <fiprintf>:
 800628c:	b40e      	push	{r1, r2, r3}
 800628e:	b503      	push	{r0, r1, lr}
 8006290:	4601      	mov	r1, r0
 8006292:	ab03      	add	r3, sp, #12
 8006294:	4805      	ldr	r0, [pc, #20]	; (80062ac <fiprintf+0x20>)
 8006296:	f853 2b04 	ldr.w	r2, [r3], #4
 800629a:	6800      	ldr	r0, [r0, #0]
 800629c:	9301      	str	r3, [sp, #4]
 800629e:	f7ff fc9d 	bl	8005bdc <_vfiprintf_r>
 80062a2:	b002      	add	sp, #8
 80062a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80062a8:	b003      	add	sp, #12
 80062aa:	4770      	bx	lr
 80062ac:	20000068 	.word	0x20000068

080062b0 <__swbuf_r>:
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b2:	460e      	mov	r6, r1
 80062b4:	4614      	mov	r4, r2
 80062b6:	4605      	mov	r5, r0
 80062b8:	b118      	cbz	r0, 80062c2 <__swbuf_r+0x12>
 80062ba:	6a03      	ldr	r3, [r0, #32]
 80062bc:	b90b      	cbnz	r3, 80062c2 <__swbuf_r+0x12>
 80062be:	f7ff f8b7 	bl	8005430 <__sinit>
 80062c2:	69a3      	ldr	r3, [r4, #24]
 80062c4:	60a3      	str	r3, [r4, #8]
 80062c6:	89a3      	ldrh	r3, [r4, #12]
 80062c8:	071a      	lsls	r2, r3, #28
 80062ca:	d525      	bpl.n	8006318 <__swbuf_r+0x68>
 80062cc:	6923      	ldr	r3, [r4, #16]
 80062ce:	b31b      	cbz	r3, 8006318 <__swbuf_r+0x68>
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	6922      	ldr	r2, [r4, #16]
 80062d4:	1a98      	subs	r0, r3, r2
 80062d6:	6963      	ldr	r3, [r4, #20]
 80062d8:	b2f6      	uxtb	r6, r6
 80062da:	4283      	cmp	r3, r0
 80062dc:	4637      	mov	r7, r6
 80062de:	dc04      	bgt.n	80062ea <__swbuf_r+0x3a>
 80062e0:	4621      	mov	r1, r4
 80062e2:	4628      	mov	r0, r5
 80062e4:	f7ff ffaa 	bl	800623c <_fflush_r>
 80062e8:	b9e0      	cbnz	r0, 8006324 <__swbuf_r+0x74>
 80062ea:	68a3      	ldr	r3, [r4, #8]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	60a3      	str	r3, [r4, #8]
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	6022      	str	r2, [r4, #0]
 80062f6:	701e      	strb	r6, [r3, #0]
 80062f8:	6962      	ldr	r2, [r4, #20]
 80062fa:	1c43      	adds	r3, r0, #1
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d004      	beq.n	800630a <__swbuf_r+0x5a>
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	07db      	lsls	r3, r3, #31
 8006304:	d506      	bpl.n	8006314 <__swbuf_r+0x64>
 8006306:	2e0a      	cmp	r6, #10
 8006308:	d104      	bne.n	8006314 <__swbuf_r+0x64>
 800630a:	4621      	mov	r1, r4
 800630c:	4628      	mov	r0, r5
 800630e:	f7ff ff95 	bl	800623c <_fflush_r>
 8006312:	b938      	cbnz	r0, 8006324 <__swbuf_r+0x74>
 8006314:	4638      	mov	r0, r7
 8006316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006318:	4621      	mov	r1, r4
 800631a:	4628      	mov	r0, r5
 800631c:	f000 f806 	bl	800632c <__swsetup_r>
 8006320:	2800      	cmp	r0, #0
 8006322:	d0d5      	beq.n	80062d0 <__swbuf_r+0x20>
 8006324:	f04f 37ff 	mov.w	r7, #4294967295
 8006328:	e7f4      	b.n	8006314 <__swbuf_r+0x64>
	...

0800632c <__swsetup_r>:
 800632c:	b538      	push	{r3, r4, r5, lr}
 800632e:	4b2a      	ldr	r3, [pc, #168]	; (80063d8 <__swsetup_r+0xac>)
 8006330:	4605      	mov	r5, r0
 8006332:	6818      	ldr	r0, [r3, #0]
 8006334:	460c      	mov	r4, r1
 8006336:	b118      	cbz	r0, 8006340 <__swsetup_r+0x14>
 8006338:	6a03      	ldr	r3, [r0, #32]
 800633a:	b90b      	cbnz	r3, 8006340 <__swsetup_r+0x14>
 800633c:	f7ff f878 	bl	8005430 <__sinit>
 8006340:	89a3      	ldrh	r3, [r4, #12]
 8006342:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006346:	0718      	lsls	r0, r3, #28
 8006348:	d422      	bmi.n	8006390 <__swsetup_r+0x64>
 800634a:	06d9      	lsls	r1, r3, #27
 800634c:	d407      	bmi.n	800635e <__swsetup_r+0x32>
 800634e:	2309      	movs	r3, #9
 8006350:	602b      	str	r3, [r5, #0]
 8006352:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006356:	81a3      	strh	r3, [r4, #12]
 8006358:	f04f 30ff 	mov.w	r0, #4294967295
 800635c:	e034      	b.n	80063c8 <__swsetup_r+0x9c>
 800635e:	0758      	lsls	r0, r3, #29
 8006360:	d512      	bpl.n	8006388 <__swsetup_r+0x5c>
 8006362:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006364:	b141      	cbz	r1, 8006378 <__swsetup_r+0x4c>
 8006366:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800636a:	4299      	cmp	r1, r3
 800636c:	d002      	beq.n	8006374 <__swsetup_r+0x48>
 800636e:	4628      	mov	r0, r5
 8006370:	f7ff f9b2 	bl	80056d8 <_free_r>
 8006374:	2300      	movs	r3, #0
 8006376:	6363      	str	r3, [r4, #52]	; 0x34
 8006378:	89a3      	ldrh	r3, [r4, #12]
 800637a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800637e:	81a3      	strh	r3, [r4, #12]
 8006380:	2300      	movs	r3, #0
 8006382:	6063      	str	r3, [r4, #4]
 8006384:	6923      	ldr	r3, [r4, #16]
 8006386:	6023      	str	r3, [r4, #0]
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	f043 0308 	orr.w	r3, r3, #8
 800638e:	81a3      	strh	r3, [r4, #12]
 8006390:	6923      	ldr	r3, [r4, #16]
 8006392:	b94b      	cbnz	r3, 80063a8 <__swsetup_r+0x7c>
 8006394:	89a3      	ldrh	r3, [r4, #12]
 8006396:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800639a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800639e:	d003      	beq.n	80063a8 <__swsetup_r+0x7c>
 80063a0:	4621      	mov	r1, r4
 80063a2:	4628      	mov	r0, r5
 80063a4:	f000 f8a0 	bl	80064e8 <__smakebuf_r>
 80063a8:	89a0      	ldrh	r0, [r4, #12]
 80063aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063ae:	f010 0301 	ands.w	r3, r0, #1
 80063b2:	d00a      	beq.n	80063ca <__swsetup_r+0x9e>
 80063b4:	2300      	movs	r3, #0
 80063b6:	60a3      	str	r3, [r4, #8]
 80063b8:	6963      	ldr	r3, [r4, #20]
 80063ba:	425b      	negs	r3, r3
 80063bc:	61a3      	str	r3, [r4, #24]
 80063be:	6923      	ldr	r3, [r4, #16]
 80063c0:	b943      	cbnz	r3, 80063d4 <__swsetup_r+0xa8>
 80063c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063c6:	d1c4      	bne.n	8006352 <__swsetup_r+0x26>
 80063c8:	bd38      	pop	{r3, r4, r5, pc}
 80063ca:	0781      	lsls	r1, r0, #30
 80063cc:	bf58      	it	pl
 80063ce:	6963      	ldrpl	r3, [r4, #20]
 80063d0:	60a3      	str	r3, [r4, #8]
 80063d2:	e7f4      	b.n	80063be <__swsetup_r+0x92>
 80063d4:	2000      	movs	r0, #0
 80063d6:	e7f7      	b.n	80063c8 <__swsetup_r+0x9c>
 80063d8:	20000068 	.word	0x20000068

080063dc <memmove>:
 80063dc:	4288      	cmp	r0, r1
 80063de:	b510      	push	{r4, lr}
 80063e0:	eb01 0402 	add.w	r4, r1, r2
 80063e4:	d902      	bls.n	80063ec <memmove+0x10>
 80063e6:	4284      	cmp	r4, r0
 80063e8:	4623      	mov	r3, r4
 80063ea:	d807      	bhi.n	80063fc <memmove+0x20>
 80063ec:	1e43      	subs	r3, r0, #1
 80063ee:	42a1      	cmp	r1, r4
 80063f0:	d008      	beq.n	8006404 <memmove+0x28>
 80063f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063fa:	e7f8      	b.n	80063ee <memmove+0x12>
 80063fc:	4402      	add	r2, r0
 80063fe:	4601      	mov	r1, r0
 8006400:	428a      	cmp	r2, r1
 8006402:	d100      	bne.n	8006406 <memmove+0x2a>
 8006404:	bd10      	pop	{r4, pc}
 8006406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800640a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800640e:	e7f7      	b.n	8006400 <memmove+0x24>

08006410 <_sbrk_r>:
 8006410:	b538      	push	{r3, r4, r5, lr}
 8006412:	4d06      	ldr	r5, [pc, #24]	; (800642c <_sbrk_r+0x1c>)
 8006414:	2300      	movs	r3, #0
 8006416:	4604      	mov	r4, r0
 8006418:	4608      	mov	r0, r1
 800641a:	602b      	str	r3, [r5, #0]
 800641c:	f7fa fbc0 	bl	8000ba0 <_sbrk>
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	d102      	bne.n	800642a <_sbrk_r+0x1a>
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	b103      	cbz	r3, 800642a <_sbrk_r+0x1a>
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	20004bd4 	.word	0x20004bd4

08006430 <abort>:
 8006430:	b508      	push	{r3, lr}
 8006432:	2006      	movs	r0, #6
 8006434:	f000 f8bc 	bl	80065b0 <raise>
 8006438:	2001      	movs	r0, #1
 800643a:	f7fa fb3a 	bl	8000ab2 <_exit>

0800643e <_realloc_r>:
 800643e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006442:	4680      	mov	r8, r0
 8006444:	4614      	mov	r4, r2
 8006446:	460e      	mov	r6, r1
 8006448:	b921      	cbnz	r1, 8006454 <_realloc_r+0x16>
 800644a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800644e:	4611      	mov	r1, r2
 8006450:	f7ff b9b6 	b.w	80057c0 <_malloc_r>
 8006454:	b92a      	cbnz	r2, 8006462 <_realloc_r+0x24>
 8006456:	f7ff f93f 	bl	80056d8 <_free_r>
 800645a:	4625      	mov	r5, r4
 800645c:	4628      	mov	r0, r5
 800645e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006462:	f000 f8e3 	bl	800662c <_malloc_usable_size_r>
 8006466:	4284      	cmp	r4, r0
 8006468:	4607      	mov	r7, r0
 800646a:	d802      	bhi.n	8006472 <_realloc_r+0x34>
 800646c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006470:	d812      	bhi.n	8006498 <_realloc_r+0x5a>
 8006472:	4621      	mov	r1, r4
 8006474:	4640      	mov	r0, r8
 8006476:	f7ff f9a3 	bl	80057c0 <_malloc_r>
 800647a:	4605      	mov	r5, r0
 800647c:	2800      	cmp	r0, #0
 800647e:	d0ed      	beq.n	800645c <_realloc_r+0x1e>
 8006480:	42bc      	cmp	r4, r7
 8006482:	4622      	mov	r2, r4
 8006484:	4631      	mov	r1, r6
 8006486:	bf28      	it	cs
 8006488:	463a      	movcs	r2, r7
 800648a:	f7ff f8f8 	bl	800567e <memcpy>
 800648e:	4631      	mov	r1, r6
 8006490:	4640      	mov	r0, r8
 8006492:	f7ff f921 	bl	80056d8 <_free_r>
 8006496:	e7e1      	b.n	800645c <_realloc_r+0x1e>
 8006498:	4635      	mov	r5, r6
 800649a:	e7df      	b.n	800645c <_realloc_r+0x1e>

0800649c <__swhatbuf_r>:
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	460c      	mov	r4, r1
 80064a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a4:	2900      	cmp	r1, #0
 80064a6:	b096      	sub	sp, #88	; 0x58
 80064a8:	4615      	mov	r5, r2
 80064aa:	461e      	mov	r6, r3
 80064ac:	da0d      	bge.n	80064ca <__swhatbuf_r+0x2e>
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80064b4:	f04f 0100 	mov.w	r1, #0
 80064b8:	bf0c      	ite	eq
 80064ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80064be:	2340      	movne	r3, #64	; 0x40
 80064c0:	2000      	movs	r0, #0
 80064c2:	6031      	str	r1, [r6, #0]
 80064c4:	602b      	str	r3, [r5, #0]
 80064c6:	b016      	add	sp, #88	; 0x58
 80064c8:	bd70      	pop	{r4, r5, r6, pc}
 80064ca:	466a      	mov	r2, sp
 80064cc:	f000 f878 	bl	80065c0 <_fstat_r>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	dbec      	blt.n	80064ae <__swhatbuf_r+0x12>
 80064d4:	9901      	ldr	r1, [sp, #4]
 80064d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80064da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80064de:	4259      	negs	r1, r3
 80064e0:	4159      	adcs	r1, r3
 80064e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064e6:	e7eb      	b.n	80064c0 <__swhatbuf_r+0x24>

080064e8 <__smakebuf_r>:
 80064e8:	898b      	ldrh	r3, [r1, #12]
 80064ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064ec:	079d      	lsls	r5, r3, #30
 80064ee:	4606      	mov	r6, r0
 80064f0:	460c      	mov	r4, r1
 80064f2:	d507      	bpl.n	8006504 <__smakebuf_r+0x1c>
 80064f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	6123      	str	r3, [r4, #16]
 80064fc:	2301      	movs	r3, #1
 80064fe:	6163      	str	r3, [r4, #20]
 8006500:	b002      	add	sp, #8
 8006502:	bd70      	pop	{r4, r5, r6, pc}
 8006504:	ab01      	add	r3, sp, #4
 8006506:	466a      	mov	r2, sp
 8006508:	f7ff ffc8 	bl	800649c <__swhatbuf_r>
 800650c:	9900      	ldr	r1, [sp, #0]
 800650e:	4605      	mov	r5, r0
 8006510:	4630      	mov	r0, r6
 8006512:	f7ff f955 	bl	80057c0 <_malloc_r>
 8006516:	b948      	cbnz	r0, 800652c <__smakebuf_r+0x44>
 8006518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800651c:	059a      	lsls	r2, r3, #22
 800651e:	d4ef      	bmi.n	8006500 <__smakebuf_r+0x18>
 8006520:	f023 0303 	bic.w	r3, r3, #3
 8006524:	f043 0302 	orr.w	r3, r3, #2
 8006528:	81a3      	strh	r3, [r4, #12]
 800652a:	e7e3      	b.n	80064f4 <__smakebuf_r+0xc>
 800652c:	89a3      	ldrh	r3, [r4, #12]
 800652e:	6020      	str	r0, [r4, #0]
 8006530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006534:	81a3      	strh	r3, [r4, #12]
 8006536:	9b00      	ldr	r3, [sp, #0]
 8006538:	6163      	str	r3, [r4, #20]
 800653a:	9b01      	ldr	r3, [sp, #4]
 800653c:	6120      	str	r0, [r4, #16]
 800653e:	b15b      	cbz	r3, 8006558 <__smakebuf_r+0x70>
 8006540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006544:	4630      	mov	r0, r6
 8006546:	f000 f84d 	bl	80065e4 <_isatty_r>
 800654a:	b128      	cbz	r0, 8006558 <__smakebuf_r+0x70>
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	f023 0303 	bic.w	r3, r3, #3
 8006552:	f043 0301 	orr.w	r3, r3, #1
 8006556:	81a3      	strh	r3, [r4, #12]
 8006558:	89a3      	ldrh	r3, [r4, #12]
 800655a:	431d      	orrs	r5, r3
 800655c:	81a5      	strh	r5, [r4, #12]
 800655e:	e7cf      	b.n	8006500 <__smakebuf_r+0x18>

08006560 <_raise_r>:
 8006560:	291f      	cmp	r1, #31
 8006562:	b538      	push	{r3, r4, r5, lr}
 8006564:	4604      	mov	r4, r0
 8006566:	460d      	mov	r5, r1
 8006568:	d904      	bls.n	8006574 <_raise_r+0x14>
 800656a:	2316      	movs	r3, #22
 800656c:	6003      	str	r3, [r0, #0]
 800656e:	f04f 30ff 	mov.w	r0, #4294967295
 8006572:	bd38      	pop	{r3, r4, r5, pc}
 8006574:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006576:	b112      	cbz	r2, 800657e <_raise_r+0x1e>
 8006578:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800657c:	b94b      	cbnz	r3, 8006592 <_raise_r+0x32>
 800657e:	4620      	mov	r0, r4
 8006580:	f000 f852 	bl	8006628 <_getpid_r>
 8006584:	462a      	mov	r2, r5
 8006586:	4601      	mov	r1, r0
 8006588:	4620      	mov	r0, r4
 800658a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800658e:	f000 b839 	b.w	8006604 <_kill_r>
 8006592:	2b01      	cmp	r3, #1
 8006594:	d00a      	beq.n	80065ac <_raise_r+0x4c>
 8006596:	1c59      	adds	r1, r3, #1
 8006598:	d103      	bne.n	80065a2 <_raise_r+0x42>
 800659a:	2316      	movs	r3, #22
 800659c:	6003      	str	r3, [r0, #0]
 800659e:	2001      	movs	r0, #1
 80065a0:	e7e7      	b.n	8006572 <_raise_r+0x12>
 80065a2:	2400      	movs	r4, #0
 80065a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80065a8:	4628      	mov	r0, r5
 80065aa:	4798      	blx	r3
 80065ac:	2000      	movs	r0, #0
 80065ae:	e7e0      	b.n	8006572 <_raise_r+0x12>

080065b0 <raise>:
 80065b0:	4b02      	ldr	r3, [pc, #8]	; (80065bc <raise+0xc>)
 80065b2:	4601      	mov	r1, r0
 80065b4:	6818      	ldr	r0, [r3, #0]
 80065b6:	f7ff bfd3 	b.w	8006560 <_raise_r>
 80065ba:	bf00      	nop
 80065bc:	20000068 	.word	0x20000068

080065c0 <_fstat_r>:
 80065c0:	b538      	push	{r3, r4, r5, lr}
 80065c2:	4d07      	ldr	r5, [pc, #28]	; (80065e0 <_fstat_r+0x20>)
 80065c4:	2300      	movs	r3, #0
 80065c6:	4604      	mov	r4, r0
 80065c8:	4608      	mov	r0, r1
 80065ca:	4611      	mov	r1, r2
 80065cc:	602b      	str	r3, [r5, #0]
 80065ce:	f7fa fabf 	bl	8000b50 <_fstat>
 80065d2:	1c43      	adds	r3, r0, #1
 80065d4:	d102      	bne.n	80065dc <_fstat_r+0x1c>
 80065d6:	682b      	ldr	r3, [r5, #0]
 80065d8:	b103      	cbz	r3, 80065dc <_fstat_r+0x1c>
 80065da:	6023      	str	r3, [r4, #0]
 80065dc:	bd38      	pop	{r3, r4, r5, pc}
 80065de:	bf00      	nop
 80065e0:	20004bd4 	.word	0x20004bd4

080065e4 <_isatty_r>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	4d06      	ldr	r5, [pc, #24]	; (8006600 <_isatty_r+0x1c>)
 80065e8:	2300      	movs	r3, #0
 80065ea:	4604      	mov	r4, r0
 80065ec:	4608      	mov	r0, r1
 80065ee:	602b      	str	r3, [r5, #0]
 80065f0:	f7fa fabe 	bl	8000b70 <_isatty>
 80065f4:	1c43      	adds	r3, r0, #1
 80065f6:	d102      	bne.n	80065fe <_isatty_r+0x1a>
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	b103      	cbz	r3, 80065fe <_isatty_r+0x1a>
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	bd38      	pop	{r3, r4, r5, pc}
 8006600:	20004bd4 	.word	0x20004bd4

08006604 <_kill_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	4d07      	ldr	r5, [pc, #28]	; (8006624 <_kill_r+0x20>)
 8006608:	2300      	movs	r3, #0
 800660a:	4604      	mov	r4, r0
 800660c:	4608      	mov	r0, r1
 800660e:	4611      	mov	r1, r2
 8006610:	602b      	str	r3, [r5, #0]
 8006612:	f7fa fa3e 	bl	8000a92 <_kill>
 8006616:	1c43      	adds	r3, r0, #1
 8006618:	d102      	bne.n	8006620 <_kill_r+0x1c>
 800661a:	682b      	ldr	r3, [r5, #0]
 800661c:	b103      	cbz	r3, 8006620 <_kill_r+0x1c>
 800661e:	6023      	str	r3, [r4, #0]
 8006620:	bd38      	pop	{r3, r4, r5, pc}
 8006622:	bf00      	nop
 8006624:	20004bd4 	.word	0x20004bd4

08006628 <_getpid_r>:
 8006628:	f7fa ba2b 	b.w	8000a82 <_getpid>

0800662c <_malloc_usable_size_r>:
 800662c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006630:	1f18      	subs	r0, r3, #4
 8006632:	2b00      	cmp	r3, #0
 8006634:	bfbc      	itt	lt
 8006636:	580b      	ldrlt	r3, [r1, r0]
 8006638:	18c0      	addlt	r0, r0, r3
 800663a:	4770      	bx	lr

0800663c <_init>:
 800663c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663e:	bf00      	nop
 8006640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006642:	bc08      	pop	{r3}
 8006644:	469e      	mov	lr, r3
 8006646:	4770      	bx	lr

08006648 <_fini>:
 8006648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664a:	bf00      	nop
 800664c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800664e:	bc08      	pop	{r3}
 8006650:	469e      	mov	lr, r3
 8006652:	4770      	bx	lr
