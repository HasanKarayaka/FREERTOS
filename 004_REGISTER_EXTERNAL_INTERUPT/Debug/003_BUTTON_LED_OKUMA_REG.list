
003_BUTTON_LED_OKUMA_REG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000400  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080005c4  080005c4  000105c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005d4  080005d4  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080005d4  080005d4  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005d4  080005d4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005d4  080005d4  000105d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005d8  080005d8  000105d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080005dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000008  080005e4  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080005e4  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013b2  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004fc  00000000  00000000  0002142d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  00021930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000151  00000000  00000000  00021b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f39d  00000000  00000000  00021c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000021ba  00000000  00000000  00040ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0ed7  00000000  00000000  000431b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000005a8  00000000  00000000  00104090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00104638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000008 	.word	0x20000008
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080005ac 	.word	0x080005ac

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	080005ac 	.word	0x080005ac

08000204 <delay>:
#include "main.h"

int count = 0;

void delay(uint32_t time)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	while(time--);
 800020c:	bf00      	nop
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	1e5a      	subs	r2, r3, #1
 8000212:	607a      	str	r2, [r7, #4]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d1fa      	bne.n	800020e <delay+0xa>
}
 8000218:	bf00      	nop
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
	...

08000228 <RCC_Config>:
extern uint32_t SystemCoreClock;

uint32_t systemClock;

void RCC_Config(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 1 <<3; // AHBq hattını aktif ettik gpıo pini için
 800022c:	4b29      	ldr	r3, [pc, #164]	; (80002d4 <RCC_Config+0xac>)
 800022e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000230:	4a28      	ldr	r2, [pc, #160]	; (80002d4 <RCC_Config+0xac>)
 8000232:	f043 0308 	orr.w	r3, r3, #8
 8000236:	6313      	str	r3, [r2, #48]	; 0x30

	RCC-> CR &= ~( 1 << 0); // HSI OFF
 8000238:	4b26      	ldr	r3, [pc, #152]	; (80002d4 <RCC_Config+0xac>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a25      	ldr	r2, [pc, #148]	; (80002d4 <RCC_Config+0xac>)
 800023e:	f023 0301 	bic.w	r3, r3, #1
 8000242:	6013      	str	r3, [r2, #0]
	RCC->CR |= 1 <<16; // 16 bit sola öteleyip 1 yazıyor bu usermanuldeki 16. bit HSE biti bu biti 1 e çektik ki hse aktif olsun
 8000244:	4b23      	ldr	r3, [pc, #140]	; (80002d4 <RCC_Config+0xac>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a22      	ldr	r2, [pc, #136]	; (80002d4 <RCC_Config+0xac>)
 800024a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800024e:	6013      	str	r3, [r2, #0]
	while(!( RCC->CR & (1 << 17)) ); // 17. bitte bayrak var ve diyor ki bu bayrak kalkmadan hse aktif olmuyor o zaman bu bayrağı bekliyorum kalksın "&" ifadesi burda karşılaştırma yapıyor rcc deki 17 bit 1 mi değil mi
 8000250:	bf00      	nop
 8000252:	4b20      	ldr	r3, [pc, #128]	; (80002d4 <RCC_Config+0xac>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800025a:	2b00      	cmp	r3, #0
 800025c:	d0f9      	beq.n	8000252 <RCC_Config+0x2a>
	RCC->CR |= 1 <<19; // güvenlik biti
 800025e:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <RCC_Config+0xac>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a1c      	ldr	r2, [pc, #112]	; (80002d4 <RCC_Config+0xac>)
 8000264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000268:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR = 0x00000000;
 800026a:	4b1a      	ldr	r3, [pc, #104]	; (80002d4 <RCC_Config+0xac>)
 800026c:	2200      	movs	r2, #0
 800026e:	605a      	str	r2, [r3, #4]
	RCC->PLLCFGR |= (1 << 22); //PLL HSE
 8000270:	4b18      	ldr	r3, [pc, #96]	; (80002d4 <RCC_Config+0xac>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	4a17      	ldr	r2, [pc, #92]	; (80002d4 <RCC_Config+0xac>)
 8000276:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800027a:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (4 << 0); //yukarda yapıaln işlemin kısa hali  PLL M 4
 800027c:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <RCC_Config+0xac>)
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	4a14      	ldr	r2, [pc, #80]	; (80002d4 <RCC_Config+0xac>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6053      	str	r3, [r2, #4]
	RCC-> PLLCFGR |= (168 << 6); // 6 bit sola öteledik PLLN konumuna geldik burda da 168 yazdık  PLL n 168
 8000288:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <RCC_Config+0xac>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	4a11      	ldr	r2, [pc, #68]	; (80002d4 <RCC_Config+0xac>)
 800028e:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 8000292:	6053      	str	r3, [r2, #4]

	RCC-> PLLCFGR |= ( 1 << 24); // PLL ON
 8000294:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <RCC_Config+0xac>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	4a0e      	ldr	r2, [pc, #56]	; (80002d4 <RCC_Config+0xac>)
 800029a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800029e:	6053      	str	r3, [r2, #4]
	while(!( RCC->CR & (1 << 25)) ); // Wait PLL active
 80002a0:	bf00      	nop
 80002a2:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <RCC_Config+0xac>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d0f9      	beq.n	80002a2 <RCC_Config+0x7a>

	RCC-> CFGR |= (1 << 1); // System Cloack is PLL
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <RCC_Config+0xac>)
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	4a08      	ldr	r2, [pc, #32]	; (80002d4 <RCC_Config+0xac>)
 80002b4:	f043 0302 	orr.w	r3, r3, #2
 80002b8:	6093      	str	r3, [r2, #8]
	while(!(RCC->CFGR & (1 << 1)));
 80002ba:	bf00      	nop
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <RCC_Config+0xac>)
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	f003 0302 	and.w	r3, r3, #2
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d0f9      	beq.n	80002bc <RCC_Config+0x94>


}
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr
 80002d4:	40023800 	.word	0x40023800

080002d8 <GPIO_Config>:

void GPIO_Config(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	RCC->AHB1ENR = 0x00000009; // GPIOA ve GPIOD aktif
 80002dc:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <GPIO_Config+0x30>)
 80002de:	2209      	movs	r2, #9
 80002e0:	631a      	str	r2, [r3, #48]	; 0x30

	GPIOD->MODER = 0x55000000; // 12 13 14 15 dijital ouptup
 80002e2:	4b0a      	ldr	r3, [pc, #40]	; (800030c <GPIO_Config+0x34>)
 80002e4:	f04f 42aa 	mov.w	r2, #1426063360	; 0x55000000
 80002e8:	601a      	str	r2, [r3, #0]
	GPIOD->OTYPER = 0x00000000; // 003_BUTTON_LED_OKUMA_REG push pull
 80002ea:	4b08      	ldr	r3, [pc, #32]	; (800030c <GPIO_Config+0x34>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	605a      	str	r2, [r3, #4]
	GPIOD->OSPEEDR = 0xFF000000; // pin 100mhz
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <GPIO_Config+0x34>)
 80002f2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80002f6:	609a      	str	r2, [r3, #8]
	GPIOD->PUPDR = 0x00000000;
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <GPIO_Config+0x34>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	60da      	str	r2, [r3, #12]
}
 80002fe:	bf00      	nop
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40023800 	.word	0x40023800
 800030c:	40020c00 	.word	0x40020c00

08000310 <main>:


int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	RCC_Config(); // yukarda yazdığım fonksiyonun rcc paramtrelerini aldı ve altaki yükleme ve atama komutları ile atadı
 8000314:	f7ff ff88 	bl	8000228 <RCC_Config>
	SystemCoreClockUpdate();
 8000318:	f000 f866 	bl	80003e8 <SystemCoreClockUpdate>

	GPIO_Config();
 800031c:	f7ff ffdc 	bl	80002d8 <GPIO_Config>


  while (1)
  {

	  if(GPIOA->IDR & 0x00000001) // butonda arg varsa engellemek için
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <main+0x50>)
 8000322:	691b      	ldr	r3, [r3, #16]
 8000324:	f003 0301 	and.w	r3, r3, #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d0f9      	beq.n	8000320 <main+0x10>
	  {
		  while(GPIOA->IDR & 0x00000001);
 800032c:	bf00      	nop
 800032e:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <main+0x50>)
 8000330:	691b      	ldr	r3, [r3, #16]
 8000332:	f003 0301 	and.w	r3, r3, #1
 8000336:	2b00      	cmp	r3, #0
 8000338:	d1f9      	bne.n	800032e <main+0x1e>
		  delay(1680000);
 800033a:	480a      	ldr	r0, [pc, #40]	; (8000364 <main+0x54>)
 800033c:	f7ff ff62 	bl	8000204 <delay>

		  if(count % 2 == 0)
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <main+0x58>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f003 0301 	and.w	r3, r3, #1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d103      	bne.n	8000354 <main+0x44>
		  {
			  GPIOD->ODR = 0x00000000; // bura butona 2 kere basılınca resete çekiyor
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <main+0x5c>)
 800034e:	2200      	movs	r2, #0
 8000350:	615a      	str	r2, [r3, #20]
 8000352:	e7e5      	b.n	8000320 <main+0x10>
		  }
		  else
			  GPIOD->ODR = 0x0000F000; // burda sete çekiyor 1 kere bastı set oldu 3. basması yeniden set olması demek
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <main+0x5c>)
 8000356:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 800035a:	615a      	str	r2, [r3, #20]
	  if(GPIOA->IDR & 0x00000001) // butonda arg varsa engellemek için
 800035c:	e7e0      	b.n	8000320 <main+0x10>
 800035e:	bf00      	nop
 8000360:	40020000 	.word	0x40020000
 8000364:	0019a280 	.word	0x0019a280
 8000368:	20000024 	.word	0x20000024
 800036c:	40020c00 	.word	0x40020c00

08000370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000374:	e7fe      	b.n	8000374 <NMI_Handler+0x4>

08000376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800037a:	e7fe      	b.n	800037a <HardFault_Handler+0x4>

0800037c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000380:	e7fe      	b.n	8000380 <MemManage_Handler+0x4>

08000382 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000386:	e7fe      	b.n	8000386 <BusFault_Handler+0x4>

08000388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800038c:	e7fe      	b.n	800038c <UsageFault_Handler+0x4>

0800038e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000392:	bf00      	nop
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr

080003aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003bc:	f000 f8be 	bl	800053c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <SystemInit+0x20>)
 80003ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ce:	4a05      	ldr	r2, [pc, #20]	; (80003e4 <SystemInit+0x20>)
 80003d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	e000ed00 	.word	0xe000ed00

080003e8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b087      	sub	sp, #28
 80003ec:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80003ee:	2300      	movs	r3, #0
 80003f0:	613b      	str	r3, [r7, #16]
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]
 80003f6:	2302      	movs	r3, #2
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	2300      	movs	r3, #0
 80003fc:	60bb      	str	r3, [r7, #8]
 80003fe:	2302      	movs	r3, #2
 8000400:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000402:	4b34      	ldr	r3, [pc, #208]	; (80004d4 <SystemCoreClockUpdate+0xec>)
 8000404:	689b      	ldr	r3, [r3, #8]
 8000406:	f003 030c 	and.w	r3, r3, #12
 800040a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	2b08      	cmp	r3, #8
 8000410:	d011      	beq.n	8000436 <SystemCoreClockUpdate+0x4e>
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	2b08      	cmp	r3, #8
 8000416:	d844      	bhi.n	80004a2 <SystemCoreClockUpdate+0xba>
 8000418:	693b      	ldr	r3, [r7, #16]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d003      	beq.n	8000426 <SystemCoreClockUpdate+0x3e>
 800041e:	693b      	ldr	r3, [r7, #16]
 8000420:	2b04      	cmp	r3, #4
 8000422:	d004      	beq.n	800042e <SystemCoreClockUpdate+0x46>
 8000424:	e03d      	b.n	80004a2 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000426:	4b2c      	ldr	r3, [pc, #176]	; (80004d8 <SystemCoreClockUpdate+0xf0>)
 8000428:	4a2c      	ldr	r2, [pc, #176]	; (80004dc <SystemCoreClockUpdate+0xf4>)
 800042a:	601a      	str	r2, [r3, #0]
      break;
 800042c:	e03d      	b.n	80004aa <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800042e:	4b2a      	ldr	r3, [pc, #168]	; (80004d8 <SystemCoreClockUpdate+0xf0>)
 8000430:	4a2b      	ldr	r2, [pc, #172]	; (80004e0 <SystemCoreClockUpdate+0xf8>)
 8000432:	601a      	str	r2, [r3, #0]
      break;
 8000434:	e039      	b.n	80004aa <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000436:	4b27      	ldr	r3, [pc, #156]	; (80004d4 <SystemCoreClockUpdate+0xec>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	0d9b      	lsrs	r3, r3, #22
 800043c:	f003 0301 	and.w	r3, r3, #1
 8000440:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000442:	4b24      	ldr	r3, [pc, #144]	; (80004d4 <SystemCoreClockUpdate+0xec>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800044a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d00c      	beq.n	800046c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000452:	4a23      	ldr	r2, [pc, #140]	; (80004e0 <SystemCoreClockUpdate+0xf8>)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	fbb2 f3f3 	udiv	r3, r2, r3
 800045a:	4a1e      	ldr	r2, [pc, #120]	; (80004d4 <SystemCoreClockUpdate+0xec>)
 800045c:	6852      	ldr	r2, [r2, #4]
 800045e:	0992      	lsrs	r2, r2, #6
 8000460:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000464:	fb02 f303 	mul.w	r3, r2, r3
 8000468:	617b      	str	r3, [r7, #20]
 800046a:	e00b      	b.n	8000484 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800046c:	4a1b      	ldr	r2, [pc, #108]	; (80004dc <SystemCoreClockUpdate+0xf4>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	fbb2 f3f3 	udiv	r3, r2, r3
 8000474:	4a17      	ldr	r2, [pc, #92]	; (80004d4 <SystemCoreClockUpdate+0xec>)
 8000476:	6852      	ldr	r2, [r2, #4]
 8000478:	0992      	lsrs	r2, r2, #6
 800047a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800047e:	fb02 f303 	mul.w	r3, r2, r3
 8000482:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <SystemCoreClockUpdate+0xec>)
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	0c1b      	lsrs	r3, r3, #16
 800048a:	f003 0303 	and.w	r3, r3, #3
 800048e:	3301      	adds	r3, #1
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000494:	697a      	ldr	r2, [r7, #20]
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	fbb2 f3f3 	udiv	r3, r2, r3
 800049c:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <SystemCoreClockUpdate+0xf0>)
 800049e:	6013      	str	r3, [r2, #0]
      break;
 80004a0:	e003      	b.n	80004aa <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80004a2:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <SystemCoreClockUpdate+0xf0>)
 80004a4:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <SystemCoreClockUpdate+0xf4>)
 80004a6:	601a      	str	r2, [r3, #0]
      break;
 80004a8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <SystemCoreClockUpdate+0xec>)
 80004ac:	689b      	ldr	r3, [r3, #8]
 80004ae:	091b      	lsrs	r3, r3, #4
 80004b0:	f003 030f 	and.w	r3, r3, #15
 80004b4:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <SystemCoreClockUpdate+0xfc>)
 80004b6:	5cd3      	ldrb	r3, [r2, r3]
 80004b8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80004ba:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <SystemCoreClockUpdate+0xf0>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	693b      	ldr	r3, [r7, #16]
 80004c0:	fa22 f303 	lsr.w	r3, r2, r3
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <SystemCoreClockUpdate+0xf0>)
 80004c6:	6013      	str	r3, [r2, #0]
}
 80004c8:	bf00      	nop
 80004ca:	371c      	adds	r7, #28
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	40023800 	.word	0x40023800
 80004d8:	20000000 	.word	0x20000000
 80004dc:	00f42400 	.word	0x00f42400
 80004e0:	007a1200 	.word	0x007a1200
 80004e4:	080005c4 	.word	0x080005c4

080004e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80004e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000520 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004ec:	480d      	ldr	r0, [pc, #52]	; (8000524 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004ee:	490e      	ldr	r1, [pc, #56]	; (8000528 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004f0:	4a0e      	ldr	r2, [pc, #56]	; (800052c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f4:	e002      	b.n	80004fc <LoopCopyDataInit>

080004f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fa:	3304      	adds	r3, #4

080004fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000500:	d3f9      	bcc.n	80004f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000502:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000504:	4c0b      	ldr	r4, [pc, #44]	; (8000534 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000508:	e001      	b.n	800050e <LoopFillZerobss>

0800050a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800050c:	3204      	adds	r2, #4

0800050e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000510:	d3fb      	bcc.n	800050a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000512:	f7ff ff57 	bl	80003c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000516:	f000 f825 	bl	8000564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800051a:	f7ff fef9 	bl	8000310 <main>
  bx  lr    
 800051e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000528:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 800052c:	080005dc 	.word	0x080005dc
  ldr r2, =_sbss
 8000530:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000534:	2000002c 	.word	0x2000002c

08000538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC_IRQHandler>
	...

0800053c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <HAL_IncTick+0x20>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	461a      	mov	r2, r3
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <HAL_IncTick+0x24>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4413      	add	r3, r2
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <HAL_IncTick+0x24>)
 800054e:	6013      	str	r3, [r2, #0]
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20000004 	.word	0x20000004
 8000560:	20000028 	.word	0x20000028

08000564 <__libc_init_array>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	4d0d      	ldr	r5, [pc, #52]	; (800059c <__libc_init_array+0x38>)
 8000568:	4c0d      	ldr	r4, [pc, #52]	; (80005a0 <__libc_init_array+0x3c>)
 800056a:	1b64      	subs	r4, r4, r5
 800056c:	10a4      	asrs	r4, r4, #2
 800056e:	2600      	movs	r6, #0
 8000570:	42a6      	cmp	r6, r4
 8000572:	d109      	bne.n	8000588 <__libc_init_array+0x24>
 8000574:	4d0b      	ldr	r5, [pc, #44]	; (80005a4 <__libc_init_array+0x40>)
 8000576:	4c0c      	ldr	r4, [pc, #48]	; (80005a8 <__libc_init_array+0x44>)
 8000578:	f000 f818 	bl	80005ac <_init>
 800057c:	1b64      	subs	r4, r4, r5
 800057e:	10a4      	asrs	r4, r4, #2
 8000580:	2600      	movs	r6, #0
 8000582:	42a6      	cmp	r6, r4
 8000584:	d105      	bne.n	8000592 <__libc_init_array+0x2e>
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f855 3b04 	ldr.w	r3, [r5], #4
 800058c:	4798      	blx	r3
 800058e:	3601      	adds	r6, #1
 8000590:	e7ee      	b.n	8000570 <__libc_init_array+0xc>
 8000592:	f855 3b04 	ldr.w	r3, [r5], #4
 8000596:	4798      	blx	r3
 8000598:	3601      	adds	r6, #1
 800059a:	e7f2      	b.n	8000582 <__libc_init_array+0x1e>
 800059c:	080005d4 	.word	0x080005d4
 80005a0:	080005d4 	.word	0x080005d4
 80005a4:	080005d4 	.word	0x080005d4
 80005a8:	080005d8 	.word	0x080005d8

080005ac <_init>:
 80005ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ae:	bf00      	nop
 80005b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b2:	bc08      	pop	{r3}
 80005b4:	469e      	mov	lr, r3
 80005b6:	4770      	bx	lr

080005b8 <_fini>:
 80005b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ba:	bf00      	nop
 80005bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005be:	bc08      	pop	{r3}
 80005c0:	469e      	mov	lr, r3
 80005c2:	4770      	bx	lr
